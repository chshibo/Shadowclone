	.text
	.file	"macroblock.c"
	.globl	set_MB_parameters       # -- Begin function set_MB_parameters
	.p2align	4, 0x90
	.type	set_MB_parameters,@function
set_MB_parameters:                      # @set_MB_parameters
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 12(%rcx)
	movl	-4(%rbp), %edi
	movq	img, %rsi
	addq	$136, %rsi
	movq	img, %rdx
	addq	$140, %rdx
	callq	get_mb_block_pos
	movq	img, %rax
	movl	136(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 144(%rcx)
	movq	img, %rax
	movl	140(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 148(%rcx)
	movq	img, %rax
	movl	144(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 152(%rcx)
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 156(%rcx)
	movq	img, %rax
	movl	152(%rax), %eax
	movq	img, %rcx
	movl	%eax, 168(%rcx)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB0_11
# %bb.1:                                # %if.then
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	je	.LBB0_9
# %bb.2:                                # %if.then10
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_4
# %bb.3:                                # %cond.true
	movq	imgY_org_bot, %rax
	jmp	.LBB0_5
.LBB0_4:                                # %cond.false
	movq	imgY_org_top, %rax
.LBB0_5:                                # %cond.end
	movq	%rax, imgY_org
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB0_7
# %bb.6:                                # %cond.true14
	movq	imgUV_org_bot, %rax
	jmp	.LBB0_8
.LBB0_7:                                # %cond.false15
	movq	imgUV_org_top, %rax
.LBB0_8:                                # %cond.end16
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	140(%rax), %eax
	sarl	$1, %eax
	shll	$4, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
	jmp	.LBB0_10
.LBB0_9:                                # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_10:                               # %if.end
	jmp	.LBB0_12
.LBB0_11:                               # %if.else23
	movq	img, %rax
	movl	148(%rax), %eax
	shll	$2, %eax
	movq	img, %rcx
	movl	%eax, 172(%rcx)
.LBB0_12:                               # %if.end27
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB0_14
# %bb.13:                               # %if.then28
	movq	img, %rax
	movl	152(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 160(%rcx)
	movq	img, %rax
	movl	156(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 164(%rcx)
	movq	img, %rax
	movl	168(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 176(%rcx)
	movq	img, %rax
	movl	172(%rax), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rcx
	movl	%eax, 180(%rcx)
.LBB0_14:                               # %if.end42
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end0:
	.size	set_MB_parameters, .Lfunc_end0-set_MB_parameters
	.cfi_endproc
                                        # -- End function
	.globl	clip1a                  # -- Begin function clip1a
	.p2align	4, 0x90
	.type	clip1a,@function
clip1a:                                 # @clip1a
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72684(%rcx), %eax
	jle	.LBB1_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB1_6
.LBB1_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB1_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB1_5
.LBB1_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB1_5:                                # %cond.end
.LBB1_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end1:
	.size	clip1a, .Lfunc_end1-clip1a
	.cfi_endproc
                                        # -- End function
	.globl	clip1a_chr              # -- Begin function clip1a_chr
	.p2align	4, 0x90
	.type	clip1a_chr,@function
clip1a_chr:                             # @clip1a_chr
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72688(%rcx), %eax
	jle	.LBB2_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB2_6
.LBB2_2:                                # %cond.false
	cmpl	$0, -4(%rbp)
	jge	.LBB2_4
# %bb.3:                                # %cond.true3
	xorl	%eax, %eax
	jmp	.LBB2_5
.LBB2_4:                                # %cond.false4
	movl	-4(%rbp), %eax
.LBB2_5:                                # %cond.end
.LBB2_6:                                # %cond.end5
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	clip1a_chr, .Lfunc_end2-clip1a_chr
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock  # -- Begin function proceed2nextMacroblock
	.p2align	4, 0x90
	.type	proceed2nextMacroblock,@function
proceed2nextMacroblock:                 # @proceed2nextMacroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB3_7
# %bb.1:                                # %func_proceed2nextMacroblock.3
	callq	proceed2nextMacroblock.3
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_proceed2nextMacroblock.108
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.108
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_proceed2nextMacroblock.203
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.203
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_proceed2nextMacroblock.256
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.256
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_proceed2nextMacroblock.260
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.260
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_proceed2nextMacroblock.273
	.cfi_def_cfa %rbp, 16
	callq	proceed2nextMacroblock.273
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
	jmp	.LBB3_6
.Lfunc_end3:
	.size	proceed2nextMacroblock, .Lfunc_end3-proceed2nextMacroblock
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock        # -- Begin function start_macroblock
	.p2align	4, 0x90
	.type	start_macroblock,@function
start_macroblock:                       # @start_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB4_9
# %bb.1:                                # %func_start_macroblock.4
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_start_macroblock.20
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.20
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_start_macroblock.134
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.134
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_start_macroblock.228
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.228
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_start_macroblock.242
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.242
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_start_macroblock.254
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.254
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_start_macroblock.277
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.277
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_start_macroblock.279
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	start_macroblock.279
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB4_7
	jmp	.LBB4_8
.Lfunc_end4:
	.size	start_macroblock, .Lfunc_end4-start_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock    # -- Begin function terminate_macroblock
	.p2align	4, 0x90
	.type	terminate_macroblock,@function
terminate_macroblock:                   # @terminate_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_terminate_macroblock.1
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.1
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_terminate_macroblock.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.55
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_terminate_macroblock.105
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.105
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_terminate_macroblock.111
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.111
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_terminate_macroblock.158
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.158
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_terminate_macroblock.171
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.171
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_terminate_macroblock.172
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.172
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_terminate_macroblock.227
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	terminate_macroblock.227
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	terminate_macroblock, .Lfunc_end5-terminate_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big           # -- Begin function slice_too_big
	.p2align	4, 0x90
	.type	slice_too_big,@function
slice_too_big:                          # @slice_too_big
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_slice_too_big.73
	movl	%ebx, %edi
	callq	slice_too_big.73
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_slice_too_big.92
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.92
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_slice_too_big.96
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.96
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_slice_too_big.117
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.117
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_slice_too_big.216
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.216
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_slice_too_big.233
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.233
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_slice_too_big.262
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.262
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_slice_too_big.268
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	slice_too_big.268
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	slice_too_big, .Lfunc_end6-slice_too_big
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4 # -- Begin function OneComponentLumaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4,@function
OneComponentLumaPrediction4x4:          # @OneComponentLumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movq	%rcx, %r13
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_OneComponentLumaPrediction4x4.11
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	OneComponentLumaPrediction4x4.11
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_OneComponentLumaPrediction4x4.35
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_OneComponentLumaPrediction4x4.64
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_OneComponentLumaPrediction4x4.80
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.80
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_OneComponentLumaPrediction4x4.104
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.104
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_OneComponentLumaPrediction4x4.116
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r13, %rcx
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.116
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_OneComponentLumaPrediction4x4.143
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.143
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_OneComponentLumaPrediction4x4.224
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r8d
	callq	OneComponentLumaPrediction4x4.224
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r13, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movq	%r15, %rdi
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	OneComponentLumaPrediction4x4, .Lfunc_end7-OneComponentLumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4            # -- Begin function copyblock4x4
	.p2align	4, 0x90
	.type	copyblock4x4,@function
copyblock4x4:                           # @copyblock4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB8_2
# %bb.1:                                # %func_copyblock4x4.63
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.63
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_copyblock4x4.71
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	copyblock4x4.71
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end8:
	.size	copyblock4x4, .Lfunc_end8-copyblock4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4       # -- Begin function LumaPrediction4x4
	.p2align	4, 0x90
	.type	LumaPrediction4x4,@function
LumaPrediction4x4:                      # @LumaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r12d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB9_9
# %bb.1:                                # %func_LumaPrediction4x4.15
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.15
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_LumaPrediction4x4.179
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.179
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_LumaPrediction4x4.222
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.222
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_LumaPrediction4x4.283
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.283
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_LumaPrediction4x4.284
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.284
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_6:                                # %func_LumaPrediction4x4.286
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.286
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_7:                                # %func_LumaPrediction4x4.287
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.287
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_8:                                # %func_LumaPrediction4x4.288
	.cfi_def_cfa %rbp, 16
	movswl	%r12w, %r9d
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4.288
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	-44(%rbp), %r12d        # 4-byte Reload
	movw	16(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB9_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB9_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB9_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r15d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB9_7
	jmp	.LBB9_8
.Lfunc_end9:
	.size	LumaPrediction4x4, .Lfunc_end9-LumaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi     # -- Begin function LumaPrediction4x4Bi
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi,@function
LumaPrediction4x4Bi:                    # @LumaPrediction4x4Bi
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r12d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_LumaPrediction4x4Bi.27
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaPrediction4x4Bi.27
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_LumaPrediction4x4Bi.29
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.29
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_LumaPrediction4x4Bi.70
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.70
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_LumaPrediction4x4Bi.149
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.149
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_LumaPrediction4x4Bi.166
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.166
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_LumaPrediction4x4Bi.174
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r13d, %r8d
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.174
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_LumaPrediction4x4Bi.259
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.259
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_LumaPrediction4x4Bi.278
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %r9d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	LumaPrediction4x4Bi.278
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	-44(%rbp), %r15d        # 4-byte Reload
	movw	16(%rbp), %r11w
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r12d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	LumaPrediction4x4Bi, .Lfunc_end10-LumaPrediction4x4Bi
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8   # -- Begin function LumaResidualCoding8x8
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8,@function
LumaResidualCoding8x8:                  # @LumaResidualCoding8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movq	%rsi, %r14
	movq	%rdi, %r12
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB11_9
# %bb.1:                                # %func_LumaResidualCoding8x8.19
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.19
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_LumaResidualCoding8x8.59
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.59
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_3:                               # %func_LumaResidualCoding8x8.112
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.112
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_4:                               # %func_LumaResidualCoding8x8.133
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.133
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_5:                               # %func_LumaResidualCoding8x8.139
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.139
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_6:                               # %func_LumaResidualCoding8x8.153
	.cfi_def_cfa %rbp, 16
	movq	%r12, %rdi
	movq	%r14, %rsi
	movl	%ebx, %edx
	movswl	%r15w, %ecx
	movl	%r13d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.153
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_7:                               # %func_LumaResidualCoding8x8.164
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.164
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_8:                               # %func_LumaResidualCoding8x8.167
	.cfi_def_cfa %rbp, 16
	movswl	%r15w, %ecx
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8.167
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movw	16(%rbp), %r11w
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB11_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB11_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB11_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB11_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB11_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%ebx, %edx
	movq	%r14, %rsi
	movq	%r12, %rdi
	je	.LBB11_7
	jmp	.LBB11_8
.Lfunc_end11:
	.size	LumaResidualCoding8x8, .Lfunc_end11-LumaResidualCoding8x8
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4     # -- Begin function ChromaPrediction4x4
	.p2align	4, 0x90
	.type	ChromaPrediction4x4,@function
ChromaPrediction4x4:                    # @ChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movl	%ecx, %r12d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r13d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB12_9
# %bb.1:                                # %func_ChromaPrediction4x4.2
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movswl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.2
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_ChromaPrediction4x4.16
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.16
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_ChromaPrediction4x4.48
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.48
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_ChromaPrediction4x4.58
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.58
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %func_ChromaPrediction4x4.66
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.66
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_ChromaPrediction4x4.86
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.86
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_7:                               # %func_ChromaPrediction4x4.97
	.cfi_def_cfa %rbp, 16
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.97
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_8:                               # %func_ChromaPrediction4x4.113
	.cfi_def_cfa %rbp, 16
	movswl	%r11w, %eax
	movl	%eax, (%rsp)
	movswl	%r10w, %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4.113
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movw	16(%rbp), %r11w
	movw	24(%rbp), %r10w
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB12_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB12_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB12_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r15d, %r8d
	movl	%r12d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r13d, %edi
	je	.LBB12_7
	jmp	.LBB12_8
.Lfunc_end12:
	.size	ChromaPrediction4x4, .Lfunc_end12-ChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe     # -- Begin function SetModesAndRefframe
	.p2align	4, 0x90
	.type	SetModesAndRefframe,@function
SetModesAndRefframe:                    # @SetModesAndRefframe
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movq	%r8, %r12
	movq	%rcx, %r13
	movq	%rdx, %rbx
	movq	%rsi, %r14
	movl	%edi, %r15d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB13_9
# %bb.1:                                # %func_SetModesAndRefframe.68
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	SetModesAndRefframe.68
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_SetModesAndRefframe.75
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.75
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_3:                               # %func_SetModesAndRefframe.206
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.206
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_4:                               # %func_SetModesAndRefframe.240
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.240
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_5:                               # %func_SetModesAndRefframe.258
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.258
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_SetModesAndRefframe.267
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movq	%r14, %rsi
	movq	%rbx, %rdx
	movq	%r13, %rcx
	movq	%r12, %r8
	callq	SetModesAndRefframe.267
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_7:                               # %func_SetModesAndRefframe.269
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.269
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_8:                               # %func_SetModesAndRefframe.280
	.cfi_def_cfa %rbp, 16
	callq	SetModesAndRefframe.280
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB13_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB13_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB13_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB13_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB13_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movq	%r12, %r8
	movq	%r13, %rcx
	movq	%rbx, %rdx
	movq	%r14, %rsi
	movl	%r15d, %edi
	je	.LBB13_7
	jmp	.LBB13_8
.Lfunc_end13:
	.size	SetModesAndRefframe, .Lfunc_end13-SetModesAndRefframe
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding      # -- Begin function LumaResidualCoding
	.p2align	4, 0x90
	.type	LumaResidualCoding,@function
LumaResidualCoding:                     # @LumaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB14_9
# %bb.1:                                # %func_LumaResidualCoding.12
	callq	LumaResidualCoding.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_LumaResidualCoding.62
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.62
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_3:                               # %func_LumaResidualCoding.69
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.69
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_4:                               # %func_LumaResidualCoding.99
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.99
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_5:                               # %func_LumaResidualCoding.145
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.145
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_6:                               # %func_LumaResidualCoding.169
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.169
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_7:                               # %func_LumaResidualCoding.178
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.178
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_8:                               # %func_LumaResidualCoding.180
	.cfi_def_cfa %rbp, 16
	callq	LumaResidualCoding.180
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB14_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB14_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB14_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB14_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB14_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB14_7
	jmp	.LBB14_8
.Lfunc_end14:
	.size	LumaResidualCoding, .Lfunc_end14-LumaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision       # -- Begin function TransformDecision
	.p2align	4, 0x90
	.type	TransformDecision,@function
TransformDecision:                      # @TransformDecision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB15_9
# %bb.1:                                # %func_TransformDecision.5
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.5
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_TransformDecision.24
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.24
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_3:                               # %func_TransformDecision.226
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.226
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_4:                               # %func_TransformDecision.244
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.244
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_5:                               # %func_TransformDecision.250
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.250
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_6:                               # %func_TransformDecision.251
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.251
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_7:                               # %func_TransformDecision.265
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.265
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_8:                               # %func_TransformDecision.271
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	TransformDecision.271
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB15_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB15_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB15_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB15_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB15_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB15_7
	jmp	.LBB15_8
.Lfunc_end15:
	.size	TransformDecision, .Lfunc_end15-TransformDecision
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4 # -- Begin function OneComponentChromaPrediction4x4
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4,@function
OneComponentChromaPrediction4x4:        # @OneComponentChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movq	%rcx, %r12
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r13
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB16_9
# %bb.1:                                # %func_OneComponentChromaPrediction4x4.141
	movq	%r13, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	-44(%rbp), %r9d         # 2-byte Folded Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.141
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_OneComponentChromaPrediction4x4.146
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.146
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_3:                               # %func_OneComponentChromaPrediction4x4.151
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.151
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_4:                               # %func_OneComponentChromaPrediction4x4.155
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.155
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_5:                               # %func_OneComponentChromaPrediction4x4.191
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.191
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_6:                               # %func_OneComponentChromaPrediction4x4.198
	.cfi_def_cfa %rbp, 16
	movl	%r14d, %esi
	movl	%ebx, %edx
	movq	%r12, %rcx
	movl	%r15d, %r8d
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.198
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_7:                               # %func_OneComponentChromaPrediction4x4.229
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.229
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_8:                               # %func_OneComponentChromaPrediction4x4.247
	.cfi_def_cfa %rbp, 16
	movswl	%r13w, %r9d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4.247
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	%r13, %rdi
	movl	-44(%rbp), %r13d        # 4-byte Reload
	movl	16(%rbp), %r11d
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB16_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB16_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB16_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB16_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB16_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r15d, %r8d
	movq	%r12, %rcx
	movl	%ebx, %edx
	movl	%r14d, %esi
	je	.LBB16_7
	jmp	.LBB16_8
.Lfunc_end16:
	.size	OneComponentChromaPrediction4x4, .Lfunc_end16-OneComponentChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4 # -- Begin function IntraChromaPrediction4x4
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4,@function
IntraChromaPrediction4x4:               # @IntraChromaPrediction4x4
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB17_9
# %bb.1:                                # %func_IntraChromaPrediction4x4.22
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.22
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_IntraChromaPrediction4x4.49
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_3:                               # %func_IntraChromaPrediction4x4.65
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_4:                               # %func_IntraChromaPrediction4x4.102
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.102
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_5:                               # %func_IntraChromaPrediction4x4.103
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.103
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_6:                               # %func_IntraChromaPrediction4x4.109
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.109
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_7:                               # %func_IntraChromaPrediction4x4.121
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.121
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_8:                               # %func_IntraChromaPrediction4x4.200
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	IntraChromaPrediction4x4.200
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB17_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB17_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB17_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB17_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB17_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB17_7
	jmp	.LBB17_8
.Lfunc_end17:
	.size	IntraChromaPrediction4x4, .Lfunc_end17-IntraChromaPrediction4x4
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding    # -- Begin function ChromaResidualCoding
	.p2align	4, 0x90
	.type	ChromaResidualCoding,@function
ChromaResidualCoding:                   # @ChromaResidualCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB18_9
# %bb.1:                                # %func_ChromaResidualCoding.23
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.23
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_ChromaResidualCoding.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.44
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_3:                               # %func_ChromaResidualCoding.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.72
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_4:                               # %func_ChromaResidualCoding.220
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.220
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_5:                               # %func_ChromaResidualCoding.248
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.248
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_6:                               # %func_ChromaResidualCoding.252
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.252
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_7:                               # %func_ChromaResidualCoding.261
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.261
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_8:                               # %func_ChromaResidualCoding.275
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ChromaResidualCoding.275
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB18_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB18_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB18_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB18_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB18_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB18_7
	jmp	.LBB18_8
.Lfunc_end18:
	.size	ChromaResidualCoding, .Lfunc_end18-ChromaResidualCoding
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction   # -- Begin function IntraChromaPrediction
	.p2align	4, 0x90
	.type	IntraChromaPrediction,@function
IntraChromaPrediction:                  # @IntraChromaPrediction
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB19_9
# %bb.1:                                # %func_IntraChromaPrediction.82
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.82
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_IntraChromaPrediction.147
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.147
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_IntraChromaPrediction.152
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.152
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_IntraChromaPrediction.170
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.170
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_IntraChromaPrediction.177
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.177
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_IntraChromaPrediction.186
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.186
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_7:                               # %func_IntraChromaPrediction.189
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.189
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_8:                               # %func_IntraChromaPrediction.215
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	IntraChromaPrediction.215
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB19_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB19_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB19_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB19_7
	jmp	.LBB19_8
.Lfunc_end19:
	.size	IntraChromaPrediction, .Lfunc_end19-IntraChromaPrediction
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef                 # -- Begin function ZeroRef
	.p2align	4, 0x90
	.type	ZeroRef,@function
ZeroRef:                                # @ZeroRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB20_9
# %bb.1:                                # %func_ZeroRef.124
	movq	%rbx, %rdi
	callq	ZeroRef.124
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_ZeroRef.150
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.150
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_ZeroRef.219
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.219
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_ZeroRef.234
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.234
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %func_ZeroRef.236
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.236
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_6:                               # %func_ZeroRef.241
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.241
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_7:                               # %func_ZeroRef.249
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.249
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_8:                               # %func_ZeroRef.264
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	ZeroRef.264
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB20_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB20_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB20_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB20_7
	jmp	.LBB20_8
.Lfunc_end20:
	.size	ZeroRef, .Lfunc_end20-ZeroRef
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value            # -- Begin function MBType2Value
	.p2align	4, 0x90
	.type	MBType2Value,@function
MBType2Value:                           # @MBType2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB21_9
# %bb.1:                                # %func_MBType2Value.60
	movq	%rbx, %rdi
	callq	MBType2Value.60
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_MBType2Value.87
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.87
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_MBType2Value.98
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.98
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_MBType2Value.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.125
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %func_MBType2Value.213
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.213
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_MBType2Value.257
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.257
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_7:                               # %func_MBType2Value.281
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.281
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_8:                               # %func_MBType2Value.285
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	MBType2Value.285
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB21_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB21_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB21_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB21_7
	jmp	.LBB21_8
.Lfunc_end21:
	.size	MBType2Value, .Lfunc_end21-MBType2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes      # -- Begin function writeIntra4x4Modes
	.p2align	4, 0x90
	.type	writeIntra4x4Modes,@function
writeIntra4x4Modes:                     # @writeIntra4x4Modes
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB22_9
# %bb.1:                                # %func_writeIntra4x4Modes.7
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.7
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_2:                               # %func_writeIntra4x4Modes.8
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.8
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_3:                               # %func_writeIntra4x4Modes.17
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.17
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_4:                               # %func_writeIntra4x4Modes.56
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.56
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_5:                               # %func_writeIntra4x4Modes.110
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.110
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_6:                               # %func_writeIntra4x4Modes.182
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.182
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_7:                               # %func_writeIntra4x4Modes.223
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.223
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_8:                               # %func_writeIntra4x4Modes.230
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeIntra4x4Modes.230
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB22_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB22_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB22_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB22_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB22_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB22_7
	jmp	.LBB22_8
.Lfunc_end22:
	.size	writeIntra4x4Modes, .Lfunc_end22-writeIntra4x4Modes
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value            # -- Begin function B8Mode2Value
	.p2align	4, 0x90
	.type	B8Mode2Value,@function
B8Mode2Value:                           # @B8Mode2Value
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB23_7
# %bb.1:                                # %func_B8Mode2Value.54
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.54
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_B8Mode2Value.114
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.114
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_B8Mode2Value.128
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.128
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_B8Mode2Value.130
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.130
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_B8Mode2Value.137
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.137
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_B8Mode2Value.160
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	B8Mode2Value.160
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
	jmp	.LBB23_6
.Lfunc_end23:
	.size	B8Mode2Value, .Lfunc_end23-B8Mode2Value
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer            # -- Begin function writeMBLayer
	.p2align	4, 0x90
	.type	writeMBLayer,@function
writeMBLayer:                           # @writeMBLayer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB24_9
# %bb.1:                                # %func_writeMBLayer.33
	movl	%ebx, %edi
	callq	writeMBLayer.33
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_writeMBLayer.61
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.61
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_writeMBLayer.129
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.129
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_writeMBLayer.163
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.163
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_writeMBLayer.199
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.199
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_6:                               # %func_writeMBLayer.237
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.237
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_7:                               # %func_writeMBLayer.243
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.243
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_8:                               # %func_writeMBLayer.255
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	writeMBLayer.255
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB24_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB24_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB24_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB24_7
	jmp	.LBB24_8
.Lfunc_end24:
	.size	writeMBLayer, .Lfunc_end24-writeMBLayer
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit   # -- Begin function write_terminating_bit
	.p2align	4, 0x90
	.type	write_terminating_bit,@function
write_terminating_bit:                  # @write_terminating_bit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB25_9
# %bb.1:                                # %func_write_terminating_bit.43
	movswl	%bx, %edi
	callq	write_terminating_bit.43
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_write_terminating_bit.88
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.88
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_write_terminating_bit.120
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.120
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_write_terminating_bit.136
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.136
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %func_write_terminating_bit.161
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.161
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_6:                               # %func_write_terminating_bit.181
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.181
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_7:                               # %func_write_terminating_bit.209
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.209
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_8:                               # %func_write_terminating_bit.211
	.cfi_def_cfa %rbp, 16
	movswl	%bx, %edi
	callq	write_terminating_bit.211
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB25_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB25_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB25_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB25_7
	jmp	.LBB25_8
.Lfunc_end25:
	.size	write_terminating_bit, .Lfunc_end25-write_terminating_bit
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode # -- Begin function writeChromaIntraPredMode
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode,@function
writeChromaIntraPredMode:               # @writeChromaIntraPredMode
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB26_9
# %bb.1:                                # %func_writeChromaIntraPredMode.84
	callq	writeChromaIntraPredMode.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_writeChromaIntraPredMode.91
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.91
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_writeChromaIntraPredMode.132
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.132
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_writeChromaIntraPredMode.135
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.135
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %func_writeChromaIntraPredMode.173
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.173
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_6:                               # %func_writeChromaIntraPredMode.187
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.187
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_7:                               # %func_writeChromaIntraPredMode.235
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.235
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_8:                               # %func_writeChromaIntraPredMode.245
	.cfi_def_cfa %rbp, 16
	callq	writeChromaIntraPredMode.245
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB26_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB26_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB26_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB26_7
	jmp	.LBB26_8
.Lfunc_end26:
	.size	writeChromaIntraPredMode, .Lfunc_end26-writeChromaIntraPredMode
	.cfi_endproc
                                        # -- End function
	.globl	set_last_dquant         # -- Begin function set_last_dquant
	.p2align	4, 0x90
	.type	set_last_dquant,@function
set_last_dquant:                        # @set_last_dquant
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_4
# %bb.1:                                # %land.lhs.true
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_4
# %bb.2:                                # %land.lhs.true3
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_4
# %bb.3:                                # %land.lhs.true6
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB27_9
.LBB27_4:                               # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB27_9
# %bb.5:                                # %lor.lhs.false11
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB27_9
# %bb.6:                                # %lor.lhs.false14
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB27_9
# %bb.7:                                # %lor.lhs.false17
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB27_10
# %bb.8:                                # %land.lhs.true19
	movq	-8(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB27_10
.LBB27_9:                               # %if.then
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, last_dquant
	jmp	.LBB27_11
.LBB27_10:                              # %if.else
	movl	$0, last_dquant
.LBB27_11:                              # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	set_last_dquant, .Lfunc_end27-set_last_dquant
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock    # -- Begin function write_one_macroblock
	.p2align	4, 0x90
	.type	write_one_macroblock,@function
write_one_macroblock:                   # @write_one_macroblock
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB28_9
# %bb.1:                                # %func_write_one_macroblock.10
	movl	%ebx, %edi
	callq	write_one_macroblock.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_write_one_macroblock.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.18
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_write_one_macroblock.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.31
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_write_one_macroblock.38
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.38
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %func_write_one_macroblock.47
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.47
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_write_one_macroblock.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.53
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_7:                               # %func_write_one_macroblock.81
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.81
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_8:                               # %func_write_one_macroblock.131
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	write_one_macroblock.131
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB28_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB28_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB28_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB28_7
	jmp	.LBB28_8
.Lfunc_end28:
	.size	write_one_macroblock, .Lfunc_end28-write_one_macroblock
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef            # -- Begin function BType2CtxRef
	.p2align	4, 0x90
	.type	BType2CtxRef,@function
BType2CtxRef:                           # @BType2CtxRef
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB29_2
# %bb.1:                                # %func_BType2CtxRef.32
	movl	%ebx, %edi
	callq	BType2CtxRef.32
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_BType2CtxRef.34
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	BType2CtxRef.34
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end29:
	.size	BType2CtxRef, .Lfunc_end29-BType2CtxRef
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame     # -- Begin function writeReferenceFrame
	.p2align	4, 0x90
	.type	writeReferenceFrame,@function
writeReferenceFrame:                    # @writeReferenceFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB30_9
# %bb.1:                                # %func_writeReferenceFrame.41
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_writeReferenceFrame.79
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.79
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_writeReferenceFrame.93
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_writeReferenceFrame.106
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.106
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_writeReferenceFrame.118
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.118
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_writeReferenceFrame.138
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.138
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_7:                               # %func_writeReferenceFrame.217
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.217
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_writeReferenceFrame.232
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	writeReferenceFrame.232
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB30_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB30_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB30_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB30_7
	jmp	.LBB30_8
.Lfunc_end30:
	.size	writeReferenceFrame, .Lfunc_end30-writeReferenceFrame
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8    # -- Begin function writeMotionVector8x8
	.p2align	4, 0x90
	.type	writeMotionVector8x8,@function
writeMotionVector8x8:                   # @writeMotionVector8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r13d
	movl	%ecx, %r15d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r12d
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB31_9
# %bb.1:                                # %func_writeMotionVector8x8.13
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8.13
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_writeMotionVector8x8.28
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.28
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_writeMotionVector8x8.51
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.51
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_writeMotionVector8x8.127
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.127
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %func_writeMotionVector8x8.197
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.197
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_writeMotionVector8x8.208
	.cfi_def_cfa %rbp, 16
	movl	%r12d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r15d, %ecx
	movl	%r13d, %r8d
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.208
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_7:                               # %func_writeMotionVector8x8.210
	.cfi_def_cfa %rbp, 16
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.210
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_8:                               # %func_writeMotionVector8x8.263
	.cfi_def_cfa %rbp, 16
	movl	%r10d, (%rsp)
	callq	writeMotionVector8x8.263
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB31_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB31_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB31_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB31_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r13d, %r8d
	movl	%r15d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r12d, %edi
	je	.LBB31_7
	jmp	.LBB31_8
.Lfunc_end31:
	.size	writeMotionVector8x8, .Lfunc_end31-writeMotionVector8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL     # -- Begin function writeMotionInfo2NAL
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL,@function
writeMotionInfo2NAL:                    # @writeMotionInfo2NAL
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB32_9
# %bb.1:                                # %func_writeMotionInfo2NAL.45
	callq	writeMotionInfo2NAL.45
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_2:                               # %func_writeMotionInfo2NAL.46
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.46
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_3:                               # %func_writeMotionInfo2NAL.52
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.52
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_4:                               # %func_writeMotionInfo2NAL.83
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.83
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_5:                               # %func_writeMotionInfo2NAL.95
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.95
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_6:                               # %func_writeMotionInfo2NAL.126
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.126
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_7:                               # %func_writeMotionInfo2NAL.142
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.142
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_8:                               # %func_writeMotionInfo2NAL.194
	.cfi_def_cfa %rbp, 16
	callq	writeMotionInfo2NAL.194
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB32_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB32_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB32_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB32_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB32_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB32_7
	jmp	.LBB32_8
.Lfunc_end32:
	.size	writeMotionInfo2NAL, .Lfunc_end32-writeMotionInfo2NAL
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff        # -- Begin function writeChromaCoeff
	.p2align	4, 0x90
	.type	writeChromaCoeff,@function
writeChromaCoeff:                       # @writeChromaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB33_9
# %bb.1:                                # %func_writeChromaCoeff.123
	callq	writeChromaCoeff.123
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_2:                               # %func_writeChromaCoeff.140
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.140
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_3:                               # %func_writeChromaCoeff.188
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.188
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_4:                               # %func_writeChromaCoeff.195
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.195
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_5:                               # %func_writeChromaCoeff.205
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.205
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_6:                               # %func_writeChromaCoeff.225
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.225
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_7:                               # %func_writeChromaCoeff.270
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.270
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_8:                               # %func_writeChromaCoeff.276
	.cfi_def_cfa %rbp, 16
	callq	writeChromaCoeff.276
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB33_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB33_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB33_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB33_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB33_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB33_7
	jmp	.LBB33_8
.Lfunc_end33:
	.size	writeChromaCoeff, .Lfunc_end33-writeChromaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC     # -- Begin function writeCoeff4x4_CAVLC
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC,@function
writeCoeff4x4_CAVLC:                    # @writeCoeff4x4_CAVLC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movl	%esi, %r12d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB34_9
# %bb.1:                                # %func_writeCoeff4x4_CAVLC.39
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.39
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_2:                               # %func_writeCoeff4x4_CAVLC.74
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.74
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_3:                               # %func_writeCoeff4x4_CAVLC.154
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.154
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_4:                               # %func_writeCoeff4x4_CAVLC.185
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.185
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_5:                               # %func_writeCoeff4x4_CAVLC.214
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.214
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_6:                               # %func_writeCoeff4x4_CAVLC.239
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.239
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_7:                               # %func_writeCoeff4x4_CAVLC.266
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.266
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_8:                               # %func_writeCoeff4x4_CAVLC.274
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	writeCoeff4x4_CAVLC.274
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB34_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB34_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB34_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB34_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB34_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB34_7
	jmp	.LBB34_8
.Lfunc_end34:
	.size	writeCoeff4x4_CAVLC, .Lfunc_end34-writeCoeff4x4_CAVLC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC # -- Begin function writeLumaCoeff4x4_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC,@function
writeLumaCoeff4x4_CABAC:                # @writeLumaCoeff4x4_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB35_9
# %bb.1:                                # %func_writeLumaCoeff4x4_CABAC.6
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_2:                               # %func_writeLumaCoeff4x4_CABAC.100
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.100
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_3:                               # %func_writeLumaCoeff4x4_CABAC.122
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.122
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_4:                               # %func_writeLumaCoeff4x4_CABAC.159
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.159
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_5:                               # %func_writeLumaCoeff4x4_CABAC.196
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.196
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_writeLumaCoeff4x4_CABAC.218
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.218
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_7:                               # %func_writeLumaCoeff4x4_CABAC.238
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.238
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_8:                               # %func_writeLumaCoeff4x4_CABAC.272
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff4x4_CABAC.272
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB35_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB35_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB35_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB35_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB35_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB35_7
	jmp	.LBB35_8
.Lfunc_end35:
	.size	writeLumaCoeff4x4_CABAC, .Lfunc_end35-writeLumaCoeff4x4_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC # -- Begin function writeLumaCoeff8x8_CABAC
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC,@function
writeLumaCoeff8x8_CABAC:                # @writeLumaCoeff8x8_CABAC
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB36_9
# %bb.1:                                # %func_writeLumaCoeff8x8_CABAC.14
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.14
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_writeLumaCoeff8x8_CABAC.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_writeLumaCoeff8x8_CABAC.77
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.77
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_writeLumaCoeff8x8_CABAC.119
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.119
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_writeLumaCoeff8x8_CABAC.183
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.183
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_writeLumaCoeff8x8_CABAC.192
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.192
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_writeLumaCoeff8x8_CABAC.202
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.202
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_writeLumaCoeff8x8_CABAC.253
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	writeLumaCoeff8x8_CABAC.253
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
	jmp	.LBB36_8
.Lfunc_end36:
	.size	writeLumaCoeff8x8_CABAC, .Lfunc_end36-writeLumaCoeff8x8_CABAC
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8       # -- Begin function writeLumaCoeff8x8
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8,@function
writeLumaCoeff8x8:                      # @writeLumaCoeff8x8
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB37_9
# %bb.1:                                # %func_writeLumaCoeff8x8.25
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.25
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_2:                               # %func_writeLumaCoeff8x8.36
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_3:                               # %func_writeLumaCoeff8x8.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.40
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_4:                               # %func_writeLumaCoeff8x8.57
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.57
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_5:                               # %func_writeLumaCoeff8x8.76
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.76
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_6:                               # %func_writeLumaCoeff8x8.101
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.101
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_7:                               # %func_writeLumaCoeff8x8.156
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.156
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_8:                               # %func_writeLumaCoeff8x8.168
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	writeLumaCoeff8x8.168
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB37_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB37_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB37_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB37_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB37_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB37_7
	jmp	.LBB37_8
.Lfunc_end37:
	.size	writeLumaCoeff8x8, .Lfunc_end37-writeLumaCoeff8x8
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff    # -- Begin function writeCBPandLumaCoeff
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff,@function
writeCBPandLumaCoeff:                   # @writeCBPandLumaCoeff
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB38_9
# %bb.1:                                # %func_writeCBPandLumaCoeff.26
	callq	writeCBPandLumaCoeff.26
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_2:                               # %func_writeCBPandLumaCoeff.30
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.30
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_3:                               # %func_writeCBPandLumaCoeff.37
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.37
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_4:                               # %func_writeCBPandLumaCoeff.42
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.42
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_5:                               # %func_writeCBPandLumaCoeff.85
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.85
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_6:                               # %func_writeCBPandLumaCoeff.89
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.89
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_7:                               # %func_writeCBPandLumaCoeff.162
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.162
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_8:                               # %func_writeCBPandLumaCoeff.176
	.cfi_def_cfa %rbp, 16
	callq	writeCBPandLumaCoeff.176
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB38_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB38_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB38_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB38_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB38_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB38_7
	jmp	.LBB38_8
.Lfunc_end38:
	.size	writeCBPandLumaCoeff, .Lfunc_end38-writeCBPandLumaCoeff
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz             # -- Begin function predict_nnz
	.p2align	4, 0x90
	.type	predict_nnz,@function
predict_nnz:                            # @predict_nnz
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB39_9
# %bb.1:                                # %func_predict_nnz.21
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.21
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_2:                               # %func_predict_nnz.78
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.78
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_3:                               # %func_predict_nnz.115
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.115
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_4:                               # %func_predict_nnz.144
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.144
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_5:                               # %func_predict_nnz.165
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.165
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_6:                               # %func_predict_nnz.184
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.184
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_7:                               # %func_predict_nnz.190
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.190
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_8:                               # %func_predict_nnz.201
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz.201
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB39_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB39_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB39_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB39_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB39_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB39_7
	jmp	.LBB39_8
.Lfunc_end39:
	.size	predict_nnz, .Lfunc_end39-predict_nnz
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma      # -- Begin function predict_nnz_chroma
	.p2align	4, 0x90
	.type	predict_nnz_chroma,@function
predict_nnz_chroma:                     # @predict_nnz_chroma
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB40_9
# %bb.1:                                # %func_predict_nnz_chroma.9
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.9
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_predict_nnz_chroma.90
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.90
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_3:                               # %func_predict_nnz_chroma.107
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.107
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_4:                               # %func_predict_nnz_chroma.193
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.193
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_5:                               # %func_predict_nnz_chroma.204
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.204
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_6:                               # %func_predict_nnz_chroma.212
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.212
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_7:                               # %func_predict_nnz_chroma.221
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.221
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_8:                               # %func_predict_nnz_chroma.246
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	predict_nnz_chroma.246
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB40_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB40_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB40_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB40_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB40_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB40_7
	jmp	.LBB40_8
.Lfunc_end40:
	.size	predict_nnz_chroma, .Lfunc_end40-predict_nnz_chroma
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16          # -- Begin function find_sad_16x16
	.p2align	4, 0x90
	.type	find_sad_16x16,@function
find_sad_16x16:                         # @find_sad_16x16
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_rand
	cmpl	$0, %eax
	jne	.LBB41_9
# %bb.1:                                # %func_find_sad_16x16.67
	movq	%rbx, %rdi
	callq	find_sad_16x16.67
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_2:                               # %func_find_sad_16x16.94
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.94
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_3:                               # %func_find_sad_16x16.148
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.148
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_4:                               # %func_find_sad_16x16.157
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.157
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_5:                               # %func_find_sad_16x16.175
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.175
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_6:                               # %func_find_sad_16x16.207
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.207
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_7:                               # %func_find_sad_16x16.231
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.231
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_8:                               # %func_find_sad_16x16.282
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	find_sad_16x16.282
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB41_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB41_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB41_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB41_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB41_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB41_7
	jmp	.LBB41_8
.Lfunc_end41:
	.size	find_sad_16x16, .Lfunc_end41-find_sad_16x16
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.1  # -- Begin function terminate_macroblock.1
	.p2align	4, 0x90
	.type	terminate_macroblock.1,@function
terminate_macroblock.1:                 # @terminate_macroblock.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$367717158, -108(%rbp)  # imm = 0x15EAEB26
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB42_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB42_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB42_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB42_5
.LBB42_4:                               # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB42_8
.LBB42_5:                               # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB42_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB42_7:                               # %if.end
	jmp	.LBB42_8
.LBB42_8:                               # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB42_45
# %bb.9:                                # %if.end18
	movq	.LJTI42_0(,%rax,8), %rax
	jmpq	*%rax
.LBB42_10:                              # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB42_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB42_12:                              # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB42_46
.LBB42_13:                              # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB42_46
.LBB42_14:                              # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB42_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB42_16:                              # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB42_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB42_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB42_22
.LBB42_19:                              # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB42_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB42_21:                              # %if.end64
	jmp	.LBB42_22
.LBB42_22:                              # %if.end65
	jmp	.LBB42_23
.LBB42_23:                              # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB42_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB42_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB42_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB42_27:                              # %if.end79
	jmp	.LBB42_28
.LBB42_28:                              # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB42_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB42_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB42_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB42_32:                              # %if.end89
	jmp	.LBB42_33
.LBB42_33:                              # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB42_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB42_35:                              # %if.end95
	jmp	.LBB42_46
.LBB42_36:                              # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB42_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB42_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB42_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB42_40:                              # %if.end106
	jmp	.LBB42_41
.LBB42_41:                              # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB42_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB42_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB42_44:                              # %if.end118
	jmp	.LBB42_46
.LBB42_45:                              # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB42_46:                              # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB42_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB42_48:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB42_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB42_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB42_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB42_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB42_51:                              # %if.end139
                                        #   in Loop: Header=BB42_48 Depth=1
	jmp	.LBB42_52
.LBB42_52:                              # %for.inc
                                        #   in Loop: Header=BB42_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB42_48
.LBB42_53:                              # %for.end
	jmp	.LBB42_54
.LBB42_54:                              # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB42_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB42_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB42_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB42_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB42_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB42_60:                              # %if.end174
	jmp	.LBB42_62
.LBB42_61:                              # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB42_62:                              # %if.end188
	jmp	.LBB42_63
.LBB42_63:                              # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB42_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB42_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB42_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB42_67:                              # %if.end218
	cmpl	$367717158, -108(%rbp)  # imm = 0x15EAEB26
	jne	.LBB42_69
.LBB42_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_68
.Lfunc_end42:
	.size	terminate_macroblock.1, .Lfunc_end42-terminate_macroblock.1
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI42_0:
	.quad	.LBB42_10
	.quad	.LBB42_13
	.quad	.LBB42_14
	.quad	.LBB42_36
                                        # -- End function
	.text
	.globl	ChromaPrediction4x4.2   # -- Begin function ChromaPrediction4x4.2
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.2,@function
ChromaPrediction4x4.2:                  # @ChromaPrediction4x4.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1800352720, -68(%rbp)  # imm = 0x6B4F33D0
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB43_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB43_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB43_6
.LBB43_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB43_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB43_5:                               # %land.end
.LBB43_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB43_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB43_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB43_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -24(%rbp)
	jne	.LBB43_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB43_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB43_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB43_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB43_15
.LBB43_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB43_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB43_16:                              # %if.end
	cmpl	$-1, -24(%rbp)
	jne	.LBB43_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB43_87
.LBB43_18:                              # %if.end30
	cmpl	$0, -24(%rbp)
	je	.LBB43_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -24(%rbp)
	jne	.LBB43_21
.LBB43_20:                              # %if.then36
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB43_21:                              # %if.end37
	cmpl	$1, -24(%rbp)
	je	.LBB43_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -24(%rbp)
	jne	.LBB43_24
.LBB43_23:                              # %if.then43
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB43_24:                              # %if.end44
	cmpl	$0, -72(%rbp)
	je	.LBB43_56
# %bb.25:                               # %if.then46
	cmpl	$2, -24(%rbp)
	jne	.LBB43_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB43_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_29:                              # %for.cond52
                                        #   Parent Loop BB43_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB43_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB43_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB43_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_29
.LBB43_32:                              # %for.end
                                        #   in Loop: Header=BB43_27 Depth=1
	jmp	.LBB43_33
.LBB43_33:                              # %for.inc99
                                        #   in Loop: Header=BB43_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_27
.LBB43_34:                              # %for.end101
	jmp	.LBB43_55
.LBB43_35:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB43_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB43_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_39:                              # %for.cond109
                                        #   Parent Loop BB43_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB43_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB43_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB43_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_39
.LBB43_42:                              # %for.end139
                                        #   in Loop: Header=BB43_37 Depth=1
	jmp	.LBB43_43
.LBB43_43:                              # %for.inc140
                                        #   in Loop: Header=BB43_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_37
.LBB43_44:                              # %for.end142
	jmp	.LBB43_54
.LBB43_45:                              # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB43_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_48:                              # %for.cond148
                                        #   Parent Loop BB43_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB43_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB43_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB43_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_48
.LBB43_51:                              # %for.end178
                                        #   in Loop: Header=BB43_46 Depth=1
	jmp	.LBB43_52
.LBB43_52:                              # %for.inc179
                                        #   in Loop: Header=BB43_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_46
.LBB43_53:                              # %for.end181
	jmp	.LBB43_54
.LBB43_54:                              # %if.end182
	jmp	.LBB43_55
.LBB43_55:                              # %if.end183
	jmp	.LBB43_87
.LBB43_56:                              # %if.else184
	cmpl	$2, -24(%rbp)
	jne	.LBB43_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB43_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_60:                              # %for.cond192
                                        #   Parent Loop BB43_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB43_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB43_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB43_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_60
.LBB43_63:                              # %for.end208
                                        #   in Loop: Header=BB43_58 Depth=1
	jmp	.LBB43_64
.LBB43_64:                              # %for.inc209
                                        #   in Loop: Header=BB43_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_58
.LBB43_65:                              # %for.end211
	jmp	.LBB43_86
.LBB43_66:                              # %if.else212
	cmpl	$0, -24(%rbp)
	jne	.LBB43_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB43_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_70:                              # %for.cond220
                                        #   Parent Loop BB43_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB43_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB43_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB43_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_70
.LBB43_73:                              # %for.end233
                                        #   in Loop: Header=BB43_68 Depth=1
	jmp	.LBB43_74
.LBB43_74:                              # %for.inc234
                                        #   in Loop: Header=BB43_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_68
.LBB43_75:                              # %for.end236
	jmp	.LBB43_85
.LBB43_76:                              # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB43_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB43_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB43_79:                              # %for.cond242
                                        #   Parent Loop BB43_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB43_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB43_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB43_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB43_79
.LBB43_82:                              # %for.end255
                                        #   in Loop: Header=BB43_77 Depth=1
	jmp	.LBB43_83
.LBB43_83:                              # %for.inc256
                                        #   in Loop: Header=BB43_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB43_77
.LBB43_84:                              # %for.end258
	jmp	.LBB43_85
.LBB43_85:                              # %if.end259
	jmp	.LBB43_86
.LBB43_86:                              # %if.end260
	jmp	.LBB43_87
.LBB43_87:                              # %if.end261
	cmpl	$1800352720, -68(%rbp)  # imm = 0x6B4F33D0
	jne	.LBB43_89
.LBB43_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_88
.Lfunc_end43:
	.size	ChromaPrediction4x4.2, .Lfunc_end43-ChromaPrediction4x4.2
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.3 # -- Begin function proceed2nextMacroblock.3
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.3,@function
proceed2nextMacroblock.3:               # @proceed2nextMacroblock.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$721812532, -28(%rbp)   # imm = 0x2B05FC34
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB44_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB44_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB44_9
.LBB44_3:                               # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB44_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB44_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB44_7
.LBB44_6:                               # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB44_7:                               # %if.end
	jmp	.LBB44_8
.LBB44_8:                               # %if.end48
	jmp	.LBB44_9
.LBB44_9:                               # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB44_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB44_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB44_12:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB44_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB44_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB44_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB44_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB44_16
.LBB44_15:                              # %if.else86
                                        #   in Loop: Header=BB44_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB44_16:                              # %if.end94
                                        #   in Loop: Header=BB44_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB44_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB44_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB44_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB44_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB44_20
.LBB44_19:                              # %lor.lhs.false105
                                        #   in Loop: Header=BB44_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB44_21
.LBB44_20:                              # %if.then107
                                        #   in Loop: Header=BB44_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB44_22
.LBB44_21:                              # %if.else114
                                        #   in Loop: Header=BB44_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB44_22:                              # %if.end121
                                        #   in Loop: Header=BB44_12 Depth=1
	jmp	.LBB44_23
.LBB44_23:                              # %if.end122
                                        #   in Loop: Header=BB44_12 Depth=1
	jmp	.LBB44_24
.LBB44_24:                              # %for.inc
                                        #   in Loop: Header=BB44_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_12
.LBB44_25:                              # %for.end
	jmp	.LBB44_34
.LBB44_26:                              # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB44_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB44_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB44_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB44_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB44_32
.LBB44_31:                              # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB44_32:                              # %if.end155
	jmp	.LBB44_33
.LBB44_33:                              # %if.end156
	jmp	.LBB44_34
.LBB44_34:                              # %if.end157
	jmp	.LBB44_35
.LBB44_35:                              # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB44_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB44_38
.LBB44_37:                              # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB44_38:                              # %if.end167
	cmpl	$721812532, -28(%rbp)   # imm = 0x2B05FC34
	jne	.LBB44_40
.LBB44_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_40:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_39
.Lfunc_end44:
	.size	proceed2nextMacroblock.3, .Lfunc_end44-proceed2nextMacroblock.3
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.4      # -- Begin function start_macroblock.4
	.p2align	4, 0x90
	.type	start_macroblock.4,@function
start_macroblock.4:                     # @start_macroblock.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$935967247, -84(%rbp)   # imm = 0x37C9BA0F
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB45_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB45_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-48(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB45_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB45_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB45_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB45_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB45_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB45_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB45_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB45_8:                               # %if.end
                                        #   in Loop: Header=BB45_5 Depth=1
	jmp	.LBB45_9
.LBB45_9:                               # %for.inc
                                        #   in Loop: Header=BB45_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_5
.LBB45_10:                              # %for.end
	jmp	.LBB45_11
.LBB45_11:                              # %if.end19
	jmp	.LBB45_12
.LBB45_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB45_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB45_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB45_16
.LBB45_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB45_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB45_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB45_97
.LBB45_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB45_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB45_21
.LBB45_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB45_96
.LBB45_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB45_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB45_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB45_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB45_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB45_34
.LBB45_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB45_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB45_32
.LBB45_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB45_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB45_31
.LBB45_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB45_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB45_33
.LBB45_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB45_33:                              # %if.end112
	jmp	.LBB45_34
.LBB45_34:                              # %if.end113
	jmp	.LBB45_39
.LBB45_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB45_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB45_38
.LBB45_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB45_38:                              # %if.end125
	jmp	.LBB45_39
.LBB45_39:                              # %if.end126
	jmp	.LBB45_47
.LBB45_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB45_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB45_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB45_44
.LBB45_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB45_44:                              # %if.end140
	jmp	.LBB45_46
.LBB45_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB45_46:                              # %if.end145
	jmp	.LBB45_47
.LBB45_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB45_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB45_93
.LBB45_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB45_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB45_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB45_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB45_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB45_74
.LBB45_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB45_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB45_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB45_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB45_73
.LBB45_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB45_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB45_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB45_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB45_72
.LBB45_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB45_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB45_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB45_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB45_71
.LBB45_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB45_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB45_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB45_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB45_70:                              # %if.end223
	jmp	.LBB45_71
.LBB45_71:                              # %if.end224
	jmp	.LBB45_72
.LBB45_72:                              # %if.end225
	jmp	.LBB45_73
.LBB45_73:                              # %if.end226
	jmp	.LBB45_74
.LBB45_74:                              # %if.end227
	jmp	.LBB45_75
.LBB45_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB45_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB45_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB45_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB45_82
.LBB45_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB45_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB45_81:                              # %if.end256
	jmp	.LBB45_82
.LBB45_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB45_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB45_88
.LBB45_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB45_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB45_87
.LBB45_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB45_87:                              # %if.end292
	jmp	.LBB45_88
.LBB45_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB45_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB45_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB45_92
.LBB45_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB45_92:                              # %if.end305
	jmp	.LBB45_94
.LBB45_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB45_94:                              # %if.end309
	jmp	.LBB45_95
.LBB45_95:                              # %if.end310
	jmp	.LBB45_96
.LBB45_96:                              # %if.end311
	jmp	.LBB45_97
.LBB45_97:                              # %if.end312
	jmp	.LBB45_102
.LBB45_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB45_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB45_101
.LBB45_100:                             # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB45_101:                             # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB45_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB45_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB45_105
.LBB45_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB45_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB45_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB45_107:                             # %if.end359
	movl	$0, -20(%rbp)
.LBB45_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_110 Depth 2
                                        #       Child Loop BB45_112 Depth 3
                                        #         Child Loop BB45_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB45_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB45_108 Depth=1
	movl	$0, -16(%rbp)
.LBB45_110:                             # %for.cond364
                                        #   Parent Loop BB45_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_112 Depth 3
                                        #         Child Loop BB45_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB45_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB45_110 Depth=2
	movl	$0, -12(%rbp)
.LBB45_112:                             # %for.cond368
                                        #   Parent Loop BB45_108 Depth=1
                                        #     Parent Loop BB45_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB45_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB45_112 Depth=3
	movl	$0, -36(%rbp)
.LBB45_114:                             # %for.cond372
                                        #   Parent Loop BB45_108 Depth=1
                                        #     Parent Loop BB45_110 Depth=2
                                        #       Parent Loop BB45_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB45_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB45_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB45_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_114
.LBB45_117:                             # %for.end388
                                        #   in Loop: Header=BB45_112 Depth=3
	jmp	.LBB45_118
.LBB45_118:                             # %for.inc389
                                        #   in Loop: Header=BB45_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_112
.LBB45_119:                             # %for.end391
                                        #   in Loop: Header=BB45_110 Depth=2
	jmp	.LBB45_120
.LBB45_120:                             # %for.inc392
                                        #   in Loop: Header=BB45_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_110
.LBB45_121:                             # %for.end394
                                        #   in Loop: Header=BB45_108 Depth=1
	jmp	.LBB45_122
.LBB45_122:                             # %for.inc395
                                        #   in Loop: Header=BB45_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_108
.LBB45_123:                             # %for.end397
	movl	$0, -16(%rbp)
.LBB45_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_126 Depth 2
                                        #       Child Loop BB45_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB45_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB45_124 Depth=1
	movl	$0, -12(%rbp)
.LBB45_126:                             # %for.cond402
                                        #   Parent Loop BB45_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB45_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB45_126 Depth=2
	movl	$0, -20(%rbp)
.LBB45_128:                             # %for.cond406
                                        #   Parent Loop BB45_124 Depth=1
                                        #     Parent Loop BB45_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB45_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB45_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB45_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_128
.LBB45_131:                             # %for.end432
                                        #   in Loop: Header=BB45_126 Depth=2
	jmp	.LBB45_132
.LBB45_132:                             # %for.inc433
                                        #   in Loop: Header=BB45_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_126
.LBB45_133:                             # %for.end435
                                        #   in Loop: Header=BB45_124 Depth=1
	jmp	.LBB45_134
.LBB45_134:                             # %for.inc436
                                        #   in Loop: Header=BB45_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_124
.LBB45_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB45_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_138 Depth 2
                                        #       Child Loop BB45_140 Depth 3
                                        #         Child Loop BB45_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB45_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB45_136 Depth=1
	movl	$0, -16(%rbp)
.LBB45_138:                             # %for.cond443
                                        #   Parent Loop BB45_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_140 Depth 3
                                        #         Child Loop BB45_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB45_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB45_138 Depth=2
	movl	$0, -12(%rbp)
.LBB45_140:                             # %for.cond447
                                        #   Parent Loop BB45_136 Depth=1
                                        #     Parent Loop BB45_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB45_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB45_140 Depth=3
	movl	$0, -36(%rbp)
.LBB45_142:                             # %for.cond451
                                        #   Parent Loop BB45_136 Depth=1
                                        #     Parent Loop BB45_138 Depth=2
                                        #       Parent Loop BB45_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB45_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB45_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB45_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB45_142
.LBB45_145:                             # %for.end465
                                        #   in Loop: Header=BB45_140 Depth=3
	jmp	.LBB45_146
.LBB45_146:                             # %for.inc466
                                        #   in Loop: Header=BB45_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_140
.LBB45_147:                             # %for.end468
                                        #   in Loop: Header=BB45_138 Depth=2
	jmp	.LBB45_148
.LBB45_148:                             # %for.inc469
                                        #   in Loop: Header=BB45_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_138
.LBB45_149:                             # %for.end471
                                        #   in Loop: Header=BB45_136 Depth=1
	jmp	.LBB45_150
.LBB45_150:                             # %for.inc472
                                        #   in Loop: Header=BB45_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB45_136
.LBB45_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB45_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB45_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB45_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB45_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_152
.LBB45_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB45_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB45_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB45_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB45_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_156
.LBB45_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB45_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB45_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB45_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB45_166
.LBB45_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB45_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB45_165:                             # %if.end520
	jmp	.LBB45_166
.LBB45_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB45_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB45_168:                             # %if.end536
	cmpl	$935967247, -84(%rbp)   # imm = 0x37C9BA0F
	jne	.LBB45_170
.LBB45_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_169
.Lfunc_end45:
	.size	start_macroblock.4, .Lfunc_end45-start_macroblock.4
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.5     # -- Begin function TransformDecision.5
	.p2align	4, 0x90
	.type	TransformDecision.5,@function
TransformDecision.5:                    # @TransformDecision.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$389223472, -72(%rbp)   # imm = 0x17331430
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB46_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB46_3
.LBB46_2:                               # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB46_3:                               # %if.end
	jmp	.LBB46_4
.LBB46_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_6 Depth 2
                                        #       Child Loop BB46_8 Depth 3
                                        #         Child Loop BB46_10 Depth 4
                                        #           Child Loop BB46_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB46_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB46_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -32(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB46_6:                               # %for.cond3
                                        #   Parent Loop BB46_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_8 Depth 3
                                        #         Child Loop BB46_10 Depth 4
                                        #           Child Loop BB46_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB46_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB46_8:                               # %for.cond8
                                        #   Parent Loop BB46_4 Depth=1
                                        #     Parent Loop BB46_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_10 Depth 4
                                        #           Child Loop BB46_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB46_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-52(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB46_10:                              # %for.cond13
                                        #   Parent Loop BB46_4 Depth=1
                                        #     Parent Loop BB46_6 Depth=2
                                        #       Parent Loop BB46_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB46_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB46_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB46_10 Depth=4
	movl	$0, -28(%rbp)
.LBB46_12:                              # %for.cond17
                                        #   Parent Loop BB46_4 Depth=1
                                        #     Parent Loop BB46_6 Depth=2
                                        #       Parent Loop BB46_8 Depth=3
                                        #         Parent Loop BB46_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB46_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB46_12 Depth=5
	movq	imgY_org, %rax
	movl	-88(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-84(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB46_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB46_12
.LBB46_15:                              # %for.end
                                        #   in Loop: Header=BB46_10 Depth=4
	jmp	.LBB46_16
.LBB46_16:                              # %for.inc38
                                        #   in Loop: Header=BB46_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB46_10
.LBB46_17:                              # %for.end40
                                        #   in Loop: Header=BB46_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB46_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_8
.LBB46_19:                              # %for.end44
                                        #   in Loop: Header=BB46_6 Depth=2
	jmp	.LBB46_20
.LBB46_20:                              # %for.inc45
                                        #   in Loop: Header=BB46_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB46_6
.LBB46_21:                              # %for.end47
                                        #   in Loop: Header=BB46_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB46_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_4
.LBB46_23:                              # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB46_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB46_28
.LBB46_25:                              # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB46_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB46_28
.LBB46_27:                              # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB46_28:                              # %return
	movl	-48(%rbp), %ebx
	cmpl	$389223472, -72(%rbp)   # imm = 0x17331430
	jne	.LBB46_30
.LBB46_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_29
.Lfunc_end46:
	.size	TransformDecision.5, .Lfunc_end46-TransformDecision.5
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.6 # -- Begin function writeLumaCoeff4x4_CABAC.6
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.6,@function
writeLumaCoeff4x4_CABAC.6:              # @writeLumaCoeff4x4_CABAC.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1512245159, -52(%rbp)  # imm = 0x5A2307A7
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB47_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB47_3
.LBB47_2:                               # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB47_3:                               # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB47_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB47_6
.LBB47_5:                               # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB47_6:                               # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB47_7:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB47_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB47_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB47_9:                               # %land.end
                                        #   in Loop: Header=BB47_7 Depth=1
	testb	$1, %al
	jne	.LBB47_10
	jmp	.LBB47_15
.LBB47_10:                              # %for.body
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB47_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB47_13
.LBB47_12:                              # %cond.false40
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB47_13:                              # %cond.end43
                                        #   in Loop: Header=BB47_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB47_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_7
.LBB47_15:                              # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1512245159, -52(%rbp)  # imm = 0x5A2307A7
	jne	.LBB47_17
.LBB47_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_17:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_16
.Lfunc_end47:
	.size	writeLumaCoeff4x4_CABAC.6, .Lfunc_end47-writeLumaCoeff4x4_CABAC.6
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.7    # -- Begin function writeIntra4x4Modes.7
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.7,@function
writeIntra4x4Modes.7:                   # @writeIntra4x4Modes.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$662479144, -72(%rbp)   # imm = 0x277CA128
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_9 Depth 2
                                        #       Child Loop BB48_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB48_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB48_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB48_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB48_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB48_8
.LBB48_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB48_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB48_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB48_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB48_17
.LBB48_8:                               # %if.then
                                        #   in Loop: Header=BB48_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -32(%rbp)
.LBB48_9:                               # %for.cond24
                                        #   Parent Loop BB48_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB48_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB48_9 Depth=2
	movl	$0, -12(%rbp)
.LBB48_11:                              # %for.cond27
                                        #   Parent Loop BB48_1 Depth=1
                                        #     Parent Loop BB48_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB48_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB48_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB48_11 Depth=3
	movl	-84(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_11
.LBB48_14:                              # %for.end
                                        #   in Loop: Header=BB48_9 Depth=2
	jmp	.LBB48_15
.LBB48_15:                              # %for.inc42
                                        #   in Loop: Header=BB48_9 Depth=2
	movl	-76(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB48_9
.LBB48_16:                              # %for.end44
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_17
.LBB48_17:                              # %if.end
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_18
.LBB48_18:                              # %for.inc45
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_1
.LBB48_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB48_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB48_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB48_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB48_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB48_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB48_23:                              # %if.end57
                                        #   in Loop: Header=BB48_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB48_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB48_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB48_26
.LBB48_25:                              # %if.else
                                        #   in Loop: Header=BB48_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB48_26:                              # %if.end65
                                        #   in Loop: Header=BB48_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB48_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_20
.LBB48_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$662479144, -72(%rbp)   # imm = 0x277CA128
	jne	.LBB48_30
.LBB48_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_29
.Lfunc_end48:
	.size	writeIntra4x4Modes.7, .Lfunc_end48-writeIntra4x4Modes.7
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.8    # -- Begin function writeIntra4x4Modes.8
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.8,@function
writeIntra4x4Modes.8:                   # @writeIntra4x4Modes.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1906707061, -80(%rbp)  # imm = 0x71A60A75
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB49_9 Depth 2
                                        #       Child Loop BB49_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB49_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB49_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB49_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB49_8
.LBB49_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB49_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB49_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB49_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB49_17
.LBB49_8:                               # %if.then
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -76(%rbp)
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -28(%rbp)
.LBB49_9:                               # %for.cond24
                                        #   Parent Loop BB49_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB49_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB49_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB49_9 Depth=2
	movl	$0, -12(%rbp)
.LBB49_11:                              # %for.cond27
                                        #   Parent Loop BB49_1 Depth=1
                                        #     Parent Loop BB49_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB49_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB49_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB49_11 Depth=3
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_11
.LBB49_14:                              # %for.end
                                        #   in Loop: Header=BB49_9 Depth=2
	jmp	.LBB49_15
.LBB49_15:                              # %for.inc42
                                        #   in Loop: Header=BB49_9 Depth=2
	movl	-84(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB49_9
.LBB49_16:                              # %for.end44
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_17
.LBB49_17:                              # %if.end
                                        #   in Loop: Header=BB49_1 Depth=1
	jmp	.LBB49_18
.LBB49_18:                              # %for.inc45
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB49_1
.LBB49_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB49_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB49_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB49_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB49_23:                              # %if.end57
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB49_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB49_26
.LBB49_25:                              # %if.else
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB49_26:                              # %if.end65
                                        #   in Loop: Header=BB49_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB49_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB49_20
.LBB49_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1906707061, -80(%rbp)  # imm = 0x71A60A75
	jne	.LBB49_30
.LBB49_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_29
.Lfunc_end49:
	.size	writeIntra4x4Modes.8, .Lfunc_end49-writeIntra4x4Modes.8
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.9    # -- Begin function predict_nnz_chroma.9
	.p2align	4, 0x90
	.type	predict_nnz_chroma.9,@function
predict_nnz_chroma.9:                   # @predict_nnz_chroma.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$2095465059, -64(%rbp)  # imm = 0x7CE64263
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB50_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB50_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB50_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB50_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB50_5:                               # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB50_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB50_7:                               # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB50_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB50_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB50_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB50_11:                              # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB50_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB50_13:                              # %if.end57
	jmp	.LBB50_27
.LBB50_14:                              # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB50_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB50_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB50_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB50_18:                              # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB50_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB50_20:                              # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB50_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB50_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB50_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB50_24:                              # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB50_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB50_26:                              # %if.end124
	jmp	.LBB50_27
.LBB50_27:                              # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB50_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB50_29:                              # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$2095465059, -64(%rbp)  # imm = 0x7CE64263
	jne	.LBB50_31
.LBB50_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_31:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_30
.Lfunc_end50:
	.size	predict_nnz_chroma.9, .Lfunc_end50-predict_nnz_chroma.9
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.10 # -- Begin function write_one_macroblock.10
	.p2align	4, 0x90
	.type	write_one_macroblock.10,@function
write_one_macroblock.10:                # @write_one_macroblock.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1987430858, -28(%rbp)  # imm = 0x7675C9CA
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB51_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB51_2:                               # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB51_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB51_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB51_6
.LBB51_5:                               # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB51_6:                               # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB51_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB51_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB51_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB51_10:                              # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB51_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB51_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB51_22
.LBB51_13:                              # %if.then22
	movl	$0, -20(%rbp)
.LBB51_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB51_14 Depth=1
	movl	$0, -24(%rbp)
.LBB51_16:                              # %for.cond24
                                        #   Parent Loop BB51_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB51_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB51_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB51_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB51_16
.LBB51_19:                              # %for.end
                                        #   in Loop: Header=BB51_14 Depth=1
	jmp	.LBB51_20
.LBB51_20:                              # %for.inc35
                                        #   in Loop: Header=BB51_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB51_14
.LBB51_21:                              # %for.end37
	jmp	.LBB51_22
.LBB51_22:                              # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB51_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB51_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB51_30
.LBB51_25:                              # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB51_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB51_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB51_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB51_29:                              # %if.end59
	jmp	.LBB51_30
.LBB51_30:                              # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB51_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB51_32:                              # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1987430858, -28(%rbp)  # imm = 0x7675C9CA
	jne	.LBB51_34
.LBB51_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_34:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_33
.Lfunc_end51:
	.size	write_one_macroblock.10, .Lfunc_end51-write_one_macroblock.10
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.11 # -- Begin function OneComponentLumaPrediction4x4.11
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.11,@function
OneComponentLumaPrediction4x4.11:       # @OneComponentLumaPrediction4x4.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1397537881, -84(%rbp)  # imm = 0x534CBC59
	movq	%rdi, -16(%rbp)
	movl	%esi, -88(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1397537881, -84(%rbp)  # imm = 0x534CBC59
	jne	.LBB52_2
.LBB52_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_1
.Lfunc_end52:
	.size	OneComponentLumaPrediction4x4.11, .Lfunc_end52-OneComponentLumaPrediction4x4.11
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.12   # -- Begin function LumaResidualCoding.12
	.p2align	4, 0x90
	.type	LumaResidualCoding.12,@function
LumaResidualCoding.12:                  # @LumaResidualCoding.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$316819008, -36(%rbp)   # imm = 0x12E24640
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB53_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB53_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-4(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	leaq	-40(%rbp), %rcx
	leaq	-22(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-4(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-48(%rbp), %r8d
	movl	-40(%rbp), %r9d
	movw	-22(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB53_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_1
.LBB53_4:                               # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB53_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB53_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB53_33
.LBB53_7:                               # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB53_8:                               # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB53_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	$0, -12(%rbp)
.LBB53_10:                              # %for.cond13
                                        #   Parent Loop BB53_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB53_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB53_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB53_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB53_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB53_14
.LBB53_13:                              # %if.else
                                        #   in Loop: Header=BB53_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB53_14:                              # %if.end
                                        #   in Loop: Header=BB53_10 Depth=2
	jmp	.LBB53_15
.LBB53_15:                              # %for.inc31
                                        #   in Loop: Header=BB53_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_10
.LBB53_16:                              # %for.end33
                                        #   in Loop: Header=BB53_8 Depth=1
	jmp	.LBB53_17
.LBB53_17:                              # %for.inc34
                                        #   in Loop: Header=BB53_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_8
.LBB53_18:                              # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB53_32
# %bb.19:                               # %if.then38
	movl	$0, -4(%rbp)
.LBB53_20:                              # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_22 Depth 2
                                        #       Child Loop BB53_24 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB53_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB53_20 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -52(%rbp)
	movl	$0, -8(%rbp)
.LBB53_22:                              # %for.cond45
                                        #   Parent Loop BB53_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB53_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB53_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	$0, -12(%rbp)
.LBB53_24:                              # %for.cond48
                                        #   Parent Loop BB53_20 Depth=1
                                        #     Parent Loop BB53_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB53_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB53_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB53_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB53_24
.LBB53_27:                              # %for.end55
                                        #   in Loop: Header=BB53_22 Depth=2
	jmp	.LBB53_28
.LBB53_28:                              # %for.inc56
                                        #   in Loop: Header=BB53_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_22
.LBB53_29:                              # %for.end58
                                        #   in Loop: Header=BB53_20 Depth=1
	jmp	.LBB53_30
.LBB53_30:                              # %for.inc59
                                        #   in Loop: Header=BB53_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_20
.LBB53_31:                              # %for.end61
	jmp	.LBB53_32
.LBB53_32:                              # %if.end62
	jmp	.LBB53_33
.LBB53_33:                              # %if.end63
	cmpl	$316819008, -36(%rbp)   # imm = 0x12E24640
	jne	.LBB53_35
.LBB53_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_35:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_34
.Lfunc_end53:
	.size	LumaResidualCoding.12, .Lfunc_end53-LumaResidualCoding.12
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.13 # -- Begin function writeMotionVector8x8.13
	.p2align	4, 0x90
	.type	writeMotionVector8x8.13,@function
writeMotionVector8x8.13:                # @writeMotionVector8x8.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1041850910, -88(%rbp)  # imm = 0x3E19621E
	movl	%edi, -96(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -92(%rbp)
	movl	%ecx, -100(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -136(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -152(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB54_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB54_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB54_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB54_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB54_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB54_7
.LBB54_6:                               # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB54_7:                               # %cond.end
	movq	%rax, -120(%rbp)
.LBB54_8:                               # %if.end
	movl	-80(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB54_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_11 Depth 2
                                        #       Child Loop BB54_13 Depth 3
                                        #         Child Loop BB54_15 Depth 4
                                        #           Child Loop BB54_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB54_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB54_9 Depth=1
	movl	-96(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB54_11:                              # %for.cond22
                                        #   Parent Loop BB54_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_13 Depth 3
                                        #         Child Loop BB54_15 Depth 4
                                        #           Child Loop BB54_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB54_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB54_11 Depth=2
	movl	$0, -16(%rbp)
.LBB54_13:                              # %for.cond25
                                        #   Parent Loop BB54_9 Depth=1
                                        #     Parent Loop BB54_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_15 Depth 4
                                        #           Child Loop BB54_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB54_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB54_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -44(%rbp)
.LBB54_15:                              # %for.cond53
                                        #   Parent Loop BB54_9 Depth=1
                                        #     Parent Loop BB54_11 Depth=2
                                        #       Parent Loop BB54_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB54_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB54_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB54_15 Depth=4
	movl	$0, -40(%rbp)
.LBB54_17:                              # %for.cond57
                                        #   Parent Loop BB54_9 Depth=1
                                        #     Parent Loop BB54_11 Depth=2
                                        #       Parent Loop BB54_13 Depth=3
                                        #         Parent Loop BB54_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB54_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB54_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB54_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB54_17
.LBB54_20:                              # %for.end
                                        #   in Loop: Header=BB54_15 Depth=4
	jmp	.LBB54_21
.LBB54_21:                              # %for.inc70
                                        #   in Loop: Header=BB54_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB54_15
.LBB54_22:                              # %for.end72
                                        #   in Loop: Header=BB54_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB54_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB54_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB54_25
.LBB54_24:                              # %if.else
                                        #   in Loop: Header=BB54_13 Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB54_25:                              # %if.end78
                                        #   in Loop: Header=BB54_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-152(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-136(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB54_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_13
.LBB54_27:                              # %for.end90
                                        #   in Loop: Header=BB54_11 Depth=2
	jmp	.LBB54_28
.LBB54_28:                              # %for.inc91
                                        #   in Loop: Header=BB54_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB54_11
.LBB54_29:                              # %for.end93
                                        #   in Loop: Header=BB54_9 Depth=1
	jmp	.LBB54_30
.LBB54_30:                              # %for.inc94
                                        #   in Loop: Header=BB54_9 Depth=1
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_9
.LBB54_31:                              # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$1041850910, -88(%rbp)  # imm = 0x3E19621E
	jne	.LBB54_33
.LBB54_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_32
.Lfunc_end54:
	.size	writeMotionVector8x8.13, .Lfunc_end54-writeMotionVector8x8.13
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.14 # -- Begin function writeLumaCoeff8x8_CABAC.14
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.14,@function
writeLumaCoeff8x8_CABAC.14:             # @writeLumaCoeff8x8_CABAC.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1833870833, -60(%rbp)  # imm = 0x6D4EA5F1
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB55_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB55_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB55_3:                               # %land.end
                                        #   in Loop: Header=BB55_1 Depth=1
	testb	$1, %al
	jne	.LBB55_4
	jmp	.LBB55_12
.LBB55_4:                               # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB55_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB55_7
.LBB55_6:                               # %cond.false
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB55_7:                               # %cond.end
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB55_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB55_10
.LBB55_9:                               # %if.else
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB55_10:                              # %if.end
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB55_1
.LBB55_12:                              # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1833870833, -60(%rbp)  # imm = 0x6D4EA5F1
	jne	.LBB55_14
.LBB55_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_13
.Lfunc_end55:
	.size	writeLumaCoeff8x8_CABAC.14, .Lfunc_end55-writeLumaCoeff8x8_CABAC.14
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.15    # -- Begin function LumaPrediction4x4.15
	.p2align	4, 0x90
	.type	LumaPrediction4x4.15,@function
LumaPrediction4x4.15:                   # @LumaPrediction4x4.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$931074019, -104(%rbp)  # imm = 0x377F0FE3
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -56(%rbp)
	movl	%r8d, -60(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB56_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB56_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB56_6
.LBB56_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB56_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB56_5:                               # %land.end
.LBB56_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB56_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB56_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB56_10
.LBB56_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB56_10
.LBB56_10:                              # %cond.end
	movl	%ecx, -52(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB56_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB56_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB56_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB56_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -56(%rbp)
	jne	.LBB56_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -60(%rbp)
	jne	.LBB56_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB56_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB56_19
.LBB56_18:                              # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB56_19:                              # %cond.end38
	movq	%rax, -96(%rbp)
.LBB56_20:                              # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB56_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB56_23
.LBB56_22:                              # %if.then45
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB56_23:                              # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB56_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB56_26
.LBB56_25:                              # %if.then64
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB56_26:                              # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB56_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB56_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_29:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB56_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_31:                              # %for.cond85
                                        #   Parent Loop BB56_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB56_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB56_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB56_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_31
.LBB56_34:                              # %for.end
                                        #   in Loop: Header=BB56_29 Depth=1
	jmp	.LBB56_35
.LBB56_35:                              # %for.inc125
                                        #   in Loop: Header=BB56_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_29
.LBB56_36:                              # %for.end127
	jmp	.LBB56_57
.LBB56_37:                              # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB56_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_39:                              # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB56_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_41:                              # %for.cond135
                                        #   Parent Loop BB56_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB56_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB56_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB56_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_41
.LBB56_44:                              # %for.end161
                                        #   in Loop: Header=BB56_39 Depth=1
	jmp	.LBB56_45
.LBB56_45:                              # %for.inc162
                                        #   in Loop: Header=BB56_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_39
.LBB56_46:                              # %for.end164
	jmp	.LBB56_56
.LBB56_47:                              # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_48:                              # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB56_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_50:                              # %for.cond170
                                        #   Parent Loop BB56_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB56_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB56_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB56_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_50
.LBB56_53:                              # %for.end196
                                        #   in Loop: Header=BB56_48 Depth=1
	jmp	.LBB56_54
.LBB56_54:                              # %for.inc197
                                        #   in Loop: Header=BB56_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_48
.LBB56_55:                              # %for.end199
	jmp	.LBB56_56
.LBB56_56:                              # %if.end200
	jmp	.LBB56_57
.LBB56_57:                              # %if.end201
	jmp	.LBB56_89
.LBB56_58:                              # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB56_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_60:                              # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB56_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_62:                              # %for.cond210
                                        #   Parent Loop BB56_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB56_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB56_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB56_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_62
.LBB56_65:                              # %for.end226
                                        #   in Loop: Header=BB56_60 Depth=1
	jmp	.LBB56_66
.LBB56_66:                              # %for.inc227
                                        #   in Loop: Header=BB56_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_60
.LBB56_67:                              # %for.end229
	jmp	.LBB56_88
.LBB56_68:                              # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB56_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_70:                              # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB56_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_72:                              # %for.cond238
                                        #   Parent Loop BB56_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB56_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB56_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB56_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_72
.LBB56_75:                              # %for.end251
                                        #   in Loop: Header=BB56_70 Depth=1
	jmp	.LBB56_76
.LBB56_76:                              # %for.inc252
                                        #   in Loop: Header=BB56_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_70
.LBB56_77:                              # %for.end254
	jmp	.LBB56_87
.LBB56_78:                              # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_79:                              # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB56_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_81:                              # %for.cond260
                                        #   Parent Loop BB56_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB56_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB56_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB56_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_81
.LBB56_84:                              # %for.end273
                                        #   in Loop: Header=BB56_79 Depth=1
	jmp	.LBB56_85
.LBB56_85:                              # %for.inc274
                                        #   in Loop: Header=BB56_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_79
.LBB56_86:                              # %for.end276
	jmp	.LBB56_87
.LBB56_87:                              # %if.end277
	jmp	.LBB56_88
.LBB56_88:                              # %if.end278
	jmp	.LBB56_89
.LBB56_89:                              # %if.end279
	cmpl	$931074019, -104(%rbp)  # imm = 0x377F0FE3
	jne	.LBB56_91
.LBB56_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_91:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_90
.Lfunc_end56:
	.size	LumaPrediction4x4.15, .Lfunc_end56-LumaPrediction4x4.15
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.16  # -- Begin function ChromaPrediction4x4.16
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.16,@function
ChromaPrediction4x4.16:                 # @ChromaPrediction4x4.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$171552562, -72(%rbp)   # imm = 0xA39AF32
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB57_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB57_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB57_6
.LBB57_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB57_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB57_5:                               # %land.end
.LBB57_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB57_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB57_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB57_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB57_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB57_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB57_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB57_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB57_15
.LBB57_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB57_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB57_16:                              # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB57_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB57_87
.LBB57_18:                              # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB57_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB57_21
.LBB57_20:                              # %if.then36
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB57_21:                              # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB57_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB57_24
.LBB57_23:                              # %if.then43
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB57_24:                              # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB57_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB57_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB57_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB57_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB57_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_29:                              # %for.cond52
                                        #   Parent Loop BB57_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB57_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB57_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB57_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_29
.LBB57_32:                              # %for.end
                                        #   in Loop: Header=BB57_27 Depth=1
	jmp	.LBB57_33
.LBB57_33:                              # %for.inc99
                                        #   in Loop: Header=BB57_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_27
.LBB57_34:                              # %for.end101
	jmp	.LBB57_55
.LBB57_35:                              # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB57_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB57_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB57_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB57_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_39:                              # %for.cond109
                                        #   Parent Loop BB57_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB57_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB57_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB57_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_39
.LBB57_42:                              # %for.end139
                                        #   in Loop: Header=BB57_37 Depth=1
	jmp	.LBB57_43
.LBB57_43:                              # %for.inc140
                                        #   in Loop: Header=BB57_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_37
.LBB57_44:                              # %for.end142
	jmp	.LBB57_54
.LBB57_45:                              # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB57_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB57_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB57_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_48:                              # %for.cond148
                                        #   Parent Loop BB57_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB57_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB57_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB57_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_48
.LBB57_51:                              # %for.end178
                                        #   in Loop: Header=BB57_46 Depth=1
	jmp	.LBB57_52
.LBB57_52:                              # %for.inc179
                                        #   in Loop: Header=BB57_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_46
.LBB57_53:                              # %for.end181
	jmp	.LBB57_54
.LBB57_54:                              # %if.end182
	jmp	.LBB57_55
.LBB57_55:                              # %if.end183
	jmp	.LBB57_87
.LBB57_56:                              # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB57_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB57_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB57_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB57_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_60:                              # %for.cond192
                                        #   Parent Loop BB57_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB57_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB57_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB57_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_60
.LBB57_63:                              # %for.end208
                                        #   in Loop: Header=BB57_58 Depth=1
	jmp	.LBB57_64
.LBB57_64:                              # %for.inc209
                                        #   in Loop: Header=BB57_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_58
.LBB57_65:                              # %for.end211
	jmp	.LBB57_86
.LBB57_66:                              # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB57_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB57_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB57_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB57_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_70:                              # %for.cond220
                                        #   Parent Loop BB57_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB57_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB57_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB57_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_70
.LBB57_73:                              # %for.end233
                                        #   in Loop: Header=BB57_68 Depth=1
	jmp	.LBB57_74
.LBB57_74:                              # %for.inc234
                                        #   in Loop: Header=BB57_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_68
.LBB57_75:                              # %for.end236
	jmp	.LBB57_85
.LBB57_76:                              # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB57_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB57_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB57_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB57_79:                              # %for.cond242
                                        #   Parent Loop BB57_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB57_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB57_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB57_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_79
.LBB57_82:                              # %for.end255
                                        #   in Loop: Header=BB57_77 Depth=1
	jmp	.LBB57_83
.LBB57_83:                              # %for.inc256
                                        #   in Loop: Header=BB57_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_77
.LBB57_84:                              # %for.end258
	jmp	.LBB57_85
.LBB57_85:                              # %if.end259
	jmp	.LBB57_86
.LBB57_86:                              # %if.end260
	jmp	.LBB57_87
.LBB57_87:                              # %if.end261
	cmpl	$171552562, -72(%rbp)   # imm = 0xA39AF32
	jne	.LBB57_89
.LBB57_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_88
.Lfunc_end57:
	.size	ChromaPrediction4x4.16, .Lfunc_end57-ChromaPrediction4x4.16
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.17   # -- Begin function writeIntra4x4Modes.17
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.17,@function
writeIntra4x4Modes.17:                  # @writeIntra4x4Modes.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1283198970, -72(%rbp)  # imm = 0x4C7C0FFA
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB58_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_9 Depth 2
                                        #       Child Loop BB58_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB58_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB58_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB58_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB58_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB58_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB58_8
.LBB58_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB58_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB58_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB58_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB58_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB58_17
.LBB58_8:                               # %if.then
                                        #   in Loop: Header=BB58_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -32(%rbp)
.LBB58_9:                               # %for.cond24
                                        #   Parent Loop BB58_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB58_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB58_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB58_9 Depth=2
	movl	$0, -12(%rbp)
.LBB58_11:                              # %for.cond27
                                        #   Parent Loop BB58_1 Depth=1
                                        #     Parent Loop BB58_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB58_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB58_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB58_11 Depth=3
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_11
.LBB58_14:                              # %for.end
                                        #   in Loop: Header=BB58_9 Depth=2
	jmp	.LBB58_15
.LBB58_15:                              # %for.inc42
                                        #   in Loop: Header=BB58_9 Depth=2
	movl	-68(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB58_9
.LBB58_16:                              # %for.end44
                                        #   in Loop: Header=BB58_1 Depth=1
	jmp	.LBB58_17
.LBB58_17:                              # %if.end
                                        #   in Loop: Header=BB58_1 Depth=1
	jmp	.LBB58_18
.LBB58_18:                              # %for.inc45
                                        #   in Loop: Header=BB58_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_1
.LBB58_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB58_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB58_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB58_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB58_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB58_23:                              # %if.end57
                                        #   in Loop: Header=BB58_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB58_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB58_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB58_26
.LBB58_25:                              # %if.else
                                        #   in Loop: Header=BB58_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB58_26:                              # %if.end65
                                        #   in Loop: Header=BB58_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB58_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_20
.LBB58_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1283198970, -72(%rbp)  # imm = 0x4C7C0FFA
	jne	.LBB58_30
.LBB58_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_29
.Lfunc_end58:
	.size	writeIntra4x4Modes.17, .Lfunc_end58-writeIntra4x4Modes.17
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.18 # -- Begin function write_one_macroblock.18
	.p2align	4, 0x90
	.type	write_one_macroblock.18,@function
write_one_macroblock.18:                # @write_one_macroblock.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$784286853, -32(%rbp)   # imm = 0x2EBF4485
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB59_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB59_2:                               # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB59_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB59_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB59_6
.LBB59_5:                               # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB59_6:                               # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB59_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB59_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB59_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB59_10:                              # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB59_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB59_22
.LBB59_13:                              # %if.then22
	movl	$0, -24(%rbp)
.LBB59_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB59_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB59_14 Depth=1
	movl	$0, -20(%rbp)
.LBB59_16:                              # %for.cond24
                                        #   Parent Loop BB59_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB59_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB59_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB59_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB59_16
.LBB59_19:                              # %for.end
                                        #   in Loop: Header=BB59_14 Depth=1
	jmp	.LBB59_20
.LBB59_20:                              # %for.inc35
                                        #   in Loop: Header=BB59_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB59_14
.LBB59_21:                              # %for.end37
	jmp	.LBB59_22
.LBB59_22:                              # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB59_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB59_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB59_30
.LBB59_25:                              # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB59_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB59_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB59_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB59_29:                              # %if.end59
	jmp	.LBB59_30
.LBB59_30:                              # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB59_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB59_32:                              # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$784286853, -32(%rbp)   # imm = 0x2EBF4485
	jne	.LBB59_34
.LBB59_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_34:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_33
.Lfunc_end59:
	.size	write_one_macroblock.18, .Lfunc_end59-write_one_macroblock.18
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.19 # -- Begin function LumaResidualCoding8x8.19
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.19,@function
LumaResidualCoding8x8.19:               # @LumaResidualCoding8x8.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$268870917, -116(%rbp)  # imm = 0x1006A505
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -36(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -84(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -28(%rbp)
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-36(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -128(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB60_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -84(%rbp)
	jne	.LBB60_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB60_3:                               # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_5
# %bb.4:                                # %if.then
	movl	$1, -128(%rbp)
.LBB60_5:                               # %if.end
	movl	$0, -60(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB60_6:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_8 Depth 2
                                        #       Child Loop BB60_11 Depth 3
                                        #         Child Loop BB60_13 Depth 4
                                        #       Child Loop BB60_19 Depth 3
                                        #         Child Loop BB60_21 Depth 4
                                        #       Child Loop BB60_29 Depth 3
                                        #         Child Loop BB60_31 Depth 4
                                        #       Child Loop BB60_40 Depth 3
                                        #         Child Loop BB60_42 Depth 4
                                        #       Child Loop BB60_57 Depth 3
                                        #         Child Loop BB60_59 Depth 4
                                        #       Child Loop BB60_67 Depth 3
                                        #         Child Loop BB60_69 Depth 4
                                        #       Child Loop BB60_84 Depth 3
                                        #         Child Loop BB60_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB60_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -80(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB60_8:                               # %for.cond9
                                        #   Parent Loop BB60_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_11 Depth 3
                                        #         Child Loop BB60_13 Depth 4
                                        #       Child Loop BB60_19 Depth 3
                                        #         Child Loop BB60_21 Depth 4
                                        #       Child Loop BB60_29 Depth 3
                                        #         Child Loop BB60_31 Depth 4
                                        #       Child Loop BB60_40 Depth 3
                                        #         Child Loop BB60_42 Depth 4
                                        #       Child Loop BB60_57 Depth 3
                                        #         Child Loop BB60_59 Depth 4
                                        #       Child Loop BB60_67 Depth 3
                                        #         Child Loop BB60_69 Depth 4
                                        #       Child Loop BB60_84 Depth 3
                                        #         Child Loop BB60_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB60_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB60_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-84(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB60_11:                              # %for.cond16
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB60_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB60_11 Depth=3
	movl	$0, -12(%rbp)
.LBB60_13:                              # %for.cond20
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        #       Parent Loop BB60_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB60_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB60_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_13
.LBB60_16:                              # %for.end
                                        #   in Loop: Header=BB60_11 Depth=3
	jmp	.LBB60_17
.LBB60_17:                              # %for.inc37
                                        #   in Loop: Header=BB60_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_11
.LBB60_18:                              # %for.end39
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-84(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB60_19:                              # %for.cond41
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB60_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB60_19 Depth=3
	movl	$0, -12(%rbp)
.LBB60_21:                              # %for.cond45
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        #       Parent Loop BB60_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB60_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB60_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_21
.LBB60_24:                              # %for.end65
                                        #   in Loop: Header=BB60_19 Depth=3
	jmp	.LBB60_25
.LBB60_25:                              # %for.inc66
                                        #   in Loop: Header=BB60_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_19
.LBB60_26:                              # %for.end68
                                        #   in Loop: Header=BB60_8 Depth=2
	jmp	.LBB60_27
.LBB60_27:                              # %if.end69
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-64(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB60_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	$0, -16(%rbp)
.LBB60_29:                              # %for.cond74
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB60_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB60_29 Depth=3
	movl	$0, -12(%rbp)
.LBB60_31:                              # %for.cond78
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        #       Parent Loop BB60_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB60_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB60_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_31
.LBB60_34:                              # %for.end98
                                        #   in Loop: Header=BB60_29 Depth=3
	jmp	.LBB60_35
.LBB60_35:                              # %for.inc99
                                        #   in Loop: Header=BB60_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_29
.LBB60_36:                              # %for.end101
                                        #   in Loop: Header=BB60_8 Depth=2
	jmp	.LBB60_37
.LBB60_37:                              # %if.end102
                                        #   in Loop: Header=BB60_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB60_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB60_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB60_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	$0, -16(%rbp)
.LBB60_40:                              # %for.cond108
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB60_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB60_40 Depth=3
	movl	$0, -12(%rbp)
.LBB60_42:                              # %for.cond112
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        #       Parent Loop BB60_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB60_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB60_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_42
.LBB60_45:                              # %for.end137
                                        #   in Loop: Header=BB60_40 Depth=3
	jmp	.LBB60_46
.LBB60_46:                              # %for.inc138
                                        #   in Loop: Header=BB60_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_40
.LBB60_47:                              # %for.end140
                                        #   in Loop: Header=BB60_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB60_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB60_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB60_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB60_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB60_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB60_52
.LBB60_51:                              # %if.else
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB60_52:                              # %if.end151
                                        #   in Loop: Header=BB60_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB60_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB60_54:                              # %if.end157
                                        #   in Loop: Header=BB60_8 Depth=2
	jmp	.LBB60_55
.LBB60_55:                              # %if.end158
                                        #   in Loop: Header=BB60_8 Depth=2
	jmp	.LBB60_65
.LBB60_56:                              # %if.else159
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	$0, -16(%rbp)
.LBB60_57:                              # %for.cond160
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB60_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB60_57 Depth=3
	movl	$0, -12(%rbp)
.LBB60_59:                              # %for.cond164
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        #       Parent Loop BB60_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB60_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB60_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_59
.LBB60_62:                              # %for.end193
                                        #   in Loop: Header=BB60_57 Depth=3
	jmp	.LBB60_63
.LBB60_63:                              # %for.inc194
                                        #   in Loop: Header=BB60_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_57
.LBB60_64:                              # %for.end196
                                        #   in Loop: Header=BB60_8 Depth=2
	jmp	.LBB60_65
.LBB60_65:                              # %if.end197
                                        #   in Loop: Header=BB60_8 Depth=2
	jmp	.LBB60_95
.LBB60_66:                              # %if.else198
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	$0, -16(%rbp)
.LBB60_67:                              # %for.cond199
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB60_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB60_67 Depth=3
	movl	$0, -12(%rbp)
.LBB60_69:                              # %for.cond203
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        #       Parent Loop BB60_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB60_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-120(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -72(%rbp)
	jne	.LBB60_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB60_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB60_73
.LBB60_72:                              # %if.else300
                                        #   in Loop: Header=BB60_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB60_73:                              # %if.end314
                                        #   in Loop: Header=BB60_69 Depth=4
	jmp	.LBB60_74
.LBB60_74:                              # %for.inc315
                                        #   in Loop: Header=BB60_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_69
.LBB60_75:                              # %for.end317
                                        #   in Loop: Header=BB60_67 Depth=3
	jmp	.LBB60_76
.LBB60_76:                              # %for.inc318
                                        #   in Loop: Header=BB60_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_67
.LBB60_77:                              # %for.end320
                                        #   in Loop: Header=BB60_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB60_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB60_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB60_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB60_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB60_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB60_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB60_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -32(%rbp)
	jmp	.LBB60_83
.LBB60_82:                              # %if.else334
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -32(%rbp)
.LBB60_83:                              # %if.end336
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	$0, -16(%rbp)
.LBB60_84:                              # %for.cond337
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB60_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB60_84 Depth=3
	movl	$0, -12(%rbp)
.LBB60_86:                              # %for.cond341
                                        #   Parent Loop BB60_6 Depth=1
                                        #     Parent Loop BB60_8 Depth=2
                                        #       Parent Loop BB60_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB60_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB60_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB60_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_86
.LBB60_89:                              # %for.end358
                                        #   in Loop: Header=BB60_84 Depth=3
	jmp	.LBB60_90
.LBB60_90:                              # %for.inc359
                                        #   in Loop: Header=BB60_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_84
.LBB60_91:                              # %for.end361
                                        #   in Loop: Header=BB60_8 Depth=2
	cmpl	$0, -32(%rbp)
	je	.LBB60_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB60_93:                              # %if.end368
                                        #   in Loop: Header=BB60_8 Depth=2
	jmp	.LBB60_94
.LBB60_94:                              # %if.end369
                                        #   in Loop: Header=BB60_8 Depth=2
	jmp	.LBB60_95
.LBB60_95:                              # %if.end370
                                        #   in Loop: Header=BB60_8 Depth=2
	jmp	.LBB60_96
.LBB60_96:                              # %for.inc371
                                        #   in Loop: Header=BB60_8 Depth=2
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB60_8
.LBB60_97:                              # %for.end374
                                        #   in Loop: Header=BB60_6 Depth=1
	jmp	.LBB60_98
.LBB60_98:                              # %for.inc375
                                        #   in Loop: Header=BB60_6 Depth=1
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB60_6
.LBB60_99:                              # %for.end378
	cmpl	$0, -72(%rbp)
	je	.LBB60_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB60_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -76(%rbp)
	jne	.LBB60_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB60_104
# %bb.103:                              # %if.then390
	movl	-36(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -32(%rbp)
.LBB60_104:                             # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB60_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB60_106:                             # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB60_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB60_106 Depth=1
	movl	$0, -12(%rbp)
.LBB60_108:                             # %for.cond400
                                        #   Parent Loop BB60_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB60_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB60_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB60_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_108
.LBB60_111:                             # %for.end417
                                        #   in Loop: Header=BB60_106 Depth=1
	jmp	.LBB60_112
.LBB60_112:                             # %for.inc418
                                        #   in Loop: Header=BB60_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_106
.LBB60_113:                             # %for.end420
	jmp	.LBB60_114
.LBB60_114:                             # %if.end421
	cmpl	$0, -32(%rbp)
	je	.LBB60_116
# %bb.115:                              # %if.then423
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB60_116:                             # %if.end431
	jmp	.LBB60_117
.LBB60_117:                             # %if.end432
	jmp	.LBB60_118
.LBB60_118:                             # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB60_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -76(%rbp)
	jne	.LBB60_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB60_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB60_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB60_145
.LBB60_123:                             # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-68(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-36(%rbp), %ecx
	shll	$2, %ecx
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_124:                             # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB60_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_126:                             # %for.cond462
                                        #   Parent Loop BB60_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB60_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB60_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB60_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB60_130
.LBB60_129:                             # %if.else481
                                        #   in Loop: Header=BB60_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB60_130:                             # %if.end486
                                        #   in Loop: Header=BB60_126 Depth=2
	jmp	.LBB60_131
.LBB60_131:                             # %for.inc487
                                        #   in Loop: Header=BB60_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_126
.LBB60_132:                             # %for.end489
                                        #   in Loop: Header=BB60_124 Depth=1
	jmp	.LBB60_133
.LBB60_133:                             # %for.inc490
                                        #   in Loop: Header=BB60_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_124
.LBB60_134:                             # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB60_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_136:                             # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB60_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_138:                             # %for.cond502
                                        #   Parent Loop BB60_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB60_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB60_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_138
.LBB60_141:                             # %for.end509
                                        #   in Loop: Header=BB60_136 Depth=1
	jmp	.LBB60_142
.LBB60_142:                             # %for.inc510
                                        #   in Loop: Header=BB60_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_136
.LBB60_143:                             # %for.end512
	jmp	.LBB60_144
.LBB60_144:                             # %if.end513
	jmp	.LBB60_145
.LBB60_145:                             # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$268870917, -116(%rbp)  # imm = 0x1006A505
	jne	.LBB60_147
.LBB60_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_147:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_146
.Lfunc_end60:
	.size	LumaResidualCoding8x8.19, .Lfunc_end60-LumaResidualCoding8x8.19
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.20     # -- Begin function start_macroblock.20
	.p2align	4, 0x90
	.type	start_macroblock.20,@function
start_macroblock.20:                    # @start_macroblock.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1114417094, -88(%rbp)  # imm = 0x426CA7C6
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB61_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB61_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB61_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB61_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB61_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB61_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB61_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB61_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB61_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB61_8:                               # %if.end
                                        #   in Loop: Header=BB61_5 Depth=1
	jmp	.LBB61_9
.LBB61_9:                               # %for.inc
                                        #   in Loop: Header=BB61_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_5
.LBB61_10:                              # %for.end
	jmp	.LBB61_11
.LBB61_11:                              # %if.end19
	jmp	.LBB61_12
.LBB61_12:                              # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB61_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB61_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB61_16
.LBB61_15:                              # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB61_16:                              # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB61_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB61_97
.LBB61_18:                              # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB61_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB61_21
.LBB61_20:                              # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB61_96
.LBB61_21:                              # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB61_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB61_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB61_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB61_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB61_34
.LBB61_26:                              # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB61_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB61_32
.LBB61_28:                              # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB61_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB61_31
.LBB61_30:                              # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB61_31:                              # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB61_33
.LBB61_32:                              # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB61_33:                              # %if.end112
	jmp	.LBB61_34
.LBB61_34:                              # %if.end113
	jmp	.LBB61_39
.LBB61_35:                              # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB61_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB61_38
.LBB61_37:                              # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB61_38:                              # %if.end125
	jmp	.LBB61_39
.LBB61_39:                              # %if.end126
	jmp	.LBB61_47
.LBB61_40:                              # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB61_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB61_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB61_44
.LBB61_43:                              # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB61_44:                              # %if.end140
	jmp	.LBB61_46
.LBB61_45:                              # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB61_46:                              # %if.end145
	jmp	.LBB61_47
.LBB61_47:                              # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB61_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB61_93
.LBB61_49:                              # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB61_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB61_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB61_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB61_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB61_74
.LBB61_54:                              # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB61_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB61_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB61_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB61_73
.LBB61_58:                              # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB61_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB61_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB61_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB61_72
.LBB61_62:                              # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB61_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB61_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB61_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB61_71
.LBB61_66:                              # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB61_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB61_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB61_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB61_70:                              # %if.end223
	jmp	.LBB61_71
.LBB61_71:                              # %if.end224
	jmp	.LBB61_72
.LBB61_72:                              # %if.end225
	jmp	.LBB61_73
.LBB61_73:                              # %if.end226
	jmp	.LBB61_74
.LBB61_74:                              # %if.end227
	jmp	.LBB61_75
.LBB61_75:                              # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB61_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB61_77:                              # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB61_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB61_82
.LBB61_79:                              # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB61_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB61_81:                              # %if.end256
	jmp	.LBB61_82
.LBB61_82:                              # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB61_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB61_88
.LBB61_84:                              # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB61_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB61_87
.LBB61_86:                              # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB61_87:                              # %if.end292
	jmp	.LBB61_88
.LBB61_88:                              # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB61_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB61_90:                              # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB61_92
.LBB61_91:                              # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB61_92:                              # %if.end305
	jmp	.LBB61_94
.LBB61_93:                              # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB61_94:                              # %if.end309
	jmp	.LBB61_95
.LBB61_95:                              # %if.end310
	jmp	.LBB61_96
.LBB61_96:                              # %if.end311
	jmp	.LBB61_97
.LBB61_97:                              # %if.end312
	jmp	.LBB61_102
.LBB61_98:                              # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB61_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB61_101
.LBB61_100:                             # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB61_101:                             # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB61_102:                             # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB61_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB61_105
.LBB61_104:                             # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB61_105:                             # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB61_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB61_107:                             # %if.end359
	movl	$0, -20(%rbp)
.LBB61_108:                             # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_110 Depth 2
                                        #       Child Loop BB61_112 Depth 3
                                        #         Child Loop BB61_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB61_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB61_108 Depth=1
	movl	$0, -16(%rbp)
.LBB61_110:                             # %for.cond364
                                        #   Parent Loop BB61_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_112 Depth 3
                                        #         Child Loop BB61_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB61_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB61_110 Depth=2
	movl	$0, -12(%rbp)
.LBB61_112:                             # %for.cond368
                                        #   Parent Loop BB61_108 Depth=1
                                        #     Parent Loop BB61_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB61_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB61_112 Depth=3
	movl	$0, -36(%rbp)
.LBB61_114:                             # %for.cond372
                                        #   Parent Loop BB61_108 Depth=1
                                        #     Parent Loop BB61_110 Depth=2
                                        #       Parent Loop BB61_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB61_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB61_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB61_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB61_114
.LBB61_117:                             # %for.end388
                                        #   in Loop: Header=BB61_112 Depth=3
	jmp	.LBB61_118
.LBB61_118:                             # %for.inc389
                                        #   in Loop: Header=BB61_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_112
.LBB61_119:                             # %for.end391
                                        #   in Loop: Header=BB61_110 Depth=2
	jmp	.LBB61_120
.LBB61_120:                             # %for.inc392
                                        #   in Loop: Header=BB61_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_110
.LBB61_121:                             # %for.end394
                                        #   in Loop: Header=BB61_108 Depth=1
	jmp	.LBB61_122
.LBB61_122:                             # %for.inc395
                                        #   in Loop: Header=BB61_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_108
.LBB61_123:                             # %for.end397
	movl	$0, -16(%rbp)
.LBB61_124:                             # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_126 Depth 2
                                        #       Child Loop BB61_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB61_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB61_124 Depth=1
	movl	$0, -12(%rbp)
.LBB61_126:                             # %for.cond402
                                        #   Parent Loop BB61_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB61_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB61_126 Depth=2
	movl	$0, -20(%rbp)
.LBB61_128:                             # %for.cond406
                                        #   Parent Loop BB61_124 Depth=1
                                        #     Parent Loop BB61_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB61_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB61_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB61_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_128
.LBB61_131:                             # %for.end432
                                        #   in Loop: Header=BB61_126 Depth=2
	jmp	.LBB61_132
.LBB61_132:                             # %for.inc433
                                        #   in Loop: Header=BB61_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_126
.LBB61_133:                             # %for.end435
                                        #   in Loop: Header=BB61_124 Depth=1
	jmp	.LBB61_134
.LBB61_134:                             # %for.inc436
                                        #   in Loop: Header=BB61_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_124
.LBB61_135:                             # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB61_136:                             # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_138 Depth 2
                                        #       Child Loop BB61_140 Depth 3
                                        #         Child Loop BB61_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB61_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB61_136 Depth=1
	movl	$0, -16(%rbp)
.LBB61_138:                             # %for.cond443
                                        #   Parent Loop BB61_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB61_140 Depth 3
                                        #         Child Loop BB61_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB61_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB61_138 Depth=2
	movl	$0, -12(%rbp)
.LBB61_140:                             # %for.cond447
                                        #   Parent Loop BB61_136 Depth=1
                                        #     Parent Loop BB61_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB61_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB61_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB61_140 Depth=3
	movl	$0, -36(%rbp)
.LBB61_142:                             # %for.cond451
                                        #   Parent Loop BB61_136 Depth=1
                                        #     Parent Loop BB61_138 Depth=2
                                        #       Parent Loop BB61_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB61_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB61_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB61_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB61_142
.LBB61_145:                             # %for.end465
                                        #   in Loop: Header=BB61_140 Depth=3
	jmp	.LBB61_146
.LBB61_146:                             # %for.inc466
                                        #   in Loop: Header=BB61_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_140
.LBB61_147:                             # %for.end468
                                        #   in Loop: Header=BB61_138 Depth=2
	jmp	.LBB61_148
.LBB61_148:                             # %for.inc469
                                        #   in Loop: Header=BB61_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB61_138
.LBB61_149:                             # %for.end471
                                        #   in Loop: Header=BB61_136 Depth=1
	jmp	.LBB61_150
.LBB61_150:                             # %for.inc472
                                        #   in Loop: Header=BB61_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB61_136
.LBB61_151:                             # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB61_152:                             # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB61_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB61_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB61_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_152
.LBB61_155:                             # %for.end483
	movl	$0, -12(%rbp)
.LBB61_156:                             # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB61_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB61_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB61_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_156
.LBB61_159:                             # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB61_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB61_161:                             # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB61_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB61_166
.LBB61_163:                             # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB61_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB61_165:                             # %if.end520
	jmp	.LBB61_166
.LBB61_166:                             # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB61_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB61_168:                             # %if.end536
	cmpl	$1114417094, -88(%rbp)  # imm = 0x426CA7C6
	jne	.LBB61_170
.LBB61_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_170:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_169
.Lfunc_end61:
	.size	start_macroblock.20, .Lfunc_end61-start_macroblock.20
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.21          # -- Begin function predict_nnz.21
	.p2align	4, 0x90
	.type	predict_nnz.21,@function
predict_nnz.21:                         # @predict_nnz.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1904967166, -56(%rbp)  # imm = 0x718B7DFE
	movl	%edi, -48(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB62_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB62_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB62_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB62_4:                               # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB62_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB62_6:                               # %if.end14
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB62_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB62_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB62_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB62_10:                              # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB62_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB62_12:                              # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB62_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB62_14:                              # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1904967166, -56(%rbp)  # imm = 0x718B7DFE
	jne	.LBB62_16
.LBB62_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_16:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_15
.Lfunc_end62:
	.size	predict_nnz.21, .Lfunc_end62-predict_nnz.21
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.22 # -- Begin function IntraChromaPrediction4x4.22
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.22,@function
IntraChromaPrediction4x4.22:            # @IntraChromaPrediction4x4.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$500701279, -20(%rbp)   # imm = 0x1DD8185F
	movl	%edi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB63_3:                               # %for.cond1
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB63_3
.LBB63_6:                               # %for.end
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_7
.LBB63_7:                               # %for.inc17
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB63_1
.LBB63_8:                               # %for.end19
	cmpl	$500701279, -20(%rbp)   # imm = 0x1DD8185F
	jne	.LBB63_10
.LBB63_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_9
.Lfunc_end63:
	.size	IntraChromaPrediction4x4.22, .Lfunc_end63-IntraChromaPrediction4x4.22
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.23 # -- Begin function ChromaResidualCoding.23
	.p2align	4, 0x90
	.type	ChromaResidualCoding.23,@function
ChromaResidualCoding.23:                # @ChromaResidualCoding.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$229495562, -72(%rbp)   # imm = 0xDADD30A
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB64_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB64_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB64_3:                               # %lor.end
.LBB64_4:                               # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB64_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_7 Depth 2
                                        #       Child Loop BB64_9 Depth 3
                                        #     Child Loop BB64_16 Depth 2
                                        #       Child Loop BB64_18 Depth 3
                                        #     Child Loop BB64_33 Depth 2
                                        #       Child Loop BB64_35 Depth 3
                                        #     Child Loop BB64_43 Depth 2
                                        #       Child Loop BB64_45 Depth 3
                                        #     Child Loop BB64_58 Depth 2
                                        #       Child Loop BB64_60 Depth 3
                                        #     Child Loop BB64_87 Depth 2
                                        #       Child Loop BB64_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB64_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -16(%rbp)
.LBB64_7:                               # %for.cond5
                                        #   Parent Loop BB64_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB64_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB64_7 Depth=2
	movl	$0, -24(%rbp)
.LBB64_9:                               # %for.cond8
                                        #   Parent Loop BB64_5 Depth=1
                                        #     Parent Loop BB64_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB64_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB64_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB64_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB64_9
.LBB64_12:                              # %for.end
                                        #   in Loop: Header=BB64_7 Depth=2
	jmp	.LBB64_13
.LBB64_13:                              # %for.inc18
                                        #   in Loop: Header=BB64_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_7
.LBB64_14:                              # %for.end20
                                        #   in Loop: Header=BB64_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB64_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	$0, -8(%rbp)
.LBB64_16:                              # %for.cond21
                                        #   Parent Loop BB64_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB64_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB64_16 Depth=2
	movl	$0, -4(%rbp)
.LBB64_18:                              # %for.cond26
                                        #   Parent Loop BB64_5 Depth=1
                                        #     Parent Loop BB64_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB64_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB64_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB64_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB64_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB64_25
.LBB64_21:                              # %if.else
                                        #   in Loop: Header=BB64_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB64_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB64_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB64_24
.LBB64_23:                              # %if.else52
                                        #   in Loop: Header=BB64_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB64_24:                              # %if.end
                                        #   in Loop: Header=BB64_18 Depth=3
	jmp	.LBB64_25
.LBB64_25:                              # %if.end57
                                        #   in Loop: Header=BB64_18 Depth=3
	jmp	.LBB64_26
.LBB64_26:                              # %for.inc58
                                        #   in Loop: Header=BB64_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_18
.LBB64_27:                              # %for.end59
                                        #   in Loop: Header=BB64_16 Depth=2
	jmp	.LBB64_28
.LBB64_28:                              # %for.inc60
                                        #   in Loop: Header=BB64_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_16
.LBB64_29:                              # %for.end62
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_74
.LBB64_30:                              # %if.else63
                                        #   in Loop: Header=BB64_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB64_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB64_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB64_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	$0, -8(%rbp)
.LBB64_33:                              # %for.cond69
                                        #   Parent Loop BB64_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB64_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB64_33 Depth=2
	movl	$0, -4(%rbp)
.LBB64_35:                              # %for.cond73
                                        #   Parent Loop BB64_5 Depth=1
                                        #     Parent Loop BB64_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB64_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB64_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB64_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_35
.LBB64_38:                              # %for.end83
                                        #   in Loop: Header=BB64_33 Depth=2
	jmp	.LBB64_39
.LBB64_39:                              # %for.inc84
                                        #   in Loop: Header=BB64_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_33
.LBB64_40:                              # %for.end86
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_73
.LBB64_41:                              # %if.else87
                                        #   in Loop: Header=BB64_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB64_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	$0, -8(%rbp)
.LBB64_43:                              # %for.cond90
                                        #   Parent Loop BB64_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB64_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB64_43 Depth=2
	movl	$0, -4(%rbp)
.LBB64_45:                              # %for.cond95
                                        #   Parent Loop BB64_5 Depth=1
                                        #     Parent Loop BB64_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB64_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB64_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB64_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB64_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB64_52
.LBB64_48:                              # %if.else119
                                        #   in Loop: Header=BB64_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB64_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB64_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB64_51
.LBB64_50:                              # %if.else127
                                        #   in Loop: Header=BB64_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB64_51:                              # %if.end132
                                        #   in Loop: Header=BB64_45 Depth=3
	jmp	.LBB64_52
.LBB64_52:                              # %if.end133
                                        #   in Loop: Header=BB64_45 Depth=3
	jmp	.LBB64_53
.LBB64_53:                              # %for.inc134
                                        #   in Loop: Header=BB64_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_45
.LBB64_54:                              # %for.end136
                                        #   in Loop: Header=BB64_43 Depth=2
	jmp	.LBB64_55
.LBB64_55:                              # %for.inc137
                                        #   in Loop: Header=BB64_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_43
.LBB64_56:                              # %for.end139
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_72
.LBB64_57:                              # %if.else140
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	$0, -8(%rbp)
.LBB64_58:                              # %for.cond141
                                        #   Parent Loop BB64_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB64_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB64_58 Depth=2
	movl	$0, -4(%rbp)
.LBB64_60:                              # %for.cond146
                                        #   Parent Loop BB64_5 Depth=1
                                        #     Parent Loop BB64_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB64_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB64_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB64_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB64_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB64_67
.LBB64_63:                              # %if.else175
                                        #   in Loop: Header=BB64_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB64_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB64_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB64_66
.LBB64_65:                              # %if.else188
                                        #   in Loop: Header=BB64_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB64_66:                              # %if.end198
                                        #   in Loop: Header=BB64_60 Depth=3
	jmp	.LBB64_67
.LBB64_67:                              # %if.end199
                                        #   in Loop: Header=BB64_60 Depth=3
	jmp	.LBB64_68
.LBB64_68:                              # %for.inc200
                                        #   in Loop: Header=BB64_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_60
.LBB64_69:                              # %for.end202
                                        #   in Loop: Header=BB64_58 Depth=2
	jmp	.LBB64_70
.LBB64_70:                              # %for.inc203
                                        #   in Loop: Header=BB64_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_58
.LBB64_71:                              # %for.end205
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_72
.LBB64_72:                              # %if.end206
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_73
.LBB64_73:                              # %if.end207
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_74
.LBB64_74:                              # %if.end208
                                        #   in Loop: Header=BB64_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB64_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB64_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB64_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB64_100
.LBB64_77:                              # %if.else215
                                        #   in Loop: Header=BB64_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB64_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB64_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB64_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB64_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB64_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB64_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB64_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB64_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB64_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB64_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB64_84
.LBB64_83:                              # %if.then247
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB64_85
.LBB64_84:                              # %if.else249
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB64_85:                              # %if.end251
                                        #   in Loop: Header=BB64_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB64_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	$0, -8(%rbp)
.LBB64_87:                              # %for.cond255
                                        #   Parent Loop BB64_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB64_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB64_87 Depth=2
	movl	$0, -4(%rbp)
.LBB64_89:                              # %for.cond260
                                        #   Parent Loop BB64_5 Depth=1
                                        #     Parent Loop BB64_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB64_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB64_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB64_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB64_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB64_93
.LBB64_92:                              # %if.else277
                                        #   in Loop: Header=BB64_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB64_93:                              # %if.end287
                                        #   in Loop: Header=BB64_89 Depth=3
	jmp	.LBB64_94
.LBB64_94:                              # %for.inc288
                                        #   in Loop: Header=BB64_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_89
.LBB64_95:                              # %for.end290
                                        #   in Loop: Header=BB64_87 Depth=2
	jmp	.LBB64_96
.LBB64_96:                              # %for.inc291
                                        #   in Loop: Header=BB64_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_87
.LBB64_97:                              # %for.end293
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_98
.LBB64_98:                              # %if.end294
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_99
.LBB64_99:                              # %if.end295
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_100
.LBB64_100:                             # %if.end296
                                        #   in Loop: Header=BB64_5 Depth=1
	jmp	.LBB64_101
.LBB64_101:                             # %for.inc297
                                        #   in Loop: Header=BB64_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_5
.LBB64_102:                             # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB64_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB64_104:                             # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB64_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB64_104 Depth=1
	movl	$0, -4(%rbp)
.LBB64_106:                             # %for.cond312
                                        #   Parent Loop BB64_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB64_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-60(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB64_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB64_110
.LBB64_109:                             # %cond.false
                                        #   in Loop: Header=BB64_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB64_110:                             # %cond.end
                                        #   in Loop: Header=BB64_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB64_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB64_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB64_116
.LBB64_112:                             # %cond.false358
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB64_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB64_115
.LBB64_114:                             # %cond.false367
                                        #   in Loop: Header=BB64_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB64_115:                             # %cond.end373
                                        #   in Loop: Header=BB64_106 Depth=2
.LBB64_116:                             # %cond.end375
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB64_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB64_119
.LBB64_118:                             # %cond.false394
                                        #   in Loop: Header=BB64_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB64_119:                             # %cond.end400
                                        #   in Loop: Header=BB64_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB64_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB64_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB64_125
.LBB64_121:                             # %cond.false406
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB64_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB64_124
.LBB64_123:                             # %cond.false415
                                        #   in Loop: Header=BB64_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB64_124:                             # %cond.end421
                                        #   in Loop: Header=BB64_106 Depth=2
.LBB64_125:                             # %cond.end423
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB64_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB64_128
.LBB64_127:                             # %cond.false443
                                        #   in Loop: Header=BB64_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB64_128:                             # %cond.end449
                                        #   in Loop: Header=BB64_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB64_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB64_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB64_134
.LBB64_130:                             # %cond.false455
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB64_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB64_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB64_133
.LBB64_132:                             # %cond.false464
                                        #   in Loop: Header=BB64_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB64_133:                             # %cond.end470
                                        #   in Loop: Header=BB64_106 Depth=2
.LBB64_134:                             # %cond.end472
                                        #   in Loop: Header=BB64_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB64_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_106
.LBB64_136:                             # %for.end487
                                        #   in Loop: Header=BB64_104 Depth=1
	jmp	.LBB64_137
.LBB64_137:                             # %for.inc488
                                        #   in Loop: Header=BB64_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_104
.LBB64_138:                             # %for.end490
	jmp	.LBB64_139
.LBB64_139:                             # %if.end491
	cmpl	$229495562, -72(%rbp)   # imm = 0xDADD30A
	jne	.LBB64_141
.LBB64_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_140
.Lfunc_end64:
	.size	ChromaResidualCoding.23, .Lfunc_end64-ChromaResidualCoding.23
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.24    # -- Begin function TransformDecision.24
	.p2align	4, 0x90
	.type	TransformDecision.24,@function
TransformDecision.24:                   # @TransformDecision.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$386996950, -88(%rbp)   # imm = 0x17111AD6
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB65_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB65_3
.LBB65_2:                               # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB65_3:                               # %if.end
	jmp	.LBB65_4
.LBB65_4:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_6 Depth 2
                                        #       Child Loop BB65_8 Depth 3
                                        #         Child Loop BB65_10 Depth 4
                                        #           Child Loop BB65_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB65_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB65_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-84(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB65_6:                               # %for.cond3
                                        #   Parent Loop BB65_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_8 Depth 3
                                        #         Child Loop BB65_10 Depth 4
                                        #           Child Loop BB65_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB65_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_8:                               # %for.cond8
                                        #   Parent Loop BB65_4 Depth=1
                                        #     Parent Loop BB65_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_10 Depth 4
                                        #           Child Loop BB65_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB65_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-54(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB65_10:                              # %for.cond13
                                        #   Parent Loop BB65_4 Depth=1
                                        #     Parent Loop BB65_6 Depth=2
                                        #       Parent Loop BB65_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB65_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB65_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB65_10 Depth=4
	movl	$0, -28(%rbp)
.LBB65_12:                              # %for.cond17
                                        #   Parent Loop BB65_4 Depth=1
                                        #     Parent Loop BB65_6 Depth=2
                                        #       Parent Loop BB65_8 Depth=3
                                        #         Parent Loop BB65_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB65_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB65_12 Depth=5
	movq	imgY_org, %rax
	movl	-72(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-76(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB65_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB65_12
.LBB65_15:                              # %for.end
                                        #   in Loop: Header=BB65_10 Depth=4
	jmp	.LBB65_16
.LBB65_16:                              # %for.inc38
                                        #   in Loop: Header=BB65_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB65_10
.LBB65_17:                              # %for.end40
                                        #   in Loop: Header=BB65_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB65_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_8
.LBB65_19:                              # %for.end44
                                        #   in Loop: Header=BB65_6 Depth=2
	jmp	.LBB65_20
.LBB65_20:                              # %for.inc45
                                        #   in Loop: Header=BB65_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB65_6
.LBB65_21:                              # %for.end47
                                        #   in Loop: Header=BB65_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB65_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_4
.LBB65_23:                              # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB65_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB65_28
.LBB65_25:                              # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB65_28
.LBB65_27:                              # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB65_28:                              # %return
	movl	-48(%rbp), %ebx
	cmpl	$386996950, -88(%rbp)   # imm = 0x17111AD6
	jne	.LBB65_30
.LBB65_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_29
.Lfunc_end65:
	.size	TransformDecision.24, .Lfunc_end65-TransformDecision.24
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.25    # -- Begin function writeLumaCoeff8x8.25
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.25,@function
writeLumaCoeff8x8.25:                   # @writeLumaCoeff8x8.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2110258648, -36(%rbp)  # imm = 0x7DC7FDD8
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB66_2
# %bb.1:                                # %if.then
	jmp	.LBB66_2
.LBB66_2:                               # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB66_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB66_15
.LBB66_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB66_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB66_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB66_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB66_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB66_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB66_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB66_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB66_10
.LBB66_9:                               # %cond.false
                                        #   in Loop: Header=BB66_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB66_10:                              # %cond.end
                                        #   in Loop: Header=BB66_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_12
.LBB66_11:                              # %if.else
                                        #   in Loop: Header=BB66_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB66_12:                              # %if.end17
                                        #   in Loop: Header=BB66_5 Depth=1
	jmp	.LBB66_13
.LBB66_13:                              # %for.inc
                                        #   in Loop: Header=BB66_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB66_5
.LBB66_14:                              # %for.end
	jmp	.LBB66_19
.LBB66_15:                              # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB66_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB66_18
.LBB66_17:                              # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB66_18:                              # %if.end27
	jmp	.LBB66_19
.LBB66_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$2110258648, -36(%rbp)  # imm = 0x7DC7FDD8
	jne	.LBB66_21
.LBB66_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_20
.Lfunc_end66:
	.size	writeLumaCoeff8x8.25, .Lfunc_end66-writeLumaCoeff8x8.25
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.26 # -- Begin function writeCBPandLumaCoeff.26
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.26,@function
writeCBPandLumaCoeff.26:                # @writeCBPandLumaCoeff.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$984284002, -104(%rbp)  # imm = 0x3AAAFB62
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB67_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB67_7
.LBB67_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB67_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB67_10
.LBB67_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB67_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB67_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB67_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB67_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB67_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB67_18
.LBB67_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB67_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB67_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB67_18
.LBB67_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB67_22
.LBB67_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB67_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB67_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB67_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB67_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB67_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB67_26
.LBB67_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB67_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB67_29
.LBB67_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB67_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB67_30:                              # %if.end93
	jmp	.LBB67_31
.LBB67_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB67_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB67_42
.LBB67_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB67_36
.LBB67_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB67_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB67_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB67_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB67_41
.LBB67_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB67_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB67_42:                              # %if.end138
	movl	$0, -40(%rbp)
.LBB67_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB67_43 Depth=1
	movl	$0, -20(%rbp)
.LBB67_45:                              # %for.cond141
                                        #   Parent Loop BB67_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB67_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB67_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB67_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_45
.LBB67_48:                              # %for.end
                                        #   in Loop: Header=BB67_43 Depth=1
	jmp	.LBB67_49
.LBB67_49:                              # %for.inc152
                                        #   in Loop: Header=BB67_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB67_43
.LBB67_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB67_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB67_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB67_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB67_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB67_55:                              # %if.end169
                                        #   in Loop: Header=BB67_52 Depth=1
	jmp	.LBB67_56
.LBB67_56:                              # %for.inc170
                                        #   in Loop: Header=BB67_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_52
.LBB67_57:                              # %for.end172
	jmp	.LBB67_101
.LBB67_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_70
.LBB67_60:                              # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB67_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB67_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB67_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB67_63:                              # %land.end184
                                        #   in Loop: Header=BB67_61 Depth=1
	testb	$1, %al
	jne	.LBB67_64
	jmp	.LBB67_69
.LBB67_64:                              # %for.body186
                                        #   in Loop: Header=BB67_61 Depth=1
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB67_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB67_67
.LBB67_66:                              # %if.else196
                                        #   in Loop: Header=BB67_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB67_67:                              # %if.end198
                                        #   in Loop: Header=BB67_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB67_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB67_61
.LBB67_69:                              # %for.end218
	jmp	.LBB67_70
.LBB67_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB67_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB67_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_74 Depth 2
                                        #       Child Loop BB67_76 Depth 3
                                        #         Child Loop BB67_78 Depth 4
                                        #           Child Loop BB67_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB67_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	$0, -60(%rbp)
.LBB67_74:                              # %for.cond226
                                        #   Parent Loop BB67_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB67_76 Depth 3
                                        #         Child Loop BB67_78 Depth 4
                                        #           Child Loop BB67_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB67_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB67_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB67_76:                              # %for.cond229
                                        #   Parent Loop BB67_72 Depth=1
                                        #     Parent Loop BB67_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB67_78 Depth 4
                                        #           Child Loop BB67_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB67_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB67_78:                              # %for.cond233
                                        #   Parent Loop BB67_72 Depth=1
                                        #     Parent Loop BB67_74 Depth=2
                                        #       Parent Loop BB67_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB67_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB67_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB67_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB67_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB67_91
.LBB67_81:                              # %if.else247
                                        #   in Loop: Header=BB67_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB67_82:                              # %for.cond259
                                        #   Parent Loop BB67_72 Depth=1
                                        #     Parent Loop BB67_74 Depth=2
                                        #       Parent Loop BB67_76 Depth=3
                                        #         Parent Loop BB67_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB67_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB67_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB67_84:                              # %land.end263
                                        #   in Loop: Header=BB67_82 Depth=5
	testb	$1, %al
	jne	.LBB67_85
	jmp	.LBB67_90
.LBB67_85:                              # %for.body265
                                        #   in Loop: Header=BB67_82 Depth=5
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB67_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB67_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB67_88
.LBB67_87:                              # %if.else276
                                        #   in Loop: Header=BB67_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB67_88:                              # %if.end278
                                        #   in Loop: Header=BB67_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB67_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB67_82
.LBB67_90:                              # %for.end300
                                        #   in Loop: Header=BB67_78 Depth=4
	jmp	.LBB67_91
.LBB67_91:                              # %if.end301
                                        #   in Loop: Header=BB67_78 Depth=4
	jmp	.LBB67_92
.LBB67_92:                              # %for.inc302
                                        #   in Loop: Header=BB67_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB67_78
.LBB67_93:                              # %for.end304
                                        #   in Loop: Header=BB67_76 Depth=3
	jmp	.LBB67_94
.LBB67_94:                              # %for.inc305
                                        #   in Loop: Header=BB67_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB67_76
.LBB67_95:                              # %for.end307
                                        #   in Loop: Header=BB67_74 Depth=2
	jmp	.LBB67_96
.LBB67_96:                              # %for.inc308
                                        #   in Loop: Header=BB67_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB67_74
.LBB67_97:                              # %for.end310
                                        #   in Loop: Header=BB67_72 Depth=1
	jmp	.LBB67_98
.LBB67_98:                              # %for.inc311
                                        #   in Loop: Header=BB67_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB67_72
.LBB67_99:                              # %for.end313
	jmp	.LBB67_100
.LBB67_100:                             # %if.end314
	jmp	.LBB67_101
.LBB67_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$984284002, -104(%rbp)  # imm = 0x3AAAFB62
	jne	.LBB67_103
.LBB67_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_102
.Lfunc_end67:
	.size	writeCBPandLumaCoeff.26, .Lfunc_end67-writeCBPandLumaCoeff.26
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.27  # -- Begin function LumaPrediction4x4Bi.27
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.27,@function
LumaPrediction4x4Bi.27:                 # @LumaPrediction4x4Bi.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$41588739, -84(%rbp)    # imm = 0x27A9803
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB68_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB68_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB68_6
.LBB68_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB68_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB68_5:                               # %land.end
.LBB68_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB68_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB68_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB68_10
.LBB68_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB68_10
.LBB68_10:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB68_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB68_13
.LBB68_12:                              # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB68_13:                              # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB68_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB68_16
.LBB68_15:                              # %if.then
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB68_16:                              # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB68_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB68_19
.LBB68_18:                              # %if.then39
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB68_19:                              # %if.end52
	cmpl	$0, -80(%rbp)
	je	.LBB68_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB68_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_24:                              # %for.cond58
                                        #   Parent Loop BB68_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB68_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB68_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_24
.LBB68_27:                              # %for.end
                                        #   in Loop: Header=BB68_22 Depth=1
	jmp	.LBB68_28
.LBB68_28:                              # %for.inc96
                                        #   in Loop: Header=BB68_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_22
.LBB68_29:                              # %for.end98
	jmp	.LBB68_50
.LBB68_30:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB68_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_32:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_34:                              # %for.cond106
                                        #   Parent Loop BB68_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB68_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB68_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_34
.LBB68_37:                              # %for.end132
                                        #   in Loop: Header=BB68_32 Depth=1
	jmp	.LBB68_38
.LBB68_38:                              # %for.inc133
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_32
.LBB68_39:                              # %for.end135
	jmp	.LBB68_49
.LBB68_40:                              # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_41:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_43:                              # %for.cond141
                                        #   Parent Loop BB68_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB68_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB68_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_43
.LBB68_46:                              # %for.end167
                                        #   in Loop: Header=BB68_41 Depth=1
	jmp	.LBB68_47
.LBB68_47:                              # %for.inc168
                                        #   in Loop: Header=BB68_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_41
.LBB68_48:                              # %for.end170
	jmp	.LBB68_49
.LBB68_49:                              # %if.end171
	jmp	.LBB68_50
.LBB68_50:                              # %if.end172
	jmp	.LBB68_82
.LBB68_51:                              # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB68_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_53:                              # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB68_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_55:                              # %for.cond181
                                        #   Parent Loop BB68_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB68_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB68_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_55
.LBB68_58:                              # %for.end197
                                        #   in Loop: Header=BB68_53 Depth=1
	jmp	.LBB68_59
.LBB68_59:                              # %for.inc198
                                        #   in Loop: Header=BB68_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_53
.LBB68_60:                              # %for.end200
	jmp	.LBB68_81
.LBB68_61:                              # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB68_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_63:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB68_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_65:                              # %for.cond209
                                        #   Parent Loop BB68_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB68_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB68_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_65
.LBB68_68:                              # %for.end222
                                        #   in Loop: Header=BB68_63 Depth=1
	jmp	.LBB68_69
.LBB68_69:                              # %for.inc223
                                        #   in Loop: Header=BB68_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_63
.LBB68_70:                              # %for.end225
	jmp	.LBB68_80
.LBB68_71:                              # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_72:                              # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB68_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB68_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_74:                              # %for.cond231
                                        #   Parent Loop BB68_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB68_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB68_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB68_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_74
.LBB68_77:                              # %for.end244
                                        #   in Loop: Header=BB68_72 Depth=1
	jmp	.LBB68_78
.LBB68_78:                              # %for.inc245
                                        #   in Loop: Header=BB68_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_72
.LBB68_79:                              # %for.end247
	jmp	.LBB68_80
.LBB68_80:                              # %if.end248
	jmp	.LBB68_81
.LBB68_81:                              # %if.end249
	jmp	.LBB68_82
.LBB68_82:                              # %if.end250
	cmpl	$41588739, -84(%rbp)    # imm = 0x27A9803
	jne	.LBB68_84
.LBB68_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_83
.Lfunc_end68:
	.size	LumaPrediction4x4Bi.27, .Lfunc_end68-LumaPrediction4x4Bi.27
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.28 # -- Begin function writeMotionVector8x8.28
	.p2align	4, 0x90
	.type	writeMotionVector8x8.28,@function
writeMotionVector8x8.28:                # @writeMotionVector8x8.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$451209529, -100(%rbp)  # imm = 0x1AE4E939
	movl	%edi, -84(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -96(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -88(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -144(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB69_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB69_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB69_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB69_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB69_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB69_7
.LBB69_6:                               # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB69_7:                               # %cond.end
	movq	%rax, -120(%rbp)
.LBB69_8:                               # %if.end
	movl	-92(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB69_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_11 Depth 2
                                        #       Child Loop BB69_13 Depth 3
                                        #         Child Loop BB69_15 Depth 4
                                        #           Child Loop BB69_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB69_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB69_9 Depth=1
	movl	-84(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB69_11:                              # %for.cond22
                                        #   Parent Loop BB69_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_13 Depth 3
                                        #         Child Loop BB69_15 Depth 4
                                        #           Child Loop BB69_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB69_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB69_11 Depth=2
	movl	$0, -12(%rbp)
.LBB69_13:                              # %for.cond25
                                        #   Parent Loop BB69_9 Depth=1
                                        #     Parent Loop BB69_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_15 Depth 4
                                        #           Child Loop BB69_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB69_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB69_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -40(%rbp)
.LBB69_15:                              # %for.cond53
                                        #   Parent Loop BB69_9 Depth=1
                                        #     Parent Loop BB69_11 Depth=2
                                        #       Parent Loop BB69_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB69_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB69_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB69_15 Depth=4
	movl	$0, -44(%rbp)
.LBB69_17:                              # %for.cond57
                                        #   Parent Loop BB69_9 Depth=1
                                        #     Parent Loop BB69_11 Depth=2
                                        #       Parent Loop BB69_13 Depth=3
                                        #         Parent Loop BB69_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB69_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB69_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB69_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB69_17
.LBB69_20:                              # %for.end
                                        #   in Loop: Header=BB69_15 Depth=4
	jmp	.LBB69_21
.LBB69_21:                              # %for.inc70
                                        #   in Loop: Header=BB69_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB69_15
.LBB69_22:                              # %for.end72
                                        #   in Loop: Header=BB69_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB69_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB69_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB69_25
.LBB69_24:                              # %if.else
                                        #   in Loop: Header=BB69_13 Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB69_25:                              # %if.end78
                                        #   in Loop: Header=BB69_13 Depth=3
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-144(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB69_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_13
.LBB69_27:                              # %for.end90
                                        #   in Loop: Header=BB69_11 Depth=2
	jmp	.LBB69_28
.LBB69_28:                              # %for.inc91
                                        #   in Loop: Header=BB69_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB69_11
.LBB69_29:                              # %for.end93
                                        #   in Loop: Header=BB69_9 Depth=1
	jmp	.LBB69_30
.LBB69_30:                              # %for.inc94
                                        #   in Loop: Header=BB69_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_9
.LBB69_31:                              # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$451209529, -100(%rbp)  # imm = 0x1AE4E939
	jne	.LBB69_33
.LBB69_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_32
.Lfunc_end69:
	.size	writeMotionVector8x8.28, .Lfunc_end69-writeMotionVector8x8.28
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.29  # -- Begin function LumaPrediction4x4Bi.29
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.29,@function
LumaPrediction4x4Bi.29:                 # @LumaPrediction4x4Bi.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1294932731, -72(%rbp)  # imm = 0x4D2F1AFB
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -80(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB70_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB70_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB70_6
.LBB70_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB70_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB70_5:                               # %land.end
.LBB70_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB70_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB70_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB70_10
.LBB70_9:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB70_10
.LBB70_10:                              # %cond.end
	movl	%ecx, -56(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB70_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB70_13
.LBB70_12:                              # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB70_13:                              # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB70_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB70_16
.LBB70_15:                              # %if.then
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB70_16:                              # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB70_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB70_19
.LBB70_18:                              # %if.then39
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB70_19:                              # %if.end52
	cmpl	$0, -76(%rbp)
	je	.LBB70_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB70_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_22:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB70_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB70_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_24:                              # %for.cond58
                                        #   Parent Loop BB70_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB70_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB70_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB70_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_24
.LBB70_27:                              # %for.end
                                        #   in Loop: Header=BB70_22 Depth=1
	jmp	.LBB70_28
.LBB70_28:                              # %for.inc96
                                        #   in Loop: Header=BB70_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_22
.LBB70_29:                              # %for.end98
	jmp	.LBB70_50
.LBB70_30:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB70_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_32:                              # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB70_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB70_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_34:                              # %for.cond106
                                        #   Parent Loop BB70_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB70_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB70_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB70_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_34
.LBB70_37:                              # %for.end132
                                        #   in Loop: Header=BB70_32 Depth=1
	jmp	.LBB70_38
.LBB70_38:                              # %for.inc133
                                        #   in Loop: Header=BB70_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_32
.LBB70_39:                              # %for.end135
	jmp	.LBB70_49
.LBB70_40:                              # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_41:                              # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB70_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_43:                              # %for.cond141
                                        #   Parent Loop BB70_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB70_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB70_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB70_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_43
.LBB70_46:                              # %for.end167
                                        #   in Loop: Header=BB70_41 Depth=1
	jmp	.LBB70_47
.LBB70_47:                              # %for.inc168
                                        #   in Loop: Header=BB70_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_41
.LBB70_48:                              # %for.end170
	jmp	.LBB70_49
.LBB70_49:                              # %if.end171
	jmp	.LBB70_50
.LBB70_50:                              # %if.end172
	jmp	.LBB70_82
.LBB70_51:                              # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB70_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_53:                              # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB70_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB70_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_55:                              # %for.cond181
                                        #   Parent Loop BB70_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB70_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB70_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB70_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_55
.LBB70_58:                              # %for.end197
                                        #   in Loop: Header=BB70_53 Depth=1
	jmp	.LBB70_59
.LBB70_59:                              # %for.inc198
                                        #   in Loop: Header=BB70_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_53
.LBB70_60:                              # %for.end200
	jmp	.LBB70_81
.LBB70_61:                              # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB70_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_63:                              # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB70_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB70_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_65:                              # %for.cond209
                                        #   Parent Loop BB70_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB70_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB70_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB70_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_65
.LBB70_68:                              # %for.end222
                                        #   in Loop: Header=BB70_63 Depth=1
	jmp	.LBB70_69
.LBB70_69:                              # %for.inc223
                                        #   in Loop: Header=BB70_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_63
.LBB70_70:                              # %for.end225
	jmp	.LBB70_80
.LBB70_71:                              # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB70_72:                              # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB70_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB70_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB70_74:                              # %for.cond231
                                        #   Parent Loop BB70_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB70_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB70_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB70_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_74
.LBB70_77:                              # %for.end244
                                        #   in Loop: Header=BB70_72 Depth=1
	jmp	.LBB70_78
.LBB70_78:                              # %for.inc245
                                        #   in Loop: Header=BB70_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_72
.LBB70_79:                              # %for.end247
	jmp	.LBB70_80
.LBB70_80:                              # %if.end248
	jmp	.LBB70_81
.LBB70_81:                              # %if.end249
	jmp	.LBB70_82
.LBB70_82:                              # %if.end250
	cmpl	$1294932731, -72(%rbp)  # imm = 0x4D2F1AFB
	jne	.LBB70_84
.LBB70_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_84:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_83
.Lfunc_end70:
	.size	LumaPrediction4x4Bi.29, .Lfunc_end70-LumaPrediction4x4Bi.29
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.30 # -- Begin function writeCBPandLumaCoeff.30
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.30,@function
writeCBPandLumaCoeff.30:                # @writeCBPandLumaCoeff.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$495767196, -104(%rbp)  # imm = 0x1D8CCE9C
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB71_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB71_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB71_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB71_7
.LBB71_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB71_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB71_10
.LBB71_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB71_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB71_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB71_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB71_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB71_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB71_18
.LBB71_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB71_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB71_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB71_18
.LBB71_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB71_22
.LBB71_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB71_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB71_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB71_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB71_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB71_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB71_26
.LBB71_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB71_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB71_29
.LBB71_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB71_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB71_30:                              # %if.end93
	jmp	.LBB71_31
.LBB71_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB71_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB71_42
.LBB71_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB71_36
.LBB71_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB71_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB71_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB71_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB71_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB71_41
.LBB71_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB71_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB71_42:                              # %if.end138
	movl	$0, -36(%rbp)
.LBB71_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB71_43 Depth=1
	movl	$0, -20(%rbp)
.LBB71_45:                              # %for.cond141
                                        #   Parent Loop BB71_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB71_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB71_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB71_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_45
.LBB71_48:                              # %for.end
                                        #   in Loop: Header=BB71_43 Depth=1
	jmp	.LBB71_49
.LBB71_49:                              # %for.inc152
                                        #   in Loop: Header=BB71_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_43
.LBB71_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB71_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB71_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB71_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB71_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB71_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB71_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB71_55:                              # %if.end169
                                        #   in Loop: Header=BB71_52 Depth=1
	jmp	.LBB71_56
.LBB71_56:                              # %for.inc170
                                        #   in Loop: Header=BB71_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_52
.LBB71_57:                              # %for.end172
	jmp	.LBB71_101
.LBB71_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB71_70
.LBB71_60:                              # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB71_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB71_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB71_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB71_63:                              # %land.end184
                                        #   in Loop: Header=BB71_61 Depth=1
	testb	$1, %al
	jne	.LBB71_64
	jmp	.LBB71_69
.LBB71_64:                              # %for.body186
                                        #   in Loop: Header=BB71_61 Depth=1
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB71_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB71_67
.LBB71_66:                              # %if.else196
                                        #   in Loop: Header=BB71_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB71_67:                              # %if.end198
                                        #   in Loop: Header=BB71_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB71_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB71_61
.LBB71_69:                              # %for.end218
	jmp	.LBB71_70
.LBB71_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB71_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB71_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_74 Depth 2
                                        #       Child Loop BB71_76 Depth 3
                                        #         Child Loop BB71_78 Depth 4
                                        #           Child Loop BB71_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB71_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB71_72 Depth=1
	movl	$0, -52(%rbp)
.LBB71_74:                              # %for.cond226
                                        #   Parent Loop BB71_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB71_76 Depth 3
                                        #         Child Loop BB71_78 Depth 4
                                        #           Child Loop BB71_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB71_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB71_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB71_76:                              # %for.cond229
                                        #   Parent Loop BB71_72 Depth=1
                                        #     Parent Loop BB71_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB71_78 Depth 4
                                        #           Child Loop BB71_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB71_76 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB71_78:                              # %for.cond233
                                        #   Parent Loop BB71_72 Depth=1
                                        #     Parent Loop BB71_74 Depth=2
                                        #       Parent Loop BB71_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB71_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB71_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB71_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB71_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB71_91
.LBB71_81:                              # %if.else247
                                        #   in Loop: Header=BB71_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB71_82:                              # %for.cond259
                                        #   Parent Loop BB71_72 Depth=1
                                        #     Parent Loop BB71_74 Depth=2
                                        #       Parent Loop BB71_76 Depth=3
                                        #         Parent Loop BB71_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB71_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB71_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB71_84:                              # %land.end263
                                        #   in Loop: Header=BB71_82 Depth=5
	testb	$1, %al
	jne	.LBB71_85
	jmp	.LBB71_90
.LBB71_85:                              # %for.body265
                                        #   in Loop: Header=BB71_82 Depth=5
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB71_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB71_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB71_88
.LBB71_87:                              # %if.else276
                                        #   in Loop: Header=BB71_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB71_88:                              # %if.end278
                                        #   in Loop: Header=BB71_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB71_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB71_82
.LBB71_90:                              # %for.end300
                                        #   in Loop: Header=BB71_78 Depth=4
	jmp	.LBB71_91
.LBB71_91:                              # %if.end301
                                        #   in Loop: Header=BB71_78 Depth=4
	jmp	.LBB71_92
.LBB71_92:                              # %for.inc302
                                        #   in Loop: Header=BB71_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB71_78
.LBB71_93:                              # %for.end304
                                        #   in Loop: Header=BB71_76 Depth=3
	jmp	.LBB71_94
.LBB71_94:                              # %for.inc305
                                        #   in Loop: Header=BB71_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB71_76
.LBB71_95:                              # %for.end307
                                        #   in Loop: Header=BB71_74 Depth=2
	jmp	.LBB71_96
.LBB71_96:                              # %for.inc308
                                        #   in Loop: Header=BB71_74 Depth=2
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB71_74
.LBB71_97:                              # %for.end310
                                        #   in Loop: Header=BB71_72 Depth=1
	jmp	.LBB71_98
.LBB71_98:                              # %for.inc311
                                        #   in Loop: Header=BB71_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB71_72
.LBB71_99:                              # %for.end313
	jmp	.LBB71_100
.LBB71_100:                             # %if.end314
	jmp	.LBB71_101
.LBB71_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$495767196, -104(%rbp)  # imm = 0x1D8CCE9C
	jne	.LBB71_103
.LBB71_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_102
.Lfunc_end71:
	.size	writeCBPandLumaCoeff.30, .Lfunc_end71-writeCBPandLumaCoeff.30
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.31 # -- Begin function write_one_macroblock.31
	.p2align	4, 0x90
	.type	write_one_macroblock.31,@function
write_one_macroblock.31:                # @write_one_macroblock.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$509196491, -32(%rbp)   # imm = 0x1E59B8CB
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB72_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB72_2:                               # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB72_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB72_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB72_6
.LBB72_5:                               # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB72_6:                               # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB72_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB72_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB72_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB72_10:                              # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB72_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB72_22
.LBB72_13:                              # %if.then22
	movl	$0, -20(%rbp)
.LBB72_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB72_14 Depth=1
	movl	$0, -24(%rbp)
.LBB72_16:                              # %for.cond24
                                        #   Parent Loop BB72_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB72_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB72_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB72_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB72_16
.LBB72_19:                              # %for.end
                                        #   in Loop: Header=BB72_14 Depth=1
	jmp	.LBB72_20
.LBB72_20:                              # %for.inc35
                                        #   in Loop: Header=BB72_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB72_14
.LBB72_21:                              # %for.end37
	jmp	.LBB72_22
.LBB72_22:                              # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB72_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB72_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_30
.LBB72_25:                              # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB72_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB72_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB72_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB72_29:                              # %if.end59
	jmp	.LBB72_30
.LBB72_30:                              # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB72_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB72_32:                              # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$509196491, -32(%rbp)   # imm = 0x1E59B8CB
	jne	.LBB72_34
.LBB72_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_34:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_33
.Lfunc_end72:
	.size	write_one_macroblock.31, .Lfunc_end72-write_one_macroblock.31
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.32         # -- Begin function BType2CtxRef.32
	.p2align	4, 0x90
	.type	BType2CtxRef.32,@function
BType2CtxRef.32:                        # @BType2CtxRef.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$468217134, -20(%rbp)   # imm = 0x1BE86D2E
	movl	%edi, -16(%rbp)
	cmpl	$4, -16(%rbp)
	jge	.LBB73_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB73_3
.LBB73_2:                               # %if.else
	movl	$1, -12(%rbp)
.LBB73_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$468217134, -20(%rbp)   # imm = 0x1BE86D2E
	jne	.LBB73_5
.LBB73_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_4
.Lfunc_end73:
	.size	BType2CtxRef.32, .Lfunc_end73-BType2CtxRef.32
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.33         # -- Begin function writeMBLayer.33
	.p2align	4, 0x90
	.type	writeMBLayer.33,@function
writeMBLayer.33:                        # @writeMBLayer.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$2014484839, -96(%rbp)  # imm = 0x78129967
	movl	%edi, -100(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB74_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB74_3
.LBB74_2:                               # %cond.false
	xorl	%eax, %eax
	jmp	.LBB74_3
.LBB74_3:                               # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB74_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB74_9
.LBB74_5:                               # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB74_8
.LBB74_7:                               # %cond.false13
	movl	$1, %eax
	jmp	.LBB74_8
.LBB74_8:                               # %cond.end14
.LBB74_9:                               # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB74_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB74_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB74_24
.LBB74_12:                              # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB74_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB74_17
	jmp	.LBB74_18
.LBB74_14:                              # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB74_18
	jmp	.LBB74_17
.LBB74_16:                              # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB74_17
	jmp	.LBB74_18
.LBB74_17:                              # %if.then32
	movl	$1, -60(%rbp)
.LBB74_18:                              # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB74_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB74_23
.LBB74_20:                              # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB74_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB74_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB74_23:                              # %if.end50
	jmp	.LBB74_24
.LBB74_24:                              # %if.end51
	jmp	.LBB74_25
.LBB74_25:                              # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB74_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB74_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB74_28:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB74_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB74_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB74_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB74_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB74_35
.LBB74_34:                              # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB74_35:                              # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB74_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB74_38
.LBB74_37:                              # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB74_38:                              # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB74_39:                              # %if.end96
	jmp	.LBB74_40
.LBB74_40:                              # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB74_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB74_43
.LBB74_42:                              # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB74_43:                              # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB74_89
.LBB74_44:                              # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB74_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB74_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB74_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB74_49
.LBB74_48:                              # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB74_49:                              # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB74_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB74_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB74_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB74_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB74_55
.LBB74_54:                              # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB74_55:                              # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB74_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB74_58
.LBB74_57:                              # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB74_58:                              # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB74_59:                              # %if.end198
	jmp	.LBB74_60
.LBB74_60:                              # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB74_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB74_64
.LBB74_63:                              # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB74_64:                              # %if.end226
	jmp	.LBB74_88
.LBB74_65:                              # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB74_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB74_76
.LBB74_68:                              # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB74_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB74_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB74_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB74_72:                              # %if.end281
	jmp	.LBB74_73
.LBB74_73:                              # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB74_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB74_75:                              # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB74_87
.LBB74_76:                              # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB74_77:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB74_77 Depth=1
	movl	$0, -44(%rbp)
.LBB74_79:                              # %for.cond310
                                        #   Parent Loop BB74_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB74_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB74_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB74_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB74_79
.LBB74_82:                              # %for.end
                                        #   in Loop: Header=BB74_77 Depth=1
	jmp	.LBB74_83
.LBB74_83:                              # %for.inc322
                                        #   in Loop: Header=BB74_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB74_77
.LBB74_84:                              # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB74_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB74_86:                              # %if.end345
	jmp	.LBB74_87
.LBB74_87:                              # %if.end346
	jmp	.LBB74_88
.LBB74_88:                              # %if.end347
	jmp	.LBB74_89
.LBB74_89:                              # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB74_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB74_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB74_92:                              # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB74_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB74_94:                              # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB74_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB74_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB74_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB74_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB74_98
.LBB74_97:                              # %if.else380
                                        #   in Loop: Header=BB74_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB74_98:                              # %if.end382
                                        #   in Loop: Header=BB74_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB74_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB74_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB74_101
.LBB74_100:                             # %lor.rhs409
                                        #   in Loop: Header=BB74_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB74_101:                             # %lor.end415
                                        #   in Loop: Header=BB74_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB74_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB74_94
.LBB74_103:                             # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB74_104:                             # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB74_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB74_114
.LBB74_106:                             # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB74_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB74_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB74_110
.LBB74_109:                             # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB74_110:                             # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB74_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB74_113
.LBB74_112:                             # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB74_113:                             # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB74_114:                             # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB74_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB74_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB74_120
.LBB74_117:                             # %if.else480
	cmpl	$0, -100(%rbp)
	jne	.LBB74_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB74_119:                             # %if.end483
	jmp	.LBB74_120
.LBB74_120:                             # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB74_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB74_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB74_123:                             # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB74_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB74_129
.LBB74_126:                             # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB74_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB74_128:                             # %if.end516
	jmp	.LBB74_129
.LBB74_129:                             # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$2014484839, -96(%rbp)  # imm = 0x78129967
	jne	.LBB74_131
.LBB74_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_131:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_130
.Lfunc_end74:
	.size	writeMBLayer.33, .Lfunc_end74-writeMBLayer.33
	.cfi_endproc
                                        # -- End function
	.globl	BType2CtxRef.34         # -- Begin function BType2CtxRef.34
	.p2align	4, 0x90
	.type	BType2CtxRef.34,@function
BType2CtxRef.34:                        # @BType2CtxRef.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$2001054150, -20(%rbp)  # imm = 0x7745A9C6
	movl	%edi, -16(%rbp)
	cmpl	$4, -16(%rbp)
	jge	.LBB75_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	jmp	.LBB75_3
.LBB75_2:                               # %if.else
	movl	$1, -12(%rbp)
.LBB75_3:                               # %return
	movl	-12(%rbp), %ebx
	cmpl	$2001054150, -20(%rbp)  # imm = 0x7745A9C6
	jne	.LBB75_5
.LBB75_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_4
.Lfunc_end75:
	.size	BType2CtxRef.34, .Lfunc_end75-BType2CtxRef.34
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.35 # -- Begin function OneComponentLumaPrediction4x4.35
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.35,@function
OneComponentLumaPrediction4x4.35:       # @OneComponentLumaPrediction4x4.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1103585317, -92(%rbp)  # imm = 0x41C76025
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1103585317, -92(%rbp)  # imm = 0x41C76025
	jne	.LBB76_2
.LBB76_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_1
.Lfunc_end76:
	.size	OneComponentLumaPrediction4x4.35, .Lfunc_end76-OneComponentLumaPrediction4x4.35
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.36    # -- Begin function writeLumaCoeff8x8.36
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.36,@function
writeLumaCoeff8x8.36:                   # @writeLumaCoeff8x8.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1695248208, -36(%rbp)  # imm = 0x650B6F50
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB77_2
# %bb.1:                                # %if.then
	jmp	.LBB77_2
.LBB77_2:                               # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB77_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB77_15
.LBB77_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB77_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB77_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB77_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB77_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB77_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB77_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB77_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB77_10
.LBB77_9:                               # %cond.false
                                        #   in Loop: Header=BB77_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB77_10:                              # %cond.end
                                        #   in Loop: Header=BB77_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_12
.LBB77_11:                              # %if.else
                                        #   in Loop: Header=BB77_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_12:                              # %if.end17
                                        #   in Loop: Header=BB77_5 Depth=1
	jmp	.LBB77_13
.LBB77_13:                              # %for.inc
                                        #   in Loop: Header=BB77_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB77_5
.LBB77_14:                              # %for.end
	jmp	.LBB77_19
.LBB77_15:                              # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB77_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB77_18
.LBB77_17:                              # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB77_18:                              # %if.end27
	jmp	.LBB77_19
.LBB77_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1695248208, -36(%rbp)  # imm = 0x650B6F50
	jne	.LBB77_21
.LBB77_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_20
.Lfunc_end77:
	.size	writeLumaCoeff8x8.36, .Lfunc_end77-writeLumaCoeff8x8.36
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.37 # -- Begin function writeCBPandLumaCoeff.37
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.37,@function
writeCBPandLumaCoeff.37:                # @writeCBPandLumaCoeff.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1385576704, -104(%rbp) # imm = 0x52963900
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB78_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB78_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB78_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB78_7
.LBB78_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB78_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB78_10
.LBB78_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB78_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB78_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB78_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB78_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB78_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB78_18
.LBB78_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB78_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB78_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB78_18
.LBB78_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB78_22
.LBB78_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB78_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB78_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB78_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB78_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB78_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB78_26
.LBB78_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB78_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB78_29
.LBB78_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB78_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB78_30:                              # %if.end93
	jmp	.LBB78_31
.LBB78_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB78_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB78_42
.LBB78_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB78_36
.LBB78_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB78_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB78_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB78_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB78_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB78_41
.LBB78_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB78_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB78_42:                              # %if.end138
	movl	$0, -40(%rbp)
.LBB78_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB78_43 Depth=1
	movl	$0, -20(%rbp)
.LBB78_45:                              # %for.cond141
                                        #   Parent Loop BB78_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB78_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB78_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB78_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_45
.LBB78_48:                              # %for.end
                                        #   in Loop: Header=BB78_43 Depth=1
	jmp	.LBB78_49
.LBB78_49:                              # %for.inc152
                                        #   in Loop: Header=BB78_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB78_43
.LBB78_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB78_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB78_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB78_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB78_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB78_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB78_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB78_55:                              # %if.end169
                                        #   in Loop: Header=BB78_52 Depth=1
	jmp	.LBB78_56
.LBB78_56:                              # %for.inc170
                                        #   in Loop: Header=BB78_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_52
.LBB78_57:                              # %for.end172
	jmp	.LBB78_101
.LBB78_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_70
.LBB78_60:                              # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB78_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB78_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB78_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB78_63:                              # %land.end184
                                        #   in Loop: Header=BB78_61 Depth=1
	testb	$1, %al
	jne	.LBB78_64
	jmp	.LBB78_69
.LBB78_64:                              # %for.body186
                                        #   in Loop: Header=BB78_61 Depth=1
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB78_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB78_67
.LBB78_66:                              # %if.else196
                                        #   in Loop: Header=BB78_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB78_67:                              # %if.end198
                                        #   in Loop: Header=BB78_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB78_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB78_61
.LBB78_69:                              # %for.end218
	jmp	.LBB78_70
.LBB78_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB78_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB78_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB78_74 Depth 2
                                        #       Child Loop BB78_76 Depth 3
                                        #         Child Loop BB78_78 Depth 4
                                        #           Child Loop BB78_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB78_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB78_72 Depth=1
	movl	$0, -60(%rbp)
.LBB78_74:                              # %for.cond226
                                        #   Parent Loop BB78_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB78_76 Depth 3
                                        #         Child Loop BB78_78 Depth 4
                                        #           Child Loop BB78_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB78_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB78_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB78_76:                              # %for.cond229
                                        #   Parent Loop BB78_72 Depth=1
                                        #     Parent Loop BB78_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB78_78 Depth 4
                                        #           Child Loop BB78_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB78_76 Depth=3
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB78_78:                              # %for.cond233
                                        #   Parent Loop BB78_72 Depth=1
                                        #     Parent Loop BB78_74 Depth=2
                                        #       Parent Loop BB78_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB78_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB78_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB78_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB78_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB78_91
.LBB78_81:                              # %if.else247
                                        #   in Loop: Header=BB78_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB78_82:                              # %for.cond259
                                        #   Parent Loop BB78_72 Depth=1
                                        #     Parent Loop BB78_74 Depth=2
                                        #       Parent Loop BB78_76 Depth=3
                                        #         Parent Loop BB78_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB78_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB78_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB78_84:                              # %land.end263
                                        #   in Loop: Header=BB78_82 Depth=5
	testb	$1, %al
	jne	.LBB78_85
	jmp	.LBB78_90
.LBB78_85:                              # %for.body265
                                        #   in Loop: Header=BB78_82 Depth=5
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB78_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB78_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB78_88
.LBB78_87:                              # %if.else276
                                        #   in Loop: Header=BB78_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB78_88:                              # %if.end278
                                        #   in Loop: Header=BB78_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB78_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB78_82
.LBB78_90:                              # %for.end300
                                        #   in Loop: Header=BB78_78 Depth=4
	jmp	.LBB78_91
.LBB78_91:                              # %if.end301
                                        #   in Loop: Header=BB78_78 Depth=4
	jmp	.LBB78_92
.LBB78_92:                              # %for.inc302
                                        #   in Loop: Header=BB78_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB78_78
.LBB78_93:                              # %for.end304
                                        #   in Loop: Header=BB78_76 Depth=3
	jmp	.LBB78_94
.LBB78_94:                              # %for.inc305
                                        #   in Loop: Header=BB78_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB78_76
.LBB78_95:                              # %for.end307
                                        #   in Loop: Header=BB78_74 Depth=2
	jmp	.LBB78_96
.LBB78_96:                              # %for.inc308
                                        #   in Loop: Header=BB78_74 Depth=2
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB78_74
.LBB78_97:                              # %for.end310
                                        #   in Loop: Header=BB78_72 Depth=1
	jmp	.LBB78_98
.LBB78_98:                              # %for.inc311
                                        #   in Loop: Header=BB78_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB78_72
.LBB78_99:                              # %for.end313
	jmp	.LBB78_100
.LBB78_100:                             # %if.end314
	jmp	.LBB78_101
.LBB78_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1385576704, -104(%rbp) # imm = 0x52963900
	jne	.LBB78_103
.LBB78_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_102
.Lfunc_end78:
	.size	writeCBPandLumaCoeff.37, .Lfunc_end78-writeCBPandLumaCoeff.37
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.38 # -- Begin function write_one_macroblock.38
	.p2align	4, 0x90
	.type	write_one_macroblock.38,@function
write_one_macroblock.38:                # @write_one_macroblock.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1400512510, -28(%rbp)  # imm = 0x537A1FFE
	movl	%edi, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB79_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB79_2:                               # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB79_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB79_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB79_6
.LBB79_5:                               # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB79_6:                               # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB79_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB79_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -32(%rbp)
	je	.LBB79_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB79_10:                              # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB79_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB79_22
.LBB79_13:                              # %if.then22
	movl	$0, -20(%rbp)
.LBB79_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB79_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB79_14 Depth=1
	movl	$0, -24(%rbp)
.LBB79_16:                              # %for.cond24
                                        #   Parent Loop BB79_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB79_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB79_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB79_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB79_16
.LBB79_19:                              # %for.end
                                        #   in Loop: Header=BB79_14 Depth=1
	jmp	.LBB79_20
.LBB79_20:                              # %for.inc35
                                        #   in Loop: Header=BB79_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB79_14
.LBB79_21:                              # %for.end37
	jmp	.LBB79_22
.LBB79_22:                              # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB79_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB79_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB79_30
.LBB79_25:                              # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB79_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB79_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB79_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB79_29:                              # %if.end59
	jmp	.LBB79_30
.LBB79_30:                              # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB79_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB79_32:                              # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1400512510, -28(%rbp)  # imm = 0x537A1FFE
	jne	.LBB79_34
.LBB79_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_34:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_33
.Lfunc_end79:
	.size	write_one_macroblock.38, .Lfunc_end79-write_one_macroblock.38
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.39  # -- Begin function writeCoeff4x4_CAVLC.39
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.39,@function
writeCoeff4x4_CAVLC.39:                 # @writeCoeff4x4_CAVLC.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1512276653, -172(%rbp) # imm = 0x5A2382AD
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB80_22
# %bb.1:                                # %entry
	movq	.LJTI80_0(,%rax,8), %rax
	jmpq	*%rax
.LBB80_2:                               # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB80_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB80_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB80_6
.LBB80_5:                               # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB80_7
.LBB80_6:                               # %if.else
	movl	$14, -24(%rbp)
.LBB80_7:                               # %if.end
	jmp	.LBB80_23
.LBB80_8:                               # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB80_23
.LBB80_9:                               # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB80_23
.LBB80_10:                              # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB80_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB80_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB80_14
.LBB80_13:                              # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB80_15
.LBB80_14:                              # %if.else66
	movl	$13, -24(%rbp)
.LBB80_15:                              # %if.end67
	jmp	.LBB80_23
.LBB80_16:                              # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB80_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB80_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB80_20
.LBB80_19:                              # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB80_21
.LBB80_20:                              # %if.else92
	movl	$15, -24(%rbp)
.LBB80_21:                              # %if.end93
	jmp	.LBB80_23
.LBB80_22:                              # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB80_23:                              # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB80_24:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -104(%rbp)
	je	.LBB80_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB80_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB80_27
.LBB80_26:                              # %cond.false
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB80_27
.LBB80_27:                              # %cond.end
                                        #   in Loop: Header=BB80_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB80_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB80_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB80_29:                              # %land.end
                                        #   in Loop: Header=BB80_24 Depth=1
	testb	$1, %dl
	jne	.LBB80_30
	jmp	.LBB80_41
.LBB80_30:                              # %for.body
                                        #   in Loop: Header=BB80_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB80_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB80_24 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB80_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	-88(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB80_33:                              # %if.end110
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB80_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB80_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	$3, -28(%rbp)
.LBB80_36:                              # %if.end117
                                        #   in Loop: Header=BB80_24 Depth=1
	jmp	.LBB80_38
.LBB80_37:                              # %if.else118
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	$0, -28(%rbp)
.LBB80_38:                              # %if.end119
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
.LBB80_39:                              # %if.end121
                                        #   in Loop: Header=BB80_24 Depth=1
	jmp	.LBB80_40
.LBB80_40:                              # %for.inc
                                        #   in Loop: Header=BB80_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_24
.LBB80_41:                              # %for.end
	cmpl	$0, -104(%rbp)
	jne	.LBB80_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB80_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB80_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB80_46
.LBB80_45:                              # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB80_46:                              # %cond.end136
	movl	%eax, -100(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB80_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB80_49
.LBB80_48:                              # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB80_49:                              # %cond.end145
	movl	%eax, -96(%rbp)
	movl	-100(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB80_51
.LBB80_50:                              # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -100(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	movl	-100(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB80_51:                              # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB80_53
# %bb.52:                               # %if.then160
	movl	$0, -84(%rbp)
	jmp	.LBB80_60
.LBB80_53:                              # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB80_55
# %bb.54:                               # %if.then163
	movl	$1, -84(%rbp)
	jmp	.LBB80_59
.LBB80_55:                              # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB80_57
# %bb.56:                               # %if.then166
	movl	$2, -84(%rbp)
	jmp	.LBB80_58
.LBB80_57:                              # %if.else167
	movl	$3, -84(%rbp)
.LBB80_58:                              # %if.end168
	jmp	.LBB80_59
.LBB80_59:                              # %if.end169
	jmp	.LBB80_60
.LBB80_60:                              # %if.end170
	jmp	.LBB80_62
.LBB80_61:                              # %if.else171
	movl	$0, -84(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -96(%rbp)
.LBB80_62:                              # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB80_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB80_65
.LBB80_64:                              # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB80_65:                              # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB80_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB80_122
.LBB80_67:                              # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB80_121
# %bb.68:                               # %if.then192
	movl	$0, -92(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB80_69:                              # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB80_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB80_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB80_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB80_72:                              # %if.end202
                                        #   in Loop: Header=BB80_69 Depth=1
	movl	-92(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB80_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB80_69 Depth=1
	movl	-92(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -92(%rbp)
.LBB80_74:                              # %if.end205
                                        #   in Loop: Header=BB80_69 Depth=1
	jmp	.LBB80_75
.LBB80_75:                              # %for.inc206
                                        #   in Loop: Header=BB80_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_69
.LBB80_76:                              # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB80_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB80_78:                              # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB80_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB80_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB80_81:                              # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB80_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB80_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB80_85
.LBB80_84:                              # %if.else232
	movl	$0, -32(%rbp)
.LBB80_85:                              # %if.end233
	movl	-76(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB80_86:                              # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB80_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB80_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB80_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB80_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB80_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB80_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB80_91
.LBB80_90:                              # %if.else249
                                        #   in Loop: Header=BB80_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB80_91:                              # %if.end252
                                        #   in Loop: Header=BB80_86 Depth=1
	movl	$0, -144(%rbp)
.LBB80_92:                              # %if.end253
                                        #   in Loop: Header=BB80_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB80_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB80_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB80_95
.LBB80_94:                              # %if.else257
                                        #   in Loop: Header=BB80_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB80_95:                              # %if.end259
                                        #   in Loop: Header=BB80_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB80_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB80_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB80_97:                              # %if.end266
                                        #   in Loop: Header=BB80_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-76(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB80_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB80_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB80_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB80_86 Depth=1
	movl	$2, -32(%rbp)
.LBB80_100:                             # %if.end273
                                        #   in Loop: Header=BB80_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB80_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_86
.LBB80_102:                             # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB80_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB80_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB80_106
.LBB80_105:                             # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB80_106:                             # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB80_107:                             # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB80_108:                             # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB80_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB80_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB80_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB80_108 Depth=1
	cmpl	$0, -80(%rbp)
	jne	.LBB80_112
.LBB80_111:                             # %if.then318
	jmp	.LBB80_120
.LBB80_112:                             # %if.end319
                                        #   in Loop: Header=BB80_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB80_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB80_108 Depth=1
	cmpl	$0, -80(%rbp)
	je	.LBB80_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB80_108 Depth=1
	movl	-80(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB80_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB80_108 Depth=1
	movl	$6, -32(%rbp)
.LBB80_116:                             # %if.end327
                                        #   in Loop: Header=BB80_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-88(%rbp), %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB80_117:                             # %if.end341
                                        #   in Loop: Header=BB80_108 Depth=1
	jmp	.LBB80_118
.LBB80_118:                             # %for.inc342
                                        #   in Loop: Header=BB80_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB80_108
.LBB80_119:                             # %for.end344.loopexit
	jmp	.LBB80_120
.LBB80_120:                             # %for.end344
	jmp	.LBB80_121
.LBB80_121:                             # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB80_122:                             # %return
	movl	-156(%rbp), %ebx
	cmpl	$1512276653, -172(%rbp) # imm = 0x5A2382AD
	jne	.LBB80_124
.LBB80_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_124:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_123
.Lfunc_end80:
	.size	writeCoeff4x4_CAVLC.39, .Lfunc_end80-writeCoeff4x4_CAVLC.39
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI80_0:
	.quad	.LBB80_2
	.quad	.LBB80_8
	.quad	.LBB80_9
	.quad	.LBB80_22
	.quad	.LBB80_22
	.quad	.LBB80_22
	.quad	.LBB80_10
	.quad	.LBB80_16
                                        # -- End function
	.text
	.globl	writeLumaCoeff8x8.40    # -- Begin function writeLumaCoeff8x8.40
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.40,@function
writeLumaCoeff8x8.40:                   # @writeLumaCoeff8x8.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1002204911, -36(%rbp)  # imm = 0x3BBC6EEF
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB81_2
# %bb.1:                                # %if.then
	jmp	.LBB81_2
.LBB81_2:                               # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB81_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB81_15
.LBB81_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB81_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB81_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB81_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB81_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB81_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB81_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB81_10
.LBB81_9:                               # %cond.false
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB81_10:                              # %cond.end
                                        #   in Loop: Header=BB81_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_12
.LBB81_11:                              # %if.else
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB81_12:                              # %if.end17
                                        #   in Loop: Header=BB81_5 Depth=1
	jmp	.LBB81_13
.LBB81_13:                              # %for.inc
                                        #   in Loop: Header=BB81_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB81_5
.LBB81_14:                              # %for.end
	jmp	.LBB81_19
.LBB81_15:                              # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB81_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB81_18
.LBB81_17:                              # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB81_18:                              # %if.end27
	jmp	.LBB81_19
.LBB81_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1002204911, -36(%rbp)  # imm = 0x3BBC6EEF
	jne	.LBB81_21
.LBB81_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_20
.Lfunc_end81:
	.size	writeLumaCoeff8x8.40, .Lfunc_end81-writeLumaCoeff8x8.40
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.41  # -- Begin function writeReferenceFrame.41
	.p2align	4, 0x90
	.type	writeReferenceFrame.41,@function
writeReferenceFrame.41:                 # @writeReferenceFrame.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2062604577, -72(%rbp)  # imm = 0x7AF0D921
	movl	%edi, -68(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB82_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB82_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB82_4
.LBB82_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB82_4
.LBB82_4:                               # %cond.end
	movl	%ecx, -36(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB82_6
# %bb.5:                                # %cond.true10
	movl	-36(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB82_7
.LBB82_6:                               # %cond.false13
	movl	-36(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB82_7:                               # %cond.end17
	movl	%eax, -52(%rbp)
	movl	$0, -44(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB82_9
# %bb.8:                                # %if.then
	movl	$0, -48(%rbp)
	jmp	.LBB82_18
.LBB82_9:                               # %if.end
	cmpl	$2, -52(%rbp)
	jne	.LBB82_11
# %bb.10:                               # %if.then20
	movl	$1, -44(%rbp)
.LBB82_11:                              # %if.end21
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB82_16
# %bb.12:                               # %if.then28
	cmpl	$0, -44(%rbp)
	je	.LBB82_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB82_15
.LBB82_14:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB82_15:                              # %if.end33
	jmp	.LBB82_17
.LBB82_16:                              # %if.else34
	movl	-68(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-40(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB82_17:                              # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB82_18:                              # %return
	movl	-48(%rbp), %ebx
	cmpl	$2062604577, -72(%rbp)  # imm = 0x7AF0D921
	jne	.LBB82_20
.LBB82_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_19
.Lfunc_end82:
	.size	writeReferenceFrame.41, .Lfunc_end82-writeReferenceFrame.41
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.42 # -- Begin function writeCBPandLumaCoeff.42
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.42,@function
writeCBPandLumaCoeff.42:                # @writeCBPandLumaCoeff.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$748034334, -108(%rbp)  # imm = 0x2C96191E
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB83_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB83_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB83_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB83_7
.LBB83_4:                               # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB83_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB83_6:                               # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB83_10
.LBB83_7:                               # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB83_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB83_9:                               # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB83_10:                              # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB83_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB83_12:                              # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB83_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB83_18
.LBB83_14:                              # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB83_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB83_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB83_18
.LBB83_17:                              # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB83_22
.LBB83_18:                              # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB83_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB83_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB83_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB83_22:                              # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -100(%rbp)
	je	.LBB83_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB83_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB83_26
.LBB83_25:                              # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB83_26:                              # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB83_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB83_29
.LBB83_28:                              # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB83_29:                              # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB83_30:                              # %if.end93
	jmp	.LBB83_31
.LBB83_31:                              # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB83_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB83_42
.LBB83_33:                              # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB83_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB83_36
.LBB83_35:                              # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB83_36:                              # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB83_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB83_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB83_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB83_41
.LBB83_40:                              # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB83_41:                              # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB83_42:                              # %if.end138
	movl	$0, -40(%rbp)
.LBB83_43:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB83_43 Depth=1
	movl	$0, -20(%rbp)
.LBB83_45:                              # %for.cond141
                                        #   Parent Loop BB83_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB83_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB83_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB83_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_45
.LBB83_48:                              # %for.end
                                        #   in Loop: Header=BB83_43 Depth=1
	jmp	.LBB83_49
.LBB83_49:                              # %for.inc152
                                        #   in Loop: Header=BB83_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB83_43
.LBB83_50:                              # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB83_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB83_52:                              # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB83_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB83_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB83_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB83_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB83_55:                              # %if.end169
                                        #   in Loop: Header=BB83_52 Depth=1
	jmp	.LBB83_56
.LBB83_56:                              # %for.inc170
                                        #   in Loop: Header=BB83_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_52
.LBB83_57:                              # %for.end172
	jmp	.LBB83_101
.LBB83_58:                              # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB83_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB83_70
.LBB83_60:                              # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -36(%rbp)
.LBB83_61:                              # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB83_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB83_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB83_63:                              # %land.end184
                                        #   in Loop: Header=BB83_61 Depth=1
	testb	$1, %al
	jne	.LBB83_64
	jmp	.LBB83_69
.LBB83_64:                              # %for.body186
                                        #   in Loop: Header=BB83_61 Depth=1
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB83_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB83_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB83_67
.LBB83_66:                              # %if.else196
                                        #   in Loop: Header=BB83_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB83_67:                              # %if.end198
                                        #   in Loop: Header=BB83_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB83_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB83_61
.LBB83_69:                              # %for.end218
	jmp	.LBB83_70
.LBB83_70:                              # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB83_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB83_72:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_74 Depth 2
                                        #       Child Loop BB83_76 Depth 3
                                        #         Child Loop BB83_78 Depth 4
                                        #           Child Loop BB83_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB83_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB83_72 Depth=1
	movl	$0, -52(%rbp)
.LBB83_74:                              # %for.cond226
                                        #   Parent Loop BB83_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_76 Depth 3
                                        #         Child Loop BB83_78 Depth 4
                                        #           Child Loop BB83_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB83_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB83_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB83_76:                              # %for.cond229
                                        #   Parent Loop BB83_72 Depth=1
                                        #     Parent Loop BB83_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_78 Depth 4
                                        #           Child Loop BB83_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB83_76 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB83_78:                              # %for.cond233
                                        #   Parent Loop BB83_72 Depth=1
                                        #     Parent Loop BB83_74 Depth=2
                                        #       Parent Loop BB83_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB83_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB83_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB83_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB83_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB83_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB83_91
.LBB83_81:                              # %if.else247
                                        #   in Loop: Header=BB83_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -36(%rbp)
.LBB83_82:                              # %for.cond259
                                        #   Parent Loop BB83_72 Depth=1
                                        #     Parent Loop BB83_74 Depth=2
                                        #       Parent Loop BB83_76 Depth=3
                                        #         Parent Loop BB83_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB83_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB83_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB83_84:                              # %land.end263
                                        #   in Loop: Header=BB83_82 Depth=5
	testb	$1, %al
	jne	.LBB83_85
	jmp	.LBB83_90
.LBB83_85:                              # %for.body265
                                        #   in Loop: Header=BB83_82 Depth=5
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB83_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB83_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB83_88
.LBB83_87:                              # %if.else276
                                        #   in Loop: Header=BB83_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB83_88:                              # %if.end278
                                        #   in Loop: Header=BB83_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB83_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB83_82
.LBB83_90:                              # %for.end300
                                        #   in Loop: Header=BB83_78 Depth=4
	jmp	.LBB83_91
.LBB83_91:                              # %if.end301
                                        #   in Loop: Header=BB83_78 Depth=4
	jmp	.LBB83_92
.LBB83_92:                              # %for.inc302
                                        #   in Loop: Header=BB83_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB83_78
.LBB83_93:                              # %for.end304
                                        #   in Loop: Header=BB83_76 Depth=3
	jmp	.LBB83_94
.LBB83_94:                              # %for.inc305
                                        #   in Loop: Header=BB83_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB83_76
.LBB83_95:                              # %for.end307
                                        #   in Loop: Header=BB83_74 Depth=2
	jmp	.LBB83_96
.LBB83_96:                              # %for.inc308
                                        #   in Loop: Header=BB83_74 Depth=2
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB83_74
.LBB83_97:                              # %for.end310
                                        #   in Loop: Header=BB83_72 Depth=1
	jmp	.LBB83_98
.LBB83_98:                              # %for.inc311
                                        #   in Loop: Header=BB83_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB83_72
.LBB83_99:                              # %for.end313
	jmp	.LBB83_100
.LBB83_100:                             # %if.end314
	jmp	.LBB83_101
.LBB83_101:                             # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$748034334, -108(%rbp)  # imm = 0x2C96191E
	jne	.LBB83_103
.LBB83_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_103:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_102
.Lfunc_end83:
	.size	writeCBPandLumaCoeff.42, .Lfunc_end83-writeCBPandLumaCoeff.42
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.43 # -- Begin function write_terminating_bit.43
	.p2align	4, 0x90
	.type	write_terminating_bit.43,@function
write_terminating_bit.43:               # @write_terminating_bit.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1993617668, -8(%rbp)   # imm = 0x76D43104
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1993617668, -8(%rbp)   # imm = 0x76D43104
	jne	.LBB84_2
.LBB84_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_1
.Lfunc_end84:
	.size	write_terminating_bit.43, .Lfunc_end84-write_terminating_bit.43
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.44 # -- Begin function ChromaResidualCoding.44
	.p2align	4, 0x90
	.type	ChromaResidualCoding.44,@function
ChromaResidualCoding.44:                # @ChromaResidualCoding.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$695844957, -76(%rbp)   # imm = 0x2979C05D
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB85_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB85_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB85_3:                               # %lor.end
.LBB85_4:                               # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -80(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB85_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_7 Depth 2
                                        #       Child Loop BB85_9 Depth 3
                                        #     Child Loop BB85_16 Depth 2
                                        #       Child Loop BB85_18 Depth 3
                                        #     Child Loop BB85_33 Depth 2
                                        #       Child Loop BB85_35 Depth 3
                                        #     Child Loop BB85_43 Depth 2
                                        #       Child Loop BB85_45 Depth 3
                                        #     Child Loop BB85_58 Depth 2
                                        #       Child Loop BB85_60 Depth 3
                                        #     Child Loop BB85_87 Depth 2
                                        #       Child Loop BB85_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB85_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -16(%rbp)
.LBB85_7:                               # %for.cond5
                                        #   Parent Loop BB85_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB85_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB85_7 Depth=2
	movl	$0, -24(%rbp)
.LBB85_9:                               # %for.cond8
                                        #   Parent Loop BB85_5 Depth=1
                                        #     Parent Loop BB85_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB85_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB85_9 Depth=3
	movslq	-80(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	-50(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-54(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB85_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB85_9
.LBB85_12:                              # %for.end
                                        #   in Loop: Header=BB85_7 Depth=2
	jmp	.LBB85_13
.LBB85_13:                              # %for.inc18
                                        #   in Loop: Header=BB85_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB85_7
.LBB85_14:                              # %for.end20
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB85_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	$0, -4(%rbp)
.LBB85_16:                              # %for.cond21
                                        #   Parent Loop BB85_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB85_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB85_16 Depth=2
	movl	$0, -8(%rbp)
.LBB85_18:                              # %for.cond26
                                        #   Parent Loop BB85_5 Depth=1
                                        #     Parent Loop BB85_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB85_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB85_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB85_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB85_25
.LBB85_21:                              # %if.else
                                        #   in Loop: Header=BB85_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB85_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB85_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB85_24
.LBB85_23:                              # %if.else52
                                        #   in Loop: Header=BB85_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB85_24:                              # %if.end
                                        #   in Loop: Header=BB85_18 Depth=3
	jmp	.LBB85_25
.LBB85_25:                              # %if.end57
                                        #   in Loop: Header=BB85_18 Depth=3
	jmp	.LBB85_26
.LBB85_26:                              # %for.inc58
                                        #   in Loop: Header=BB85_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_18
.LBB85_27:                              # %for.end59
                                        #   in Loop: Header=BB85_16 Depth=2
	jmp	.LBB85_28
.LBB85_28:                              # %for.inc60
                                        #   in Loop: Header=BB85_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_16
.LBB85_29:                              # %for.end62
                                        #   in Loop: Header=BB85_5 Depth=1
	jmp	.LBB85_74
.LBB85_30:                              # %if.else63
                                        #   in Loop: Header=BB85_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB85_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB85_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	$0, -4(%rbp)
.LBB85_33:                              # %for.cond69
                                        #   Parent Loop BB85_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB85_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB85_33 Depth=2
	movl	$0, -8(%rbp)
.LBB85_35:                              # %for.cond73
                                        #   Parent Loop BB85_5 Depth=1
                                        #     Parent Loop BB85_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB85_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB85_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB85_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_35
.LBB85_38:                              # %for.end83
                                        #   in Loop: Header=BB85_33 Depth=2
	jmp	.LBB85_39
.LBB85_39:                              # %for.inc84
                                        #   in Loop: Header=BB85_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_33
.LBB85_40:                              # %for.end86
                                        #   in Loop: Header=BB85_5 Depth=1
	jmp	.LBB85_73
.LBB85_41:                              # %if.else87
                                        #   in Loop: Header=BB85_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB85_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	$0, -4(%rbp)
.LBB85_43:                              # %for.cond90
                                        #   Parent Loop BB85_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB85_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB85_43 Depth=2
	movl	$0, -8(%rbp)
.LBB85_45:                              # %for.cond95
                                        #   Parent Loop BB85_5 Depth=1
                                        #     Parent Loop BB85_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB85_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB85_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB85_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB85_52
.LBB85_48:                              # %if.else119
                                        #   in Loop: Header=BB85_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB85_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB85_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB85_51
.LBB85_50:                              # %if.else127
                                        #   in Loop: Header=BB85_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB85_51:                              # %if.end132
                                        #   in Loop: Header=BB85_45 Depth=3
	jmp	.LBB85_52
.LBB85_52:                              # %if.end133
                                        #   in Loop: Header=BB85_45 Depth=3
	jmp	.LBB85_53
.LBB85_53:                              # %for.inc134
                                        #   in Loop: Header=BB85_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_45
.LBB85_54:                              # %for.end136
                                        #   in Loop: Header=BB85_43 Depth=2
	jmp	.LBB85_55
.LBB85_55:                              # %for.inc137
                                        #   in Loop: Header=BB85_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_43
.LBB85_56:                              # %for.end139
                                        #   in Loop: Header=BB85_5 Depth=1
	jmp	.LBB85_72
.LBB85_57:                              # %if.else140
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	$0, -4(%rbp)
.LBB85_58:                              # %for.cond141
                                        #   Parent Loop BB85_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB85_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB85_58 Depth=2
	movl	$0, -8(%rbp)
.LBB85_60:                              # %for.cond146
                                        #   Parent Loop BB85_5 Depth=1
                                        #     Parent Loop BB85_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB85_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB85_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB85_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB85_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB85_67
.LBB85_63:                              # %if.else175
                                        #   in Loop: Header=BB85_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB85_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB85_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB85_66
.LBB85_65:                              # %if.else188
                                        #   in Loop: Header=BB85_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB85_66:                              # %if.end198
                                        #   in Loop: Header=BB85_60 Depth=3
	jmp	.LBB85_67
.LBB85_67:                              # %if.end199
                                        #   in Loop: Header=BB85_60 Depth=3
	jmp	.LBB85_68
.LBB85_68:                              # %for.inc200
                                        #   in Loop: Header=BB85_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_60
.LBB85_69:                              # %for.end202
                                        #   in Loop: Header=BB85_58 Depth=2
	jmp	.LBB85_70
.LBB85_70:                              # %for.inc203
                                        #   in Loop: Header=BB85_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_58
.LBB85_71:                              # %for.end205
                                        #   in Loop: Header=BB85_5 Depth=1
	jmp	.LBB85_72
.LBB85_72:                              # %if.end206
                                        #   in Loop: Header=BB85_5 Depth=1
	jmp	.LBB85_73
.LBB85_73:                              # %if.end207
                                        #   in Loop: Header=BB85_5 Depth=1
	jmp	.LBB85_74
.LBB85_74:                              # %if.end208
                                        #   in Loop: Header=BB85_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB85_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB85_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB85_100
.LBB85_77:                              # %if.else215
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB85_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB85_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB85_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB85_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB85_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB85_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB85_84
.LBB85_83:                              # %if.then247
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB85_85
.LBB85_84:                              # %if.else249
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB85_85:                              # %if.end251
                                        #   in Loop: Header=BB85_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	$0, -4(%rbp)
.LBB85_87:                              # %for.cond255
                                        #   Parent Loop BB85_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB85_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB85_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB85_87 Depth=2
	movl	$0, -8(%rbp)
.LBB85_89:                              # %for.cond260
                                        #   Parent Loop BB85_5 Depth=1
                                        #     Parent Loop BB85_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB85_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB85_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB85_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB85_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB85_93
.LBB85_92:                              # %if.else277
                                        #   in Loop: Header=BB85_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB85_93:                              # %if.end287
                                        #   in Loop: Header=BB85_89 Depth=3
	jmp	.LBB85_94
.LBB85_94:                              # %for.inc288
                                        #   in Loop: Header=BB85_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_89
.LBB85_95:                              # %for.end290
                                        #   in Loop: Header=BB85_87 Depth=2
	jmp	.LBB85_96
.LBB85_96:                              # %for.inc291
                                        #   in Loop: Header=BB85_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_87
.LBB85_97:                              # %for.end293
                                        #   in Loop: Header=BB85_5 Depth=1
	jmp	.LBB85_98
.LBB85_98:                              # %if.end294
                                        #   in Loop: Header=BB85_5 Depth=1
	jmp	.LBB85_99
.LBB85_99:                              # %if.end295
                                        #   in Loop: Header=BB85_5 Depth=1
	jmp	.LBB85_100
.LBB85_100:                             # %if.end296
                                        #   in Loop: Header=BB85_5 Depth=1
	jmp	.LBB85_101
.LBB85_101:                             # %for.inc297
                                        #   in Loop: Header=BB85_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB85_5
.LBB85_102:                             # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB85_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB85_104:                             # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB85_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB85_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB85_104 Depth=1
	movl	$0, -8(%rbp)
.LBB85_106:                             # %for.cond312
                                        #   Parent Loop BB85_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB85_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-64(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB85_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB85_110
.LBB85_109:                             # %cond.false
                                        #   in Loop: Header=BB85_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB85_110:                             # %cond.end
                                        #   in Loop: Header=BB85_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB85_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB85_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB85_116
.LBB85_112:                             # %cond.false358
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB85_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB85_115
.LBB85_114:                             # %cond.false367
                                        #   in Loop: Header=BB85_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB85_115:                             # %cond.end373
                                        #   in Loop: Header=BB85_106 Depth=2
.LBB85_116:                             # %cond.end375
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB85_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB85_119
.LBB85_118:                             # %cond.false394
                                        #   in Loop: Header=BB85_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB85_119:                             # %cond.end400
                                        #   in Loop: Header=BB85_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB85_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB85_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB85_125
.LBB85_121:                             # %cond.false406
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB85_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB85_124
.LBB85_123:                             # %cond.false415
                                        #   in Loop: Header=BB85_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB85_124:                             # %cond.end421
                                        #   in Loop: Header=BB85_106 Depth=2
.LBB85_125:                             # %cond.end423
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-36(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB85_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB85_128
.LBB85_127:                             # %cond.false443
                                        #   in Loop: Header=BB85_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB85_128:                             # %cond.end449
                                        #   in Loop: Header=BB85_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB85_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB85_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB85_134
.LBB85_130:                             # %cond.false455
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB85_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB85_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB85_133
.LBB85_132:                             # %cond.false464
                                        #   in Loop: Header=BB85_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB85_133:                             # %cond.end470
                                        #   in Loop: Header=BB85_106 Depth=2
.LBB85_134:                             # %cond.end472
                                        #   in Loop: Header=BB85_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB85_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB85_106
.LBB85_136:                             # %for.end487
                                        #   in Loop: Header=BB85_104 Depth=1
	jmp	.LBB85_137
.LBB85_137:                             # %for.inc488
                                        #   in Loop: Header=BB85_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_104
.LBB85_138:                             # %for.end490
	jmp	.LBB85_139
.LBB85_139:                             # %if.end491
	cmpl	$695844957, -76(%rbp)   # imm = 0x2979C05D
	jne	.LBB85_141
.LBB85_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_141:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_140
.Lfunc_end85:
	.size	ChromaResidualCoding.44, .Lfunc_end85-ChromaResidualCoding.44
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.45  # -- Begin function writeMotionInfo2NAL.45
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.45,@function
writeMotionInfo2NAL.45:                 # @writeMotionInfo2NAL.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1599612408, -56(%rbp)  # imm = 0x5F5825F8
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB86_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB86_3
.LBB86_2:                               # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB86_3:                               # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB86_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB86_6
.LBB86_5:                               # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB86_6:                               # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB86_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB86_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB86_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB86_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB86_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB86_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB86_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB86_39
.LBB86_14:                              # %if.then42
	movl	$0, -16(%rbp)
.LBB86_15:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB86_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB86_15 Depth=1
	movl	$0, -12(%rbp)
.LBB86_17:                              # %for.cond45
                                        #   Parent Loop BB86_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB86_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB86_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB86_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB86_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB86_22
.LBB86_20:                              # %land.lhs.true59
                                        #   in Loop: Header=BB86_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB86_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB86_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB86_22:                              # %if.end
                                        #   in Loop: Header=BB86_17 Depth=2
	jmp	.LBB86_23
.LBB86_23:                              # %for.inc
                                        #   in Loop: Header=BB86_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_17
.LBB86_24:                              # %for.end
                                        #   in Loop: Header=BB86_15 Depth=1
	jmp	.LBB86_25
.LBB86_25:                              # %for.inc79
                                        #   in Loop: Header=BB86_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_15
.LBB86_26:                              # %for.end81
	movl	$0, -16(%rbp)
.LBB86_27:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB86_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB86_27 Depth=1
	movl	$0, -12(%rbp)
.LBB86_29:                              # %for.cond86
                                        #   Parent Loop BB86_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB86_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB86_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB86_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB86_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB86_34
.LBB86_32:                              # %land.lhs.true103
                                        #   in Loop: Header=BB86_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB86_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB86_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB86_34:                              # %if.end126
                                        #   in Loop: Header=BB86_29 Depth=2
	jmp	.LBB86_35
.LBB86_35:                              # %for.inc127
                                        #   in Loop: Header=BB86_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_29
.LBB86_36:                              # %for.end129
                                        #   in Loop: Header=BB86_27 Depth=1
	jmp	.LBB86_37
.LBB86_37:                              # %for.inc130
                                        #   in Loop: Header=BB86_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_27
.LBB86_38:                              # %for.end132
	jmp	.LBB86_39
.LBB86_39:                              # %if.end133
	jmp	.LBB86_40
.LBB86_40:                              # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB86_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB86_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB86_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB86_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB86_45:                              # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB86_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB86_45 Depth=1
	movl	$0, -12(%rbp)
.LBB86_47:                              # %for.cond155
                                        #   Parent Loop BB86_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB86_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB86_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB86_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB86_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB86_52
.LBB86_50:                              # %land.lhs.true172
                                        #   in Loop: Header=BB86_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB86_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB86_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB86_52:                              # %if.end197
                                        #   in Loop: Header=BB86_47 Depth=2
	jmp	.LBB86_53
.LBB86_53:                              # %for.inc198
                                        #   in Loop: Header=BB86_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_47
.LBB86_54:                              # %for.end200
                                        #   in Loop: Header=BB86_45 Depth=1
	jmp	.LBB86_55
.LBB86_55:                              # %for.inc201
                                        #   in Loop: Header=BB86_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_45
.LBB86_56:                              # %for.end203
	jmp	.LBB86_57
.LBB86_57:                              # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB86_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB86_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB86_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB86_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB86_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB86_63:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB86_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB86_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB86_63 Depth=1
	movl	$0, -12(%rbp)
.LBB86_65:                              # %for.cond227
                                        #   Parent Loop BB86_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB86_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB86_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB86_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB86_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB86_70
.LBB86_68:                              # %land.lhs.true244
                                        #   in Loop: Header=BB86_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB86_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB86_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB86_70:                              # %if.end269
                                        #   in Loop: Header=BB86_65 Depth=2
	jmp	.LBB86_71
.LBB86_71:                              # %for.inc270
                                        #   in Loop: Header=BB86_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB86_65
.LBB86_72:                              # %for.end272
                                        #   in Loop: Header=BB86_63 Depth=1
	jmp	.LBB86_73
.LBB86_73:                              # %for.inc273
                                        #   in Loop: Header=BB86_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB86_63
.LBB86_74:                              # %for.end275
	jmp	.LBB86_75
.LBB86_75:                              # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1599612408, -56(%rbp)  # imm = 0x5F5825F8
	jne	.LBB86_77
.LBB86_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_76
.Lfunc_end86:
	.size	writeMotionInfo2NAL.45, .Lfunc_end86-writeMotionInfo2NAL.45
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.46  # -- Begin function writeMotionInfo2NAL.46
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.46,@function
writeMotionInfo2NAL.46:                 # @writeMotionInfo2NAL.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$777835316, -56(%rbp)   # imm = 0x2E5CD334
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB87_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB87_3
.LBB87_2:                               # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB87_3:                               # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB87_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB87_6
.LBB87_5:                               # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB87_6:                               # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB87_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB87_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB87_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB87_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB87_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB87_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB87_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB87_39
.LBB87_14:                              # %if.then42
	movl	$0, -12(%rbp)
.LBB87_15:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB87_15 Depth=1
	movl	$0, -16(%rbp)
.LBB87_17:                              # %for.cond45
                                        #   Parent Loop BB87_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB87_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB87_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB87_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB87_22
.LBB87_20:                              # %land.lhs.true59
                                        #   in Loop: Header=BB87_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB87_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB87_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB87_22:                              # %if.end
                                        #   in Loop: Header=BB87_17 Depth=2
	jmp	.LBB87_23
.LBB87_23:                              # %for.inc
                                        #   in Loop: Header=BB87_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_17
.LBB87_24:                              # %for.end
                                        #   in Loop: Header=BB87_15 Depth=1
	jmp	.LBB87_25
.LBB87_25:                              # %for.inc79
                                        #   in Loop: Header=BB87_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_15
.LBB87_26:                              # %for.end81
	movl	$0, -12(%rbp)
.LBB87_27:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB87_27 Depth=1
	movl	$0, -16(%rbp)
.LBB87_29:                              # %for.cond86
                                        #   Parent Loop BB87_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB87_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB87_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB87_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB87_34
.LBB87_32:                              # %land.lhs.true103
                                        #   in Loop: Header=BB87_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB87_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB87_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB87_34:                              # %if.end126
                                        #   in Loop: Header=BB87_29 Depth=2
	jmp	.LBB87_35
.LBB87_35:                              # %for.inc127
                                        #   in Loop: Header=BB87_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_29
.LBB87_36:                              # %for.end129
                                        #   in Loop: Header=BB87_27 Depth=1
	jmp	.LBB87_37
.LBB87_37:                              # %for.inc130
                                        #   in Loop: Header=BB87_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_27
.LBB87_38:                              # %for.end132
	jmp	.LBB87_39
.LBB87_39:                              # %if.end133
	jmp	.LBB87_40
.LBB87_40:                              # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB87_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB87_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB87_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB87_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB87_45:                              # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB87_45 Depth=1
	movl	$0, -16(%rbp)
.LBB87_47:                              # %for.cond155
                                        #   Parent Loop BB87_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB87_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB87_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB87_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB87_52
.LBB87_50:                              # %land.lhs.true172
                                        #   in Loop: Header=BB87_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB87_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB87_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB87_52:                              # %if.end197
                                        #   in Loop: Header=BB87_47 Depth=2
	jmp	.LBB87_53
.LBB87_53:                              # %for.inc198
                                        #   in Loop: Header=BB87_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_47
.LBB87_54:                              # %for.end200
                                        #   in Loop: Header=BB87_45 Depth=1
	jmp	.LBB87_55
.LBB87_55:                              # %for.inc201
                                        #   in Loop: Header=BB87_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_45
.LBB87_56:                              # %for.end203
	jmp	.LBB87_57
.LBB87_57:                              # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB87_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB87_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB87_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB87_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB87_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB87_63:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB87_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB87_63 Depth=1
	movl	$0, -16(%rbp)
.LBB87_65:                              # %for.cond227
                                        #   Parent Loop BB87_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB87_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB87_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB87_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB87_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB87_70
.LBB87_68:                              # %land.lhs.true244
                                        #   in Loop: Header=BB87_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB87_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB87_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB87_70:                              # %if.end269
                                        #   in Loop: Header=BB87_65 Depth=2
	jmp	.LBB87_71
.LBB87_71:                              # %for.inc270
                                        #   in Loop: Header=BB87_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB87_65
.LBB87_72:                              # %for.end272
                                        #   in Loop: Header=BB87_63 Depth=1
	jmp	.LBB87_73
.LBB87_73:                              # %for.inc273
                                        #   in Loop: Header=BB87_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB87_63
.LBB87_74:                              # %for.end275
	jmp	.LBB87_75
.LBB87_75:                              # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$777835316, -56(%rbp)   # imm = 0x2E5CD334
	jne	.LBB87_77
.LBB87_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_76
.Lfunc_end87:
	.size	writeMotionInfo2NAL.46, .Lfunc_end87-writeMotionInfo2NAL.46
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.47 # -- Begin function write_one_macroblock.47
	.p2align	4, 0x90
	.type	write_one_macroblock.47,@function
write_one_macroblock.47:                # @write_one_macroblock.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$668525267, -32(%rbp)   # imm = 0x27D8E2D3
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB88_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB88_2:                               # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB88_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB88_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB88_6
.LBB88_5:                               # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB88_6:                               # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB88_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB88_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB88_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB88_10:                              # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB88_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB88_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB88_22
.LBB88_13:                              # %if.then22
	movl	$0, -20(%rbp)
.LBB88_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB88_14 Depth=1
	movl	$0, -24(%rbp)
.LBB88_16:                              # %for.cond24
                                        #   Parent Loop BB88_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB88_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB88_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB88_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB88_16
.LBB88_19:                              # %for.end
                                        #   in Loop: Header=BB88_14 Depth=1
	jmp	.LBB88_20
.LBB88_20:                              # %for.inc35
                                        #   in Loop: Header=BB88_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB88_14
.LBB88_21:                              # %for.end37
	jmp	.LBB88_22
.LBB88_22:                              # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB88_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB88_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB88_30
.LBB88_25:                              # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB88_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB88_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB88_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB88_29:                              # %if.end59
	jmp	.LBB88_30
.LBB88_30:                              # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB88_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB88_32:                              # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$668525267, -32(%rbp)   # imm = 0x27D8E2D3
	jne	.LBB88_34
.LBB88_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_34:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_33
.Lfunc_end88:
	.size	write_one_macroblock.47, .Lfunc_end88-write_one_macroblock.47
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.48  # -- Begin function ChromaPrediction4x4.48
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.48,@function
ChromaPrediction4x4.48:                 # @ChromaPrediction4x4.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1130543267, -72(%rbp)  # imm = 0x4362B8A3
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -52(%rbp)
	movl	%r9d, -56(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB89_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB89_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB89_6
.LBB89_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB89_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB89_5:                               # %land.end
.LBB89_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB89_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB89_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB89_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -24(%rbp)
	jne	.LBB89_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -52(%rbp)
	jne	.LBB89_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -56(%rbp)
	jne	.LBB89_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB89_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB89_15
.LBB89_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB89_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB89_16:                              # %if.end
	cmpl	$-1, -24(%rbp)
	jne	.LBB89_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB89_87
.LBB89_18:                              # %if.end30
	cmpl	$0, -24(%rbp)
	je	.LBB89_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -24(%rbp)
	jne	.LBB89_21
.LBB89_20:                              # %if.then36
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB89_21:                              # %if.end37
	cmpl	$1, -24(%rbp)
	je	.LBB89_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -24(%rbp)
	jne	.LBB89_24
.LBB89_23:                              # %if.then43
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB89_24:                              # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB89_56
# %bb.25:                               # %if.then46
	cmpl	$2, -24(%rbp)
	jne	.LBB89_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB89_27 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_29:                              # %for.cond52
                                        #   Parent Loop BB89_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB89_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB89_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_29
.LBB89_32:                              # %for.end
                                        #   in Loop: Header=BB89_27 Depth=1
	jmp	.LBB89_33
.LBB89_33:                              # %for.inc99
                                        #   in Loop: Header=BB89_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_27
.LBB89_34:                              # %for.end101
	jmp	.LBB89_55
.LBB89_35:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB89_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB89_37 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_39:                              # %for.cond109
                                        #   Parent Loop BB89_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB89_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB89_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_39
.LBB89_42:                              # %for.end139
                                        #   in Loop: Header=BB89_37 Depth=1
	jmp	.LBB89_43
.LBB89_43:                              # %for.inc140
                                        #   in Loop: Header=BB89_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_37
.LBB89_44:                              # %for.end142
	jmp	.LBB89_54
.LBB89_45:                              # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_48:                              # %for.cond148
                                        #   Parent Loop BB89_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB89_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB89_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_48
.LBB89_51:                              # %for.end178
                                        #   in Loop: Header=BB89_46 Depth=1
	jmp	.LBB89_52
.LBB89_52:                              # %for.inc179
                                        #   in Loop: Header=BB89_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_46
.LBB89_53:                              # %for.end181
	jmp	.LBB89_54
.LBB89_54:                              # %if.end182
	jmp	.LBB89_55
.LBB89_55:                              # %if.end183
	jmp	.LBB89_87
.LBB89_56:                              # %if.else184
	cmpl	$2, -24(%rbp)
	jne	.LBB89_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB89_58 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_60:                              # %for.cond192
                                        #   Parent Loop BB89_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB89_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB89_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_60
.LBB89_63:                              # %for.end208
                                        #   in Loop: Header=BB89_58 Depth=1
	jmp	.LBB89_64
.LBB89_64:                              # %for.inc209
                                        #   in Loop: Header=BB89_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_58
.LBB89_65:                              # %for.end211
	jmp	.LBB89_86
.LBB89_66:                              # %if.else212
	cmpl	$0, -24(%rbp)
	jne	.LBB89_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB89_68 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_70:                              # %for.cond220
                                        #   Parent Loop BB89_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB89_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB89_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_70
.LBB89_73:                              # %for.end233
                                        #   in Loop: Header=BB89_68 Depth=1
	jmp	.LBB89_74
.LBB89_74:                              # %for.inc234
                                        #   in Loop: Header=BB89_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_68
.LBB89_75:                              # %for.end236
	jmp	.LBB89_85
.LBB89_76:                              # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB89_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB89_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB89_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB89_77 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB89_79:                              # %for.cond242
                                        #   Parent Loop BB89_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB89_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB89_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB89_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB89_79
.LBB89_82:                              # %for.end255
                                        #   in Loop: Header=BB89_77 Depth=1
	jmp	.LBB89_83
.LBB89_83:                              # %for.inc256
                                        #   in Loop: Header=BB89_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB89_77
.LBB89_84:                              # %for.end258
	jmp	.LBB89_85
.LBB89_85:                              # %if.end259
	jmp	.LBB89_86
.LBB89_86:                              # %if.end260
	jmp	.LBB89_87
.LBB89_87:                              # %if.end261
	cmpl	$1130543267, -72(%rbp)  # imm = 0x4362B8A3
	jne	.LBB89_89
.LBB89_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_88
.Lfunc_end89:
	.size	ChromaPrediction4x4.48, .Lfunc_end89-ChromaPrediction4x4.48
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.49 # -- Begin function IntraChromaPrediction4x4.49
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.49,@function
IntraChromaPrediction4x4.49:            # @IntraChromaPrediction4x4.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$36144643, -24(%rbp)    # imm = 0x2278603
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB90_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_3:                               # %for.cond1
                                        #   Parent Loop BB90_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB90_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB90_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-28(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB90_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_3
.LBB90_6:                               # %for.end
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_7
.LBB90_7:                               # %for.inc17
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_1
.LBB90_8:                               # %for.end19
	cmpl	$36144643, -24(%rbp)    # imm = 0x2278603
	jne	.LBB90_10
.LBB90_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_9
.Lfunc_end90:
	.size	IntraChromaPrediction4x4.49, .Lfunc_end90-IntraChromaPrediction4x4.49
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.50 # -- Begin function writeLumaCoeff8x8_CABAC.50
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.50,@function
writeLumaCoeff8x8_CABAC.50:             # @writeLumaCoeff8x8_CABAC.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1967702763, -60(%rbp)  # imm = 0x7548C2EB
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB91_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB91_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB91_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB91_3:                               # %land.end
                                        #   in Loop: Header=BB91_1 Depth=1
	testb	$1, %al
	jne	.LBB91_4
	jmp	.LBB91_12
.LBB91_4:                               # %for.body
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB91_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB91_7
.LBB91_6:                               # %cond.false
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB91_7:                               # %cond.end
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB91_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB91_10
.LBB91_9:                               # %if.else
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB91_10:                              # %if.end
                                        #   in Loop: Header=BB91_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB91_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB91_1
.LBB91_12:                              # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1967702763, -60(%rbp)  # imm = 0x7548C2EB
	jne	.LBB91_14
.LBB91_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_14:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_13
.Lfunc_end91:
	.size	writeLumaCoeff8x8_CABAC.50, .Lfunc_end91-writeLumaCoeff8x8_CABAC.50
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.51 # -- Begin function writeMotionVector8x8.51
	.p2align	4, 0x90
	.type	writeMotionVector8x8.51,@function
writeMotionVector8x8.51:                # @writeMotionVector8x8.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1660971607, -96(%rbp)  # imm = 0x63006A57
	movl	%edi, -92(%rbp)
	movl	%esi, -100(%rbp)
	movl	%edx, -88(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -80(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -60(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -136(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	-80(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB92_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB92_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB92_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -64(%rbp)
	jne	.LBB92_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB92_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB92_7
.LBB92_6:                               # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB92_7:                               # %cond.end
	movq	%rax, -120(%rbp)
.LBB92_8:                               # %if.end
	movl	-100(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB92_9:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB92_11 Depth 2
                                        #       Child Loop BB92_13 Depth 3
                                        #         Child Loop BB92_15 Depth 4
                                        #           Child Loop BB92_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB92_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB92_9 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB92_11:                              # %for.cond22
                                        #   Parent Loop BB92_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB92_13 Depth 3
                                        #         Child Loop BB92_15 Depth 4
                                        #           Child Loop BB92_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB92_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB92_11 Depth=2
	movl	$0, -20(%rbp)
.LBB92_13:                              # %for.cond25
                                        #   Parent Loop BB92_9 Depth=1
                                        #     Parent Loop BB92_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB92_15 Depth 4
                                        #           Child Loop BB92_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB92_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB92_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -40(%rbp)
.LBB92_15:                              # %for.cond53
                                        #   Parent Loop BB92_9 Depth=1
                                        #     Parent Loop BB92_11 Depth=2
                                        #       Parent Loop BB92_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB92_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB92_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB92_15 Depth=4
	movl	$0, -36(%rbp)
.LBB92_17:                              # %for.cond57
                                        #   Parent Loop BB92_9 Depth=1
                                        #     Parent Loop BB92_11 Depth=2
                                        #       Parent Loop BB92_13 Depth=3
                                        #         Parent Loop BB92_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB92_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB92_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB92_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB92_17
.LBB92_20:                              # %for.end
                                        #   in Loop: Header=BB92_15 Depth=4
	jmp	.LBB92_21
.LBB92_21:                              # %for.inc70
                                        #   in Loop: Header=BB92_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB92_15
.LBB92_22:                              # %for.end72
                                        #   in Loop: Header=BB92_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB92_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB92_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB92_25
.LBB92_24:                              # %if.else
                                        #   in Loop: Header=BB92_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB92_25:                              # %if.end78
                                        #   in Loop: Header=BB92_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-136(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB92_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB92_13
.LBB92_27:                              # %for.end90
                                        #   in Loop: Header=BB92_11 Depth=2
	jmp	.LBB92_28
.LBB92_28:                              # %for.inc91
                                        #   in Loop: Header=BB92_11 Depth=2
	movl	-76(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB92_11
.LBB92_29:                              # %for.end93
                                        #   in Loop: Header=BB92_9 Depth=1
	jmp	.LBB92_30
.LBB92_30:                              # %for.inc94
                                        #   in Loop: Header=BB92_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB92_9
.LBB92_31:                              # %for.end96
	movl	-60(%rbp), %ebx
	cmpl	$1660971607, -96(%rbp)  # imm = 0x63006A57
	jne	.LBB92_33
.LBB92_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_33:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_32
.Lfunc_end92:
	.size	writeMotionVector8x8.51, .Lfunc_end92-writeMotionVector8x8.51
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.52  # -- Begin function writeMotionInfo2NAL.52
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.52,@function
writeMotionInfo2NAL.52:                 # @writeMotionInfo2NAL.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1584168243, -56(%rbp)  # imm = 0x5E6C7D33
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB93_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB93_3
.LBB93_2:                               # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB93_3:                               # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB93_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB93_6
.LBB93_5:                               # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB93_6:                               # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB93_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB93_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB93_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB93_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB93_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB93_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB93_39
.LBB93_14:                              # %if.then42
	movl	$0, -12(%rbp)
.LBB93_15:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB93_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB93_15 Depth=1
	movl	$0, -16(%rbp)
.LBB93_17:                              # %for.cond45
                                        #   Parent Loop BB93_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB93_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB93_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB93_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB93_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB93_22
.LBB93_20:                              # %land.lhs.true59
                                        #   in Loop: Header=BB93_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB93_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB93_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB93_22:                              # %if.end
                                        #   in Loop: Header=BB93_17 Depth=2
	jmp	.LBB93_23
.LBB93_23:                              # %for.inc
                                        #   in Loop: Header=BB93_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_17
.LBB93_24:                              # %for.end
                                        #   in Loop: Header=BB93_15 Depth=1
	jmp	.LBB93_25
.LBB93_25:                              # %for.inc79
                                        #   in Loop: Header=BB93_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_15
.LBB93_26:                              # %for.end81
	movl	$0, -12(%rbp)
.LBB93_27:                              # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB93_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB93_27 Depth=1
	movl	$0, -16(%rbp)
.LBB93_29:                              # %for.cond86
                                        #   Parent Loop BB93_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB93_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB93_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB93_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB93_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB93_34
.LBB93_32:                              # %land.lhs.true103
                                        #   in Loop: Header=BB93_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB93_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB93_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB93_34:                              # %if.end126
                                        #   in Loop: Header=BB93_29 Depth=2
	jmp	.LBB93_35
.LBB93_35:                              # %for.inc127
                                        #   in Loop: Header=BB93_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_29
.LBB93_36:                              # %for.end129
                                        #   in Loop: Header=BB93_27 Depth=1
	jmp	.LBB93_37
.LBB93_37:                              # %for.inc130
                                        #   in Loop: Header=BB93_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_27
.LBB93_38:                              # %for.end132
	jmp	.LBB93_39
.LBB93_39:                              # %if.end133
	jmp	.LBB93_40
.LBB93_40:                              # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB93_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB93_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB93_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB93_45:                              # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB93_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB93_45 Depth=1
	movl	$0, -16(%rbp)
.LBB93_47:                              # %for.cond155
                                        #   Parent Loop BB93_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB93_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB93_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB93_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB93_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB93_52
.LBB93_50:                              # %land.lhs.true172
                                        #   in Loop: Header=BB93_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB93_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB93_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB93_52:                              # %if.end197
                                        #   in Loop: Header=BB93_47 Depth=2
	jmp	.LBB93_53
.LBB93_53:                              # %for.inc198
                                        #   in Loop: Header=BB93_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_47
.LBB93_54:                              # %for.end200
                                        #   in Loop: Header=BB93_45 Depth=1
	jmp	.LBB93_55
.LBB93_55:                              # %for.inc201
                                        #   in Loop: Header=BB93_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_45
.LBB93_56:                              # %for.end203
	jmp	.LBB93_57
.LBB93_57:                              # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB93_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB93_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB93_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB93_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB93_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB93_63:                              # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB93_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB93_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB93_63 Depth=1
	movl	$0, -16(%rbp)
.LBB93_65:                              # %for.cond227
                                        #   Parent Loop BB93_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB93_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB93_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB93_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB93_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB93_70
.LBB93_68:                              # %land.lhs.true244
                                        #   in Loop: Header=BB93_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB93_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB93_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB93_70:                              # %if.end269
                                        #   in Loop: Header=BB93_65 Depth=2
	jmp	.LBB93_71
.LBB93_71:                              # %for.inc270
                                        #   in Loop: Header=BB93_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB93_65
.LBB93_72:                              # %for.end272
                                        #   in Loop: Header=BB93_63 Depth=1
	jmp	.LBB93_73
.LBB93_73:                              # %for.inc273
                                        #   in Loop: Header=BB93_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB93_63
.LBB93_74:                              # %for.end275
	jmp	.LBB93_75
.LBB93_75:                              # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1584168243, -56(%rbp)  # imm = 0x5E6C7D33
	jne	.LBB93_77
.LBB93_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_77:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_76
.Lfunc_end93:
	.size	writeMotionInfo2NAL.52, .Lfunc_end93-writeMotionInfo2NAL.52
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.53 # -- Begin function write_one_macroblock.53
	.p2align	4, 0x90
	.type	write_one_macroblock.53,@function
write_one_macroblock.53:                # @write_one_macroblock.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2139024465, -32(%rbp)  # imm = 0x7F7EEC51
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB94_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB94_2:                               # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB94_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB94_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB94_6
.LBB94_5:                               # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB94_6:                               # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB94_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB94_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB94_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB94_10:                              # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB94_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB94_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB94_22
.LBB94_13:                              # %if.then22
	movl	$0, -24(%rbp)
.LBB94_14:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB94_16 Depth 2
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB94_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB94_14 Depth=1
	movl	$0, -20(%rbp)
.LBB94_16:                              # %for.cond24
                                        #   Parent Loop BB94_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB94_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB94_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB94_16 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB94_16
.LBB94_19:                              # %for.end
                                        #   in Loop: Header=BB94_14 Depth=1
	jmp	.LBB94_20
.LBB94_20:                              # %for.inc35
                                        #   in Loop: Header=BB94_14 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB94_14
.LBB94_21:                              # %for.end37
	jmp	.LBB94_22
.LBB94_22:                              # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB94_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB94_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB94_30
.LBB94_25:                              # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB94_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB94_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB94_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB94_29:                              # %if.end59
	jmp	.LBB94_30
.LBB94_30:                              # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB94_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB94_32:                              # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$2139024465, -32(%rbp)  # imm = 0x7F7EEC51
	jne	.LBB94_34
.LBB94_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_34:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_33
.Lfunc_end94:
	.size	write_one_macroblock.53, .Lfunc_end94-write_one_macroblock.53
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.54         # -- Begin function B8Mode2Value.54
	.p2align	4, 0x90
	.type	B8Mode2Value.54,@function
B8Mode2Value.54:                        # @B8Mode2Value.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1016549214, -24(%rbp)  # imm = 0x3C974F5E
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB95_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB95_3
.LBB95_2:                               # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB95_3:                               # %return
	movl	-16(%rbp), %ebx
	cmpl	$1016549214, -24(%rbp)  # imm = 0x3C974F5E
	jne	.LBB95_5
.LBB95_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_4
.Lfunc_end95:
	.size	B8Mode2Value.54, .Lfunc_end95-B8Mode2Value.54
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.55 # -- Begin function terminate_macroblock.55
	.p2align	4, 0x90
	.type	terminate_macroblock.55,@function
terminate_macroblock.55:                # @terminate_macroblock.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1641527451, -112(%rbp) # imm = 0x61D7B89B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-104(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB96_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB96_2:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB96_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB96_5
.LBB96_4:                               # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB96_8
.LBB96_5:                               # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB96_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB96_7:                               # %if.end
	jmp	.LBB96_8
.LBB96_8:                               # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB96_45
# %bb.9:                                # %if.end18
	movq	.LJTI96_0(,%rax,8), %rax
	jmpq	*%rax
.LBB96_10:                              # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB96_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB96_12:                              # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB96_46
.LBB96_13:                              # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB96_46
.LBB96_14:                              # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB96_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB96_16:                              # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB96_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB96_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB96_22
.LBB96_19:                              # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB96_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB96_21:                              # %if.end64
	jmp	.LBB96_22
.LBB96_22:                              # %if.end65
	jmp	.LBB96_23
.LBB96_23:                              # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB96_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB96_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB96_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB96_27:                              # %if.end79
	jmp	.LBB96_28
.LBB96_28:                              # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB96_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB96_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB96_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB96_32:                              # %if.end89
	jmp	.LBB96_33
.LBB96_33:                              # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB96_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB96_35:                              # %if.end95
	jmp	.LBB96_46
.LBB96_36:                              # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB96_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB96_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB96_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB96_40:                              # %if.end106
	jmp	.LBB96_41
.LBB96_41:                              # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB96_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB96_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB96_44:                              # %if.end118
	jmp	.LBB96_46
.LBB96_45:                              # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB96_46:                              # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB96_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB96_48:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB96_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB96_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB96_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB96_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB96_51:                              # %if.end139
                                        #   in Loop: Header=BB96_48 Depth=1
	jmp	.LBB96_52
.LBB96_52:                              # %for.inc
                                        #   in Loop: Header=BB96_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB96_48
.LBB96_53:                              # %for.end
	jmp	.LBB96_54
.LBB96_54:                              # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB96_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB96_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB96_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB96_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB96_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB96_60:                              # %if.end174
	jmp	.LBB96_62
.LBB96_61:                              # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB96_62:                              # %if.end188
	jmp	.LBB96_63
.LBB96_63:                              # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB96_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB96_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB96_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-104(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-104(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB96_67:                              # %if.end218
	cmpl	$1641527451, -112(%rbp) # imm = 0x61D7B89B
	jne	.LBB96_69
.LBB96_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_68
.Lfunc_end96:
	.size	terminate_macroblock.55, .Lfunc_end96-terminate_macroblock.55
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI96_0:
	.quad	.LBB96_10
	.quad	.LBB96_13
	.quad	.LBB96_14
	.quad	.LBB96_36
                                        # -- End function
	.text
	.globl	writeIntra4x4Modes.56   # -- Begin function writeIntra4x4Modes.56
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.56,@function
writeIntra4x4Modes.56:                  # @writeIntra4x4Modes.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1174119573, -84(%rbp)  # imm = 0x45FBA495
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB97_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_9 Depth 2
                                        #       Child Loop BB97_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB97_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB97_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB97_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB97_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB97_8
.LBB97_5:                               # %lor.lhs.false10
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB97_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB97_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB97_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB97_17
.LBB97_8:                               # %if.then
                                        #   in Loop: Header=BB97_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -28(%rbp)
.LBB97_9:                               # %for.cond24
                                        #   Parent Loop BB97_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB97_11 Depth 3
	cmpl	$2, -28(%rbp)
	jge	.LBB97_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB97_9 Depth=2
	movl	$0, -12(%rbp)
.LBB97_11:                              # %for.cond27
                                        #   Parent Loop BB97_1 Depth=1
                                        #     Parent Loop BB97_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB97_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB97_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-28(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB97_11 Depth=3
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_11
.LBB97_14:                              # %for.end
                                        #   in Loop: Header=BB97_9 Depth=2
	jmp	.LBB97_15
.LBB97_15:                              # %for.inc42
                                        #   in Loop: Header=BB97_9 Depth=2
	movl	-76(%rbp), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB97_9
.LBB97_16:                              # %for.end44
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_17
.LBB97_17:                              # %if.end
                                        #   in Loop: Header=BB97_1 Depth=1
	jmp	.LBB97_18
.LBB97_18:                              # %for.inc45
                                        #   in Loop: Header=BB97_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_1
.LBB97_19:                              # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB97_20:                              # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB97_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB97_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB97_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB97_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB97_23:                              # %if.end57
                                        #   in Loop: Header=BB97_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB97_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB97_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB97_26
.LBB97_25:                              # %if.else
                                        #   in Loop: Header=BB97_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB97_26:                              # %if.end65
                                        #   in Loop: Header=BB97_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB97_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_20
.LBB97_28:                              # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1174119573, -84(%rbp)  # imm = 0x45FBA495
	jne	.LBB97_30
.LBB97_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_30:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_29
.Lfunc_end97:
	.size	writeIntra4x4Modes.56, .Lfunc_end97-writeIntra4x4Modes.56
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.57    # -- Begin function writeLumaCoeff8x8.57
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.57,@function
writeLumaCoeff8x8.57:                   # @writeLumaCoeff8x8.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$583227295, -36(%rbp)   # imm = 0x22C3579F
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB98_2
# %bb.1:                                # %if.then
	jmp	.LBB98_2
.LBB98_2:                               # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB98_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB98_15
.LBB98_4:                               # %if.then5
	movl	$0, -16(%rbp)
.LBB98_5:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB98_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB98_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB98_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB98_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB98_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB98_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB98_10
.LBB98_9:                               # %cond.false
                                        #   in Loop: Header=BB98_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB98_10:                              # %cond.end
                                        #   in Loop: Header=BB98_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_12
.LBB98_11:                              # %if.else
                                        #   in Loop: Header=BB98_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB98_12:                              # %if.end17
                                        #   in Loop: Header=BB98_5 Depth=1
	jmp	.LBB98_13
.LBB98_13:                              # %for.inc
                                        #   in Loop: Header=BB98_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB98_5
.LBB98_14:                              # %for.end
	jmp	.LBB98_19
.LBB98_15:                              # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB98_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB98_18
.LBB98_17:                              # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB98_18:                              # %if.end27
	jmp	.LBB98_19
.LBB98_19:                              # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$583227295, -36(%rbp)   # imm = 0x22C3579F
	jne	.LBB98_21
.LBB98_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_20
.Lfunc_end98:
	.size	writeLumaCoeff8x8.57, .Lfunc_end98-writeLumaCoeff8x8.57
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.58  # -- Begin function ChromaPrediction4x4.58
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.58,@function
ChromaPrediction4x4.58:                 # @ChromaPrediction4x4.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$1952621615, -72(%rbp)  # imm = 0x7462A42F
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB99_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB99_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB99_6
.LBB99_3:                               # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB99_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB99_5:                               # %land.end
.LBB99_6:                               # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB99_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB99_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB99_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -24(%rbp)
	jne	.LBB99_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB99_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB99_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB99_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB99_15
.LBB99_14:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB99_15:                              # %cond.end
	movq	%rax, -64(%rbp)
.LBB99_16:                              # %if.end
	cmpl	$-1, -24(%rbp)
	jne	.LBB99_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB99_87
.LBB99_18:                              # %if.end30
	cmpl	$0, -24(%rbp)
	je	.LBB99_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -24(%rbp)
	jne	.LBB99_21
.LBB99_20:                              # %if.then36
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB99_21:                              # %if.end37
	cmpl	$1, -24(%rbp)
	je	.LBB99_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -24(%rbp)
	jne	.LBB99_24
.LBB99_23:                              # %if.then43
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB99_24:                              # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB99_56
# %bb.25:                               # %if.then46
	cmpl	$2, -24(%rbp)
	jne	.LBB99_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_27:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_29 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB99_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB99_27 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_29:                              # %for.cond52
                                        #   Parent Loop BB99_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB99_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB99_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB99_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_29
.LBB99_32:                              # %for.end
                                        #   in Loop: Header=BB99_27 Depth=1
	jmp	.LBB99_33
.LBB99_33:                              # %for.inc99
                                        #   in Loop: Header=BB99_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_27
.LBB99_34:                              # %for.end101
	jmp	.LBB99_55
.LBB99_35:                              # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB99_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_37:                              # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_39 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB99_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB99_37 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_39:                              # %for.cond109
                                        #   Parent Loop BB99_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB99_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB99_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB99_39 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_39
.LBB99_42:                              # %for.end139
                                        #   in Loop: Header=BB99_37 Depth=1
	jmp	.LBB99_43
.LBB99_43:                              # %for.inc140
                                        #   in Loop: Header=BB99_37 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_37
.LBB99_44:                              # %for.end142
	jmp	.LBB99_54
.LBB99_45:                              # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_46:                              # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_48 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB99_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB99_46 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_48:                              # %for.cond148
                                        #   Parent Loop BB99_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB99_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB99_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB99_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_48
.LBB99_51:                              # %for.end178
                                        #   in Loop: Header=BB99_46 Depth=1
	jmp	.LBB99_52
.LBB99_52:                              # %for.inc179
                                        #   in Loop: Header=BB99_46 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_46
.LBB99_53:                              # %for.end181
	jmp	.LBB99_54
.LBB99_54:                              # %if.end182
	jmp	.LBB99_55
.LBB99_55:                              # %if.end183
	jmp	.LBB99_87
.LBB99_56:                              # %if.else184
	cmpl	$2, -24(%rbp)
	jne	.LBB99_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_58:                              # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_60 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB99_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB99_58 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_60:                              # %for.cond192
                                        #   Parent Loop BB99_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB99_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB99_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB99_60 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_60
.LBB99_63:                              # %for.end208
                                        #   in Loop: Header=BB99_58 Depth=1
	jmp	.LBB99_64
.LBB99_64:                              # %for.inc209
                                        #   in Loop: Header=BB99_58 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_58
.LBB99_65:                              # %for.end211
	jmp	.LBB99_86
.LBB99_66:                              # %if.else212
	cmpl	$0, -24(%rbp)
	jne	.LBB99_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_68:                              # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_70 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB99_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB99_68 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_70:                              # %for.cond220
                                        #   Parent Loop BB99_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB99_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB99_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB99_70 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_70
.LBB99_73:                              # %for.end233
                                        #   in Loop: Header=BB99_68 Depth=1
	jmp	.LBB99_74
.LBB99_74:                              # %for.inc234
                                        #   in Loop: Header=BB99_68 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_68
.LBB99_75:                              # %for.end236
	jmp	.LBB99_85
.LBB99_76:                              # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB99_77:                              # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB99_79 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB99_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB99_77 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB99_79:                              # %for.cond242
                                        #   Parent Loop BB99_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB99_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB99_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB99_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB99_79
.LBB99_82:                              # %for.end255
                                        #   in Loop: Header=BB99_77 Depth=1
	jmp	.LBB99_83
.LBB99_83:                              # %for.inc256
                                        #   in Loop: Header=BB99_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB99_77
.LBB99_84:                              # %for.end258
	jmp	.LBB99_85
.LBB99_85:                              # %if.end259
	jmp	.LBB99_86
.LBB99_86:                              # %if.end260
	jmp	.LBB99_87
.LBB99_87:                              # %if.end261
	cmpl	$1952621615, -72(%rbp)  # imm = 0x7462A42F
	jne	.LBB99_89
.LBB99_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_89:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_88
.Lfunc_end99:
	.size	ChromaPrediction4x4.58, .Lfunc_end99-ChromaPrediction4x4.58
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.59 # -- Begin function LumaResidualCoding8x8.59
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.59,@function
LumaResidualCoding8x8.59:               # @LumaResidualCoding8x8.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1974508350, -124(%rbp) # imm = 0x75B09B3E
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -68(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -36(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -60(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB100_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -68(%rbp)
	jne	.LBB100_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB100_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB100_5
# %bb.4:                                # %if.then
	movl	$1, -120(%rbp)
.LBB100_5:                              # %if.end
	movl	$0, -84(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB100_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_8 Depth 2
                                        #       Child Loop BB100_11 Depth 3
                                        #         Child Loop BB100_13 Depth 4
                                        #       Child Loop BB100_19 Depth 3
                                        #         Child Loop BB100_21 Depth 4
                                        #       Child Loop BB100_29 Depth 3
                                        #         Child Loop BB100_31 Depth 4
                                        #       Child Loop BB100_40 Depth 3
                                        #         Child Loop BB100_42 Depth 4
                                        #       Child Loop BB100_57 Depth 3
                                        #         Child Loop BB100_59 Depth 4
                                        #       Child Loop BB100_67 Depth 3
                                        #         Child Loop BB100_69 Depth 4
                                        #       Child Loop BB100_84 Depth 3
                                        #         Child Loop BB100_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB100_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -72(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB100_8:                              # %for.cond9
                                        #   Parent Loop BB100_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB100_11 Depth 3
                                        #         Child Loop BB100_13 Depth 4
                                        #       Child Loop BB100_19 Depth 3
                                        #         Child Loop BB100_21 Depth 4
                                        #       Child Loop BB100_29 Depth 3
                                        #         Child Loop BB100_31 Depth 4
                                        #       Child Loop BB100_40 Depth 3
                                        #         Child Loop BB100_42 Depth 4
                                        #       Child Loop BB100_57 Depth 3
                                        #         Child Loop BB100_59 Depth 4
                                        #       Child Loop BB100_67 Depth 3
                                        #         Child Loop BB100_69 Depth 4
                                        #       Child Loop BB100_84 Depth 3
                                        #         Child Loop BB100_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB100_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB100_11:                             # %for.cond16
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB100_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB100_11 Depth=3
	movl	$0, -12(%rbp)
.LBB100_13:                             # %for.cond20
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        #       Parent Loop BB100_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB100_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB100_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB100_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_13
.LBB100_16:                             # %for.end
                                        #   in Loop: Header=BB100_11 Depth=3
	jmp	.LBB100_17
.LBB100_17:                             # %for.inc37
                                        #   in Loop: Header=BB100_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_11
.LBB100_18:                             # %for.end39
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB100_19:                             # %for.cond41
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB100_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB100_19 Depth=3
	movl	$0, -12(%rbp)
.LBB100_21:                             # %for.cond45
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        #       Parent Loop BB100_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB100_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB100_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB100_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_21
.LBB100_24:                             # %for.end65
                                        #   in Loop: Header=BB100_19 Depth=3
	jmp	.LBB100_25
.LBB100_25:                             # %for.inc66
                                        #   in Loop: Header=BB100_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_19
.LBB100_26:                             # %for.end68
                                        #   in Loop: Header=BB100_8 Depth=2
	jmp	.LBB100_27
.LBB100_27:                             # %if.end69
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	$0, -16(%rbp)
.LBB100_29:                             # %for.cond74
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB100_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB100_29 Depth=3
	movl	$0, -12(%rbp)
.LBB100_31:                             # %for.cond78
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        #       Parent Loop BB100_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB100_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB100_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB100_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_31
.LBB100_34:                             # %for.end98
                                        #   in Loop: Header=BB100_29 Depth=3
	jmp	.LBB100_35
.LBB100_35:                             # %for.inc99
                                        #   in Loop: Header=BB100_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_29
.LBB100_36:                             # %for.end101
                                        #   in Loop: Header=BB100_8 Depth=2
	jmp	.LBB100_37
.LBB100_37:                             # %if.end102
                                        #   in Loop: Header=BB100_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB100_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB100_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB100_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	$0, -16(%rbp)
.LBB100_40:                             # %for.cond108
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB100_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB100_40 Depth=3
	movl	$0, -12(%rbp)
.LBB100_42:                             # %for.cond112
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        #       Parent Loop BB100_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB100_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB100_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB100_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_42
.LBB100_45:                             # %for.end137
                                        #   in Loop: Header=BB100_40 Depth=3
	jmp	.LBB100_46
.LBB100_46:                             # %for.inc138
                                        #   in Loop: Header=BB100_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_40
.LBB100_47:                             # %for.end140
                                        #   in Loop: Header=BB100_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB100_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB100_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB100_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB100_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB100_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB100_52
.LBB100_51:                             # %if.else
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB100_52:                             # %if.end151
                                        #   in Loop: Header=BB100_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB100_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB100_54:                             # %if.end157
                                        #   in Loop: Header=BB100_8 Depth=2
	jmp	.LBB100_55
.LBB100_55:                             # %if.end158
                                        #   in Loop: Header=BB100_8 Depth=2
	jmp	.LBB100_65
.LBB100_56:                             # %if.else159
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	$0, -16(%rbp)
.LBB100_57:                             # %for.cond160
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB100_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB100_57 Depth=3
	movl	$0, -12(%rbp)
.LBB100_59:                             # %for.cond164
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        #       Parent Loop BB100_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB100_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB100_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB100_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_59
.LBB100_62:                             # %for.end193
                                        #   in Loop: Header=BB100_57 Depth=3
	jmp	.LBB100_63
.LBB100_63:                             # %for.inc194
                                        #   in Loop: Header=BB100_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_57
.LBB100_64:                             # %for.end196
                                        #   in Loop: Header=BB100_8 Depth=2
	jmp	.LBB100_65
.LBB100_65:                             # %if.end197
                                        #   in Loop: Header=BB100_8 Depth=2
	jmp	.LBB100_95
.LBB100_66:                             # %if.else198
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	$0, -16(%rbp)
.LBB100_67:                             # %for.cond199
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB100_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB100_67 Depth=3
	movl	$0, -12(%rbp)
.LBB100_69:                             # %for.cond203
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        #       Parent Loop BB100_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB100_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB100_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -92(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-116(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -64(%rbp)
	jne	.LBB100_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB100_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB100_73
.LBB100_72:                             # %if.else300
                                        #   in Loop: Header=BB100_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB100_73:                             # %if.end314
                                        #   in Loop: Header=BB100_69 Depth=4
	jmp	.LBB100_74
.LBB100_74:                             # %for.inc315
                                        #   in Loop: Header=BB100_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_69
.LBB100_75:                             # %for.end317
                                        #   in Loop: Header=BB100_67 Depth=3
	jmp	.LBB100_76
.LBB100_76:                             # %for.inc318
                                        #   in Loop: Header=BB100_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_67
.LBB100_77:                             # %for.end320
                                        #   in Loop: Header=BB100_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB100_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB100_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB100_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB100_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB100_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB100_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB100_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB100_83
.LBB100_82:                             # %if.else334
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB100_83:                             # %if.end336
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	$0, -16(%rbp)
.LBB100_84:                             # %for.cond337
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB100_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB100_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB100_84 Depth=3
	movl	$0, -12(%rbp)
.LBB100_86:                             # %for.cond341
                                        #   Parent Loop BB100_6 Depth=1
                                        #     Parent Loop BB100_8 Depth=2
                                        #       Parent Loop BB100_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB100_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB100_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB100_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_86
.LBB100_89:                             # %for.end358
                                        #   in Loop: Header=BB100_84 Depth=3
	jmp	.LBB100_90
.LBB100_90:                             # %for.inc359
                                        #   in Loop: Header=BB100_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_84
.LBB100_91:                             # %for.end361
                                        #   in Loop: Header=BB100_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB100_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB100_93:                             # %if.end368
                                        #   in Loop: Header=BB100_8 Depth=2
	jmp	.LBB100_94
.LBB100_94:                             # %if.end369
                                        #   in Loop: Header=BB100_8 Depth=2
	jmp	.LBB100_95
.LBB100_95:                             # %if.end370
                                        #   in Loop: Header=BB100_8 Depth=2
	jmp	.LBB100_96
.LBB100_96:                             # %for.inc371
                                        #   in Loop: Header=BB100_8 Depth=2
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB100_8
.LBB100_97:                             # %for.end374
                                        #   in Loop: Header=BB100_6 Depth=1
	jmp	.LBB100_98
.LBB100_98:                             # %for.inc375
                                        #   in Loop: Header=BB100_6 Depth=1
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB100_6
.LBB100_99:                             # %for.end378
	cmpl	$0, -64(%rbp)
	je	.LBB100_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB100_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -80(%rbp)
	jne	.LBB100_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB100_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-36(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB100_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB100_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB100_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB100_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB100_106 Depth=1
	movl	$0, -12(%rbp)
.LBB100_108:                            # %for.cond400
                                        #   Parent Loop BB100_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB100_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB100_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB100_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_108
.LBB100_111:                            # %for.end417
                                        #   in Loop: Header=BB100_106 Depth=1
	jmp	.LBB100_112
.LBB100_112:                            # %for.inc418
                                        #   in Loop: Header=BB100_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_106
.LBB100_113:                            # %for.end420
	jmp	.LBB100_114
.LBB100_114:                            # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB100_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-60(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB100_116:                            # %if.end431
	jmp	.LBB100_117
.LBB100_117:                            # %if.end432
	jmp	.LBB100_118
.LBB100_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB100_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -80(%rbp)
	jne	.LBB100_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -36(%rbp)
	jg	.LBB100_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB100_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB100_145
.LBB100_123:                            # %if.then448
	movl	$0, -36(%rbp)
	movl	$63, %eax
	subl	-60(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB100_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_126:                            # %for.cond462
                                        #   Parent Loop BB100_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB100_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB100_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB100_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB100_130
.LBB100_129:                            # %if.else481
                                        #   in Loop: Header=BB100_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB100_130:                            # %if.end486
                                        #   in Loop: Header=BB100_126 Depth=2
	jmp	.LBB100_131
.LBB100_131:                            # %for.inc487
                                        #   in Loop: Header=BB100_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_126
.LBB100_132:                            # %for.end489
                                        #   in Loop: Header=BB100_124 Depth=1
	jmp	.LBB100_133
.LBB100_133:                            # %for.inc490
                                        #   in Loop: Header=BB100_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_124
.LBB100_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB100_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB100_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB100_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB100_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB100_138:                            # %for.cond502
                                        #   Parent Loop BB100_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB100_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB100_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB100_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB100_138
.LBB100_141:                            # %for.end509
                                        #   in Loop: Header=BB100_136 Depth=1
	jmp	.LBB100_142
.LBB100_142:                            # %for.inc510
                                        #   in Loop: Header=BB100_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB100_136
.LBB100_143:                            # %for.end512
	jmp	.LBB100_144
.LBB100_144:                            # %if.end513
	jmp	.LBB100_145
.LBB100_145:                            # %if.end514
	movl	-36(%rbp), %ebx
	cmpl	$1974508350, -124(%rbp) # imm = 0x75B09B3E
	jne	.LBB100_147
.LBB100_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_146
.Lfunc_end100:
	.size	LumaResidualCoding8x8.59, .Lfunc_end100-LumaResidualCoding8x8.59
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.60         # -- Begin function MBType2Value.60
	.p2align	4, 0x90
	.type	MBType2Value.60,@function
MBType2Value.60:                        # @MBType2Value.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1886798725, -36(%rbp)  # imm = 0x70764385
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB101_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB101_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB101_4
.LBB101_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB101_26
.LBB101_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB101_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB101_26
.LBB101_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB101_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB101_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB101_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB101_26
.LBB101_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB101_26
.LBB101_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_26
.LBB101_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB101_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB101_26
.LBB101_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB101_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB101_17
.LBB101_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB101_26
.LBB101_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB101_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_26
.LBB101_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB101_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB101_26
.LBB101_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB101_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_26
.LBB101_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB101_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB101_26
.LBB101_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB101_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1886798725, -36(%rbp)  # imm = 0x70764385
	jne	.LBB101_28
.LBB101_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_27
.Lfunc_end101:
	.size	MBType2Value.60, .Lfunc_end101-MBType2Value.60
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.61         # -- Begin function writeMBLayer.61
	.p2align	4, 0x90
	.type	writeMBLayer.61,@function
writeMBLayer.61:                        # @writeMBLayer.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$618880364, -92(%rbp)   # imm = 0x24E35D6C
	movl	%edi, -100(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB102_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB102_3
.LBB102_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB102_3
.LBB102_3:                              # %cond.end
	movq	%rax, -128(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB102_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB102_9
.LBB102_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB102_8
.LBB102_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB102_8
.LBB102_8:                              # %cond.end14
.LBB102_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB102_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB102_24
.LBB102_12:                             # %if.else
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB102_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB102_17
	jmp	.LBB102_18
.LBB102_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_16
# %bb.15:                               # %cond.true28
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB102_18
	jmp	.LBB102_17
.LBB102_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB102_17
	jmp	.LBB102_18
.LBB102_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB102_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB102_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB102_23
.LBB102_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB102_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB102_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB102_23:                             # %if.end50
	jmp	.LBB102_24
.LBB102_24:                             # %if.end51
	jmp	.LBB102_25
.LBB102_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB102_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB102_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB102_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB102_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB102_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB102_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB102_35
.LBB102_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB102_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB102_38
.LBB102_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB102_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB102_39:                             # %if.end96
	jmp	.LBB102_40
.LBB102_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB102_43
.LBB102_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB102_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB102_89
.LBB102_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB102_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB102_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB102_49
.LBB102_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -96(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB102_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB102_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB102_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB102_55
.LBB102_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB102_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB102_58
.LBB102_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB102_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB102_59:                             # %if.end198
	jmp	.LBB102_60
.LBB102_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB102_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB102_64
.LBB102_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB102_64:                             # %if.end226
	jmp	.LBB102_88
.LBB102_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB102_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB102_76
.LBB102_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB102_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB102_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB102_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB102_72:                             # %if.end281
	jmp	.LBB102_73
.LBB102_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB102_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB102_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB102_87
.LBB102_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -72(%rbp)
.LBB102_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB102_79 Depth 2
	movl	-72(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB102_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB102_77 Depth=1
	movl	$0, -44(%rbp)
.LBB102_79:                             # %for.cond310
                                        #   Parent Loop BB102_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB102_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB102_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB102_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB102_79
.LBB102_82:                             # %for.end
                                        #   in Loop: Header=BB102_77 Depth=1
	jmp	.LBB102_83
.LBB102_83:                             # %for.inc322
                                        #   in Loop: Header=BB102_77 Depth=1
	movl	-72(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB102_77
.LBB102_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB102_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB102_86:                             # %if.end345
	jmp	.LBB102_87
.LBB102_87:                             # %if.end346
	jmp	.LBB102_88
.LBB102_88:                             # %if.end347
	jmp	.LBB102_89
.LBB102_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB102_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB102_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB102_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB102_104
# %bb.93:                               # %if.then366
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB102_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB102_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB102_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB102_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB102_98
.LBB102_97:                             # %if.else380
                                        #   in Loop: Header=BB102_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB102_98:                             # %if.end382
                                        #   in Loop: Header=BB102_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB102_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB102_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB102_101
.LBB102_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB102_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB102_101:                            # %lor.end415
                                        #   in Loop: Header=BB102_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB102_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB102_94
.LBB102_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB102_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB102_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB102_114
.LBB102_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB102_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB102_110
.LBB102_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB102_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB102_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB102_113
.LBB102_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB102_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB102_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB102_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB102_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB102_120
.LBB102_117:                            # %if.else480
	cmpl	$0, -100(%rbp)
	jne	.LBB102_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB102_119:                            # %if.end483
	jmp	.LBB102_120
.LBB102_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB102_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB102_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB102_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB102_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB102_129
.LBB102_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB102_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB102_128:                            # %if.end516
	jmp	.LBB102_129
.LBB102_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$618880364, -92(%rbp)   # imm = 0x24E35D6C
	jne	.LBB102_131
.LBB102_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_130
.Lfunc_end102:
	.size	writeMBLayer.61, .Lfunc_end102-writeMBLayer.61
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.62   # -- Begin function LumaResidualCoding.62
	.p2align	4, 0x90
	.type	LumaResidualCoding.62,@function
LumaResidualCoding.62:                  # @LumaResidualCoding.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1585681180, -40(%rbp)  # imm = 0x5E83931C
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB103_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -8(%rbp)
	jge	.LBB103_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	-8(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-8(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-48(%rbp), %r8d
	movl	-36(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB103_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_1
.LBB103_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB103_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB103_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB103_33
.LBB103_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -12(%rbp)
.LBB103_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_10 Depth 2
	cmpl	$16, -12(%rbp)
	jge	.LBB103_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB103_8 Depth=1
	movl	$0, -4(%rbp)
.LBB103_10:                             # %for.cond13
                                        #   Parent Loop BB103_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB103_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB103_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB103_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB103_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB103_14
.LBB103_13:                             # %if.else
                                        #   in Loop: Header=BB103_10 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB103_14:                             # %if.end
                                        #   in Loop: Header=BB103_10 Depth=2
	jmp	.LBB103_15
.LBB103_15:                             # %for.inc31
                                        #   in Loop: Header=BB103_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_10
.LBB103_16:                             # %for.end33
                                        #   in Loop: Header=BB103_8 Depth=1
	jmp	.LBB103_17
.LBB103_17:                             # %for.inc34
                                        #   in Loop: Header=BB103_8 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_8
.LBB103_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB103_32
# %bb.19:                               # %if.then38
	movl	$0, -8(%rbp)
.LBB103_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB103_22 Depth 2
                                        #       Child Loop BB103_24 Depth 3
	cmpl	$4, -8(%rbp)
	jge	.LBB103_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB103_20 Depth=1
	movl	-8(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -12(%rbp)
.LBB103_22:                             # %for.cond45
                                        #   Parent Loop BB103_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB103_24 Depth 3
	cmpl	$8, -12(%rbp)
	jge	.LBB103_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB103_22 Depth=2
	movl	$0, -4(%rbp)
.LBB103_24:                             # %for.cond48
                                        #   Parent Loop BB103_20 Depth=1
                                        #     Parent Loop BB103_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB103_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB103_24 Depth=3
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movl	-44(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB103_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB103_24
.LBB103_27:                             # %for.end55
                                        #   in Loop: Header=BB103_22 Depth=2
	jmp	.LBB103_28
.LBB103_28:                             # %for.inc56
                                        #   in Loop: Header=BB103_22 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB103_22
.LBB103_29:                             # %for.end58
                                        #   in Loop: Header=BB103_20 Depth=1
	jmp	.LBB103_30
.LBB103_30:                             # %for.inc59
                                        #   in Loop: Header=BB103_20 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB103_20
.LBB103_31:                             # %for.end61
	jmp	.LBB103_32
.LBB103_32:                             # %if.end62
	jmp	.LBB103_33
.LBB103_33:                             # %if.end63
	cmpl	$1585681180, -40(%rbp)  # imm = 0x5E83931C
	jne	.LBB103_35
.LBB103_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_34
.Lfunc_end103:
	.size	LumaResidualCoding.62, .Lfunc_end103-LumaResidualCoding.62
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4.63         # -- Begin function copyblock4x4.63
	.p2align	4, 0x90
	.type	copyblock4x4.63,@function
copyblock4x4.63:                        # @copyblock4x4.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$864803044, -20(%rbp)   # imm = 0x338BD8E4
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$864803044, -20(%rbp)   # imm = 0x338BD8E4
	jne	.LBB104_2
.LBB104_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_1
.Lfunc_end104:
	.size	copyblock4x4.63, .Lfunc_end104-copyblock4x4.63
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.64 # -- Begin function OneComponentLumaPrediction4x4.64
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.64,@function
OneComponentLumaPrediction4x4.64:       # @OneComponentLumaPrediction4x4.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1639263384, -88(%rbp)  # imm = 0x61B52C98
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1639263384, -88(%rbp)  # imm = 0x61B52C98
	jne	.LBB105_2
.LBB105_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_1
.Lfunc_end105:
	.size	OneComponentLumaPrediction4x4.64, .Lfunc_end105-OneComponentLumaPrediction4x4.64
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.65 # -- Begin function IntraChromaPrediction4x4.65
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.65,@function
IntraChromaPrediction4x4.65:            # @IntraChromaPrediction4x4.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1822036656, -20(%rbp)  # imm = 0x6C9A12B0
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_3:                              # %for.cond1
                                        #   Parent Loop BB106_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB106_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB106_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-28(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB106_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_3
.LBB106_6:                              # %for.end
                                        #   in Loop: Header=BB106_1 Depth=1
	jmp	.LBB106_7
.LBB106_7:                              # %for.inc17
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_1
.LBB106_8:                              # %for.end19
	cmpl	$1822036656, -20(%rbp)  # imm = 0x6C9A12B0
	jne	.LBB106_10
.LBB106_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_9
.Lfunc_end106:
	.size	IntraChromaPrediction4x4.65, .Lfunc_end106-IntraChromaPrediction4x4.65
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.66  # -- Begin function ChromaPrediction4x4.66
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.66,@function
ChromaPrediction4x4.66:                 # @ChromaPrediction4x4.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$774001188, -72(%rbp)   # imm = 0x2E225224
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB107_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB107_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB107_6
.LBB107_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB107_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB107_5:                              # %land.end
.LBB107_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB107_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB107_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB107_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB107_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB107_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB107_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB107_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB107_15
.LBB107_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB107_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB107_16:                             # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB107_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB107_87
.LBB107_18:                             # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB107_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB107_21
.LBB107_20:                             # %if.then36
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB107_21:                             # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB107_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB107_24
.LBB107_23:                             # %if.then43
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB107_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB107_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB107_35
# %bb.26:                               # %if.then49
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB107_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB107_27 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_29:                             # %for.cond52
                                        #   Parent Loop BB107_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB107_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB107_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB107_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_29
.LBB107_32:                             # %for.end
                                        #   in Loop: Header=BB107_27 Depth=1
	jmp	.LBB107_33
.LBB107_33:                             # %for.inc99
                                        #   in Loop: Header=BB107_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_27
.LBB107_34:                             # %for.end101
	jmp	.LBB107_55
.LBB107_35:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB107_45
# %bb.36:                               # %if.then104
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB107_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB107_37 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_39:                             # %for.cond109
                                        #   Parent Loop BB107_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB107_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB107_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB107_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_39
.LBB107_42:                             # %for.end139
                                        #   in Loop: Header=BB107_37 Depth=1
	jmp	.LBB107_43
.LBB107_43:                             # %for.inc140
                                        #   in Loop: Header=BB107_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_37
.LBB107_44:                             # %for.end142
	jmp	.LBB107_54
.LBB107_45:                             # %if.else143
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB107_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB107_46 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_48:                             # %for.cond148
                                        #   Parent Loop BB107_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB107_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB107_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB107_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_48
.LBB107_51:                             # %for.end178
                                        #   in Loop: Header=BB107_46 Depth=1
	jmp	.LBB107_52
.LBB107_52:                             # %for.inc179
                                        #   in Loop: Header=BB107_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_46
.LBB107_53:                             # %for.end181
	jmp	.LBB107_54
.LBB107_54:                             # %if.end182
	jmp	.LBB107_55
.LBB107_55:                             # %if.end183
	jmp	.LBB107_87
.LBB107_56:                             # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB107_66
# %bb.57:                               # %if.then187
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB107_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB107_58 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_60:                             # %for.cond192
                                        #   Parent Loop BB107_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB107_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB107_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB107_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_60
.LBB107_63:                             # %for.end208
                                        #   in Loop: Header=BB107_58 Depth=1
	jmp	.LBB107_64
.LBB107_64:                             # %for.inc209
                                        #   in Loop: Header=BB107_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_58
.LBB107_65:                             # %for.end211
	jmp	.LBB107_86
.LBB107_66:                             # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB107_76
# %bb.67:                               # %if.then215
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB107_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB107_68 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_70:                             # %for.cond220
                                        #   Parent Loop BB107_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB107_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB107_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB107_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_70
.LBB107_73:                             # %for.end233
                                        #   in Loop: Header=BB107_68 Depth=1
	jmp	.LBB107_74
.LBB107_74:                             # %for.inc234
                                        #   in Loop: Header=BB107_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_68
.LBB107_75:                             # %for.end236
	jmp	.LBB107_85
.LBB107_76:                             # %if.else237
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB107_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB107_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB107_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB107_77 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB107_79:                             # %for.cond242
                                        #   Parent Loop BB107_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB107_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB107_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB107_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB107_79
.LBB107_82:                             # %for.end255
                                        #   in Loop: Header=BB107_77 Depth=1
	jmp	.LBB107_83
.LBB107_83:                             # %for.inc256
                                        #   in Loop: Header=BB107_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB107_77
.LBB107_84:                             # %for.end258
	jmp	.LBB107_85
.LBB107_85:                             # %if.end259
	jmp	.LBB107_86
.LBB107_86:                             # %if.end260
	jmp	.LBB107_87
.LBB107_87:                             # %if.end261
	cmpl	$774001188, -72(%rbp)   # imm = 0x2E225224
	jne	.LBB107_89
.LBB107_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_88
.Lfunc_end107:
	.size	ChromaPrediction4x4.66, .Lfunc_end107-ChromaPrediction4x4.66
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.67       # -- Begin function find_sad_16x16.67
	.p2align	4, 0x90
	.type	find_sad_16x16.67,@function
find_sad_16x16.67:                      # @find_sad_16x16.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$1313757045, -80(%rbp)  # imm = 0x4E4E5775
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB108_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB108_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB108_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_1
.LBB108_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB108_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB108_20
.LBB108_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB108_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB108_9
.LBB108_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB108_9
.LBB108_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB108_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB108_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB108_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB108_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB108_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB108_14
.LBB108_13:                             # %cond.false23
                                        #   in Loop: Header=BB108_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB108_14
.LBB108_14:                             # %cond.end24
                                        #   in Loop: Header=BB108_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB108_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_10
.LBB108_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB108_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB108_19
.LBB108_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB108_19
.LBB108_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB108_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB108_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB108_42 Depth 2
                                        #       Child Loop BB108_44 Depth 3
                                        #     Child Loop BB108_50 Depth 2
                                        #       Child Loop BB108_52 Depth 3
                                        #         Child Loop BB108_54 Depth 4
                                        #         Child Loop BB108_58 Depth 4
                                        #           Child Loop BB108_60 Depth 5
                                        #     Child Loop BB108_72 Depth 2
                                        #       Child Loop BB108_74 Depth 3
                                        #     Child Loop BB108_80 Depth 2
                                        #     Child Loop BB108_84 Depth 2
                                        #       Child Loop BB108_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB108_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB108_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB108_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB108_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB108_32
.LBB108_24:                             # %if.then46
                                        #   in Loop: Header=BB108_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB108_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB108_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB108_28
.LBB108_27:                             # %if.then51
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_95
.LBB108_28:                             # %if.end52
                                        #   in Loop: Header=BB108_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB108_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB108_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_95
.LBB108_31:                             # %if.end57
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_32
.LBB108_32:                             # %if.end58
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB108_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB108_40
.LBB108_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB108_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB108_40
.LBB108_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB108_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB108_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB108_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB108_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB108_41
.LBB108_40:                             # %if.then74
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_94
.LBB108_41:                             # %if.else75
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	$0, -16(%rbp)
.LBB108_42:                             # %for.cond76
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB108_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB108_42 Depth=2
	movl	$0, -12(%rbp)
.LBB108_44:                             # %for.cond79
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB108_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB108_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB108_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_44
.LBB108_47:                             # %for.end115
                                        #   in Loop: Header=BB108_42 Depth=2
	jmp	.LBB108_48
.LBB108_48:                             # %for.inc116
                                        #   in Loop: Header=BB108_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_42
.LBB108_49:                             # %for.end118
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB108_50:                             # %for.cond119
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_52 Depth 3
                                        #         Child Loop BB108_54 Depth 4
                                        #         Child Loop BB108_58 Depth 4
                                        #           Child Loop BB108_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB108_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB108_50 Depth=2
	movl	$0, -20(%rbp)
.LBB108_52:                             # %for.cond123
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB108_54 Depth 4
                                        #         Child Loop BB108_58 Depth 4
                                        #           Child Loop BB108_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB108_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB108_52 Depth=3
	movl	$0, -16(%rbp)
.LBB108_54:                             # %for.cond127
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_50 Depth=2
                                        #       Parent Loop BB108_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB108_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB108_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB108_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_54
.LBB108_57:                             # %for.end237
                                        #   in Loop: Header=BB108_52 Depth=3
	movl	$0, -12(%rbp)
.LBB108_58:                             # %for.cond238
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_50 Depth=2
                                        #       Parent Loop BB108_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB108_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB108_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB108_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB108_60:                             # %for.cond346
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_50 Depth=2
                                        #       Parent Loop BB108_52 Depth=3
                                        #         Parent Loop BB108_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB108_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB108_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB108_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB108_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB108_63:                             # %if.end363
                                        #   in Loop: Header=BB108_60 Depth=5
	jmp	.LBB108_64
.LBB108_64:                             # %for.inc364
                                        #   in Loop: Header=BB108_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_60
.LBB108_65:                             # %for.end366
                                        #   in Loop: Header=BB108_58 Depth=4
	jmp	.LBB108_66
.LBB108_66:                             # %for.inc367
                                        #   in Loop: Header=BB108_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_58
.LBB108_67:                             # %for.end369
                                        #   in Loop: Header=BB108_52 Depth=3
	jmp	.LBB108_68
.LBB108_68:                             # %for.inc370
                                        #   in Loop: Header=BB108_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB108_52
.LBB108_69:                             # %for.end372
                                        #   in Loop: Header=BB108_50 Depth=2
	jmp	.LBB108_70
.LBB108_70:                             # %for.inc373
                                        #   in Loop: Header=BB108_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB108_50
.LBB108_71:                             # %for.end375
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	$0, -16(%rbp)
.LBB108_72:                             # %for.cond376
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB108_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB108_72 Depth=2
	movl	$0, -12(%rbp)
.LBB108_74:                             # %for.cond380
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB108_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB108_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB108_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_74
.LBB108_77:                             # %for.end397
                                        #   in Loop: Header=BB108_72 Depth=2
	jmp	.LBB108_78
.LBB108_78:                             # %for.inc398
                                        #   in Loop: Header=BB108_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_72
.LBB108_79:                             # %for.end400
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	$0, -16(%rbp)
.LBB108_80:                             # %for.cond401
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB108_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB108_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB108_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_80
.LBB108_83:                             # %for.end463
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	$0, -12(%rbp)
.LBB108_84:                             # %for.cond464
                                        #   Parent Loop BB108_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB108_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB108_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB108_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB108_86:                             # %for.cond524
                                        #   Parent Loop BB108_21 Depth=1
                                        #     Parent Loop BB108_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB108_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB108_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB108_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB108_86
.LBB108_89:                             # %for.end536
                                        #   in Loop: Header=BB108_84 Depth=2
	jmp	.LBB108_90
.LBB108_90:                             # %for.inc537
                                        #   in Loop: Header=BB108_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB108_84
.LBB108_91:                             # %for.end539
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB108_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB108_93:                             # %if.end543
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_94
.LBB108_94:                             # %if.end544
                                        #   in Loop: Header=BB108_21 Depth=1
	jmp	.LBB108_95
.LBB108_95:                             # %for.inc545
                                        #   in Loop: Header=BB108_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB108_21
.LBB108_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$1313757045, -80(%rbp)  # imm = 0x4E4E5775
	jne	.LBB108_98
.LBB108_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_97
.Lfunc_end108:
	.size	find_sad_16x16.67, .Lfunc_end108-find_sad_16x16.67
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.68  # -- Begin function SetModesAndRefframe.68
	.p2align	4, 0x90
	.type	SetModesAndRefframe.68,@function
SetModesAndRefframe.68:                 # @SetModesAndRefframe.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$768948529, -60(%rbp)   # imm = 0x2DD53931
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB109_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB109_12
.LBB109_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB109_4
# %bb.3:                                # %if.then18
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB109_11
.LBB109_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB109_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB109_10
.LBB109_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB109_8
# %bb.7:                                # %if.then45
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB109_9
.LBB109_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB109_9:                              # %if.end
	jmp	.LBB109_10
.LBB109_10:                             # %if.end86
	jmp	.LBB109_11
.LBB109_11:                             # %if.end87
	jmp	.LBB109_12
.LBB109_12:                             # %if.end88
	cmpl	$768948529, -60(%rbp)   # imm = 0x2DD53931
	jne	.LBB109_14
.LBB109_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_13
.Lfunc_end109:
	.size	SetModesAndRefframe.68, .Lfunc_end109-SetModesAndRefframe.68
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.69   # -- Begin function LumaResidualCoding.69
	.p2align	4, 0x90
	.type	LumaResidualCoding.69,@function
LumaResidualCoding.69:                  # @LumaResidualCoding.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$211517018, -48(%rbp)   # imm = 0xC9B7E5A
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB110_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB110_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-22(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-40(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-22(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_1
.LBB110_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB110_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB110_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB110_33
.LBB110_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB110_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB110_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB110_8 Depth=1
	movl	$0, -8(%rbp)
.LBB110_10:                             # %for.cond13
                                        #   Parent Loop BB110_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB110_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB110_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB110_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB110_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB110_14
.LBB110_13:                             # %if.else
                                        #   in Loop: Header=BB110_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB110_14:                             # %if.end
                                        #   in Loop: Header=BB110_10 Depth=2
	jmp	.LBB110_15
.LBB110_15:                             # %for.inc31
                                        #   in Loop: Header=BB110_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_10
.LBB110_16:                             # %for.end33
                                        #   in Loop: Header=BB110_8 Depth=1
	jmp	.LBB110_17
.LBB110_17:                             # %for.inc34
                                        #   in Loop: Header=BB110_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_8
.LBB110_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB110_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB110_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_22 Depth 2
                                        #       Child Loop BB110_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB110_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB110_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -36(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -44(%rbp)
	movl	$0, -4(%rbp)
.LBB110_22:                             # %for.cond45
                                        #   Parent Loop BB110_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB110_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB110_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB110_22 Depth=2
	movl	$0, -8(%rbp)
.LBB110_24:                             # %for.cond48
                                        #   Parent Loop BB110_20 Depth=1
                                        #     Parent Loop BB110_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB110_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB110_24 Depth=3
	movl	-36(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-44(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB110_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_24
.LBB110_27:                             # %for.end55
                                        #   in Loop: Header=BB110_22 Depth=2
	jmp	.LBB110_28
.LBB110_28:                             # %for.inc56
                                        #   in Loop: Header=BB110_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_22
.LBB110_29:                             # %for.end58
                                        #   in Loop: Header=BB110_20 Depth=1
	jmp	.LBB110_30
.LBB110_30:                             # %for.inc59
                                        #   in Loop: Header=BB110_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB110_20
.LBB110_31:                             # %for.end61
	jmp	.LBB110_32
.LBB110_32:                             # %if.end62
	jmp	.LBB110_33
.LBB110_33:                             # %if.end63
	cmpl	$211517018, -48(%rbp)   # imm = 0xC9B7E5A
	jne	.LBB110_35
.LBB110_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_34
.Lfunc_end110:
	.size	LumaResidualCoding.69, .Lfunc_end110-LumaResidualCoding.69
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.70  # -- Begin function LumaPrediction4x4Bi.70
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.70,@function
LumaPrediction4x4Bi.70:                 # @LumaPrediction4x4Bi.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$257671144, -76(%rbp)   # imm = 0xF5BBFE8
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -80(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB111_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB111_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB111_6
.LBB111_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB111_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB111_5:                              # %land.end
.LBB111_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB111_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB111_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB111_10
.LBB111_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB111_10
.LBB111_10:                             # %cond.end
	movl	%ecx, -56(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB111_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB111_13
.LBB111_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB111_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB111_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB111_16
.LBB111_15:                             # %if.then
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB111_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB111_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB111_19
.LBB111_18:                             # %if.then39
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB111_19:                             # %if.end52
	cmpl	$0, -84(%rbp)
	je	.LBB111_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB111_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB111_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB111_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB111_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB111_24:                             # %for.cond58
                                        #   Parent Loop BB111_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB111_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB111_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB111_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_24
.LBB111_27:                             # %for.end
                                        #   in Loop: Header=BB111_22 Depth=1
	jmp	.LBB111_28
.LBB111_28:                             # %for.inc96
                                        #   in Loop: Header=BB111_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_22
.LBB111_29:                             # %for.end98
	jmp	.LBB111_50
.LBB111_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB111_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB111_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB111_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB111_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB111_34:                             # %for.cond106
                                        #   Parent Loop BB111_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB111_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB111_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB111_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_34
.LBB111_37:                             # %for.end132
                                        #   in Loop: Header=BB111_32 Depth=1
	jmp	.LBB111_38
.LBB111_38:                             # %for.inc133
                                        #   in Loop: Header=BB111_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_32
.LBB111_39:                             # %for.end135
	jmp	.LBB111_49
.LBB111_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB111_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB111_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB111_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB111_43:                             # %for.cond141
                                        #   Parent Loop BB111_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB111_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB111_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB111_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_43
.LBB111_46:                             # %for.end167
                                        #   in Loop: Header=BB111_41 Depth=1
	jmp	.LBB111_47
.LBB111_47:                             # %for.inc168
                                        #   in Loop: Header=BB111_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_41
.LBB111_48:                             # %for.end170
	jmp	.LBB111_49
.LBB111_49:                             # %if.end171
	jmp	.LBB111_50
.LBB111_50:                             # %if.end172
	jmp	.LBB111_82
.LBB111_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB111_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB111_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB111_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB111_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB111_55:                             # %for.cond181
                                        #   Parent Loop BB111_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB111_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB111_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB111_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_55
.LBB111_58:                             # %for.end197
                                        #   in Loop: Header=BB111_53 Depth=1
	jmp	.LBB111_59
.LBB111_59:                             # %for.inc198
                                        #   in Loop: Header=BB111_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_53
.LBB111_60:                             # %for.end200
	jmp	.LBB111_81
.LBB111_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB111_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB111_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB111_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB111_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB111_65:                             # %for.cond209
                                        #   Parent Loop BB111_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB111_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB111_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB111_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_65
.LBB111_68:                             # %for.end222
                                        #   in Loop: Header=BB111_63 Depth=1
	jmp	.LBB111_69
.LBB111_69:                             # %for.inc223
                                        #   in Loop: Header=BB111_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_63
.LBB111_70:                             # %for.end225
	jmp	.LBB111_80
.LBB111_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB111_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB111_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB111_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB111_74:                             # %for.cond231
                                        #   Parent Loop BB111_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB111_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB111_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB111_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_74
.LBB111_77:                             # %for.end244
                                        #   in Loop: Header=BB111_72 Depth=1
	jmp	.LBB111_78
.LBB111_78:                             # %for.inc245
                                        #   in Loop: Header=BB111_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_72
.LBB111_79:                             # %for.end247
	jmp	.LBB111_80
.LBB111_80:                             # %if.end248
	jmp	.LBB111_81
.LBB111_81:                             # %if.end249
	jmp	.LBB111_82
.LBB111_82:                             # %if.end250
	cmpl	$257671144, -76(%rbp)   # imm = 0xF5BBFE8
	jne	.LBB111_84
.LBB111_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_83
.Lfunc_end111:
	.size	LumaPrediction4x4Bi.70, .Lfunc_end111-LumaPrediction4x4Bi.70
	.cfi_endproc
                                        # -- End function
	.globl	copyblock4x4.71         # -- Begin function copyblock4x4.71
	.p2align	4, 0x90
	.type	copyblock4x4.71,@function
copyblock4x4.71:                        # @copyblock4x4.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1221419229, -20(%rbp)  # imm = 0x48CD60DD
	movq	%rdi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	32(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	48(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	36(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	52(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	56(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movl	60(%rax), %eax
	movq	-8(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -8(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1221419229, -20(%rbp)  # imm = 0x48CD60DD
	jne	.LBB112_2
.LBB112_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_1
.Lfunc_end112:
	.size	copyblock4x4.71, .Lfunc_end112-copyblock4x4.71
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.72 # -- Begin function ChromaResidualCoding.72
	.p2align	4, 0x90
	.type	ChromaResidualCoding.72,@function
ChromaResidualCoding.72:                # @ChromaResidualCoding.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$1438002330, -76(%rbp)  # imm = 0x55B62C9A
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB113_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB113_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB113_3:                              # %lor.end
.LBB113_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB113_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_7 Depth 2
                                        #       Child Loop BB113_9 Depth 3
                                        #     Child Loop BB113_16 Depth 2
                                        #       Child Loop BB113_18 Depth 3
                                        #     Child Loop BB113_33 Depth 2
                                        #       Child Loop BB113_35 Depth 3
                                        #     Child Loop BB113_43 Depth 2
                                        #       Child Loop BB113_45 Depth 3
                                        #     Child Loop BB113_58 Depth 2
                                        #       Child Loop BB113_60 Depth 3
                                        #     Child Loop BB113_87 Depth 2
                                        #       Child Loop BB113_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB113_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -16(%rbp)
.LBB113_7:                              # %for.cond5
                                        #   Parent Loop BB113_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_9 Depth 3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB113_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB113_7 Depth=2
	movl	$0, -20(%rbp)
.LBB113_9:                              # %for.cond8
                                        #   Parent Loop BB113_5 Depth=1
                                        #     Parent Loop BB113_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB113_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB113_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movswl	-52(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	-50(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-54(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB113_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB113_9
.LBB113_12:                             # %for.end
                                        #   in Loop: Header=BB113_7 Depth=2
	jmp	.LBB113_13
.LBB113_13:                             # %for.inc18
                                        #   in Loop: Header=BB113_7 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB113_7
.LBB113_14:                             # %for.end20
                                        #   in Loop: Header=BB113_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB113_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	$0, -8(%rbp)
.LBB113_16:                             # %for.cond21
                                        #   Parent Loop BB113_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB113_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB113_16 Depth=2
	movl	$0, -4(%rbp)
.LBB113_18:                             # %for.cond26
                                        #   Parent Loop BB113_5 Depth=1
                                        #     Parent Loop BB113_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB113_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB113_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB113_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB113_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB113_25
.LBB113_21:                             # %if.else
                                        #   in Loop: Header=BB113_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB113_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB113_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB113_24
.LBB113_23:                             # %if.else52
                                        #   in Loop: Header=BB113_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB113_24:                             # %if.end
                                        #   in Loop: Header=BB113_18 Depth=3
	jmp	.LBB113_25
.LBB113_25:                             # %if.end57
                                        #   in Loop: Header=BB113_18 Depth=3
	jmp	.LBB113_26
.LBB113_26:                             # %for.inc58
                                        #   in Loop: Header=BB113_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_18
.LBB113_27:                             # %for.end59
                                        #   in Loop: Header=BB113_16 Depth=2
	jmp	.LBB113_28
.LBB113_28:                             # %for.inc60
                                        #   in Loop: Header=BB113_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_16
.LBB113_29:                             # %for.end62
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_74
.LBB113_30:                             # %if.else63
                                        #   in Loop: Header=BB113_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB113_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB113_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB113_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	$0, -8(%rbp)
.LBB113_33:                             # %for.cond69
                                        #   Parent Loop BB113_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB113_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB113_33 Depth=2
	movl	$0, -4(%rbp)
.LBB113_35:                             # %for.cond73
                                        #   Parent Loop BB113_5 Depth=1
                                        #     Parent Loop BB113_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB113_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB113_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB113_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_35
.LBB113_38:                             # %for.end83
                                        #   in Loop: Header=BB113_33 Depth=2
	jmp	.LBB113_39
.LBB113_39:                             # %for.inc84
                                        #   in Loop: Header=BB113_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_33
.LBB113_40:                             # %for.end86
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_73
.LBB113_41:                             # %if.else87
                                        #   in Loop: Header=BB113_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB113_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	$0, -8(%rbp)
.LBB113_43:                             # %for.cond90
                                        #   Parent Loop BB113_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB113_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB113_43 Depth=2
	movl	$0, -4(%rbp)
.LBB113_45:                             # %for.cond95
                                        #   Parent Loop BB113_5 Depth=1
                                        #     Parent Loop BB113_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB113_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB113_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB113_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB113_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB113_52
.LBB113_48:                             # %if.else119
                                        #   in Loop: Header=BB113_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB113_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB113_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB113_51
.LBB113_50:                             # %if.else127
                                        #   in Loop: Header=BB113_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB113_51:                             # %if.end132
                                        #   in Loop: Header=BB113_45 Depth=3
	jmp	.LBB113_52
.LBB113_52:                             # %if.end133
                                        #   in Loop: Header=BB113_45 Depth=3
	jmp	.LBB113_53
.LBB113_53:                             # %for.inc134
                                        #   in Loop: Header=BB113_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_45
.LBB113_54:                             # %for.end136
                                        #   in Loop: Header=BB113_43 Depth=2
	jmp	.LBB113_55
.LBB113_55:                             # %for.inc137
                                        #   in Loop: Header=BB113_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_43
.LBB113_56:                             # %for.end139
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_72
.LBB113_57:                             # %if.else140
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	$0, -8(%rbp)
.LBB113_58:                             # %for.cond141
                                        #   Parent Loop BB113_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB113_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB113_58 Depth=2
	movl	$0, -4(%rbp)
.LBB113_60:                             # %for.cond146
                                        #   Parent Loop BB113_5 Depth=1
                                        #     Parent Loop BB113_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB113_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB113_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB113_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB113_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB113_67
.LBB113_63:                             # %if.else175
                                        #   in Loop: Header=BB113_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB113_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB113_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB113_66
.LBB113_65:                             # %if.else188
                                        #   in Loop: Header=BB113_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB113_66:                             # %if.end198
                                        #   in Loop: Header=BB113_60 Depth=3
	jmp	.LBB113_67
.LBB113_67:                             # %if.end199
                                        #   in Loop: Header=BB113_60 Depth=3
	jmp	.LBB113_68
.LBB113_68:                             # %for.inc200
                                        #   in Loop: Header=BB113_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_60
.LBB113_69:                             # %for.end202
                                        #   in Loop: Header=BB113_58 Depth=2
	jmp	.LBB113_70
.LBB113_70:                             # %for.inc203
                                        #   in Loop: Header=BB113_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_58
.LBB113_71:                             # %for.end205
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_72
.LBB113_72:                             # %if.end206
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_73
.LBB113_73:                             # %if.end207
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_74
.LBB113_74:                             # %if.end208
                                        #   in Loop: Header=BB113_5 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB113_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB113_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB113_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB113_100
.LBB113_77:                             # %if.else215
                                        #   in Loop: Header=BB113_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB113_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB113_5 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB113_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB113_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB113_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB113_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB113_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB113_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB113_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB113_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB113_84
.LBB113_83:                             # %if.then247
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB113_85
.LBB113_84:                             # %if.else249
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB113_85:                             # %if.end251
                                        #   in Loop: Header=BB113_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB113_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	$0, -8(%rbp)
.LBB113_87:                             # %for.cond255
                                        #   Parent Loop BB113_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB113_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB113_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB113_87 Depth=2
	movl	$0, -4(%rbp)
.LBB113_89:                             # %for.cond260
                                        #   Parent Loop BB113_5 Depth=1
                                        #     Parent Loop BB113_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB113_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB113_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB113_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB113_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB113_93
.LBB113_92:                             # %if.else277
                                        #   in Loop: Header=BB113_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB113_93:                             # %if.end287
                                        #   in Loop: Header=BB113_89 Depth=3
	jmp	.LBB113_94
.LBB113_94:                             # %for.inc288
                                        #   in Loop: Header=BB113_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_89
.LBB113_95:                             # %for.end290
                                        #   in Loop: Header=BB113_87 Depth=2
	jmp	.LBB113_96
.LBB113_96:                             # %for.inc291
                                        #   in Loop: Header=BB113_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_87
.LBB113_97:                             # %for.end293
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_98
.LBB113_98:                             # %if.end294
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_99
.LBB113_99:                             # %if.end295
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_100
.LBB113_100:                            # %if.end296
                                        #   in Loop: Header=BB113_5 Depth=1
	jmp	.LBB113_101
.LBB113_101:                            # %for.inc297
                                        #   in Loop: Header=BB113_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB113_5
.LBB113_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB113_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB113_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB113_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB113_104 Depth=1
	movl	$0, -4(%rbp)
.LBB113_106:                            # %for.cond312
                                        #   Parent Loop BB113_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB113_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-60(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB113_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_110
.LBB113_109:                            # %cond.false
                                        #   in Loop: Header=BB113_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB113_110:                            # %cond.end
                                        #   in Loop: Header=BB113_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB113_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB113_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB113_116
.LBB113_112:                            # %cond.false358
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB113_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_115
.LBB113_114:                            # %cond.false367
                                        #   in Loop: Header=BB113_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB113_115:                            # %cond.end373
                                        #   in Loop: Header=BB113_106 Depth=2
.LBB113_116:                            # %cond.end375
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB113_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB113_119
.LBB113_118:                            # %cond.false394
                                        #   in Loop: Header=BB113_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB113_119:                            # %cond.end400
                                        #   in Loop: Header=BB113_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB113_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB113_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_125
.LBB113_121:                            # %cond.false406
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB113_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_124
.LBB113_123:                            # %cond.false415
                                        #   in Loop: Header=BB113_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB113_124:                            # %cond.end421
                                        #   in Loop: Header=BB113_106 Depth=2
.LBB113_125:                            # %cond.end423
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB113_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB113_128
.LBB113_127:                            # %cond.false443
                                        #   in Loop: Header=BB113_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB113_128:                            # %cond.end449
                                        #   in Loop: Header=BB113_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB113_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB113_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB113_134
.LBB113_130:                            # %cond.false455
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB113_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB113_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_133
.LBB113_132:                            # %cond.false464
                                        #   in Loop: Header=BB113_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB113_133:                            # %cond.end470
                                        #   in Loop: Header=BB113_106 Depth=2
.LBB113_134:                            # %cond.end472
                                        #   in Loop: Header=BB113_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB113_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB113_106
.LBB113_136:                            # %for.end487
                                        #   in Loop: Header=BB113_104 Depth=1
	jmp	.LBB113_137
.LBB113_137:                            # %for.inc488
                                        #   in Loop: Header=BB113_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB113_104
.LBB113_138:                            # %for.end490
	jmp	.LBB113_139
.LBB113_139:                            # %if.end491
	cmpl	$1438002330, -76(%rbp)  # imm = 0x55B62C9A
	jne	.LBB113_141
.LBB113_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_140
.Lfunc_end113:
	.size	ChromaResidualCoding.72, .Lfunc_end113-ChromaResidualCoding.72
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.73        # -- Begin function slice_too_big.73
	.p2align	4, 0x90
	.type	slice_too_big.73,@function
slice_too_big.73:                       # @slice_too_big.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1838965731, -56(%rbp)  # imm = 0x6D9C63E3
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB114_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB114_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB114_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB114_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB114_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB114_5:                              # %if.end
                                        #   in Loop: Header=BB114_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB114_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB114_7:                              # %if.end8
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB114_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB114_21
.LBB114_9:                              # %if.end11
                                        #   in Loop: Header=BB114_2 Depth=1
	jmp	.LBB114_10
.LBB114_10:                             # %for.inc
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_2
.LBB114_11:                             # %for.end
	jmp	.LBB114_12
.LBB114_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB114_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB114_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB114_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB114_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB114_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB114_21
.LBB114_17:                             # %if.end27
                                        #   in Loop: Header=BB114_14 Depth=1
	jmp	.LBB114_18
.LBB114_18:                             # %for.inc28
                                        #   in Loop: Header=BB114_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB114_14
.LBB114_19:                             # %for.end30
	jmp	.LBB114_20
.LBB114_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB114_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1838965731, -56(%rbp)  # imm = 0x6D9C63E3
	jne	.LBB114_23
.LBB114_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_22
.Lfunc_end114:
	.size	slice_too_big.73, .Lfunc_end114-slice_too_big.73
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.74  # -- Begin function writeCoeff4x4_CAVLC.74
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.74,@function
writeCoeff4x4_CAVLC.74:                 # @writeCoeff4x4_CAVLC.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1621678994, -172(%rbp) # imm = 0x60A8DB92
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB115_22
# %bb.1:                                # %entry
	movq	.LJTI115_0(,%rax,8), %rax
	jmpq	*%rax
.LBB115_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB115_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB115_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB115_6
.LBB115_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB115_7
.LBB115_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB115_7:                              # %if.end
	jmp	.LBB115_23
.LBB115_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB115_23
.LBB115_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB115_23
.LBB115_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -80(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB115_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB115_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB115_14
.LBB115_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB115_15
.LBB115_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB115_15:                             # %if.end67
	jmp	.LBB115_23
.LBB115_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB115_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB115_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB115_20
.LBB115_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB115_21
.LBB115_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB115_21:                             # %if.end93
	jmp	.LBB115_23
.LBB115_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB115_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB115_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -80(%rbp)
	je	.LBB115_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB115_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB115_27
.LBB115_26:                             # %cond.false
                                        #   in Loop: Header=BB115_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB115_27
.LBB115_27:                             # %cond.end
                                        #   in Loop: Header=BB115_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB115_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB115_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB115_29:                             # %land.end
                                        #   in Loop: Header=BB115_24 Depth=1
	testb	$1, %dl
	jne	.LBB115_30
	jmp	.LBB115_41
.LBB115_30:                             # %for.body
                                        #   in Loop: Header=BB115_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB115_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB115_24 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB115_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB115_24 Depth=1
	movl	-104(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB115_33:                             # %if.end110
                                        #   in Loop: Header=BB115_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB115_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB115_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB115_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB115_24 Depth=1
	movl	$3, -28(%rbp)
.LBB115_36:                             # %if.end117
                                        #   in Loop: Header=BB115_24 Depth=1
	jmp	.LBB115_38
.LBB115_37:                             # %if.else118
                                        #   in Loop: Header=BB115_24 Depth=1
	movl	$0, -28(%rbp)
.LBB115_38:                             # %if.end119
                                        #   in Loop: Header=BB115_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB115_39:                             # %if.end121
                                        #   in Loop: Header=BB115_24 Depth=1
	jmp	.LBB115_40
.LBB115_40:                             # %for.inc
                                        #   in Loop: Header=BB115_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_24
.LBB115_41:                             # %for.end
	cmpl	$0, -80(%rbp)
	jne	.LBB115_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB115_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB115_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB115_46
.LBB115_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB115_46:                             # %cond.end136
	movl	%eax, -92(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB115_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB115_49
.LBB115_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB115_49:                             # %cond.end145
	movl	%eax, -96(%rbp)
	movl	-92(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB115_51
.LBB115_50:                             # %if.else148
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-76(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	movl	-92(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB115_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB115_53
# %bb.52:                               # %if.then160
	movl	$0, -100(%rbp)
	jmp	.LBB115_60
.LBB115_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB115_55
# %bb.54:                               # %if.then163
	movl	$1, -100(%rbp)
	jmp	.LBB115_59
.LBB115_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB115_57
# %bb.56:                               # %if.then166
	movl	$2, -100(%rbp)
	jmp	.LBB115_58
.LBB115_57:                             # %if.else167
	movl	$3, -100(%rbp)
.LBB115_58:                             # %if.end168
	jmp	.LBB115_59
.LBB115_59:                             # %if.end169
	jmp	.LBB115_60
.LBB115_60:                             # %if.end170
	jmp	.LBB115_62
.LBB115_61:                             # %if.else171
	movl	$0, -100(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -96(%rbp)
.LBB115_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB115_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB115_65
.LBB115_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB115_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB115_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB115_122
.LBB115_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB115_121
# %bb.68:                               # %if.then192
	movl	$0, -84(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB115_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB115_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB115_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB115_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB115_72:                             # %if.end202
                                        #   in Loop: Header=BB115_69 Depth=1
	movl	-84(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB115_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB115_69 Depth=1
	movl	-84(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -84(%rbp)
.LBB115_74:                             # %if.end205
                                        #   in Loop: Header=BB115_69 Depth=1
	jmp	.LBB115_75
.LBB115_75:                             # %for.inc206
                                        #   in Loop: Header=BB115_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_69
.LBB115_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB115_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB115_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB115_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB115_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB115_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB115_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB115_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB115_85
.LBB115_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB115_85:                             # %if.end233
	movl	-72(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB115_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB115_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB115_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB115_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB115_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB115_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB115_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB115_91
.LBB115_90:                             # %if.else249
                                        #   in Loop: Header=BB115_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB115_91:                             # %if.end252
                                        #   in Loop: Header=BB115_86 Depth=1
	movl	$0, -144(%rbp)
.LBB115_92:                             # %if.end253
                                        #   in Loop: Header=BB115_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB115_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB115_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB115_95
.LBB115_94:                             # %if.else257
                                        #   in Loop: Header=BB115_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB115_95:                             # %if.end259
                                        #   in Loop: Header=BB115_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB115_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB115_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB115_97:                             # %if.end266
                                        #   in Loop: Header=BB115_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB115_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB115_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB115_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB115_86 Depth=1
	movl	$2, -32(%rbp)
.LBB115_100:                            # %if.end273
                                        #   in Loop: Header=BB115_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB115_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_86
.LBB115_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB115_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB115_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB115_106
.LBB115_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB115_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB115_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB115_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB115_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB115_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -104(%rbp)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB115_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -88(%rbp)
	jne	.LBB115_112
.LBB115_111:                            # %if.then318
	jmp	.LBB115_120
.LBB115_112:                            # %if.end319
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB115_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB115_108 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB115_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-88(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB115_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	$6, -32(%rbp)
.LBB115_116:                            # %if.end327
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-104(%rbp), %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB115_117:                            # %if.end341
                                        #   in Loop: Header=BB115_108 Depth=1
	jmp	.LBB115_118
.LBB115_118:                            # %for.inc342
                                        #   in Loop: Header=BB115_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB115_108
.LBB115_119:                            # %for.end344.loopexit
	jmp	.LBB115_120
.LBB115_120:                            # %for.end344
	jmp	.LBB115_121
.LBB115_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB115_122:                            # %return
	movl	-160(%rbp), %ebx
	cmpl	$1621678994, -172(%rbp) # imm = 0x60A8DB92
	jne	.LBB115_124
.LBB115_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_123
.Lfunc_end115:
	.size	writeCoeff4x4_CAVLC.74, .Lfunc_end115-writeCoeff4x4_CAVLC.74
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI115_0:
	.quad	.LBB115_2
	.quad	.LBB115_8
	.quad	.LBB115_9
	.quad	.LBB115_22
	.quad	.LBB115_22
	.quad	.LBB115_22
	.quad	.LBB115_10
	.quad	.LBB115_16
                                        # -- End function
	.text
	.globl	SetModesAndRefframe.75  # -- Begin function SetModesAndRefframe.75
	.p2align	4, 0x90
	.type	SetModesAndRefframe.75,@function
SetModesAndRefframe.75:                 # @SetModesAndRefframe.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1255066051, -60(%rbp)  # imm = 0x4ACEC9C3
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB116_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB116_12
.LBB116_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB116_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB116_11
.LBB116_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB116_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB116_10
.LBB116_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB116_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB116_9
.LBB116_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB116_9:                              # %if.end
	jmp	.LBB116_10
.LBB116_10:                             # %if.end86
	jmp	.LBB116_11
.LBB116_11:                             # %if.end87
	jmp	.LBB116_12
.LBB116_12:                             # %if.end88
	cmpl	$1255066051, -60(%rbp)  # imm = 0x4ACEC9C3
	jne	.LBB116_14
.LBB116_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_13
.Lfunc_end116:
	.size	SetModesAndRefframe.75, .Lfunc_end116-SetModesAndRefframe.75
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.76    # -- Begin function writeLumaCoeff8x8.76
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.76,@function
writeLumaCoeff8x8.76:                   # @writeLumaCoeff8x8.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$262633501, -36(%rbp)   # imm = 0xFA7781D
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB117_2
# %bb.1:                                # %if.then
	jmp	.LBB117_2
.LBB117_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB117_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB117_15
.LBB117_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB117_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB117_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB117_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB117_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB117_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB117_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB117_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB117_10
.LBB117_9:                              # %cond.false
                                        #   in Loop: Header=BB117_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB117_10:                             # %cond.end
                                        #   in Loop: Header=BB117_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_12
.LBB117_11:                             # %if.else
                                        #   in Loop: Header=BB117_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB117_12:                             # %if.end17
                                        #   in Loop: Header=BB117_5 Depth=1
	jmp	.LBB117_13
.LBB117_13:                             # %for.inc
                                        #   in Loop: Header=BB117_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB117_5
.LBB117_14:                             # %for.end
	jmp	.LBB117_19
.LBB117_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB117_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB117_18
.LBB117_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB117_18:                             # %if.end27
	jmp	.LBB117_19
.LBB117_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$262633501, -36(%rbp)   # imm = 0xFA7781D
	jne	.LBB117_21
.LBB117_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_20
.Lfunc_end117:
	.size	writeLumaCoeff8x8.76, .Lfunc_end117-writeLumaCoeff8x8.76
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.77 # -- Begin function writeLumaCoeff8x8_CABAC.77
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.77,@function
writeLumaCoeff8x8_CABAC.77:             # @writeLumaCoeff8x8_CABAC.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1347375382, -60(%rbp)  # imm = 0x504F5116
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB118_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB118_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB118_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB118_3:                              # %land.end
                                        #   in Loop: Header=BB118_1 Depth=1
	testb	$1, %al
	jne	.LBB118_4
	jmp	.LBB118_12
.LBB118_4:                              # %for.body
                                        #   in Loop: Header=BB118_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB118_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB118_7
.LBB118_6:                              # %cond.false
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB118_7:                              # %cond.end
                                        #   in Loop: Header=BB118_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB118_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB118_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB118_10
.LBB118_9:                              # %if.else
                                        #   in Loop: Header=BB118_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB118_10:                             # %if.end
                                        #   in Loop: Header=BB118_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB118_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB118_1
.LBB118_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1347375382, -60(%rbp)  # imm = 0x504F5116
	jne	.LBB118_14
.LBB118_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_13
.Lfunc_end118:
	.size	writeLumaCoeff8x8_CABAC.77, .Lfunc_end118-writeLumaCoeff8x8_CABAC.77
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.78          # -- Begin function predict_nnz.78
	.p2align	4, 0x90
	.type	predict_nnz.78,@function
predict_nnz.78:                         # @predict_nnz.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1019906365, -56(%rbp)  # imm = 0x3CCA893D
	movl	%edi, -52(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB119_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB119_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB119_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB119_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB119_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB119_6:                              # %if.end14
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB119_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB119_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB119_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB119_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB119_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB119_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB119_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB119_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1019906365, -56(%rbp)  # imm = 0x3CCA893D
	jne	.LBB119_16
.LBB119_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_15
.Lfunc_end119:
	.size	predict_nnz.78, .Lfunc_end119-predict_nnz.78
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.79  # -- Begin function writeReferenceFrame.79
	.p2align	4, 0x90
	.type	writeReferenceFrame.79,@function
writeReferenceFrame.79:                 # @writeReferenceFrame.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2105012702, -76(%rbp)  # imm = 0x7D77F1DE
	movl	%edi, -80(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -48(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB120_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB120_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB120_4
.LBB120_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB120_4
.LBB120_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	cmpl	$0, -48(%rbp)
	je	.LBB120_6
# %bb.5:                                # %cond.true10
	movl	-36(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB120_7
.LBB120_6:                              # %cond.false13
	movl	-36(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB120_7:                              # %cond.end17
	movl	%eax, -44(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$1, -44(%rbp)
	jne	.LBB120_9
# %bb.8:                                # %if.then
	movl	$0, -52(%rbp)
	jmp	.LBB120_18
.LBB120_9:                              # %if.end
	cmpl	$2, -44(%rbp)
	jne	.LBB120_11
# %bb.10:                               # %if.then20
	movl	$1, -40(%rbp)
.LBB120_11:                             # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB120_16
# %bb.12:                               # %if.then28
	cmpl	$0, -40(%rbp)
	je	.LBB120_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB120_15
.LBB120_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB120_15:                             # %if.end33
	jmp	.LBB120_17
.LBB120_16:                             # %if.else34
	movl	-80(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-84(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB120_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB120_18:                             # %return
	movl	-52(%rbp), %ebx
	cmpl	$2105012702, -76(%rbp)  # imm = 0x7D77F1DE
	jne	.LBB120_20
.LBB120_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_19
.Lfunc_end120:
	.size	writeReferenceFrame.79, .Lfunc_end120-writeReferenceFrame.79
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.80 # -- Begin function OneComponentLumaPrediction4x4.80
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.80,@function
OneComponentLumaPrediction4x4.80:       # @OneComponentLumaPrediction4x4.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1789864879, -88(%rbp)  # imm = 0x6AAF2BAF
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1789864879, -88(%rbp)  # imm = 0x6AAF2BAF
	jne	.LBB121_2
.LBB121_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_1
.Lfunc_end121:
	.size	OneComponentLumaPrediction4x4.80, .Lfunc_end121-OneComponentLumaPrediction4x4.80
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.81 # -- Begin function write_one_macroblock.81
	.p2align	4, 0x90
	.type	write_one_macroblock.81,@function
write_one_macroblock.81:                # @write_one_macroblock.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1585815129, -32(%rbp)  # imm = 0x5E859E59
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB122_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB122_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB122_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB122_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB122_6
.LBB122_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB122_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB122_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB122_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB122_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB122_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB122_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB122_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB122_22
.LBB122_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB122_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB122_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB122_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB122_14 Depth=1
	movl	$0, -24(%rbp)
.LBB122_16:                             # %for.cond24
                                        #   Parent Loop BB122_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB122_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB122_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB122_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB122_16
.LBB122_19:                             # %for.end
                                        #   in Loop: Header=BB122_14 Depth=1
	jmp	.LBB122_20
.LBB122_20:                             # %for.inc35
                                        #   in Loop: Header=BB122_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB122_14
.LBB122_21:                             # %for.end37
	jmp	.LBB122_22
.LBB122_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB122_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB122_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB122_30
.LBB122_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB122_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB122_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB122_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB122_29:                             # %if.end59
	jmp	.LBB122_30
.LBB122_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB122_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB122_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1585815129, -32(%rbp)  # imm = 0x5E859E59
	jne	.LBB122_34
.LBB122_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_33
.Lfunc_end122:
	.size	write_one_macroblock.81, .Lfunc_end122-write_one_macroblock.81
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.82 # -- Begin function IntraChromaPrediction.82
	.p2align	4, 0x90
	.type	IntraChromaPrediction.82,@function
IntraChromaPrediction.82:               # @IntraChromaPrediction.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$75492901, -164(%rbp)   # imm = 0x47FEE25
	movq	%rdi, -192(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -116(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB123_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB123_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_1
.LBB123_4:                              # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB123_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB123_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB123_8
.LBB123_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB123_8
.LBB123_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB123_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB123_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB123_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB123_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB123_13
.LBB123_12:                             # %cond.false32
                                        #   in Loop: Header=BB123_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB123_13
.LBB123_13:                             # %cond.end33
                                        #   in Loop: Header=BB123_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB123_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_9
.LBB123_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB123_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB123_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB123_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB123_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB123_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB123_20
.LBB123_19:                             # %cond.false57
                                        #   in Loop: Header=BB123_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB123_20
.LBB123_20:                             # %cond.end58
                                        #   in Loop: Header=BB123_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB123_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_16
.LBB123_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB123_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB123_25
.LBB123_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB123_25
.LBB123_25:                             # %cond.end75
	movl	%eax, -96(%rbp)
.LBB123_26:                             # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB123_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB123_28:                             # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB123_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB123_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB123_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB123_32:                             # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB123_34
# %bb.33:                               # %if.then88
	movl	-96(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB123_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB123_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_37 Depth 2
                                        #       Child Loop BB123_39 Depth 3
                                        #         Child Loop BB123_104 Depth 4
                                        #         Child Loop BB123_110 Depth 4
                                        #         Child Loop BB123_85 Depth 4
                                        #         Child Loop BB123_91 Depth 4
                                        #         Child Loop BB123_66 Depth 4
                                        #         Child Loop BB123_72 Depth 4
                                        #         Child Loop BB123_44 Depth 4
                                        #         Child Loop BB123_50 Depth 4
                                        #         Child Loop BB123_125 Depth 4
                                        #           Child Loop BB123_127 Depth 5
                                        #     Child Loop BB123_138 Depth 2
                                        #     Child Loop BB123_142 Depth 2
                                        #       Child Loop BB123_144 Depth 3
                                        #     Child Loop BB123_153 Depth 2
                                        #     Child Loop BB123_157 Depth 2
                                        #       Child Loop BB123_159 Depth 3
                                        #     Child Loop BB123_170 Depth 2
                                        #     Child Loop BB123_174 Depth 2
                                        #     Child Loop BB123_178 Depth 2
                                        #       Child Loop BB123_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB123_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB123_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB123_37:                             # %for.cond95
                                        #   Parent Loop BB123_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_39 Depth 3
                                        #         Child Loop BB123_104 Depth 4
                                        #         Child Loop BB123_110 Depth 4
                                        #         Child Loop BB123_85 Depth 4
                                        #         Child Loop BB123_91 Depth 4
                                        #         Child Loop BB123_66 Depth 4
                                        #         Child Loop BB123_72 Depth 4
                                        #         Child Loop BB123_44 Depth 4
                                        #         Child Loop BB123_50 Depth 4
                                        #         Child Loop BB123_125 Depth 4
                                        #           Child Loop BB123_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB123_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB123_37 Depth=2
	movl	$0, -88(%rbp)
.LBB123_39:                             # %for.cond99
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_104 Depth 4
                                        #         Child Loop BB123_110 Depth 4
                                        #         Child Loop BB123_85 Depth 4
                                        #         Child Loop BB123_91 Depth 4
                                        #         Child Loop BB123_66 Depth 4
                                        #         Child Loop BB123_72 Depth 4
                                        #         Child Loop BB123_44 Depth 4
                                        #         Child Loop BB123_50 Depth 4
                                        #         Child Loop BB123_125 Depth 4
                                        #           Child Loop BB123_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB123_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB123_39 Depth=3
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -68(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB123_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB123_39 Depth=3
	movq	.LJTI123_0(,%rax,8), %rax
	jmpq	*%rax
.LBB123_42:                             # %sw.bb
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB123_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_44:                             # %for.cond124
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_37 Depth=2
                                        #       Parent Loop BB123_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB123_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB123_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_44
.LBB123_47:                             # %for.end138
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_48
.LBB123_48:                             # %if.end139
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB123_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_50:                             # %for.cond143
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_37 Depth=2
                                        #       Parent Loop BB123_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB123_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB123_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_50
.LBB123_53:                             # %for.end162
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_54
.LBB123_54:                             # %if.end163
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB123_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB123_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB123_63
.LBB123_57:                             # %if.else
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB123_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB123_62
.LBB123_59:                             # %if.else174
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB123_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB123_61:                             # %if.end180
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_62
.LBB123_62:                             # %if.end181
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_63
.LBB123_63:                             # %if.end182
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_124
.LBB123_64:                             # %sw.bb183
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB123_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_66:                             # %for.cond186
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_37 Depth=2
                                        #       Parent Loop BB123_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB123_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB123_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_66
.LBB123_69:                             # %for.end202
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_77
.LBB123_70:                             # %if.else203
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB123_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_72:                             # %for.cond207
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_37 Depth=2
                                        #       Parent Loop BB123_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB123_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB123_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_72
.LBB123_75:                             # %for.end226
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_76
.LBB123_76:                             # %if.end227
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_77
.LBB123_77:                             # %if.end228
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB123_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB123_82
.LBB123_79:                             # %if.else233
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB123_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB123_81:                             # %if.end239
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_82
.LBB123_82:                             # %if.end240
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_124
.LBB123_83:                             # %sw.bb241
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB123_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_85:                             # %for.cond245
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_37 Depth=2
                                        #       Parent Loop BB123_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB123_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB123_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_85
.LBB123_88:                             # %for.end264
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_96
.LBB123_89:                             # %if.else265
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB123_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_91:                             # %for.cond268
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_37 Depth=2
                                        #       Parent Loop BB123_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB123_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB123_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_91
.LBB123_94:                             # %for.end284
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_95
.LBB123_95:                             # %if.end285
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_96
.LBB123_96:                             # %if.end286
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB123_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB123_101
.LBB123_98:                             # %if.else292
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB123_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB123_100:                            # %if.end297
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_101
.LBB123_101:                            # %if.end298
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_124
.LBB123_102:                            # %sw.bb299
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB123_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_104:                            # %for.cond302
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_37 Depth=2
                                        #       Parent Loop BB123_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB123_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB123_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_104
.LBB123_107:                            # %for.end318
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_108
.LBB123_108:                            # %if.end319
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB123_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_110:                            # %for.cond323
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_37 Depth=2
                                        #       Parent Loop BB123_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB123_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB123_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_110
.LBB123_113:                            # %for.end342
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_114
.LBB123_114:                            # %if.end343
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB123_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB123_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB123_123
.LBB123_117:                            # %if.else352
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB123_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB123_122
.LBB123_119:                            # %if.else357
                                        #   in Loop: Header=BB123_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB123_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB123_121:                            # %if.end363
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_122
.LBB123_122:                            # %if.end364
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_123
.LBB123_123:                            # %if.end365
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_124
.LBB123_124:                            # %sw.epilog
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_125:                            # %for.cond366
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_37 Depth=2
                                        #       Parent Loop BB123_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB123_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB123_125 Depth=4
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_127:                            # %for.cond371
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_37 Depth=2
                                        #       Parent Loop BB123_39 Depth=3
                                        #         Parent Loop BB123_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB123_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB123_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_127
.LBB123_130:                            # %for.end386
                                        #   in Loop: Header=BB123_125 Depth=4
	jmp	.LBB123_131
.LBB123_131:                            # %for.inc387
                                        #   in Loop: Header=BB123_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_125
.LBB123_132:                            # %for.end389
                                        #   in Loop: Header=BB123_39 Depth=3
	jmp	.LBB123_133
.LBB123_133:                            # %for.inc390
                                        #   in Loop: Header=BB123_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB123_39
.LBB123_134:                            # %for.end392
                                        #   in Loop: Header=BB123_37 Depth=2
	jmp	.LBB123_135
.LBB123_135:                            # %for.inc393
                                        #   in Loop: Header=BB123_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB123_37
.LBB123_136:                            # %for.end395
                                        #   in Loop: Header=BB123_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB123_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB123_35 Depth=1
	movl	$0, -4(%rbp)
.LBB123_138:                            # %for.cond398
                                        #   Parent Loop BB123_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB123_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB123_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB123_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_138
.LBB123_141:                            # %for.end414
                                        #   in Loop: Header=BB123_35 Depth=1
	movl	$0, -4(%rbp)
.LBB123_142:                            # %for.cond415
                                        #   Parent Loop BB123_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB123_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB123_142 Depth=2
	movl	$0, -8(%rbp)
.LBB123_144:                            # %for.cond419
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB123_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB123_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB123_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_144
.LBB123_147:                            # %for.end436
                                        #   in Loop: Header=BB123_142 Depth=2
	jmp	.LBB123_148
.LBB123_148:                            # %for.inc437
                                        #   in Loop: Header=BB123_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_142
.LBB123_149:                            # %for.end439
                                        #   in Loop: Header=BB123_35 Depth=1
	jmp	.LBB123_150
.LBB123_150:                            # %if.end440
                                        #   in Loop: Header=BB123_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB123_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB123_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB123_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB123_35 Depth=1
	movl	$0, -4(%rbp)
.LBB123_153:                            # %for.cond447
                                        #   Parent Loop BB123_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB123_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB123_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB123_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_153
.LBB123_156:                            # %for.end468
                                        #   in Loop: Header=BB123_35 Depth=1
	movl	$0, -4(%rbp)
.LBB123_157:                            # %for.cond469
                                        #   Parent Loop BB123_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB123_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB123_157 Depth=2
	movl	$0, -8(%rbp)
.LBB123_159:                            # %for.cond473
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB123_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB123_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB123_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_159
.LBB123_162:                            # %for.end490
                                        #   in Loop: Header=BB123_157 Depth=2
	jmp	.LBB123_163
.LBB123_163:                            # %for.inc491
                                        #   in Loop: Header=BB123_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_157
.LBB123_164:                            # %for.end493
                                        #   in Loop: Header=BB123_35 Depth=1
	jmp	.LBB123_165
.LBB123_165:                            # %if.end494
                                        #   in Loop: Header=BB123_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB123_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB123_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB123_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB123_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB123_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB123_35 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB123_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB123_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB123_170:                            # %for.cond519
                                        #   Parent Loop BB123_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB123_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB123_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB123_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_170
.LBB123_173:                            # %for.end540
                                        #   in Loop: Header=BB123_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB123_174:                            # %for.cond556
                                        #   Parent Loop BB123_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB123_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB123_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB123_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_174
.LBB123_177:                            # %for.end577
                                        #   in Loop: Header=BB123_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB123_178:                            # %for.cond606
                                        #   Parent Loop BB123_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB123_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB123_178 Depth=2
	movl	$0, -4(%rbp)
.LBB123_180:                            # %for.cond610
                                        #   Parent Loop BB123_35 Depth=1
                                        #     Parent Loop BB123_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB123_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB123_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB123_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB123_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB123_184
.LBB123_183:                            # %cond.false630
                                        #   in Loop: Header=BB123_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB123_184:                            # %cond.end643
                                        #   in Loop: Header=BB123_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB123_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB123_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB123_190
.LBB123_186:                            # %cond.false648
                                        #   in Loop: Header=BB123_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB123_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB123_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB123_189
.LBB123_188:                            # %cond.false666
                                        #   in Loop: Header=BB123_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB123_189:                            # %cond.end679
                                        #   in Loop: Header=BB123_180 Depth=3
.LBB123_190:                            # %cond.end681
                                        #   in Loop: Header=BB123_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB123_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_180
.LBB123_192:                            # %for.end694
                                        #   in Loop: Header=BB123_178 Depth=2
	jmp	.LBB123_193
.LBB123_193:                            # %for.inc695
                                        #   in Loop: Header=BB123_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_178
.LBB123_194:                            # %for.end697
                                        #   in Loop: Header=BB123_35 Depth=1
	jmp	.LBB123_195
.LBB123_195:                            # %if.end698
                                        #   in Loop: Header=BB123_35 Depth=1
	jmp	.LBB123_196
.LBB123_196:                            # %for.inc699
                                        #   in Loop: Header=BB123_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB123_35
.LBB123_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB123_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB123_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB123_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB123_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB123_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB123_199
.LBB123_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB123_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB123_219 Depth 2
                                        #       Child Loop BB123_221 Depth 3
                                        #         Child Loop BB123_223 Depth 4
                                        #           Child Loop BB123_225 Depth 5
                                        #             Child Loop BB123_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB123_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB123_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB123_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB123_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB123_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB123_203 Depth=1
	jmp	.LBB123_241
.LBB123_207:                            # %if.end723
                                        #   in Loop: Header=BB123_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB123_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB123_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB123_217
.LBB123_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB123_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB123_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB123_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB123_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB123_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB123_217
.LBB123_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB123_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB123_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB123_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB123_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB123_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB123_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB123_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB123_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB123_203 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB123_218
.LBB123_217:                            # %if.then749
                                        #   in Loop: Header=BB123_203 Depth=1
	jmp	.LBB123_241
.LBB123_218:                            # %if.end750
                                        #   in Loop: Header=BB123_203 Depth=1
	movl	$0, -100(%rbp)
	movl	$0, -24(%rbp)
.LBB123_219:                            # %for.cond751
                                        #   Parent Loop BB123_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB123_221 Depth 3
                                        #         Child Loop BB123_223 Depth 4
                                        #           Child Loop BB123_225 Depth 5
                                        #             Child Loop BB123_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB123_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB123_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB123_221:                            # %for.cond757
                                        #   Parent Loop BB123_203 Depth=1
                                        #     Parent Loop BB123_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB123_223 Depth 4
                                        #           Child Loop BB123_225 Depth 5
                                        #             Child Loop BB123_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB123_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB123_221 Depth=3
	movl	$0, -40(%rbp)
.LBB123_223:                            # %for.cond761
                                        #   Parent Loop BB123_203 Depth=1
                                        #     Parent Loop BB123_219 Depth=2
                                        #       Parent Loop BB123_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB123_225 Depth 5
                                        #             Child Loop BB123_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB123_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB123_223 Depth=4
	movl	$0, -120(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB123_225:                            # %for.cond765
                                        #   Parent Loop BB123_203 Depth=1
                                        #     Parent Loop BB123_219 Depth=2
                                        #       Parent Loop BB123_221 Depth=3
                                        #         Parent Loop BB123_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB123_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB123_225 Depth=5
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB123_227:                            # %for.cond770
                                        #   Parent Loop BB123_203 Depth=1
                                        #     Parent Loop BB123_219 Depth=2
                                        #       Parent Loop BB123_221 Depth=3
                                        #         Parent Loop BB123_223 Depth=4
                                        #           Parent Loop BB123_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB123_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB123_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB123_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB123_227
.LBB123_230:                            # %for.end803
                                        #   in Loop: Header=BB123_225 Depth=5
	jmp	.LBB123_231
.LBB123_231:                            # %for.inc804
                                        #   in Loop: Header=BB123_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB123_225
.LBB123_232:                            # %for.end806
                                        #   in Loop: Header=BB123_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB123_223 Depth=4
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB123_223
.LBB123_234:                            # %for.end810
                                        #   in Loop: Header=BB123_221 Depth=3
	jmp	.LBB123_235
.LBB123_235:                            # %for.inc811
                                        #   in Loop: Header=BB123_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB123_221
.LBB123_236:                            # %for.end813
                                        #   in Loop: Header=BB123_219 Depth=2
	jmp	.LBB123_237
.LBB123_237:                            # %for.inc814
                                        #   in Loop: Header=BB123_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB123_219
.LBB123_238:                            # %for.end816
                                        #   in Loop: Header=BB123_203 Depth=1
	movl	-100(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB123_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB123_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB123_240:                            # %if.end820
                                        #   in Loop: Header=BB123_203 Depth=1
	jmp	.LBB123_241
.LBB123_241:                            # %for.inc821
                                        #   in Loop: Header=BB123_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB123_203
.LBB123_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB123_243:                            # %if.end824
	cmpl	$75492901, -164(%rbp)   # imm = 0x47FEE25
	jne	.LBB123_245
.LBB123_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_244
.Lfunc_end123:
	.size	IntraChromaPrediction.82, .Lfunc_end123-IntraChromaPrediction.82
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI123_0:
	.quad	.LBB123_42
	.quad	.LBB123_64
	.quad	.LBB123_83
	.quad	.LBB123_102
                                        # -- End function
	.text
	.globl	writeMotionInfo2NAL.83  # -- Begin function writeMotionInfo2NAL.83
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.83,@function
writeMotionInfo2NAL.83:                 # @writeMotionInfo2NAL.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$50810129, -56(%rbp)    # imm = 0x3074D11
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB124_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB124_3
.LBB124_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB124_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB124_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB124_6
.LBB124_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB124_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB124_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB124_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB124_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB124_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB124_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB124_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB124_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB124_39
.LBB124_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB124_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB124_15 Depth=1
	movl	$0, -12(%rbp)
.LBB124_17:                             # %for.cond45
                                        #   Parent Loop BB124_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB124_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB124_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB124_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB124_22
.LBB124_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB124_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB124_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB124_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB124_22:                             # %if.end
                                        #   in Loop: Header=BB124_17 Depth=2
	jmp	.LBB124_23
.LBB124_23:                             # %for.inc
                                        #   in Loop: Header=BB124_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_17
.LBB124_24:                             # %for.end
                                        #   in Loop: Header=BB124_15 Depth=1
	jmp	.LBB124_25
.LBB124_25:                             # %for.inc79
                                        #   in Loop: Header=BB124_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_15
.LBB124_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB124_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB124_27 Depth=1
	movl	$0, -12(%rbp)
.LBB124_29:                             # %for.cond86
                                        #   Parent Loop BB124_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB124_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB124_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB124_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB124_34
.LBB124_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB124_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB124_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB124_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB124_34:                             # %if.end126
                                        #   in Loop: Header=BB124_29 Depth=2
	jmp	.LBB124_35
.LBB124_35:                             # %for.inc127
                                        #   in Loop: Header=BB124_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_29
.LBB124_36:                             # %for.end129
                                        #   in Loop: Header=BB124_27 Depth=1
	jmp	.LBB124_37
.LBB124_37:                             # %for.inc130
                                        #   in Loop: Header=BB124_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_27
.LBB124_38:                             # %for.end132
	jmp	.LBB124_39
.LBB124_39:                             # %if.end133
	jmp	.LBB124_40
.LBB124_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB124_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB124_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB124_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB124_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB124_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB124_45 Depth=1
	movl	$0, -12(%rbp)
.LBB124_47:                             # %for.cond155
                                        #   Parent Loop BB124_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB124_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB124_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB124_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB124_52
.LBB124_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB124_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB124_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB124_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB124_52:                             # %if.end197
                                        #   in Loop: Header=BB124_47 Depth=2
	jmp	.LBB124_53
.LBB124_53:                             # %for.inc198
                                        #   in Loop: Header=BB124_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_47
.LBB124_54:                             # %for.end200
                                        #   in Loop: Header=BB124_45 Depth=1
	jmp	.LBB124_55
.LBB124_55:                             # %for.inc201
                                        #   in Loop: Header=BB124_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_45
.LBB124_56:                             # %for.end203
	jmp	.LBB124_57
.LBB124_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB124_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB124_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB124_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB124_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB124_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB124_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB124_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB124_63 Depth=1
	movl	$0, -12(%rbp)
.LBB124_65:                             # %for.cond227
                                        #   Parent Loop BB124_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB124_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB124_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB124_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB124_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB124_70
.LBB124_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB124_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB124_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB124_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB124_70:                             # %if.end269
                                        #   in Loop: Header=BB124_65 Depth=2
	jmp	.LBB124_71
.LBB124_71:                             # %for.inc270
                                        #   in Loop: Header=BB124_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_65
.LBB124_72:                             # %for.end272
                                        #   in Loop: Header=BB124_63 Depth=1
	jmp	.LBB124_73
.LBB124_73:                             # %for.inc273
                                        #   in Loop: Header=BB124_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_63
.LBB124_74:                             # %for.end275
	jmp	.LBB124_75
.LBB124_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$50810129, -56(%rbp)    # imm = 0x3074D11
	jne	.LBB124_77
.LBB124_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_76
.Lfunc_end124:
	.size	writeMotionInfo2NAL.83, .Lfunc_end124-writeMotionInfo2NAL.83
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.84 # -- Begin function writeChromaIntraPredMode.84
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.84,@function
writeChromaIntraPredMode.84:            # @writeChromaIntraPredMode.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$664930256, -36(%rbp)   # imm = 0x27A207D0
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB125_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB125_3
.LBB125_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB125_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$664930256, -36(%rbp)   # imm = 0x27A207D0
	jne	.LBB125_5
.LBB125_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_4
.Lfunc_end125:
	.size	writeChromaIntraPredMode.84, .Lfunc_end125-writeChromaIntraPredMode.84
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.85 # -- Begin function writeCBPandLumaCoeff.85
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.85,@function
writeCBPandLumaCoeff.85:                # @writeCBPandLumaCoeff.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$169186555, -104(%rbp)  # imm = 0xA1594FB
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB126_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB126_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB126_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB126_7
.LBB126_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB126_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB126_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB126_10
.LBB126_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB126_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB126_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB126_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB126_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB126_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB126_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB126_18
.LBB126_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB126_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB126_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB126_18
.LBB126_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB126_22
.LBB126_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB126_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB126_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB126_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB126_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB126_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB126_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB126_26
.LBB126_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB126_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB126_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB126_29
.LBB126_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB126_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB126_30:                             # %if.end93
	jmp	.LBB126_31
.LBB126_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB126_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB126_42
.LBB126_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB126_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB126_36
.LBB126_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB126_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB126_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB126_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB126_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB126_41
.LBB126_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB126_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB126_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB126_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB126_43 Depth=1
	movl	$0, -20(%rbp)
.LBB126_45:                             # %for.cond141
                                        #   Parent Loop BB126_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB126_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB126_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB126_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB126_45
.LBB126_48:                             # %for.end
                                        #   in Loop: Header=BB126_43 Depth=1
	jmp	.LBB126_49
.LBB126_49:                             # %for.inc152
                                        #   in Loop: Header=BB126_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB126_43
.LBB126_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB126_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB126_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB126_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB126_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB126_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB126_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB126_55:                             # %if.end169
                                        #   in Loop: Header=BB126_52 Depth=1
	jmp	.LBB126_56
.LBB126_56:                             # %for.inc170
                                        #   in Loop: Header=BB126_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB126_52
.LBB126_57:                             # %for.end172
	jmp	.LBB126_101
.LBB126_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB126_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB126_70
.LBB126_60:                             # %if.else179
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB126_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB126_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB126_61 Depth=1
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB126_63:                             # %land.end184
                                        #   in Loop: Header=BB126_61 Depth=1
	testb	$1, %al
	jne	.LBB126_64
	jmp	.LBB126_69
.LBB126_64:                             # %for.body186
                                        #   in Loop: Header=BB126_61 Depth=1
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB126_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB126_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB126_67
.LBB126_66:                             # %if.else196
                                        #   in Loop: Header=BB126_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB126_67:                             # %if.end198
                                        #   in Loop: Header=BB126_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB126_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB126_61
.LBB126_69:                             # %for.end218
	jmp	.LBB126_70
.LBB126_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB126_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB126_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB126_74 Depth 2
                                        #       Child Loop BB126_76 Depth 3
                                        #         Child Loop BB126_78 Depth 4
                                        #           Child Loop BB126_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB126_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB126_72 Depth=1
	movl	$0, -52(%rbp)
.LBB126_74:                             # %for.cond226
                                        #   Parent Loop BB126_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB126_76 Depth 3
                                        #         Child Loop BB126_78 Depth 4
                                        #           Child Loop BB126_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB126_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB126_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB126_76:                             # %for.cond229
                                        #   Parent Loop BB126_72 Depth=1
                                        #     Parent Loop BB126_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB126_78 Depth 4
                                        #           Child Loop BB126_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB126_76 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB126_78:                             # %for.cond233
                                        #   Parent Loop BB126_72 Depth=1
                                        #     Parent Loop BB126_74 Depth=2
                                        #       Parent Loop BB126_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB126_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB126_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB126_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB126_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB126_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB126_91
.LBB126_81:                             # %if.else247
                                        #   in Loop: Header=BB126_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -56(%rbp)
	movl	$0, -36(%rbp)
.LBB126_82:                             # %for.cond259
                                        #   Parent Loop BB126_72 Depth=1
                                        #     Parent Loop BB126_74 Depth=2
                                        #       Parent Loop BB126_76 Depth=3
                                        #         Parent Loop BB126_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB126_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB126_82 Depth=5
	cmpl	$0, -56(%rbp)
	setne	%al
.LBB126_84:                             # %land.end263
                                        #   in Loop: Header=BB126_82 Depth=5
	testb	$1, %al
	jne	.LBB126_85
	jmp	.LBB126_90
.LBB126_85:                             # %for.body265
                                        #   in Loop: Header=BB126_82 Depth=5
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -56(%rbp)
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -100(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB126_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB126_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB126_88
.LBB126_87:                             # %if.else276
                                        #   in Loop: Header=BB126_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB126_88:                             # %if.end278
                                        #   in Loop: Header=BB126_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB126_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB126_82
.LBB126_90:                             # %for.end300
                                        #   in Loop: Header=BB126_78 Depth=4
	jmp	.LBB126_91
.LBB126_91:                             # %if.end301
                                        #   in Loop: Header=BB126_78 Depth=4
	jmp	.LBB126_92
.LBB126_92:                             # %for.inc302
                                        #   in Loop: Header=BB126_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB126_78
.LBB126_93:                             # %for.end304
                                        #   in Loop: Header=BB126_76 Depth=3
	jmp	.LBB126_94
.LBB126_94:                             # %for.inc305
                                        #   in Loop: Header=BB126_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB126_76
.LBB126_95:                             # %for.end307
                                        #   in Loop: Header=BB126_74 Depth=2
	jmp	.LBB126_96
.LBB126_96:                             # %for.inc308
                                        #   in Loop: Header=BB126_74 Depth=2
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB126_74
.LBB126_97:                             # %for.end310
                                        #   in Loop: Header=BB126_72 Depth=1
	jmp	.LBB126_98
.LBB126_98:                             # %for.inc311
                                        #   in Loop: Header=BB126_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB126_72
.LBB126_99:                             # %for.end313
	jmp	.LBB126_100
.LBB126_100:                            # %if.end314
	jmp	.LBB126_101
.LBB126_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$169186555, -104(%rbp)  # imm = 0xA1594FB
	jne	.LBB126_103
.LBB126_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_102
.Lfunc_end126:
	.size	writeCBPandLumaCoeff.85, .Lfunc_end126-writeCBPandLumaCoeff.85
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.86  # -- Begin function ChromaPrediction4x4.86
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.86,@function
ChromaPrediction4x4.86:                 # @ChromaPrediction4x4.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$880718, -72(%rbp)      # imm = 0xD704E
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -52(%rbp)
	movl	%r9d, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB127_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB127_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB127_6
.LBB127_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB127_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB127_5:                              # %land.end
.LBB127_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB127_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB127_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB127_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -20(%rbp)
	jne	.LBB127_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -52(%rbp)
	jne	.LBB127_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -56(%rbp)
	jne	.LBB127_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB127_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB127_15
.LBB127_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB127_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB127_16:                             # %if.end
	cmpl	$-1, -20(%rbp)
	jne	.LBB127_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB127_87
.LBB127_18:                             # %if.end30
	cmpl	$0, -20(%rbp)
	je	.LBB127_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -20(%rbp)
	jne	.LBB127_21
.LBB127_20:                             # %if.then36
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB127_21:                             # %if.end37
	cmpl	$1, -20(%rbp)
	je	.LBB127_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -20(%rbp)
	jne	.LBB127_24
.LBB127_23:                             # %if.then43
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB127_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB127_56
# %bb.25:                               # %if.then46
	cmpl	$2, -20(%rbp)
	jne	.LBB127_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB127_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_29:                             # %for.cond52
                                        #   Parent Loop BB127_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB127_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB127_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_29
.LBB127_32:                             # %for.end
                                        #   in Loop: Header=BB127_27 Depth=1
	jmp	.LBB127_33
.LBB127_33:                             # %for.inc99
                                        #   in Loop: Header=BB127_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_27
.LBB127_34:                             # %for.end101
	jmp	.LBB127_55
.LBB127_35:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB127_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB127_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_39:                             # %for.cond109
                                        #   Parent Loop BB127_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB127_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB127_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_39
.LBB127_42:                             # %for.end139
                                        #   in Loop: Header=BB127_37 Depth=1
	jmp	.LBB127_43
.LBB127_43:                             # %for.inc140
                                        #   in Loop: Header=BB127_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_37
.LBB127_44:                             # %for.end142
	jmp	.LBB127_54
.LBB127_45:                             # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB127_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_48:                             # %for.cond148
                                        #   Parent Loop BB127_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB127_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB127_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_48
.LBB127_51:                             # %for.end178
                                        #   in Loop: Header=BB127_46 Depth=1
	jmp	.LBB127_52
.LBB127_52:                             # %for.inc179
                                        #   in Loop: Header=BB127_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_46
.LBB127_53:                             # %for.end181
	jmp	.LBB127_54
.LBB127_54:                             # %if.end182
	jmp	.LBB127_55
.LBB127_55:                             # %if.end183
	jmp	.LBB127_87
.LBB127_56:                             # %if.else184
	cmpl	$2, -20(%rbp)
	jne	.LBB127_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB127_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_60:                             # %for.cond192
                                        #   Parent Loop BB127_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB127_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB127_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_60
.LBB127_63:                             # %for.end208
                                        #   in Loop: Header=BB127_58 Depth=1
	jmp	.LBB127_64
.LBB127_64:                             # %for.inc209
                                        #   in Loop: Header=BB127_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_58
.LBB127_65:                             # %for.end211
	jmp	.LBB127_86
.LBB127_66:                             # %if.else212
	cmpl	$0, -20(%rbp)
	jne	.LBB127_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB127_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_70:                             # %for.cond220
                                        #   Parent Loop BB127_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB127_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB127_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_70
.LBB127_73:                             # %for.end233
                                        #   in Loop: Header=BB127_68 Depth=1
	jmp	.LBB127_74
.LBB127_74:                             # %for.inc234
                                        #   in Loop: Header=BB127_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_68
.LBB127_75:                             # %for.end236
	jmp	.LBB127_85
.LBB127_76:                             # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB127_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB127_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB127_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB127_79:                             # %for.cond242
                                        #   Parent Loop BB127_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB127_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB127_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB127_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_79
.LBB127_82:                             # %for.end255
                                        #   in Loop: Header=BB127_77 Depth=1
	jmp	.LBB127_83
.LBB127_83:                             # %for.inc256
                                        #   in Loop: Header=BB127_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_77
.LBB127_84:                             # %for.end258
	jmp	.LBB127_85
.LBB127_85:                             # %if.end259
	jmp	.LBB127_86
.LBB127_86:                             # %if.end260
	jmp	.LBB127_87
.LBB127_87:                             # %if.end261
	cmpl	$880718, -72(%rbp)      # imm = 0xD704E
	jne	.LBB127_89
.LBB127_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_88
.Lfunc_end127:
	.size	ChromaPrediction4x4.86, .Lfunc_end127-ChromaPrediction4x4.86
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.87         # -- Begin function MBType2Value.87
	.p2align	4, 0x90
	.type	MBType2Value.87,@function
MBType2Value.87:                        # @MBType2Value.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1162782907, -36(%rbp)  # imm = 0x454EA8BB
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB128_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB128_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB128_4
.LBB128_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB128_26
.LBB128_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB128_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB128_26
.LBB128_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB128_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB128_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB128_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB128_26
.LBB128_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB128_26
.LBB128_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_26
.LBB128_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB128_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB128_26
.LBB128_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB128_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB128_17
.LBB128_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB128_26
.LBB128_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB128_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_26
.LBB128_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB128_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB128_26
.LBB128_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB128_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_26
.LBB128_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB128_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB128_26
.LBB128_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB128_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1162782907, -36(%rbp)  # imm = 0x454EA8BB
	jne	.LBB128_28
.LBB128_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_27
.Lfunc_end128:
	.size	MBType2Value.87, .Lfunc_end128-MBType2Value.87
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.88 # -- Begin function write_terminating_bit.88
	.p2align	4, 0x90
	.type	write_terminating_bit.88,@function
write_terminating_bit.88:               # @write_terminating_bit.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2396043, -8(%rbp)      # imm = 0x248F8B
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$2396043, -8(%rbp)      # imm = 0x248F8B
	jne	.LBB129_2
.LBB129_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_1
.Lfunc_end129:
	.size	write_terminating_bit.88, .Lfunc_end129-write_terminating_bit.88
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.89 # -- Begin function writeCBPandLumaCoeff.89
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.89,@function
writeCBPandLumaCoeff.89:                # @writeCBPandLumaCoeff.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$997679830, -100(%rbp)  # imm = 0x3B7762D6
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB130_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB130_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB130_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB130_7
.LBB130_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB130_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB130_10
.LBB130_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB130_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB130_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB130_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB130_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB130_18
.LBB130_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB130_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB130_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB130_18
.LBB130_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB130_22
.LBB130_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB130_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB130_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB130_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB130_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB130_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB130_26
.LBB130_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB130_29
.LBB130_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB130_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB130_30:                             # %if.end93
	jmp	.LBB130_31
.LBB130_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB130_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB130_42
.LBB130_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB130_36
.LBB130_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB130_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB130_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB130_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB130_41
.LBB130_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB130_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB130_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB130_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB130_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB130_43 Depth=1
	movl	$0, -20(%rbp)
.LBB130_45:                             # %for.cond141
                                        #   Parent Loop BB130_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB130_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB130_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB130_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB130_45
.LBB130_48:                             # %for.end
                                        #   in Loop: Header=BB130_43 Depth=1
	jmp	.LBB130_49
.LBB130_49:                             # %for.inc152
                                        #   in Loop: Header=BB130_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB130_43
.LBB130_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB130_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB130_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB130_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB130_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB130_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB130_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB130_55:                             # %if.end169
                                        #   in Loop: Header=BB130_52 Depth=1
	jmp	.LBB130_56
.LBB130_56:                             # %for.inc170
                                        #   in Loop: Header=BB130_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB130_52
.LBB130_57:                             # %for.end172
	jmp	.LBB130_101
.LBB130_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB130_70
.LBB130_60:                             # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB130_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB130_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB130_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB130_63:                             # %land.end184
                                        #   in Loop: Header=BB130_61 Depth=1
	testb	$1, %al
	jne	.LBB130_64
	jmp	.LBB130_69
.LBB130_64:                             # %for.body186
                                        #   in Loop: Header=BB130_61 Depth=1
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB130_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB130_67
.LBB130_66:                             # %if.else196
                                        #   in Loop: Header=BB130_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_67:                             # %if.end198
                                        #   in Loop: Header=BB130_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB130_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB130_61
.LBB130_69:                             # %for.end218
	jmp	.LBB130_70
.LBB130_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB130_100
# %bb.71:                               # %if.then222
	movl	$0, -56(%rbp)
.LBB130_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_74 Depth 2
                                        #       Child Loop BB130_76 Depth 3
                                        #         Child Loop BB130_78 Depth 4
                                        #           Child Loop BB130_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB130_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB130_72 Depth=1
	movl	$0, -52(%rbp)
.LBB130_74:                             # %for.cond226
                                        #   Parent Loop BB130_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB130_76 Depth 3
                                        #         Child Loop BB130_78 Depth 4
                                        #           Child Loop BB130_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB130_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB130_74 Depth=2
	movl	-56(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB130_76:                             # %for.cond229
                                        #   Parent Loop BB130_72 Depth=1
                                        #     Parent Loop BB130_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB130_78 Depth 4
                                        #           Child Loop BB130_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB130_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB130_76 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB130_78:                             # %for.cond233
                                        #   Parent Loop BB130_72 Depth=1
                                        #     Parent Loop BB130_74 Depth=2
                                        #       Parent Loop BB130_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB130_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB130_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB130_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB130_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB130_91
.LBB130_81:                             # %if.else247
                                        #   in Loop: Header=BB130_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB130_82:                             # %for.cond259
                                        #   Parent Loop BB130_72 Depth=1
                                        #     Parent Loop BB130_74 Depth=2
                                        #       Parent Loop BB130_76 Depth=3
                                        #         Parent Loop BB130_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB130_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB130_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB130_84:                             # %land.end263
                                        #   in Loop: Header=BB130_82 Depth=5
	testb	$1, %al
	jne	.LBB130_85
	jmp	.LBB130_90
.LBB130_85:                             # %for.body265
                                        #   in Loop: Header=BB130_82 Depth=5
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB130_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB130_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB130_88
.LBB130_87:                             # %if.else276
                                        #   in Loop: Header=BB130_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB130_88:                             # %if.end278
                                        #   in Loop: Header=BB130_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB130_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB130_82
.LBB130_90:                             # %for.end300
                                        #   in Loop: Header=BB130_78 Depth=4
	jmp	.LBB130_91
.LBB130_91:                             # %if.end301
                                        #   in Loop: Header=BB130_78 Depth=4
	jmp	.LBB130_92
.LBB130_92:                             # %for.inc302
                                        #   in Loop: Header=BB130_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB130_78
.LBB130_93:                             # %for.end304
                                        #   in Loop: Header=BB130_76 Depth=3
	jmp	.LBB130_94
.LBB130_94:                             # %for.inc305
                                        #   in Loop: Header=BB130_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB130_76
.LBB130_95:                             # %for.end307
                                        #   in Loop: Header=BB130_74 Depth=2
	jmp	.LBB130_96
.LBB130_96:                             # %for.inc308
                                        #   in Loop: Header=BB130_74 Depth=2
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB130_74
.LBB130_97:                             # %for.end310
                                        #   in Loop: Header=BB130_72 Depth=1
	jmp	.LBB130_98
.LBB130_98:                             # %for.inc311
                                        #   in Loop: Header=BB130_72 Depth=1
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB130_72
.LBB130_99:                             # %for.end313
	jmp	.LBB130_100
.LBB130_100:                            # %if.end314
	jmp	.LBB130_101
.LBB130_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$997679830, -100(%rbp)  # imm = 0x3B7762D6
	jne	.LBB130_103
.LBB130_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_102
.Lfunc_end130:
	.size	writeCBPandLumaCoeff.89, .Lfunc_end130-writeCBPandLumaCoeff.89
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.90   # -- Begin function predict_nnz_chroma.90
	.p2align	4, 0x90
	.type	predict_nnz_chroma.90,@function
predict_nnz_chroma.90:                  # @predict_nnz_chroma.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1374756177, -64(%rbp)  # imm = 0x51F11D51
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB131_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB131_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB131_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB131_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB131_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB131_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB131_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB131_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB131_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB131_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB131_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB131_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB131_13:                             # %if.end57
	jmp	.LBB131_27
.LBB131_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB131_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB131_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB131_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB131_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB131_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB131_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB131_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB131_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB131_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB131_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB131_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB131_26:                             # %if.end124
	jmp	.LBB131_27
.LBB131_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB131_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB131_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1374756177, -64(%rbp)  # imm = 0x51F11D51
	jne	.LBB131_31
.LBB131_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_30
.Lfunc_end131:
	.size	predict_nnz_chroma.90, .Lfunc_end131-predict_nnz_chroma.90
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.91 # -- Begin function writeChromaIntraPredMode.91
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.91,@function
writeChromaIntraPredMode.91:            # @writeChromaIntraPredMode.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$596189319, -36(%rbp)   # imm = 0x23892087
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB132_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB132_3
.LBB132_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB132_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$596189319, -36(%rbp)   # imm = 0x23892087
	jne	.LBB132_5
.LBB132_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_4
.Lfunc_end132:
	.size	writeChromaIntraPredMode.91, .Lfunc_end132-writeChromaIntraPredMode.91
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.92        # -- Begin function slice_too_big.92
	.p2align	4, 0x90
	.type	slice_too_big.92,@function
slice_too_big.92:                       # @slice_too_big.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$223368123, -56(%rbp)   # imm = 0xD5053BB
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB133_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB133_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB133_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB133_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB133_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB133_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB133_5:                              # %if.end
                                        #   in Loop: Header=BB133_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB133_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB133_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB133_7:                              # %if.end8
                                        #   in Loop: Header=BB133_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB133_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB133_21
.LBB133_9:                              # %if.end11
                                        #   in Loop: Header=BB133_2 Depth=1
	jmp	.LBB133_10
.LBB133_10:                             # %for.inc
                                        #   in Loop: Header=BB133_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB133_2
.LBB133_11:                             # %for.end
	jmp	.LBB133_12
.LBB133_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB133_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB133_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB133_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB133_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB133_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB133_21
.LBB133_17:                             # %if.end27
                                        #   in Loop: Header=BB133_14 Depth=1
	jmp	.LBB133_18
.LBB133_18:                             # %for.inc28
                                        #   in Loop: Header=BB133_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB133_14
.LBB133_19:                             # %for.end30
	jmp	.LBB133_20
.LBB133_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB133_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$223368123, -56(%rbp)   # imm = 0xD5053BB
	jne	.LBB133_23
.LBB133_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_22
.Lfunc_end133:
	.size	slice_too_big.92, .Lfunc_end133-slice_too_big.92
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.93  # -- Begin function writeReferenceFrame.93
	.p2align	4, 0x90
	.type	writeReferenceFrame.93,@function
writeReferenceFrame.93:                 # @writeReferenceFrame.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$842593067, -80(%rbp)   # imm = 0x3238F32B
	movl	%edi, -68(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB134_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB134_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB134_4
.LBB134_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB134_4
.LBB134_4:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -40(%rbp)
	je	.LBB134_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB134_7
.LBB134_6:                              # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB134_7:                              # %cond.end17
	movl	%eax, -36(%rbp)
	movl	$0, -44(%rbp)
	cmpl	$1, -36(%rbp)
	jne	.LBB134_9
# %bb.8:                                # %if.then
	movl	$0, -48(%rbp)
	jmp	.LBB134_18
.LBB134_9:                              # %if.end
	cmpl	$2, -36(%rbp)
	jne	.LBB134_11
# %bb.10:                               # %if.then20
	movl	$1, -44(%rbp)
.LBB134_11:                             # %if.end21
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB134_16
# %bb.12:                               # %if.then28
	cmpl	$0, -44(%rbp)
	je	.LBB134_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB134_15
.LBB134_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB134_15:                             # %if.end33
	jmp	.LBB134_17
.LBB134_16:                             # %if.else34
	movl	-68(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-40(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB134_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB134_18:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$842593067, -80(%rbp)   # imm = 0x3238F32B
	jne	.LBB134_20
.LBB134_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_19
.Lfunc_end134:
	.size	writeReferenceFrame.93, .Lfunc_end134-writeReferenceFrame.93
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.94       # -- Begin function find_sad_16x16.94
	.p2align	4, 0x90
	.type	find_sad_16x16.94,@function
find_sad_16x16.94:                      # @find_sad_16x16.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$2036436188, -80(%rbp)  # imm = 0x79618CDC
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB135_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB135_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB135_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_1
.LBB135_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB135_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB135_20
.LBB135_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB135_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB135_9
.LBB135_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB135_9
.LBB135_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB135_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB135_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB135_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB135_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB135_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB135_14
.LBB135_13:                             # %cond.false23
                                        #   in Loop: Header=BB135_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB135_14
.LBB135_14:                             # %cond.end24
                                        #   in Loop: Header=BB135_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB135_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_10
.LBB135_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB135_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB135_19
.LBB135_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB135_19
.LBB135_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB135_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB135_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB135_42 Depth 2
                                        #       Child Loop BB135_44 Depth 3
                                        #     Child Loop BB135_50 Depth 2
                                        #       Child Loop BB135_52 Depth 3
                                        #         Child Loop BB135_54 Depth 4
                                        #         Child Loop BB135_58 Depth 4
                                        #           Child Loop BB135_60 Depth 5
                                        #     Child Loop BB135_72 Depth 2
                                        #       Child Loop BB135_74 Depth 3
                                        #     Child Loop BB135_80 Depth 2
                                        #     Child Loop BB135_84 Depth 2
                                        #       Child Loop BB135_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB135_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB135_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB135_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB135_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB135_32
.LBB135_24:                             # %if.then46
                                        #   in Loop: Header=BB135_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB135_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB135_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB135_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB135_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB135_28
.LBB135_27:                             # %if.then51
                                        #   in Loop: Header=BB135_21 Depth=1
	jmp	.LBB135_95
.LBB135_28:                             # %if.end52
                                        #   in Loop: Header=BB135_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB135_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB135_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB135_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB135_21 Depth=1
	jmp	.LBB135_95
.LBB135_31:                             # %if.end57
                                        #   in Loop: Header=BB135_21 Depth=1
	jmp	.LBB135_32
.LBB135_32:                             # %if.end58
                                        #   in Loop: Header=BB135_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB135_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB135_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB135_40
.LBB135_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB135_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB135_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB135_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB135_40
.LBB135_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB135_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB135_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB135_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB135_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB135_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB135_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB135_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB135_41
.LBB135_40:                             # %if.then74
                                        #   in Loop: Header=BB135_21 Depth=1
	jmp	.LBB135_94
.LBB135_41:                             # %if.else75
                                        #   in Loop: Header=BB135_21 Depth=1
	movl	$0, -16(%rbp)
.LBB135_42:                             # %for.cond76
                                        #   Parent Loop BB135_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB135_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB135_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB135_42 Depth=2
	movl	$0, -12(%rbp)
.LBB135_44:                             # %for.cond79
                                        #   Parent Loop BB135_21 Depth=1
                                        #     Parent Loop BB135_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB135_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB135_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB135_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_44
.LBB135_47:                             # %for.end115
                                        #   in Loop: Header=BB135_42 Depth=2
	jmp	.LBB135_48
.LBB135_48:                             # %for.inc116
                                        #   in Loop: Header=BB135_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_42
.LBB135_49:                             # %for.end118
                                        #   in Loop: Header=BB135_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB135_50:                             # %for.cond119
                                        #   Parent Loop BB135_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB135_52 Depth 3
                                        #         Child Loop BB135_54 Depth 4
                                        #         Child Loop BB135_58 Depth 4
                                        #           Child Loop BB135_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB135_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB135_50 Depth=2
	movl	$0, -20(%rbp)
.LBB135_52:                             # %for.cond123
                                        #   Parent Loop BB135_21 Depth=1
                                        #     Parent Loop BB135_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB135_54 Depth 4
                                        #         Child Loop BB135_58 Depth 4
                                        #           Child Loop BB135_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB135_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB135_52 Depth=3
	movl	$0, -16(%rbp)
.LBB135_54:                             # %for.cond127
                                        #   Parent Loop BB135_21 Depth=1
                                        #     Parent Loop BB135_50 Depth=2
                                        #       Parent Loop BB135_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB135_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB135_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB135_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_54
.LBB135_57:                             # %for.end237
                                        #   in Loop: Header=BB135_52 Depth=3
	movl	$0, -12(%rbp)
.LBB135_58:                             # %for.cond238
                                        #   Parent Loop BB135_21 Depth=1
                                        #     Parent Loop BB135_50 Depth=2
                                        #       Parent Loop BB135_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB135_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB135_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB135_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB135_60:                             # %for.cond346
                                        #   Parent Loop BB135_21 Depth=1
                                        #     Parent Loop BB135_50 Depth=2
                                        #       Parent Loop BB135_52 Depth=3
                                        #         Parent Loop BB135_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB135_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB135_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB135_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB135_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB135_63:                             # %if.end363
                                        #   in Loop: Header=BB135_60 Depth=5
	jmp	.LBB135_64
.LBB135_64:                             # %for.inc364
                                        #   in Loop: Header=BB135_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_60
.LBB135_65:                             # %for.end366
                                        #   in Loop: Header=BB135_58 Depth=4
	jmp	.LBB135_66
.LBB135_66:                             # %for.inc367
                                        #   in Loop: Header=BB135_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_58
.LBB135_67:                             # %for.end369
                                        #   in Loop: Header=BB135_52 Depth=3
	jmp	.LBB135_68
.LBB135_68:                             # %for.inc370
                                        #   in Loop: Header=BB135_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB135_52
.LBB135_69:                             # %for.end372
                                        #   in Loop: Header=BB135_50 Depth=2
	jmp	.LBB135_70
.LBB135_70:                             # %for.inc373
                                        #   in Loop: Header=BB135_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB135_50
.LBB135_71:                             # %for.end375
                                        #   in Loop: Header=BB135_21 Depth=1
	movl	$0, -16(%rbp)
.LBB135_72:                             # %for.cond376
                                        #   Parent Loop BB135_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB135_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB135_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB135_72 Depth=2
	movl	$0, -12(%rbp)
.LBB135_74:                             # %for.cond380
                                        #   Parent Loop BB135_21 Depth=1
                                        #     Parent Loop BB135_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB135_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB135_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB135_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_74
.LBB135_77:                             # %for.end397
                                        #   in Loop: Header=BB135_72 Depth=2
	jmp	.LBB135_78
.LBB135_78:                             # %for.inc398
                                        #   in Loop: Header=BB135_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_72
.LBB135_79:                             # %for.end400
                                        #   in Loop: Header=BB135_21 Depth=1
	movl	$0, -16(%rbp)
.LBB135_80:                             # %for.cond401
                                        #   Parent Loop BB135_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB135_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB135_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB135_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_80
.LBB135_83:                             # %for.end463
                                        #   in Loop: Header=BB135_21 Depth=1
	movl	$0, -12(%rbp)
.LBB135_84:                             # %for.cond464
                                        #   Parent Loop BB135_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB135_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB135_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB135_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB135_86:                             # %for.cond524
                                        #   Parent Loop BB135_21 Depth=1
                                        #     Parent Loop BB135_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB135_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB135_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB135_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_86
.LBB135_89:                             # %for.end536
                                        #   in Loop: Header=BB135_84 Depth=2
	jmp	.LBB135_90
.LBB135_90:                             # %for.inc537
                                        #   in Loop: Header=BB135_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB135_84
.LBB135_91:                             # %for.end539
                                        #   in Loop: Header=BB135_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB135_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB135_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB135_93:                             # %if.end543
                                        #   in Loop: Header=BB135_21 Depth=1
	jmp	.LBB135_94
.LBB135_94:                             # %if.end544
                                        #   in Loop: Header=BB135_21 Depth=1
	jmp	.LBB135_95
.LBB135_95:                             # %for.inc545
                                        #   in Loop: Header=BB135_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB135_21
.LBB135_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$2036436188, -80(%rbp)  # imm = 0x79618CDC
	jne	.LBB135_98
.LBB135_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_97
.Lfunc_end135:
	.size	find_sad_16x16.94, .Lfunc_end135-find_sad_16x16.94
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.95  # -- Begin function writeMotionInfo2NAL.95
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.95,@function
writeMotionInfo2NAL.95:                 # @writeMotionInfo2NAL.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2105952549, -56(%rbp)  # imm = 0x7D864925
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB136_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB136_3
.LBB136_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB136_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB136_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB136_6
.LBB136_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB136_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB136_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB136_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB136_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB136_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB136_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB136_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB136_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB136_39
.LBB136_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB136_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB136_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB136_15 Depth=1
	movl	$0, -12(%rbp)
.LBB136_17:                             # %for.cond45
                                        #   Parent Loop BB136_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB136_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB136_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB136_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB136_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB136_22
.LBB136_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB136_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB136_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB136_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB136_22:                             # %if.end
                                        #   in Loop: Header=BB136_17 Depth=2
	jmp	.LBB136_23
.LBB136_23:                             # %for.inc
                                        #   in Loop: Header=BB136_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB136_17
.LBB136_24:                             # %for.end
                                        #   in Loop: Header=BB136_15 Depth=1
	jmp	.LBB136_25
.LBB136_25:                             # %for.inc79
                                        #   in Loop: Header=BB136_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB136_15
.LBB136_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB136_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB136_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB136_27 Depth=1
	movl	$0, -12(%rbp)
.LBB136_29:                             # %for.cond86
                                        #   Parent Loop BB136_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB136_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB136_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB136_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB136_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB136_34
.LBB136_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB136_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB136_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB136_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB136_34:                             # %if.end126
                                        #   in Loop: Header=BB136_29 Depth=2
	jmp	.LBB136_35
.LBB136_35:                             # %for.inc127
                                        #   in Loop: Header=BB136_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB136_29
.LBB136_36:                             # %for.end129
                                        #   in Loop: Header=BB136_27 Depth=1
	jmp	.LBB136_37
.LBB136_37:                             # %for.inc130
                                        #   in Loop: Header=BB136_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB136_27
.LBB136_38:                             # %for.end132
	jmp	.LBB136_39
.LBB136_39:                             # %if.end133
	jmp	.LBB136_40
.LBB136_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB136_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB136_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB136_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB136_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB136_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB136_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB136_45 Depth=1
	movl	$0, -12(%rbp)
.LBB136_47:                             # %for.cond155
                                        #   Parent Loop BB136_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB136_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB136_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB136_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB136_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB136_52
.LBB136_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB136_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB136_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB136_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB136_52:                             # %if.end197
                                        #   in Loop: Header=BB136_47 Depth=2
	jmp	.LBB136_53
.LBB136_53:                             # %for.inc198
                                        #   in Loop: Header=BB136_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB136_47
.LBB136_54:                             # %for.end200
                                        #   in Loop: Header=BB136_45 Depth=1
	jmp	.LBB136_55
.LBB136_55:                             # %for.inc201
                                        #   in Loop: Header=BB136_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB136_45
.LBB136_56:                             # %for.end203
	jmp	.LBB136_57
.LBB136_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB136_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB136_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB136_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB136_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB136_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB136_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB136_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB136_63 Depth=1
	movl	$0, -12(%rbp)
.LBB136_65:                             # %for.cond227
                                        #   Parent Loop BB136_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB136_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB136_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB136_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB136_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB136_70
.LBB136_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB136_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB136_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB136_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB136_70:                             # %if.end269
                                        #   in Loop: Header=BB136_65 Depth=2
	jmp	.LBB136_71
.LBB136_71:                             # %for.inc270
                                        #   in Loop: Header=BB136_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB136_65
.LBB136_72:                             # %for.end272
                                        #   in Loop: Header=BB136_63 Depth=1
	jmp	.LBB136_73
.LBB136_73:                             # %for.inc273
                                        #   in Loop: Header=BB136_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB136_63
.LBB136_74:                             # %for.end275
	jmp	.LBB136_75
.LBB136_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$2105952549, -56(%rbp)  # imm = 0x7D864925
	jne	.LBB136_77
.LBB136_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_76
.Lfunc_end136:
	.size	writeMotionInfo2NAL.95, .Lfunc_end136-writeMotionInfo2NAL.95
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.96        # -- Begin function slice_too_big.96
	.p2align	4, 0x90
	.type	slice_too_big.96,@function
slice_too_big.96:                       # @slice_too_big.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1368296584, -56(%rbp)  # imm = 0x518E8C88
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB137_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB137_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB137_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB137_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB137_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB137_5:                              # %if.end
                                        #   in Loop: Header=BB137_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB137_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB137_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB137_7:                              # %if.end8
                                        #   in Loop: Header=BB137_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB137_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB137_21
.LBB137_9:                              # %if.end11
                                        #   in Loop: Header=BB137_2 Depth=1
	jmp	.LBB137_10
.LBB137_10:                             # %for.inc
                                        #   in Loop: Header=BB137_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_2
.LBB137_11:                             # %for.end
	jmp	.LBB137_12
.LBB137_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB137_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB137_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB137_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB137_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB137_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB137_21
.LBB137_17:                             # %if.end27
                                        #   in Loop: Header=BB137_14 Depth=1
	jmp	.LBB137_18
.LBB137_18:                             # %for.inc28
                                        #   in Loop: Header=BB137_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB137_14
.LBB137_19:                             # %for.end30
	jmp	.LBB137_20
.LBB137_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB137_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1368296584, -56(%rbp)  # imm = 0x518E8C88
	jne	.LBB137_23
.LBB137_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_22
.Lfunc_end137:
	.size	slice_too_big.96, .Lfunc_end137-slice_too_big.96
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.97  # -- Begin function ChromaPrediction4x4.97
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.97,@function
ChromaPrediction4x4.97:                 # @ChromaPrediction4x4.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$247874268, -72(%rbp)   # imm = 0xEC642DC
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -56(%rbp)
	movl	%r9d, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB138_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB138_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB138_6
.LBB138_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB138_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB138_5:                              # %land.end
.LBB138_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB138_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB138_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB138_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -24(%rbp)
	jne	.LBB138_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -56(%rbp)
	jne	.LBB138_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -52(%rbp)
	jne	.LBB138_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB138_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB138_15
.LBB138_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB138_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB138_16:                             # %if.end
	cmpl	$-1, -24(%rbp)
	jne	.LBB138_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB138_87
.LBB138_18:                             # %if.end30
	cmpl	$0, -24(%rbp)
	je	.LBB138_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -24(%rbp)
	jne	.LBB138_21
.LBB138_20:                             # %if.then36
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB138_21:                             # %if.end37
	cmpl	$1, -24(%rbp)
	je	.LBB138_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -24(%rbp)
	jne	.LBB138_24
.LBB138_23:                             # %if.then43
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB138_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB138_56
# %bb.25:                               # %if.then46
	cmpl	$2, -24(%rbp)
	jne	.LBB138_35
# %bb.26:                               # %if.then49
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB138_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB138_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB138_27 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB138_29:                             # %for.cond52
                                        #   Parent Loop BB138_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB138_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB138_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_29
.LBB138_32:                             # %for.end
                                        #   in Loop: Header=BB138_27 Depth=1
	jmp	.LBB138_33
.LBB138_33:                             # %for.inc99
                                        #   in Loop: Header=BB138_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_27
.LBB138_34:                             # %for.end101
	jmp	.LBB138_55
.LBB138_35:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB138_45
# %bb.36:                               # %if.then104
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB138_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB138_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB138_37 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB138_39:                             # %for.cond109
                                        #   Parent Loop BB138_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB138_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB138_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_39
.LBB138_42:                             # %for.end139
                                        #   in Loop: Header=BB138_37 Depth=1
	jmp	.LBB138_43
.LBB138_43:                             # %for.inc140
                                        #   in Loop: Header=BB138_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_37
.LBB138_44:                             # %for.end142
	jmp	.LBB138_54
.LBB138_45:                             # %if.else143
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB138_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB138_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB138_46 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB138_48:                             # %for.cond148
                                        #   Parent Loop BB138_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB138_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB138_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_48
.LBB138_51:                             # %for.end178
                                        #   in Loop: Header=BB138_46 Depth=1
	jmp	.LBB138_52
.LBB138_52:                             # %for.inc179
                                        #   in Loop: Header=BB138_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_46
.LBB138_53:                             # %for.end181
	jmp	.LBB138_54
.LBB138_54:                             # %if.end182
	jmp	.LBB138_55
.LBB138_55:                             # %if.end183
	jmp	.LBB138_87
.LBB138_56:                             # %if.else184
	cmpl	$2, -24(%rbp)
	jne	.LBB138_66
# %bb.57:                               # %if.then187
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB138_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB138_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB138_58 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB138_60:                             # %for.cond192
                                        #   Parent Loop BB138_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB138_60 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB138_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_60
.LBB138_63:                             # %for.end208
                                        #   in Loop: Header=BB138_58 Depth=1
	jmp	.LBB138_64
.LBB138_64:                             # %for.inc209
                                        #   in Loop: Header=BB138_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_58
.LBB138_65:                             # %for.end211
	jmp	.LBB138_86
.LBB138_66:                             # %if.else212
	cmpl	$0, -24(%rbp)
	jne	.LBB138_76
# %bb.67:                               # %if.then215
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB138_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB138_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB138_68 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB138_70:                             # %for.cond220
                                        #   Parent Loop BB138_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB138_70 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB138_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_70
.LBB138_73:                             # %for.end233
                                        #   in Loop: Header=BB138_68 Depth=1
	jmp	.LBB138_74
.LBB138_74:                             # %for.inc234
                                        #   in Loop: Header=BB138_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_68
.LBB138_75:                             # %for.end236
	jmp	.LBB138_85
.LBB138_76:                             # %if.else237
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB138_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB138_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB138_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB138_77 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB138_79:                             # %for.cond242
                                        #   Parent Loop BB138_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB138_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB138_79 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB138_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB138_79
.LBB138_82:                             # %for.end255
                                        #   in Loop: Header=BB138_77 Depth=1
	jmp	.LBB138_83
.LBB138_83:                             # %for.inc256
                                        #   in Loop: Header=BB138_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB138_77
.LBB138_84:                             # %for.end258
	jmp	.LBB138_85
.LBB138_85:                             # %if.end259
	jmp	.LBB138_86
.LBB138_86:                             # %if.end260
	jmp	.LBB138_87
.LBB138_87:                             # %if.end261
	cmpl	$247874268, -72(%rbp)   # imm = 0xEC642DC
	jne	.LBB138_89
.LBB138_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_88
.Lfunc_end138:
	.size	ChromaPrediction4x4.97, .Lfunc_end138-ChromaPrediction4x4.97
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.98         # -- Begin function MBType2Value.98
	.p2align	4, 0x90
	.type	MBType2Value.98,@function
MBType2Value.98:                        # @MBType2Value.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1799797483, -36(%rbp)  # imm = 0x6B46BAEB
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB139_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB139_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB139_4
.LBB139_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB139_26
.LBB139_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB139_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB139_26
.LBB139_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB139_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB139_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB139_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB139_26
.LBB139_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB139_26
.LBB139_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB139_26
.LBB139_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB139_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB139_26
.LBB139_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB139_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB139_17
.LBB139_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB139_26
.LBB139_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB139_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB139_26
.LBB139_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB139_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB139_26
.LBB139_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB139_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB139_26
.LBB139_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB139_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB139_26
.LBB139_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB139_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1799797483, -36(%rbp)  # imm = 0x6B46BAEB
	jne	.LBB139_28
.LBB139_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_27
.Lfunc_end139:
	.size	MBType2Value.98, .Lfunc_end139-MBType2Value.98
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.99   # -- Begin function LumaResidualCoding.99
	.p2align	4, 0x90
	.type	LumaResidualCoding.99,@function
LumaResidualCoding.99:                  # @LumaResidualCoding.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1610839740, -52(%rbp)  # imm = 0x600376BC
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB140_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB140_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-40(%rbp), %rdx
	leaq	-44(%rbp), %rcx
	leaq	-22(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-40(%rbp), %r8d
	movl	-44(%rbp), %r9d
	movw	-22(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB140_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB140_1
.LBB140_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB140_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB140_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB140_33
.LBB140_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB140_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB140_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB140_8 Depth=1
	movl	$0, -4(%rbp)
.LBB140_10:                             # %for.cond13
                                        #   Parent Loop BB140_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB140_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB140_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB140_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB140_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB140_14
.LBB140_13:                             # %if.else
                                        #   in Loop: Header=BB140_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB140_14:                             # %if.end
                                        #   in Loop: Header=BB140_10 Depth=2
	jmp	.LBB140_15
.LBB140_15:                             # %for.inc31
                                        #   in Loop: Header=BB140_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_10
.LBB140_16:                             # %for.end33
                                        #   in Loop: Header=BB140_8 Depth=1
	jmp	.LBB140_17
.LBB140_17:                             # %for.inc34
                                        #   in Loop: Header=BB140_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB140_8
.LBB140_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB140_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB140_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB140_22 Depth 2
                                        #       Child Loop BB140_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB140_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB140_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB140_22:                             # %for.cond45
                                        #   Parent Loop BB140_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB140_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB140_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB140_22 Depth=2
	movl	$0, -4(%rbp)
.LBB140_24:                             # %for.cond48
                                        #   Parent Loop BB140_20 Depth=1
                                        #     Parent Loop BB140_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB140_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB140_24 Depth=3
	movl	-48(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB140_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB140_24
.LBB140_27:                             # %for.end55
                                        #   in Loop: Header=BB140_22 Depth=2
	jmp	.LBB140_28
.LBB140_28:                             # %for.inc56
                                        #   in Loop: Header=BB140_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB140_22
.LBB140_29:                             # %for.end58
                                        #   in Loop: Header=BB140_20 Depth=1
	jmp	.LBB140_30
.LBB140_30:                             # %for.inc59
                                        #   in Loop: Header=BB140_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB140_20
.LBB140_31:                             # %for.end61
	jmp	.LBB140_32
.LBB140_32:                             # %if.end62
	jmp	.LBB140_33
.LBB140_33:                             # %if.end63
	cmpl	$1610839740, -52(%rbp)  # imm = 0x600376BC
	jne	.LBB140_35
.LBB140_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_34
.Lfunc_end140:
	.size	LumaResidualCoding.99, .Lfunc_end140-LumaResidualCoding.99
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.100 # -- Begin function writeLumaCoeff4x4_CABAC.100
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.100,@function
writeLumaCoeff4x4_CABAC.100:            # @writeLumaCoeff4x4_CABAC.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1098416353, -52(%rbp)  # imm = 0x417880E1
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -72(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB141_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB141_3
.LBB141_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB141_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB141_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB141_6
.LBB141_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB141_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB141_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB141_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB141_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB141_9:                              # %land.end
                                        #   in Loop: Header=BB141_7 Depth=1
	testb	$1, %al
	jne	.LBB141_10
	jmp	.LBB141_15
.LBB141_10:                             # %for.body
                                        #   in Loop: Header=BB141_7 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB141_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB141_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB141_13
.LBB141_12:                             # %cond.false40
                                        #   in Loop: Header=BB141_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB141_13:                             # %cond.end43
                                        #   in Loop: Header=BB141_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB141_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB141_7
.LBB141_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1098416353, -52(%rbp)  # imm = 0x417880E1
	jne	.LBB141_17
.LBB141_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_16
.Lfunc_end141:
	.size	writeLumaCoeff4x4_CABAC.100, .Lfunc_end141-writeLumaCoeff4x4_CABAC.100
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.101   # -- Begin function writeLumaCoeff8x8.101
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.101,@function
writeLumaCoeff8x8.101:                  # @writeLumaCoeff8x8.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1867493009, -36(%rbp)  # imm = 0x6F4FAE91
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB142_2
# %bb.1:                                # %if.then
	jmp	.LBB142_2
.LBB142_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB142_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_15
.LBB142_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB142_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB142_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB142_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB142_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB142_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB142_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB142_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB142_10
.LBB142_9:                              # %cond.false
                                        #   in Loop: Header=BB142_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB142_10:                             # %cond.end
                                        #   in Loop: Header=BB142_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB142_12
.LBB142_11:                             # %if.else
                                        #   in Loop: Header=BB142_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB142_12:                             # %if.end17
                                        #   in Loop: Header=BB142_5 Depth=1
	jmp	.LBB142_13
.LBB142_13:                             # %for.inc
                                        #   in Loop: Header=BB142_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB142_5
.LBB142_14:                             # %for.end
	jmp	.LBB142_19
.LBB142_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB142_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB142_18
.LBB142_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB142_18:                             # %if.end27
	jmp	.LBB142_19
.LBB142_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1867493009, -36(%rbp)  # imm = 0x6F4FAE91
	jne	.LBB142_21
.LBB142_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_20
.Lfunc_end142:
	.size	writeLumaCoeff8x8.101, .Lfunc_end142-writeLumaCoeff8x8.101
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.102 # -- Begin function IntraChromaPrediction4x4.102
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.102,@function
IntraChromaPrediction4x4.102:           # @IntraChromaPrediction4x4.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2131305815, -24(%rbp)  # imm = 0x7F092557
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB143_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB143_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB143_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB143_3:                              # %for.cond1
                                        #   Parent Loop BB143_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB143_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB143_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-28(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB143_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB143_3
.LBB143_6:                              # %for.end
                                        #   in Loop: Header=BB143_1 Depth=1
	jmp	.LBB143_7
.LBB143_7:                              # %for.inc17
                                        #   in Loop: Header=BB143_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB143_1
.LBB143_8:                              # %for.end19
	cmpl	$2131305815, -24(%rbp)  # imm = 0x7F092557
	jne	.LBB143_10
.LBB143_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_9
.Lfunc_end143:
	.size	IntraChromaPrediction4x4.102, .Lfunc_end143-IntraChromaPrediction4x4.102
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.103 # -- Begin function IntraChromaPrediction4x4.103
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.103,@function
IntraChromaPrediction4x4.103:           # @IntraChromaPrediction4x4.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1336622773, -24(%rbp)  # imm = 0x4FAB3EB5
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB144_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB144_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB144_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB144_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB144_3:                              # %for.cond1
                                        #   Parent Loop BB144_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB144_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB144_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB144_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB144_3
.LBB144_6:                              # %for.end
                                        #   in Loop: Header=BB144_1 Depth=1
	jmp	.LBB144_7
.LBB144_7:                              # %for.inc17
                                        #   in Loop: Header=BB144_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB144_1
.LBB144_8:                              # %for.end19
	cmpl	$1336622773, -24(%rbp)  # imm = 0x4FAB3EB5
	jne	.LBB144_10
.LBB144_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_9
.Lfunc_end144:
	.size	IntraChromaPrediction4x4.103, .Lfunc_end144-IntraChromaPrediction4x4.103
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.104 # -- Begin function OneComponentLumaPrediction4x4.104
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.104,@function
OneComponentLumaPrediction4x4.104:      # @OneComponentLumaPrediction4x4.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1561488776, -88(%rbp)  # imm = 0x5D126D88
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -24(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-60(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movq	-32(%rbp), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$1561488776, -88(%rbp)  # imm = 0x5D126D88
	jne	.LBB145_2
.LBB145_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_1
.Lfunc_end145:
	.size	OneComponentLumaPrediction4x4.104, .Lfunc_end145-OneComponentLumaPrediction4x4.104
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.105 # -- Begin function terminate_macroblock.105
	.p2align	4, 0x90
	.type	terminate_macroblock.105,@function
terminate_macroblock.105:               # @terminate_macroblock.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1628505802, -112(%rbp) # imm = 0x611106CA
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB146_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB146_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB146_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB146_5
.LBB146_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB146_8
.LBB146_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB146_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB146_7:                              # %if.end
	jmp	.LBB146_8
.LBB146_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB146_45
# %bb.9:                                # %if.end18
	movq	.LJTI146_0(,%rax,8), %rax
	jmpq	*%rax
.LBB146_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB146_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB146_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB146_46
.LBB146_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB146_46
.LBB146_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB146_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB146_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB146_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB146_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB146_22
.LBB146_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB146_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB146_21:                             # %if.end64
	jmp	.LBB146_22
.LBB146_22:                             # %if.end65
	jmp	.LBB146_23
.LBB146_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB146_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB146_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB146_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB146_27:                             # %if.end79
	jmp	.LBB146_28
.LBB146_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB146_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB146_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB146_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB146_32:                             # %if.end89
	jmp	.LBB146_33
.LBB146_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB146_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB146_35:                             # %if.end95
	jmp	.LBB146_46
.LBB146_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB146_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB146_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB146_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB146_40:                             # %if.end106
	jmp	.LBB146_41
.LBB146_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB146_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB146_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB146_44:                             # %if.end118
	jmp	.LBB146_46
.LBB146_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB146_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB146_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB146_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB146_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB146_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB146_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB146_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB146_51:                             # %if.end139
                                        #   in Loop: Header=BB146_48 Depth=1
	jmp	.LBB146_52
.LBB146_52:                             # %for.inc
                                        #   in Loop: Header=BB146_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB146_48
.LBB146_53:                             # %for.end
	jmp	.LBB146_54
.LBB146_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB146_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB146_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB146_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB146_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB146_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB146_60:                             # %if.end174
	jmp	.LBB146_62
.LBB146_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB146_62:                             # %if.end188
	jmp	.LBB146_63
.LBB146_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB146_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB146_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB146_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB146_67:                             # %if.end218
	cmpl	$1628505802, -112(%rbp) # imm = 0x611106CA
	jne	.LBB146_69
.LBB146_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_68
.Lfunc_end146:
	.size	terminate_macroblock.105, .Lfunc_end146-terminate_macroblock.105
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI146_0:
	.quad	.LBB146_10
	.quad	.LBB146_13
	.quad	.LBB146_14
	.quad	.LBB146_36
                                        # -- End function
	.text
	.globl	writeReferenceFrame.106 # -- Begin function writeReferenceFrame.106
	.p2align	4, 0x90
	.type	writeReferenceFrame.106,@function
writeReferenceFrame.106:                # @writeReferenceFrame.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1658358978, -84(%rbp)  # imm = 0x62D88CC2
	movl	%edi, -72(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB147_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB147_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB147_4
.LBB147_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB147_4
.LBB147_4:                              # %cond.end
	movl	%ecx, -48(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB147_6
# %bb.5:                                # %cond.true10
	movl	-48(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB147_7
.LBB147_6:                              # %cond.false13
	movl	-48(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB147_7:                              # %cond.end17
	movl	%eax, -40(%rbp)
	movl	$0, -52(%rbp)
	cmpl	$1, -40(%rbp)
	jne	.LBB147_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB147_18
.LBB147_9:                              # %if.end
	cmpl	$2, -40(%rbp)
	jne	.LBB147_11
# %bb.10:                               # %if.then20
	movl	$1, -52(%rbp)
.LBB147_11:                             # %if.end21
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB147_16
# %bb.12:                               # %if.then28
	cmpl	$0, -52(%rbp)
	je	.LBB147_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB147_15
.LBB147_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB147_15:                             # %if.end33
	jmp	.LBB147_17
.LBB147_16:                             # %if.else34
	movl	-72(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB147_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB147_18:                             # %return
	movl	-36(%rbp), %ebx
	cmpl	$1658358978, -84(%rbp)  # imm = 0x62D88CC2
	jne	.LBB147_20
.LBB147_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_19
.Lfunc_end147:
	.size	writeReferenceFrame.106, .Lfunc_end147-writeReferenceFrame.106
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.107  # -- Begin function predict_nnz_chroma.107
	.p2align	4, 0x90
	.type	predict_nnz_chroma.107,@function
predict_nnz_chroma.107:                 # @predict_nnz_chroma.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$258966437, -64(%rbp)   # imm = 0xF6F83A5
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB148_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB148_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB148_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB148_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB148_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB148_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB148_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB148_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB148_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB148_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB148_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB148_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB148_13:                             # %if.end57
	jmp	.LBB148_27
.LBB148_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB148_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB148_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB148_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB148_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB148_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB148_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB148_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB148_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB148_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB148_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB148_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB148_26:                             # %if.end124
	jmp	.LBB148_27
.LBB148_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB148_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB148_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$258966437, -64(%rbp)   # imm = 0xF6F83A5
	jne	.LBB148_31
.LBB148_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_30
.Lfunc_end148:
	.size	predict_nnz_chroma.107, .Lfunc_end148-predict_nnz_chroma.107
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.108 # -- Begin function proceed2nextMacroblock.108
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.108,@function
proceed2nextMacroblock.108:             # @proceed2nextMacroblock.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1957476563, -28(%rbp)  # imm = 0x74ACB8D3
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB149_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB149_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB149_9
.LBB149_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB149_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB149_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB149_7
.LBB149_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB149_7:                              # %if.end
	jmp	.LBB149_8
.LBB149_8:                              # %if.end48
	jmp	.LBB149_9
.LBB149_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB149_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB149_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB149_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB149_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB149_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB149_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB149_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB149_16
.LBB149_15:                             # %if.else86
                                        #   in Loop: Header=BB149_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB149_16:                             # %if.end94
                                        #   in Loop: Header=BB149_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB149_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB149_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB149_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB149_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB149_20
.LBB149_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB149_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB149_21
.LBB149_20:                             # %if.then107
                                        #   in Loop: Header=BB149_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB149_22
.LBB149_21:                             # %if.else114
                                        #   in Loop: Header=BB149_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB149_22:                             # %if.end121
                                        #   in Loop: Header=BB149_12 Depth=1
	jmp	.LBB149_23
.LBB149_23:                             # %if.end122
                                        #   in Loop: Header=BB149_12 Depth=1
	jmp	.LBB149_24
.LBB149_24:                             # %for.inc
                                        #   in Loop: Header=BB149_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB149_12
.LBB149_25:                             # %for.end
	jmp	.LBB149_34
.LBB149_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB149_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB149_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB149_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB149_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB149_32
.LBB149_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB149_32:                             # %if.end155
	jmp	.LBB149_33
.LBB149_33:                             # %if.end156
	jmp	.LBB149_34
.LBB149_34:                             # %if.end157
	jmp	.LBB149_35
.LBB149_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB149_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB149_38
.LBB149_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB149_38:                             # %if.end167
	cmpl	$1957476563, -28(%rbp)  # imm = 0x74ACB8D3
	jne	.LBB149_40
.LBB149_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_39
.Lfunc_end149:
	.size	proceed2nextMacroblock.108, .Lfunc_end149-proceed2nextMacroblock.108
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.109 # -- Begin function IntraChromaPrediction4x4.109
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.109,@function
IntraChromaPrediction4x4.109:           # @IntraChromaPrediction4x4.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1026485708, -28(%rbp)  # imm = 0x3D2EEDCC
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -24(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB150_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB150_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB150_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB150_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB150_3:                              # %for.cond1
                                        #   Parent Loop BB150_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB150_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB150_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-24(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB150_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB150_3
.LBB150_6:                              # %for.end
                                        #   in Loop: Header=BB150_1 Depth=1
	jmp	.LBB150_7
.LBB150_7:                              # %for.inc17
                                        #   in Loop: Header=BB150_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB150_1
.LBB150_8:                              # %for.end19
	cmpl	$1026485708, -28(%rbp)  # imm = 0x3D2EEDCC
	jne	.LBB150_10
.LBB150_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_9
.Lfunc_end150:
	.size	IntraChromaPrediction4x4.109, .Lfunc_end150-IntraChromaPrediction4x4.109
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.110  # -- Begin function writeIntra4x4Modes.110
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.110,@function
writeIntra4x4Modes.110:                 # @writeIntra4x4Modes.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$2125014858, -72(%rbp)  # imm = 0x7EA9274A
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB151_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB151_9 Depth 2
                                        #       Child Loop BB151_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB151_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB151_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB151_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB151_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB151_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB151_8
.LBB151_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB151_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB151_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB151_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB151_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB151_17
.LBB151_8:                              # %if.then
                                        #   in Loop: Header=BB151_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	%ecx, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -32(%rbp)
.LBB151_9:                              # %for.cond24
                                        #   Parent Loop BB151_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB151_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB151_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB151_9 Depth=2
	movl	$0, -12(%rbp)
.LBB151_11:                             # %for.cond27
                                        #   Parent Loop BB151_1 Depth=1
                                        #     Parent Loop BB151_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB151_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB151_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB151_11 Depth=3
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_11
.LBB151_14:                             # %for.end
                                        #   in Loop: Header=BB151_9 Depth=2
	jmp	.LBB151_15
.LBB151_15:                             # %for.inc42
                                        #   in Loop: Header=BB151_9 Depth=2
	movl	-80(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB151_9
.LBB151_16:                             # %for.end44
                                        #   in Loop: Header=BB151_1 Depth=1
	jmp	.LBB151_17
.LBB151_17:                             # %if.end
                                        #   in Loop: Header=BB151_1 Depth=1
	jmp	.LBB151_18
.LBB151_18:                             # %for.inc45
                                        #   in Loop: Header=BB151_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB151_1
.LBB151_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB151_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB151_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB151_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB151_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB151_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB151_23:                             # %if.end57
                                        #   in Loop: Header=BB151_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB151_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB151_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB151_26
.LBB151_25:                             # %if.else
                                        #   in Loop: Header=BB151_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB151_26:                             # %if.end65
                                        #   in Loop: Header=BB151_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB151_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB151_20
.LBB151_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$2125014858, -72(%rbp)  # imm = 0x7EA9274A
	jne	.LBB151_30
.LBB151_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_29
.Lfunc_end151:
	.size	writeIntra4x4Modes.110, .Lfunc_end151-writeIntra4x4Modes.110
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.111 # -- Begin function terminate_macroblock.111
	.p2align	4, 0x90
	.type	terminate_macroblock.111,@function
terminate_macroblock.111:               # @terminate_macroblock.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$103180114, -108(%rbp)  # imm = 0x6266752
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB152_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB152_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB152_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB152_5
.LBB152_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB152_8
.LBB152_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB152_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB152_7:                              # %if.end
	jmp	.LBB152_8
.LBB152_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB152_45
# %bb.9:                                # %if.end18
	movq	.LJTI152_0(,%rax,8), %rax
	jmpq	*%rax
.LBB152_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB152_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB152_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB152_46
.LBB152_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB152_46
.LBB152_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB152_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB152_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB152_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB152_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB152_22
.LBB152_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB152_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB152_21:                             # %if.end64
	jmp	.LBB152_22
.LBB152_22:                             # %if.end65
	jmp	.LBB152_23
.LBB152_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB152_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB152_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB152_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB152_27:                             # %if.end79
	jmp	.LBB152_28
.LBB152_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB152_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB152_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB152_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB152_32:                             # %if.end89
	jmp	.LBB152_33
.LBB152_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB152_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB152_35:                             # %if.end95
	jmp	.LBB152_46
.LBB152_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB152_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB152_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB152_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB152_40:                             # %if.end106
	jmp	.LBB152_41
.LBB152_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB152_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB152_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB152_44:                             # %if.end118
	jmp	.LBB152_46
.LBB152_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB152_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB152_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB152_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB152_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB152_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB152_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB152_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB152_51:                             # %if.end139
                                        #   in Loop: Header=BB152_48 Depth=1
	jmp	.LBB152_52
.LBB152_52:                             # %for.inc
                                        #   in Loop: Header=BB152_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB152_48
.LBB152_53:                             # %for.end
	jmp	.LBB152_54
.LBB152_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB152_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB152_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB152_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB152_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB152_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB152_60:                             # %if.end174
	jmp	.LBB152_62
.LBB152_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB152_62:                             # %if.end188
	jmp	.LBB152_63
.LBB152_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB152_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB152_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB152_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB152_67:                             # %if.end218
	cmpl	$103180114, -108(%rbp)  # imm = 0x6266752
	jne	.LBB152_69
.LBB152_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_68
.Lfunc_end152:
	.size	terminate_macroblock.111, .Lfunc_end152-terminate_macroblock.111
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI152_0:
	.quad	.LBB152_10
	.quad	.LBB152_13
	.quad	.LBB152_14
	.quad	.LBB152_36
                                        # -- End function
	.text
	.globl	LumaResidualCoding8x8.112 # -- Begin function LumaResidualCoding8x8.112
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.112,@function
LumaResidualCoding8x8.112:              # @LumaResidualCoding8x8.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$604643704, -120(%rbp)  # imm = 0x240A2178
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -68(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -36(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -124(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB153_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -68(%rbp)
	jne	.LBB153_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB153_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB153_5
# %bb.4:                                # %if.then
	movl	$1, -124(%rbp)
.LBB153_5:                              # %if.end
	movl	$0, -60(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB153_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_8 Depth 2
                                        #       Child Loop BB153_11 Depth 3
                                        #         Child Loop BB153_13 Depth 4
                                        #       Child Loop BB153_19 Depth 3
                                        #         Child Loop BB153_21 Depth 4
                                        #       Child Loop BB153_29 Depth 3
                                        #         Child Loop BB153_31 Depth 4
                                        #       Child Loop BB153_40 Depth 3
                                        #         Child Loop BB153_42 Depth 4
                                        #       Child Loop BB153_57 Depth 3
                                        #         Child Loop BB153_59 Depth 4
                                        #       Child Loop BB153_67 Depth 3
                                        #         Child Loop BB153_69 Depth 4
                                        #       Child Loop BB153_84 Depth 3
                                        #         Child Loop BB153_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB153_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -64(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB153_8:                              # %for.cond9
                                        #   Parent Loop BB153_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB153_11 Depth 3
                                        #         Child Loop BB153_13 Depth 4
                                        #       Child Loop BB153_19 Depth 3
                                        #         Child Loop BB153_21 Depth 4
                                        #       Child Loop BB153_29 Depth 3
                                        #         Child Loop BB153_31 Depth 4
                                        #       Child Loop BB153_40 Depth 3
                                        #         Child Loop BB153_42 Depth 4
                                        #       Child Loop BB153_57 Depth 3
                                        #         Child Loop BB153_59 Depth 4
                                        #       Child Loop BB153_67 Depth 3
                                        #         Child Loop BB153_69 Depth 4
                                        #       Child Loop BB153_84 Depth 3
                                        #         Child Loop BB153_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB153_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB153_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB153_11:                             # %for.cond16
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB153_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB153_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB153_11 Depth=3
	movl	$0, -16(%rbp)
.LBB153_13:                             # %for.cond20
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        #       Parent Loop BB153_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB153_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB153_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB153_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB153_13
.LBB153_16:                             # %for.end
                                        #   in Loop: Header=BB153_11 Depth=3
	jmp	.LBB153_17
.LBB153_17:                             # %for.inc37
                                        #   in Loop: Header=BB153_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_11
.LBB153_18:                             # %for.end39
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB153_19:                             # %for.cond41
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB153_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB153_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB153_19 Depth=3
	movl	$0, -16(%rbp)
.LBB153_21:                             # %for.cond45
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        #       Parent Loop BB153_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB153_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB153_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB153_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB153_21
.LBB153_24:                             # %for.end65
                                        #   in Loop: Header=BB153_19 Depth=3
	jmp	.LBB153_25
.LBB153_25:                             # %for.inc66
                                        #   in Loop: Header=BB153_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_19
.LBB153_26:                             # %for.end68
                                        #   in Loop: Header=BB153_8 Depth=2
	jmp	.LBB153_27
.LBB153_27:                             # %if.end69
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB153_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	$0, -12(%rbp)
.LBB153_29:                             # %for.cond74
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB153_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB153_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB153_29 Depth=3
	movl	$0, -16(%rbp)
.LBB153_31:                             # %for.cond78
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        #       Parent Loop BB153_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB153_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB153_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB153_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB153_31
.LBB153_34:                             # %for.end98
                                        #   in Loop: Header=BB153_29 Depth=3
	jmp	.LBB153_35
.LBB153_35:                             # %for.inc99
                                        #   in Loop: Header=BB153_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_29
.LBB153_36:                             # %for.end101
                                        #   in Loop: Header=BB153_8 Depth=2
	jmp	.LBB153_37
.LBB153_37:                             # %if.end102
                                        #   in Loop: Header=BB153_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB153_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB153_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB153_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	$0, -12(%rbp)
.LBB153_40:                             # %for.cond108
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB153_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB153_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB153_40 Depth=3
	movl	$0, -16(%rbp)
.LBB153_42:                             # %for.cond112
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        #       Parent Loop BB153_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB153_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB153_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB153_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB153_42
.LBB153_45:                             # %for.end137
                                        #   in Loop: Header=BB153_40 Depth=3
	jmp	.LBB153_46
.LBB153_46:                             # %for.inc138
                                        #   in Loop: Header=BB153_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_40
.LBB153_47:                             # %for.end140
                                        #   in Loop: Header=BB153_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB153_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB153_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB153_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB153_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB153_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB153_52
.LBB153_51:                             # %if.else
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB153_52:                             # %if.end151
                                        #   in Loop: Header=BB153_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB153_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB153_54:                             # %if.end157
                                        #   in Loop: Header=BB153_8 Depth=2
	jmp	.LBB153_55
.LBB153_55:                             # %if.end158
                                        #   in Loop: Header=BB153_8 Depth=2
	jmp	.LBB153_65
.LBB153_56:                             # %if.else159
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	$0, -12(%rbp)
.LBB153_57:                             # %for.cond160
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB153_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB153_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB153_57 Depth=3
	movl	$0, -16(%rbp)
.LBB153_59:                             # %for.cond164
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        #       Parent Loop BB153_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB153_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB153_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB153_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB153_59
.LBB153_62:                             # %for.end193
                                        #   in Loop: Header=BB153_57 Depth=3
	jmp	.LBB153_63
.LBB153_63:                             # %for.inc194
                                        #   in Loop: Header=BB153_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_57
.LBB153_64:                             # %for.end196
                                        #   in Loop: Header=BB153_8 Depth=2
	jmp	.LBB153_65
.LBB153_65:                             # %if.end197
                                        #   in Loop: Header=BB153_8 Depth=2
	jmp	.LBB153_95
.LBB153_66:                             # %if.else198
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	$0, -12(%rbp)
.LBB153_67:                             # %for.cond199
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB153_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB153_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB153_67 Depth=3
	movl	$0, -16(%rbp)
.LBB153_69:                             # %for.cond203
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        #       Parent Loop BB153_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB153_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB153_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -92(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-116(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -84(%rbp)
	jne	.LBB153_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB153_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB153_73
.LBB153_72:                             # %if.else300
                                        #   in Loop: Header=BB153_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB153_73:                             # %if.end314
                                        #   in Loop: Header=BB153_69 Depth=4
	jmp	.LBB153_74
.LBB153_74:                             # %for.inc315
                                        #   in Loop: Header=BB153_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB153_69
.LBB153_75:                             # %for.end317
                                        #   in Loop: Header=BB153_67 Depth=3
	jmp	.LBB153_76
.LBB153_76:                             # %for.inc318
                                        #   in Loop: Header=BB153_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_67
.LBB153_77:                             # %for.end320
                                        #   in Loop: Header=BB153_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB153_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB153_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB153_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB153_8 Depth=2
	cmpl	$0, -84(%rbp)
	jne	.LBB153_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB153_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB153_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB153_83
.LBB153_82:                             # %if.else334
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB153_83:                             # %if.end336
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	$0, -12(%rbp)
.LBB153_84:                             # %for.cond337
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB153_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB153_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB153_84 Depth=3
	movl	$0, -16(%rbp)
.LBB153_86:                             # %for.cond341
                                        #   Parent Loop BB153_6 Depth=1
                                        #     Parent Loop BB153_8 Depth=2
                                        #       Parent Loop BB153_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB153_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB153_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB153_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB153_86
.LBB153_89:                             # %for.end358
                                        #   in Loop: Header=BB153_84 Depth=3
	jmp	.LBB153_90
.LBB153_90:                             # %for.inc359
                                        #   in Loop: Header=BB153_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_84
.LBB153_91:                             # %for.end361
                                        #   in Loop: Header=BB153_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB153_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB153_93:                             # %if.end368
                                        #   in Loop: Header=BB153_8 Depth=2
	jmp	.LBB153_94
.LBB153_94:                             # %if.end369
                                        #   in Loop: Header=BB153_8 Depth=2
	jmp	.LBB153_95
.LBB153_95:                             # %if.end370
                                        #   in Loop: Header=BB153_8 Depth=2
	jmp	.LBB153_96
.LBB153_96:                             # %for.inc371
                                        #   in Loop: Header=BB153_8 Depth=2
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB153_8
.LBB153_97:                             # %for.end374
                                        #   in Loop: Header=BB153_6 Depth=1
	jmp	.LBB153_98
.LBB153_98:                             # %for.inc375
                                        #   in Loop: Header=BB153_6 Depth=1
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB153_6
.LBB153_99:                             # %for.end378
	cmpl	$0, -84(%rbp)
	je	.LBB153_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB153_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -80(%rbp)
	jne	.LBB153_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB153_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-36(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB153_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB153_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB153_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB153_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB153_106 Depth=1
	movl	$0, -16(%rbp)
.LBB153_108:                            # %for.cond400
                                        #   Parent Loop BB153_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB153_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB153_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB153_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB153_108
.LBB153_111:                            # %for.end417
                                        #   in Loop: Header=BB153_106 Depth=1
	jmp	.LBB153_112
.LBB153_112:                            # %for.inc418
                                        #   in Loop: Header=BB153_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_106
.LBB153_113:                            # %for.end420
	jmp	.LBB153_114
.LBB153_114:                            # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB153_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-72(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB153_116:                            # %if.end431
	jmp	.LBB153_117
.LBB153_117:                            # %if.end432
	jmp	.LBB153_118
.LBB153_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB153_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -80(%rbp)
	jne	.LBB153_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -36(%rbp)
	jg	.LBB153_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB153_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB153_145
.LBB153_123:                            # %if.then448
	movl	$0, -36(%rbp)
	movl	$63, %eax
	subl	-72(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB153_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB153_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB153_126:                            # %for.cond462
                                        #   Parent Loop BB153_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB153_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB153_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB153_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB153_130
.LBB153_129:                            # %if.else481
                                        #   in Loop: Header=BB153_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB153_130:                            # %if.end486
                                        #   in Loop: Header=BB153_126 Depth=2
	jmp	.LBB153_131
.LBB153_131:                            # %for.inc487
                                        #   in Loop: Header=BB153_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_126
.LBB153_132:                            # %for.end489
                                        #   in Loop: Header=BB153_124 Depth=1
	jmp	.LBB153_133
.LBB153_133:                            # %for.inc490
                                        #   in Loop: Header=BB153_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB153_124
.LBB153_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB153_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB153_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB153_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB153_138:                            # %for.cond502
                                        #   Parent Loop BB153_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB153_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB153_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB153_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB153_138
.LBB153_141:                            # %for.end509
                                        #   in Loop: Header=BB153_136 Depth=1
	jmp	.LBB153_142
.LBB153_142:                            # %for.inc510
                                        #   in Loop: Header=BB153_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB153_136
.LBB153_143:                            # %for.end512
	jmp	.LBB153_144
.LBB153_144:                            # %if.end513
	jmp	.LBB153_145
.LBB153_145:                            # %if.end514
	movl	-36(%rbp), %ebx
	cmpl	$604643704, -120(%rbp)  # imm = 0x240A2178
	jne	.LBB153_147
.LBB153_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_146
.Lfunc_end153:
	.size	LumaResidualCoding8x8.112, .Lfunc_end153-LumaResidualCoding8x8.112
	.cfi_endproc
                                        # -- End function
	.globl	ChromaPrediction4x4.113 # -- Begin function ChromaPrediction4x4.113
	.p2align	4, 0x90
	.type	ChromaPrediction4x4.113,@function
ChromaPrediction4x4.113:                # @ChromaPrediction4x4.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$96, %rsp
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	movl	$151627103, -72(%rbp)   # imm = 0x909A55F
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -52(%rbp)
	movl	%r9d, -56(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movabsq	$ChromaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$ChromaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB154_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB154_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB154_6
.LBB154_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB154_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB154_5:                              # %land.end
.LBB154_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	movq	-80(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB154_16
# %bb.7:                                # %land.lhs.true8
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB154_16
# %bb.8:                                # %land.lhs.true11
	movswl	24(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB154_16
# %bb.9:                                # %land.lhs.true15
	cmpl	$2, -16(%rbp)
	jne	.LBB154_16
# %bb.10:                               # %land.lhs.true18
	cmpl	$1, -52(%rbp)
	jne	.LBB154_16
# %bb.11:                               # %land.lhs.true21
	cmpl	$1, -56(%rbp)
	jne	.LBB154_16
# %bb.12:                               # %if.then
	movq	-80(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB154_14
# %bb.13:                               # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB154_15
.LBB154_14:                             # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB154_15:                             # %cond.end
	movq	%rax, -64(%rbp)
.LBB154_16:                             # %if.end
	cmpl	$-1, -16(%rbp)
	jne	.LBB154_18
# %bb.17:                               # %if.then29
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	callq	IntraChromaPrediction4x4
	jmp	.LBB154_87
.LBB154_18:                             # %if.end30
	cmpl	$0, -16(%rbp)
	je	.LBB154_20
# %bb.19:                               # %lor.lhs.false33
	cmpl	$2, -16(%rbp)
	jne	.LBB154_21
.LBB154_20:                             # %if.then36
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.fw_pred, %rdi
	movl	$0, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB154_21:                             # %if.end37
	cmpl	$1, -16(%rbp)
	je	.LBB154_23
# %bb.22:                               # %lor.lhs.false40
	cmpl	$2, -16(%rbp)
	jne	.LBB154_24
.LBB154_23:                             # %if.then43
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movq	-64(%rbp), %rcx
	movw	24(%rbp), %ax
	movl	-56(%rbp), %r10d
	movl	-12(%rbp), %r11d
	movabsq	$ChromaPrediction4x4.bw_pred, %rdi
	movl	$1, %r8d
	movswl	%ax, %r9d
	movl	%r10d, (%rsp)
	movl	%r11d, 8(%rsp)
	callq	OneComponentChromaPrediction4x4
.LBB154_24:                             # %if.end44
	cmpl	$0, -68(%rbp)
	je	.LBB154_56
# %bb.25:                               # %if.then46
	cmpl	$2, -16(%rbp)
	jne	.LBB154_35
# %bb.26:                               # %if.then49
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_27:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_29 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_34
# %bb.28:                               # %for.body
                                        #   in Loop: Header=BB154_27 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_29:                             # %for.cond52
                                        #   Parent Loop BB154_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_32
# %bb.30:                               # %for.body55
                                        #   in Loop: Header=BB154_29 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_chroma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	chroma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	addl	(%rcx,%rdx,4), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB154_29 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_29
.LBB154_32:                             # %for.end
                                        #   in Loop: Header=BB154_27 Depth=1
	jmp	.LBB154_33
.LBB154_33:                             # %for.inc99
                                        #   in Loop: Header=BB154_27 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_27
.LBB154_34:                             # %for.end101
	jmp	.LBB154_55
.LBB154_35:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB154_45
# %bb.36:                               # %if.then104
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_37:                             # %for.cond105
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_39 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_44
# %bb.38:                               # %for.body108
                                        #   in Loop: Header=BB154_37 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_39:                             # %for.cond109
                                        #   Parent Loop BB154_37 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_42
# %bb.40:                               # %for.body112
                                        #   in Loop: Header=BB154_39 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.41:                               # %for.inc137
                                        #   in Loop: Header=BB154_39 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_39
.LBB154_42:                             # %for.end139
                                        #   in Loop: Header=BB154_37 Depth=1
	jmp	.LBB154_43
.LBB154_43:                             # %for.inc140
                                        #   in Loop: Header=BB154_37 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_37
.LBB154_44:                             # %for.end142
	jmp	.LBB154_54
.LBB154_45:                             # %if.else143
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_46:                             # %for.cond144
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_48 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_53
# %bb.47:                               # %for.body147
                                        #   in Loop: Header=BB154_46 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_48:                             # %for.cond148
                                        #   Parent Loop BB154_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_51
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB154_48 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_chroma_round, %edi
	movl	chroma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	addl	(%rax,%rcx,4), %edi
	callq	clip1a_chr
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.50:                               # %for.inc176
                                        #   in Loop: Header=BB154_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_48
.LBB154_51:                             # %for.end178
                                        #   in Loop: Header=BB154_46 Depth=1
	jmp	.LBB154_52
.LBB154_52:                             # %for.inc179
                                        #   in Loop: Header=BB154_46 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_46
.LBB154_53:                             # %for.end181
	jmp	.LBB154_54
.LBB154_54:                             # %if.end182
	jmp	.LBB154_55
.LBB154_55:                             # %if.end183
	jmp	.LBB154_87
.LBB154_56:                             # %if.else184
	cmpl	$2, -16(%rbp)
	jne	.LBB154_66
# %bb.57:                               # %if.then187
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_58:                             # %for.cond188
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_60 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_65
# %bb.59:                               # %for.body191
                                        #   in Loop: Header=BB154_58 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_60:                             # %for.cond192
                                        #   Parent Loop BB154_58 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_63
# %bb.61:                               # %for.body195
                                        #   in Loop: Header=BB154_60 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.62:                               # %for.inc206
                                        #   in Loop: Header=BB154_60 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_60
.LBB154_63:                             # %for.end208
                                        #   in Loop: Header=BB154_58 Depth=1
	jmp	.LBB154_64
.LBB154_64:                             # %for.inc209
                                        #   in Loop: Header=BB154_58 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_58
.LBB154_65:                             # %for.end211
	jmp	.LBB154_86
.LBB154_66:                             # %if.else212
	cmpl	$0, -16(%rbp)
	jne	.LBB154_76
# %bb.67:                               # %if.then215
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_68:                             # %for.cond216
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_70 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_75
# %bb.69:                               # %for.body219
                                        #   in Loop: Header=BB154_68 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_70:                             # %for.cond220
                                        #   Parent Loop BB154_68 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_73
# %bb.71:                               # %for.body223
                                        #   in Loop: Header=BB154_70 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.72:                               # %for.inc231
                                        #   in Loop: Header=BB154_70 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_70
.LBB154_73:                             # %for.end233
                                        #   in Loop: Header=BB154_68 Depth=1
	jmp	.LBB154_74
.LBB154_74:                             # %for.inc234
                                        #   in Loop: Header=BB154_68 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_68
.LBB154_75:                             # %for.end236
	jmp	.LBB154_85
.LBB154_76:                             # %if.else237
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB154_77:                             # %for.cond238
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB154_79 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB154_84
# %bb.78:                               # %for.body241
                                        #   in Loop: Header=BB154_77 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB154_79:                             # %for.cond242
                                        #   Parent Loop BB154_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB154_82
# %bb.80:                               # %for.body245
                                        #   in Loop: Header=BB154_79 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.81:                               # %for.inc253
                                        #   in Loop: Header=BB154_79 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_79
.LBB154_82:                             # %for.end255
                                        #   in Loop: Header=BB154_77 Depth=1
	jmp	.LBB154_83
.LBB154_83:                             # %for.inc256
                                        #   in Loop: Header=BB154_77 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB154_77
.LBB154_84:                             # %for.end258
	jmp	.LBB154_85
.LBB154_85:                             # %if.end259
	jmp	.LBB154_86
.LBB154_86:                             # %if.end260
	jmp	.LBB154_87
.LBB154_87:                             # %if.end261
	cmpl	$151627103, -72(%rbp)   # imm = 0x909A55F
	jne	.LBB154_89
.LBB154_88:
	addq	$96, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_89:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_88
.Lfunc_end154:
	.size	ChromaPrediction4x4.113, .Lfunc_end154-ChromaPrediction4x4.113
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.114        # -- Begin function B8Mode2Value.114
	.p2align	4, 0x90
	.type	B8Mode2Value.114,@function
B8Mode2Value.114:                       # @B8Mode2Value.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1582822329, -24(%rbp)  # imm = 0x5E57F3B9
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB155_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB155_3
.LBB155_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB155_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1582822329, -24(%rbp)  # imm = 0x5E57F3B9
	jne	.LBB155_5
.LBB155_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_4
.Lfunc_end155:
	.size	B8Mode2Value.114, .Lfunc_end155-B8Mode2Value.114
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.115         # -- Begin function predict_nnz.115
	.p2align	4, 0x90
	.type	predict_nnz.115,@function
predict_nnz.115:                        # @predict_nnz.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2027901245, -56(%rbp)  # imm = 0x78DF513D
	movl	%edi, -44(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB156_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB156_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB156_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB156_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB156_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB156_6:                              # %if.end14
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB156_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB156_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB156_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB156_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB156_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB156_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB156_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB156_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$2027901245, -56(%rbp)  # imm = 0x78DF513D
	jne	.LBB156_16
.LBB156_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_15
.Lfunc_end156:
	.size	predict_nnz.115, .Lfunc_end156-predict_nnz.115
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.116 # -- Begin function OneComponentLumaPrediction4x4.116
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.116,@function
OneComponentLumaPrediction4x4.116:      # @OneComponentLumaPrediction4x4.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$789781063, -88(%rbp)   # imm = 0x2F131A47
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -92(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-56(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$789781063, -88(%rbp)   # imm = 0x2F131A47
	jne	.LBB157_2
.LBB157_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_1
.Lfunc_end157:
	.size	OneComponentLumaPrediction4x4.116, .Lfunc_end157-OneComponentLumaPrediction4x4.116
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.117       # -- Begin function slice_too_big.117
	.p2align	4, 0x90
	.type	slice_too_big.117,@function
slice_too_big.117:                      # @slice_too_big.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$416314405, -56(%rbp)   # imm = 0x18D07425
	movl	%edi, -52(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB158_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB158_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB158_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB158_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-40(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB158_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB158_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB158_5:                              # %if.end
                                        #   in Loop: Header=BB158_2 Depth=1
	movq	-40(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB158_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB158_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB158_7:                              # %if.end8
                                        #   in Loop: Header=BB158_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB158_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB158_21
.LBB158_9:                              # %if.end11
                                        #   in Loop: Header=BB158_2 Depth=1
	jmp	.LBB158_10
.LBB158_10:                             # %for.inc
                                        #   in Loop: Header=BB158_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB158_2
.LBB158_11:                             # %for.end
	jmp	.LBB158_12
.LBB158_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB158_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB158_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB158_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB158_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB158_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB158_21
.LBB158_17:                             # %if.end27
                                        #   in Loop: Header=BB158_14 Depth=1
	jmp	.LBB158_18
.LBB158_18:                             # %for.inc28
                                        #   in Loop: Header=BB158_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB158_14
.LBB158_19:                             # %for.end30
	jmp	.LBB158_20
.LBB158_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB158_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$416314405, -56(%rbp)   # imm = 0x18D07425
	jne	.LBB158_23
.LBB158_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_22
.Lfunc_end158:
	.size	slice_too_big.117, .Lfunc_end158-slice_too_big.117
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.118 # -- Begin function writeReferenceFrame.118
	.p2align	4, 0x90
	.type	writeReferenceFrame.118,@function
writeReferenceFrame.118:                # @writeReferenceFrame.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1355427209, -72(%rbp)  # imm = 0x50CA2D89
	movl	%edi, -84(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -48(%rbp)
	movl	%r8d, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB159_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB159_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB159_4
.LBB159_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB159_4
.LBB159_4:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -48(%rbp)
	je	.LBB159_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB159_7
.LBB159_6:                              # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB159_7:                              # %cond.end17
	movl	%eax, -44(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$1, -44(%rbp)
	jne	.LBB159_9
# %bb.8:                                # %if.then
	movl	$0, -36(%rbp)
	jmp	.LBB159_18
.LBB159_9:                              # %if.end
	cmpl	$2, -44(%rbp)
	jne	.LBB159_11
# %bb.10:                               # %if.then20
	movl	$1, -40(%rbp)
.LBB159_11:                             # %if.end21
	movl	-76(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB159_16
# %bb.12:                               # %if.then28
	cmpl	$0, -40(%rbp)
	je	.LBB159_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB159_15
.LBB159_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB159_15:                             # %if.end33
	jmp	.LBB159_17
.LBB159_16:                             # %if.else34
	movl	-84(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB159_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB159_18:                             # %return
	movl	-36(%rbp), %ebx
	cmpl	$1355427209, -72(%rbp)  # imm = 0x50CA2D89
	jne	.LBB159_20
.LBB159_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_19
.Lfunc_end159:
	.size	writeReferenceFrame.118, .Lfunc_end159-writeReferenceFrame.118
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.119 # -- Begin function writeLumaCoeff8x8_CABAC.119
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.119,@function
writeLumaCoeff8x8_CABAC.119:            # @writeLumaCoeff8x8_CABAC.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$595890291, -60(%rbp)   # imm = 0x23849073
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB160_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB160_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB160_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB160_3:                              # %land.end
                                        #   in Loop: Header=BB160_1 Depth=1
	testb	$1, %al
	jne	.LBB160_4
	jmp	.LBB160_12
.LBB160_4:                              # %for.body
                                        #   in Loop: Header=BB160_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB160_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB160_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB160_7
.LBB160_6:                              # %cond.false
                                        #   in Loop: Header=BB160_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB160_7:                              # %cond.end
                                        #   in Loop: Header=BB160_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB160_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB160_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB160_10
.LBB160_9:                              # %if.else
                                        #   in Loop: Header=BB160_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB160_10:                             # %if.end
                                        #   in Loop: Header=BB160_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB160_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB160_1
.LBB160_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$595890291, -60(%rbp)   # imm = 0x23849073
	jne	.LBB160_14
.LBB160_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_13
.Lfunc_end160:
	.size	writeLumaCoeff8x8_CABAC.119, .Lfunc_end160-writeLumaCoeff8x8_CABAC.119
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.120 # -- Begin function write_terminating_bit.120
	.p2align	4, 0x90
	.type	write_terminating_bit.120,@function
write_terminating_bit.120:              # @write_terminating_bit.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$517696716, -8(%rbp)    # imm = 0x1EDB6CCC
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$517696716, -8(%rbp)    # imm = 0x1EDB6CCC
	jne	.LBB161_2
.LBB161_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_1
.Lfunc_end161:
	.size	write_terminating_bit.120, .Lfunc_end161-write_terminating_bit.120
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.121 # -- Begin function IntraChromaPrediction4x4.121
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.121,@function
IntraChromaPrediction4x4.121:           # @IntraChromaPrediction4x4.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$432263379, -24(%rbp)   # imm = 0x19C3D0D3
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -28(%rbp)
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB162_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB162_3 Depth 2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB162_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB162_1 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB162_3:                              # %for.cond1
                                        #   Parent Loop BB162_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB162_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB162_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-20(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-28(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB162_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB162_3
.LBB162_6:                              # %for.end
                                        #   in Loop: Header=BB162_1 Depth=1
	jmp	.LBB162_7
.LBB162_7:                              # %for.inc17
                                        #   in Loop: Header=BB162_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB162_1
.LBB162_8:                              # %for.end19
	cmpl	$432263379, -24(%rbp)   # imm = 0x19C3D0D3
	jne	.LBB162_10
.LBB162_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_9
.Lfunc_end162:
	.size	IntraChromaPrediction4x4.121, .Lfunc_end162-IntraChromaPrediction4x4.121
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.122 # -- Begin function writeLumaCoeff4x4_CABAC.122
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.122,@function
writeLumaCoeff4x4_CABAC.122:            # @writeLumaCoeff4x4_CABAC.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1839853406, -52(%rbp)  # imm = 0x6DA9EF5E
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB163_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB163_3
.LBB163_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB163_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB163_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB163_6
.LBB163_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB163_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB163_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB163_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB163_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB163_9:                              # %land.end
                                        #   in Loop: Header=BB163_7 Depth=1
	testb	$1, %al
	jne	.LBB163_10
	jmp	.LBB163_15
.LBB163_10:                             # %for.body
                                        #   in Loop: Header=BB163_7 Depth=1
	movq	-72(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB163_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB163_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB163_13
.LBB163_12:                             # %cond.false40
                                        #   in Loop: Header=BB163_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB163_13:                             # %cond.end43
                                        #   in Loop: Header=BB163_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-88(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB163_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB163_7
.LBB163_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1839853406, -52(%rbp)  # imm = 0x6DA9EF5E
	jne	.LBB163_17
.LBB163_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_16
.Lfunc_end163:
	.size	writeLumaCoeff4x4_CABAC.122, .Lfunc_end163-writeLumaCoeff4x4_CABAC.122
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.123    # -- Begin function writeChromaCoeff.123
	.p2align	4, 0x90
	.type	writeChromaCoeff.123,@function
writeChromaCoeff.123:                   # @writeChromaCoeff.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1448319254, -80(%rbp)  # imm = 0x56539916
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB164_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB164_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB164_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB164_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB164_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB164_21
.LBB164_5:                              # %if.else
                                        #   in Loop: Header=BB164_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB164_6:                              # %for.cond18
                                        #   Parent Loop BB164_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB164_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB164_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB164_8:                              # %land.end
                                        #   in Loop: Header=BB164_6 Depth=2
	testb	$1, %al
	jne	.LBB164_9
	jmp	.LBB164_20
.LBB164_9:                              # %for.body21
                                        #   in Loop: Header=BB164_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB164_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_12
.LBB164_11:                             # %if.else29
                                        #   in Loop: Header=BB164_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_12:                             # %if.end
                                        #   in Loop: Header=BB164_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB164_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB164_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB164_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB164_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB164_15:                             # %lor.end
                                        #   in Loop: Header=BB164_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB164_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB164_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB164_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB164_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB164_18:                             # %lor.end45
                                        #   in Loop: Header=BB164_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB164_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB164_6
.LBB164_20:                             # %for.end
                                        #   in Loop: Header=BB164_2 Depth=1
	jmp	.LBB164_21
.LBB164_21:                             # %if.end58
                                        #   in Loop: Header=BB164_2 Depth=1
	jmp	.LBB164_22
.LBB164_22:                             # %for.inc59
                                        #   in Loop: Header=BB164_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB164_2
.LBB164_23:                             # %for.end61
	jmp	.LBB164_24
.LBB164_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB164_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB164_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_28 Depth 2
                                        #       Child Loop BB164_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB164_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB164_26 Depth=1
	movl	$0, -36(%rbp)
.LBB164_28:                             # %for.cond69
                                        #   Parent Loop BB164_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB164_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB164_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB164_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB164_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB164_47
.LBB164_31:                             # %if.else84
                                        #   in Loop: Header=BB164_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB164_32:                             # %for.cond115
                                        #   Parent Loop BB164_26 Depth=1
                                        #     Parent Loop BB164_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB164_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB164_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB164_34:                             # %land.end121
                                        #   in Loop: Header=BB164_32 Depth=3
	testb	$1, %al
	jne	.LBB164_35
	jmp	.LBB164_46
.LBB164_35:                             # %for.body122
                                        #   in Loop: Header=BB164_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB164_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB164_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB164_38
.LBB164_37:                             # %if.else134
                                        #   in Loop: Header=BB164_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB164_38:                             # %if.end136
                                        #   in Loop: Header=BB164_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB164_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB164_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB164_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB164_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB164_41:                             # %lor.end149
                                        #   in Loop: Header=BB164_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB164_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB164_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB164_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB164_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB164_44:                             # %lor.end164
                                        #   in Loop: Header=BB164_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB164_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB164_32
.LBB164_46:                             # %for.end189
                                        #   in Loop: Header=BB164_28 Depth=2
	jmp	.LBB164_47
.LBB164_47:                             # %if.end190
                                        #   in Loop: Header=BB164_28 Depth=2
	jmp	.LBB164_48
.LBB164_48:                             # %for.inc191
                                        #   in Loop: Header=BB164_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB164_28
.LBB164_49:                             # %for.end193
                                        #   in Loop: Header=BB164_26 Depth=1
	jmp	.LBB164_50
.LBB164_50:                             # %for.inc194
                                        #   in Loop: Header=BB164_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB164_26
.LBB164_51:                             # %for.end196
	jmp	.LBB164_52
.LBB164_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$1448319254, -80(%rbp)  # imm = 0x56539916
	jne	.LBB164_54
.LBB164_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_53
.Lfunc_end164:
	.size	writeChromaCoeff.123, .Lfunc_end164-writeChromaCoeff.123
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.124             # -- Begin function ZeroRef.124
	.p2align	4, 0x90
	.type	ZeroRef.124,@function
ZeroRef.124:                            # @ZeroRef.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1253462172, -24(%rbp)  # imm = 0x4AB6509C
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB165_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB165_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB165_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB165_1 Depth=1
	movl	$0, -12(%rbp)
.LBB165_3:                              # %for.cond1
                                        #   Parent Loop BB165_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB165_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB165_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB165_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB165_11
.LBB165_6:                              # %if.end
                                        #   in Loop: Header=BB165_3 Depth=2
	jmp	.LBB165_7
.LBB165_7:                              # %for.inc
                                        #   in Loop: Header=BB165_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB165_3
.LBB165_8:                              # %for.end
                                        #   in Loop: Header=BB165_1 Depth=1
	jmp	.LBB165_9
.LBB165_9:                              # %for.inc10
                                        #   in Loop: Header=BB165_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB165_1
.LBB165_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB165_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1253462172, -24(%rbp)  # imm = 0x4AB6509C
	jne	.LBB165_13
.LBB165_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_12
.Lfunc_end165:
	.size	ZeroRef.124, .Lfunc_end165-ZeroRef.124
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.125        # -- Begin function MBType2Value.125
	.p2align	4, 0x90
	.type	MBType2Value.125,@function
MBType2Value.125:                       # @MBType2Value.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$33133072, -36(%rbp)    # imm = 0x1F99210
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB166_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB166_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB166_4
.LBB166_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB166_26
.LBB166_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB166_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB166_26
.LBB166_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB166_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB166_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB166_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB166_26
.LBB166_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB166_26
.LBB166_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_26
.LBB166_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB166_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB166_26
.LBB166_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB166_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB166_17
.LBB166_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB166_26
.LBB166_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB166_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_26
.LBB166_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB166_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB166_26
.LBB166_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB166_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_26
.LBB166_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB166_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB166_26
.LBB166_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB166_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$33133072, -36(%rbp)    # imm = 0x1F99210
	jne	.LBB166_28
.LBB166_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_27
.Lfunc_end166:
	.size	MBType2Value.125, .Lfunc_end166-MBType2Value.125
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.126 # -- Begin function writeMotionInfo2NAL.126
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.126,@function
writeMotionInfo2NAL.126:                # @writeMotionInfo2NAL.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1463295521, -56(%rbp)  # imm = 0x57381E21
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB167_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB167_3
.LBB167_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB167_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB167_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB167_6
.LBB167_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB167_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB167_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB167_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB167_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB167_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB167_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB167_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB167_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB167_39
.LBB167_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB167_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB167_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB167_15 Depth=1
	movl	$0, -16(%rbp)
.LBB167_17:                             # %for.cond45
                                        #   Parent Loop BB167_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB167_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB167_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB167_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB167_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB167_22
.LBB167_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB167_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB167_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB167_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB167_22:                             # %if.end
                                        #   in Loop: Header=BB167_17 Depth=2
	jmp	.LBB167_23
.LBB167_23:                             # %for.inc
                                        #   in Loop: Header=BB167_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB167_17
.LBB167_24:                             # %for.end
                                        #   in Loop: Header=BB167_15 Depth=1
	jmp	.LBB167_25
.LBB167_25:                             # %for.inc79
                                        #   in Loop: Header=BB167_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB167_15
.LBB167_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB167_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB167_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB167_27 Depth=1
	movl	$0, -16(%rbp)
.LBB167_29:                             # %for.cond86
                                        #   Parent Loop BB167_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB167_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB167_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB167_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB167_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB167_34
.LBB167_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB167_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB167_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB167_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB167_34:                             # %if.end126
                                        #   in Loop: Header=BB167_29 Depth=2
	jmp	.LBB167_35
.LBB167_35:                             # %for.inc127
                                        #   in Loop: Header=BB167_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB167_29
.LBB167_36:                             # %for.end129
                                        #   in Loop: Header=BB167_27 Depth=1
	jmp	.LBB167_37
.LBB167_37:                             # %for.inc130
                                        #   in Loop: Header=BB167_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB167_27
.LBB167_38:                             # %for.end132
	jmp	.LBB167_39
.LBB167_39:                             # %if.end133
	jmp	.LBB167_40
.LBB167_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB167_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB167_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB167_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB167_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB167_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB167_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB167_45 Depth=1
	movl	$0, -16(%rbp)
.LBB167_47:                             # %for.cond155
                                        #   Parent Loop BB167_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB167_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB167_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB167_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB167_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB167_52
.LBB167_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB167_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB167_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB167_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB167_52:                             # %if.end197
                                        #   in Loop: Header=BB167_47 Depth=2
	jmp	.LBB167_53
.LBB167_53:                             # %for.inc198
                                        #   in Loop: Header=BB167_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB167_47
.LBB167_54:                             # %for.end200
                                        #   in Loop: Header=BB167_45 Depth=1
	jmp	.LBB167_55
.LBB167_55:                             # %for.inc201
                                        #   in Loop: Header=BB167_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB167_45
.LBB167_56:                             # %for.end203
	jmp	.LBB167_57
.LBB167_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB167_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB167_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB167_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB167_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB167_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB167_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB167_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB167_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB167_63 Depth=1
	movl	$0, -16(%rbp)
.LBB167_65:                             # %for.cond227
                                        #   Parent Loop BB167_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB167_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB167_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB167_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB167_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB167_70
.LBB167_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB167_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB167_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB167_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB167_70:                             # %if.end269
                                        #   in Loop: Header=BB167_65 Depth=2
	jmp	.LBB167_71
.LBB167_71:                             # %for.inc270
                                        #   in Loop: Header=BB167_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB167_65
.LBB167_72:                             # %for.end272
                                        #   in Loop: Header=BB167_63 Depth=1
	jmp	.LBB167_73
.LBB167_73:                             # %for.inc273
                                        #   in Loop: Header=BB167_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB167_63
.LBB167_74:                             # %for.end275
	jmp	.LBB167_75
.LBB167_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1463295521, -56(%rbp)  # imm = 0x57381E21
	jne	.LBB167_77
.LBB167_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_76
.Lfunc_end167:
	.size	writeMotionInfo2NAL.126, .Lfunc_end167-writeMotionInfo2NAL.126
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.127 # -- Begin function writeMotionVector8x8.127
	.p2align	4, 0x90
	.type	writeMotionVector8x8.127,@function
writeMotionVector8x8.127:               # @writeMotionVector8x8.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1138856491, -84(%rbp)  # imm = 0x43E1922B
	movl	%edi, -80(%rbp)
	movl	%esi, -100(%rbp)
	movl	%edx, -88(%rbp)
	movl	%ecx, -96(%rbp)
	movl	%r8d, -92(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB168_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB168_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB168_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB168_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB168_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB168_7
.LBB168_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB168_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB168_8:                              # %if.end
	movl	-100(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB168_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB168_11 Depth 2
                                        #       Child Loop BB168_13 Depth 3
                                        #         Child Loop BB168_15 Depth 4
                                        #           Child Loop BB168_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB168_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB168_9 Depth=1
	movl	-80(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB168_11:                             # %for.cond22
                                        #   Parent Loop BB168_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB168_13 Depth 3
                                        #         Child Loop BB168_15 Depth 4
                                        #           Child Loop BB168_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-88(%rbp), %eax
	jge	.LBB168_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB168_11 Depth=2
	movl	$0, -20(%rbp)
.LBB168_13:                             # %for.cond25
                                        #   Parent Loop BB168_9 Depth=1
                                        #     Parent Loop BB168_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB168_15 Depth 4
                                        #           Child Loop BB168_17 Depth 5
	cmpl	$2, -20(%rbp)
	jge	.LBB168_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB168_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -40(%rbp)
.LBB168_15:                             # %for.cond53
                                        #   Parent Loop BB168_9 Depth=1
                                        #     Parent Loop BB168_11 Depth=2
                                        #       Parent Loop BB168_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB168_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB168_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB168_15 Depth=4
	movl	$0, -44(%rbp)
.LBB168_17:                             # %for.cond57
                                        #   Parent Loop BB168_9 Depth=1
                                        #     Parent Loop BB168_11 Depth=2
                                        #       Parent Loop BB168_13 Depth=3
                                        #         Parent Loop BB168_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB168_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB168_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB168_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB168_17
.LBB168_20:                             # %for.end
                                        #   in Loop: Header=BB168_15 Depth=4
	jmp	.LBB168_21
.LBB168_21:                             # %for.inc70
                                        #   in Loop: Header=BB168_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB168_15
.LBB168_22:                             # %for.end72
                                        #   in Loop: Header=BB168_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB168_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB168_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB168_25
.LBB168_24:                             # %if.else
                                        #   in Loop: Header=BB168_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB168_25:                             # %if.end78
                                        #   in Loop: Header=BB168_13 Depth=3
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB168_13 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB168_13
.LBB168_27:                             # %for.end90
                                        #   in Loop: Header=BB168_11 Depth=2
	jmp	.LBB168_28
.LBB168_28:                             # %for.inc91
                                        #   in Loop: Header=BB168_11 Depth=2
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB168_11
.LBB168_29:                             # %for.end93
                                        #   in Loop: Header=BB168_9 Depth=1
	jmp	.LBB168_30
.LBB168_30:                             # %for.inc94
                                        #   in Loop: Header=BB168_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB168_9
.LBB168_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$1138856491, -84(%rbp)  # imm = 0x43E1922B
	jne	.LBB168_33
.LBB168_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_32
.Lfunc_end168:
	.size	writeMotionVector8x8.127, .Lfunc_end168-writeMotionVector8x8.127
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.128        # -- Begin function B8Mode2Value.128
	.p2align	4, 0x90
	.type	B8Mode2Value.128,@function
B8Mode2Value.128:                       # @B8Mode2Value.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1296553105, -24(%rbp)  # imm = 0x4D47D491
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB169_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB169_3
.LBB169_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB169_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1296553105, -24(%rbp)  # imm = 0x4D47D491
	jne	.LBB169_5
.LBB169_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_4
.Lfunc_end169:
	.size	B8Mode2Value.128, .Lfunc_end169-B8Mode2Value.128
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.129        # -- Begin function writeMBLayer.129
	.p2align	4, 0x90
	.type	writeMBLayer.129,@function
writeMBLayer.129:                       # @writeMBLayer.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$266697773, -92(%rbp)   # imm = 0xFE57C2D
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB170_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB170_3
.LBB170_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB170_3
.LBB170_3:                              # %cond.end
	movq	%rax, -128(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB170_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB170_9
.LBB170_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB170_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB170_8
.LBB170_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB170_8
.LBB170_8:                              # %cond.end14
.LBB170_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB170_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB170_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB170_24
.LBB170_12:                             # %if.else
	movq	-128(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB170_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB170_17
	jmp	.LBB170_18
.LBB170_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB170_16
# %bb.15:                               # %cond.true28
	movq	-128(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB170_18
	jmp	.LBB170_17
.LBB170_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB170_17
	jmp	.LBB170_18
.LBB170_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB170_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB170_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB170_23
.LBB170_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB170_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB170_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB170_23:                             # %if.end50
	jmp	.LBB170_24
.LBB170_24:                             # %if.end51
	jmp	.LBB170_25
.LBB170_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB170_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB170_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB170_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB170_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB170_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB170_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB170_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB170_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB170_35
.LBB170_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB170_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB170_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB170_38
.LBB170_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB170_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB170_39:                             # %if.end96
	jmp	.LBB170_40
.LBB170_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB170_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB170_43
.LBB170_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB170_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB170_89
.LBB170_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB170_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB170_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB170_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB170_49
.LBB170_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB170_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB170_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB170_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB170_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB170_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB170_55
.LBB170_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB170_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB170_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB170_58
.LBB170_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB170_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB170_59:                             # %if.end198
	jmp	.LBB170_60
.LBB170_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB170_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB170_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB170_64
.LBB170_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB170_64:                             # %if.end226
	jmp	.LBB170_88
.LBB170_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB170_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB170_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB170_76
.LBB170_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB170_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB170_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB170_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB170_72:                             # %if.end281
	jmp	.LBB170_73
.LBB170_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB170_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB170_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB170_87
.LBB170_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -64(%rbp)
.LBB170_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_79 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB170_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB170_77 Depth=1
	movl	$0, -44(%rbp)
.LBB170_79:                             # %for.cond310
                                        #   Parent Loop BB170_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB170_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB170_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB170_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB170_79
.LBB170_82:                             # %for.end
                                        #   in Loop: Header=BB170_77 Depth=1
	jmp	.LBB170_83
.LBB170_83:                             # %for.inc322
                                        #   in Loop: Header=BB170_77 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB170_77
.LBB170_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB170_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB170_86:                             # %if.end345
	jmp	.LBB170_87
.LBB170_87:                             # %if.end346
	jmp	.LBB170_88
.LBB170_88:                             # %if.end347
	jmp	.LBB170_89
.LBB170_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB170_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB170_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB170_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB170_104
# %bb.93:                               # %if.then366
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB170_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB170_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB170_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB170_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB170_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB170_98
.LBB170_97:                             # %if.else380
                                        #   in Loop: Header=BB170_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB170_98:                             # %if.end382
                                        #   in Loop: Header=BB170_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB170_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB170_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB170_101
.LBB170_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB170_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB170_101:                            # %lor.end415
                                        #   in Loop: Header=BB170_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB170_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB170_94
.LBB170_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB170_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB170_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB170_114
.LBB170_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB170_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB170_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB170_110
.LBB170_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB170_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB170_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB170_113
.LBB170_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB170_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB170_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB170_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB170_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB170_120
.LBB170_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB170_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB170_119:                            # %if.end483
	jmp	.LBB170_120
.LBB170_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB170_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB170_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB170_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB170_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB170_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB170_129
.LBB170_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB170_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB170_128:                            # %if.end516
	jmp	.LBB170_129
.LBB170_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$266697773, -92(%rbp)   # imm = 0xFE57C2D
	jne	.LBB170_131
.LBB170_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_130
.Lfunc_end170:
	.size	writeMBLayer.129, .Lfunc_end170-writeMBLayer.129
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.130        # -- Begin function B8Mode2Value.130
	.p2align	4, 0x90
	.type	B8Mode2Value.130,@function
B8Mode2Value.130:                       # @B8Mode2Value.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1195393989, -20(%rbp)  # imm = 0x474043C5
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB171_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB171_3
.LBB171_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB171_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1195393989, -20(%rbp)  # imm = 0x474043C5
	jne	.LBB171_5
.LBB171_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_4
.Lfunc_end171:
	.size	B8Mode2Value.130, .Lfunc_end171-B8Mode2Value.130
	.cfi_endproc
                                        # -- End function
	.globl	write_one_macroblock.131 # -- Begin function write_one_macroblock.131
	.p2align	4, 0x90
	.type	write_one_macroblock.131,@function
write_one_macroblock.131:               # @write_one_macroblock.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1049196214, -32(%rbp)  # imm = 0x3E8976B6
	movl	%edi, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB172_2
# %bb.1:                                # %if.then
	movl	$0, intras
.LBB172_2:                              # %if.end
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB172_5
# %bb.3:                                # %lor.lhs.false
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB172_5
# %bb.4:                                # %lor.lhs.false5
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB172_6
.LBB172_5:                              # %if.then8
	movl	intras, %eax
	addl	$1, %eax
	movl	%eax, intras
.LBB172_6:                              # %if.end9
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB172_10
# %bb.7:                                # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	cmpl	12(%rcx), %eax
	je	.LBB172_10
# %bb.8:                                # %land.lhs.true13
	cmpl	$0, -28(%rbp)
	je	.LBB172_10
# %bb.9:                                # %if.then14
	xorl	%edi, %edi
	callq	write_terminating_bit
.LBB172_10:                             # %if.end15
	movl	$1, cabac_encoding
	xorl	%edi, %edi
	callq	writeMBLayer
	movq	-16(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB172_22
# %bb.11:                               # %lor.lhs.false18
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB172_13
# %bb.12:                               # %land.lhs.true20
	movq	-16(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB172_22
.LBB172_13:                             # %if.then22
	movl	$0, -20(%rbp)
.LBB172_14:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB172_16 Depth 2
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB172_21
# %bb.15:                               # %for.body
                                        #   in Loop: Header=BB172_14 Depth=1
	movl	$0, -24(%rbp)
.LBB172_16:                             # %for.cond24
                                        #   Parent Loop BB172_14 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -24(%rbp)
	jge	.LBB172_19
# %bb.17:                               # %for.body26
                                        #   in Loop: Header=BB172_16 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.18:                               # %for.inc
                                        #   in Loop: Header=BB172_16 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB172_16
.LBB172_19:                             # %for.end
                                        #   in Loop: Header=BB172_14 Depth=1
	jmp	.LBB172_20
.LBB172_20:                             # %for.inc35
                                        #   in Loop: Header=BB172_14 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB172_14
.LBB172_21:                             # %for.end37
	jmp	.LBB172_22
.LBB172_22:                             # %if.end38
	callq	set_last_dquant
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB172_30
# %bb.23:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB172_25
# %bb.24:                               # %lor.lhs.false43
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB172_30
.LBB172_25:                             # %if.then46
	movq	-16(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB172_29
# %bb.26:                               # %lor.lhs.false49
	movq	-16(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB172_29
# %bb.27:                               # %lor.lhs.false52
	movq	-16(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB172_29
# %bb.28:                               # %if.then55
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$0, (%rax,%rcx,4)
.LBB172_29:                             # %if.end59
	jmp	.LBB172_30
.LBB172_30:                             # %if.end60
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	20(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	16(%rcx), %eax
	movq	-8(%rbp), %rcx
	addl	28(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72556(%rcx)
	movq	-8(%rbp), %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	addl	24(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 72552(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72528(%rcx), %eax
	movl	%eax, 72528(%rcx)
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72524(%rcx), %eax
	movl	%eax, 72524(%rcx)
	movq	img, %rax
	movl	72620(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB172_32
# %bb.31:                               # %if.then88
	movq	img, %rax
	movl	72556(%rax), %eax
	movq	img, %rcx
	addl	72532(%rcx), %eax
	movl	%eax, 72532(%rcx)
	movq	img, %rax
	movl	72552(%rax), %eax
	movq	img, %rcx
	addl	72536(%rcx), %eax
	movl	%eax, 72536(%rcx)
.LBB172_32:                             # %if.end93
	movq	img, %rax
	movl	72616(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 72616(%rax)
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	stats, %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movl	$0, cabac_encoding
	cmpl	$1049196214, -32(%rbp)  # imm = 0x3E8976B6
	jne	.LBB172_34
.LBB172_33:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_34:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_33
.Lfunc_end172:
	.size	write_one_macroblock.131, .Lfunc_end172-write_one_macroblock.131
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.132 # -- Begin function writeChromaIntraPredMode.132
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.132,@function
writeChromaIntraPredMode.132:           # @writeChromaIntraPredMode.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1747194913, -36(%rbp)  # imm = 0x68241421
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB173_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB173_3
.LBB173_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB173_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1747194913, -36(%rbp)  # imm = 0x68241421
	jne	.LBB173_5
.LBB173_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_4
.Lfunc_end173:
	.size	writeChromaIntraPredMode.132, .Lfunc_end173-writeChromaIntraPredMode.132
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.133 # -- Begin function LumaResidualCoding8x8.133
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.133,@function
LumaResidualCoding8x8.133:              # @LumaResidualCoding8x8.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1706427755, -128(%rbp) # imm = 0x65B6056B
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -68(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -120(%rbp)
	cmpl	$0, -68(%rbp)
	jne	.LBB174_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -60(%rbp)
	jne	.LBB174_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB174_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB174_5
# %bb.4:                                # %if.then
	movl	$1, -120(%rbp)
.LBB174_5:                              # %if.end
	movl	$0, -64(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB174_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_8 Depth 2
                                        #       Child Loop BB174_11 Depth 3
                                        #         Child Loop BB174_13 Depth 4
                                        #       Child Loop BB174_19 Depth 3
                                        #         Child Loop BB174_21 Depth 4
                                        #       Child Loop BB174_29 Depth 3
                                        #         Child Loop BB174_31 Depth 4
                                        #       Child Loop BB174_40 Depth 3
                                        #         Child Loop BB174_42 Depth 4
                                        #       Child Loop BB174_57 Depth 3
                                        #         Child Loop BB174_59 Depth 4
                                        #       Child Loop BB174_67 Depth 3
                                        #         Child Loop BB174_69 Depth 4
                                        #       Child Loop BB174_84 Depth 3
                                        #         Child Loop BB174_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB174_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	$0, -84(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB174_8:                              # %for.cond9
                                        #   Parent Loop BB174_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB174_11 Depth 3
                                        #         Child Loop BB174_13 Depth 4
                                        #       Child Loop BB174_19 Depth 3
                                        #         Child Loop BB174_21 Depth 4
                                        #       Child Loop BB174_29 Depth 3
                                        #         Child Loop BB174_31 Depth 4
                                        #       Child Loop BB174_40 Depth 3
                                        #         Child Loop BB174_42 Depth 4
                                        #       Child Loop BB174_57 Depth 3
                                        #         Child Loop BB174_59 Depth 4
                                        #       Child Loop BB174_67 Depth 3
                                        #         Child Loop BB174_69 Depth 4
                                        #       Child Loop BB174_84 Depth 3
                                        #         Child Loop BB174_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB174_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB174_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB174_11:                             # %for.cond16
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB174_13 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB174_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB174_11 Depth=3
	movl	$0, -12(%rbp)
.LBB174_13:                             # %for.cond20
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        #       Parent Loop BB174_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB174_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB174_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB174_13 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_13
.LBB174_16:                             # %for.end
                                        #   in Loop: Header=BB174_11 Depth=3
	jmp	.LBB174_17
.LBB174_17:                             # %for.inc37
                                        #   in Loop: Header=BB174_11 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_11
.LBB174_18:                             # %for.end39
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -16(%rbp)
.LBB174_19:                             # %for.cond41
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB174_21 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB174_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB174_19 Depth=3
	movl	$0, -12(%rbp)
.LBB174_21:                             # %for.cond45
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        #       Parent Loop BB174_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB174_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB174_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB174_21 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_21
.LBB174_24:                             # %for.end65
                                        #   in Loop: Header=BB174_19 Depth=3
	jmp	.LBB174_25
.LBB174_25:                             # %for.inc66
                                        #   in Loop: Header=BB174_19 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_19
.LBB174_26:                             # %for.end68
                                        #   in Loop: Header=BB174_8 Depth=2
	jmp	.LBB174_27
.LBB174_27:                             # %if.end69
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-68(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB174_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	$0, -16(%rbp)
.LBB174_29:                             # %for.cond74
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB174_31 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB174_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB174_29 Depth=3
	movl	$0, -12(%rbp)
.LBB174_31:                             # %for.cond78
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        #       Parent Loop BB174_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB174_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB174_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB174_31 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_31
.LBB174_34:                             # %for.end98
                                        #   in Loop: Header=BB174_29 Depth=3
	jmp	.LBB174_35
.LBB174_35:                             # %for.inc99
                                        #   in Loop: Header=BB174_29 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_29
.LBB174_36:                             # %for.end101
                                        #   in Loop: Header=BB174_8 Depth=2
	jmp	.LBB174_37
.LBB174_37:                             # %if.end102
                                        #   in Loop: Header=BB174_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB174_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB174_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB174_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	$0, -16(%rbp)
.LBB174_40:                             # %for.cond108
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB174_42 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB174_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB174_40 Depth=3
	movl	$0, -12(%rbp)
.LBB174_42:                             # %for.cond112
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        #       Parent Loop BB174_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB174_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB174_42 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB174_42 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_42
.LBB174_45:                             # %for.end137
                                        #   in Loop: Header=BB174_40 Depth=3
	jmp	.LBB174_46
.LBB174_46:                             # %for.inc138
                                        #   in Loop: Header=BB174_40 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_40
.LBB174_47:                             # %for.end140
                                        #   in Loop: Header=BB174_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB174_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB174_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB174_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB174_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB174_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB174_52
.LBB174_51:                             # %if.else
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB174_52:                             # %if.end151
                                        #   in Loop: Header=BB174_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB174_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB174_54:                             # %if.end157
                                        #   in Loop: Header=BB174_8 Depth=2
	jmp	.LBB174_55
.LBB174_55:                             # %if.end158
                                        #   in Loop: Header=BB174_8 Depth=2
	jmp	.LBB174_65
.LBB174_56:                             # %if.else159
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	$0, -16(%rbp)
.LBB174_57:                             # %for.cond160
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB174_59 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB174_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB174_57 Depth=3
	movl	$0, -12(%rbp)
.LBB174_59:                             # %for.cond164
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        #       Parent Loop BB174_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB174_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB174_59 Depth=4
	movq	imgY_org, %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB174_59 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_59
.LBB174_62:                             # %for.end193
                                        #   in Loop: Header=BB174_57 Depth=3
	jmp	.LBB174_63
.LBB174_63:                             # %for.inc194
                                        #   in Loop: Header=BB174_57 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_57
.LBB174_64:                             # %for.end196
                                        #   in Loop: Header=BB174_8 Depth=2
	jmp	.LBB174_65
.LBB174_65:                             # %if.end197
                                        #   in Loop: Header=BB174_8 Depth=2
	jmp	.LBB174_95
.LBB174_66:                             # %if.else198
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	$0, -16(%rbp)
.LBB174_67:                             # %for.cond199
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB174_69 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB174_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB174_67 Depth=3
	movl	$0, -12(%rbp)
.LBB174_69:                             # %for.cond203
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        #       Parent Loop BB174_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB174_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB174_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -92(%rbp)
	movq	imgY_org, %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -96(%rbp)
	movl	-116(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -76(%rbp)
	jne	.LBB174_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB174_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-12(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB174_73
.LBB174_72:                             # %if.else300
                                        #   in Loop: Header=BB174_69 Depth=4
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-64(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB174_73:                             # %if.end314
                                        #   in Loop: Header=BB174_69 Depth=4
	jmp	.LBB174_74
.LBB174_74:                             # %for.inc315
                                        #   in Loop: Header=BB174_69 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_69
.LBB174_75:                             # %for.end317
                                        #   in Loop: Header=BB174_67 Depth=3
	jmp	.LBB174_76
.LBB174_76:                             # %for.inc318
                                        #   in Loop: Header=BB174_67 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_67
.LBB174_77:                             # %for.end320
                                        #   in Loop: Header=BB174_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB174_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB174_8 Depth=2
	cmpl	$0, -72(%rbp)
	jne	.LBB174_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB174_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB174_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB174_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB174_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB174_83
.LBB174_82:                             # %if.else334
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-28(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB174_83:                             # %if.end336
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	$0, -16(%rbp)
.LBB174_84:                             # %for.cond337
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB174_86 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB174_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB174_84 Depth=3
	movl	$0, -12(%rbp)
.LBB174_86:                             # %for.cond341
                                        #   Parent Loop BB174_6 Depth=1
                                        #     Parent Loop BB174_8 Depth=2
                                        #       Parent Loop BB174_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -12(%rbp)
	jge	.LBB174_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB174_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB174_86 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_86
.LBB174_89:                             # %for.end358
                                        #   in Loop: Header=BB174_84 Depth=3
	jmp	.LBB174_90
.LBB174_90:                             # %for.inc359
                                        #   in Loop: Header=BB174_84 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_84
.LBB174_91:                             # %for.end361
                                        #   in Loop: Header=BB174_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB174_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB174_93:                             # %if.end368
                                        #   in Loop: Header=BB174_8 Depth=2
	jmp	.LBB174_94
.LBB174_94:                             # %if.end369
                                        #   in Loop: Header=BB174_8 Depth=2
	jmp	.LBB174_95
.LBB174_95:                             # %if.end370
                                        #   in Loop: Header=BB174_8 Depth=2
	jmp	.LBB174_96
.LBB174_96:                             # %for.inc371
                                        #   in Loop: Header=BB174_8 Depth=2
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB174_8
.LBB174_97:                             # %for.end374
                                        #   in Loop: Header=BB174_6 Depth=1
	jmp	.LBB174_98
.LBB174_98:                             # %for.inc375
                                        #   in Loop: Header=BB174_6 Depth=1
	movl	-64(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -64(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB174_6
.LBB174_99:                             # %for.end378
	cmpl	$0, -76(%rbp)
	je	.LBB174_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB174_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -72(%rbp)
	jne	.LBB174_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB174_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-28(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB174_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB174_114
# %bb.105:                              # %if.then395
	movl	$0, -16(%rbp)
.LBB174_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_108 Depth 2
	cmpl	$8, -16(%rbp)
	jge	.LBB174_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB174_106 Depth=1
	movl	$0, -12(%rbp)
.LBB174_108:                            # %for.cond400
                                        #   Parent Loop BB174_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -12(%rbp)
	jge	.LBB174_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB174_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB174_108 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_108
.LBB174_111:                            # %for.end417
                                        #   in Loop: Header=BB174_106 Depth=1
	jmp	.LBB174_112
.LBB174_112:                            # %for.inc418
                                        #   in Loop: Header=BB174_106 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_106
.LBB174_113:                            # %for.end420
	jmp	.LBB174_114
.LBB174_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB174_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB174_116:                            # %if.end431
	jmp	.LBB174_117
.LBB174_117:                            # %if.end432
	jmp	.LBB174_118
.LBB174_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB174_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -72(%rbp)
	jne	.LBB174_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -28(%rbp)
	jg	.LBB174_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB174_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB174_145
.LBB174_123:                            # %if.then448
	movl	$0, -28(%rbp)
	movl	$63, %eax
	subl	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB174_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_126 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB174_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB174_126:                            # %for.cond462
                                        #   Parent Loop BB174_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB174_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB174_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB174_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-12(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB174_130
.LBB174_129:                            # %if.else481
                                        #   in Loop: Header=BB174_126 Depth=2
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB174_130:                            # %if.end486
                                        #   in Loop: Header=BB174_126 Depth=2
	jmp	.LBB174_131
.LBB174_131:                            # %for.inc487
                                        #   in Loop: Header=BB174_126 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_126
.LBB174_132:                            # %for.end489
                                        #   in Loop: Header=BB174_124 Depth=1
	jmp	.LBB174_133
.LBB174_133:                            # %for.inc490
                                        #   in Loop: Header=BB174_124 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_124
.LBB174_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB174_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB174_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_138 Depth 2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB174_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB174_138:                            # %for.cond502
                                        #   Parent Loop BB174_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB174_138 Depth=2
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB174_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_138
.LBB174_141:                            # %for.end509
                                        #   in Loop: Header=BB174_136 Depth=1
	jmp	.LBB174_142
.LBB174_142:                            # %for.inc510
                                        #   in Loop: Header=BB174_136 Depth=1
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_136
.LBB174_143:                            # %for.end512
	jmp	.LBB174_144
.LBB174_144:                            # %if.end513
	jmp	.LBB174_145
.LBB174_145:                            # %if.end514
	movl	-28(%rbp), %ebx
	cmpl	$1706427755, -128(%rbp) # imm = 0x65B6056B
	jne	.LBB174_147
.LBB174_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_146
.Lfunc_end174:
	.size	LumaResidualCoding8x8.133, .Lfunc_end174-LumaResidualCoding8x8.133
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.134    # -- Begin function start_macroblock.134
	.p2align	4, 0x90
	.type	start_macroblock.134,@function
start_macroblock.134:                   # @start_macroblock.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1770982314, -84(%rbp)  # imm = 0x698F0BAA
	movl	%edi, -48(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB175_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB175_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-48(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB175_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB175_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB175_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB175_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB175_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB175_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB175_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB175_8:                              # %if.end
                                        #   in Loop: Header=BB175_5 Depth=1
	jmp	.LBB175_9
.LBB175_9:                              # %for.inc
                                        #   in Loop: Header=BB175_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_5
.LBB175_10:                             # %for.end
	jmp	.LBB175_11
.LBB175_11:                             # %if.end19
	jmp	.LBB175_12
.LBB175_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB175_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB175_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB175_16
.LBB175_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB175_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB175_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB175_97
.LBB175_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB175_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB175_21
.LBB175_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB175_96
.LBB175_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB175_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB175_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB175_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB175_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB175_34
.LBB175_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB175_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB175_32
.LBB175_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB175_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB175_31
.LBB175_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB175_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB175_33
.LBB175_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB175_33:                             # %if.end112
	jmp	.LBB175_34
.LBB175_34:                             # %if.end113
	jmp	.LBB175_39
.LBB175_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB175_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB175_38
.LBB175_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB175_38:                             # %if.end125
	jmp	.LBB175_39
.LBB175_39:                             # %if.end126
	jmp	.LBB175_47
.LBB175_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB175_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB175_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB175_44
.LBB175_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB175_44:                             # %if.end140
	jmp	.LBB175_46
.LBB175_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB175_46:                             # %if.end145
	jmp	.LBB175_47
.LBB175_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB175_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB175_93
.LBB175_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB175_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB175_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB175_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB175_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB175_74
.LBB175_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB175_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB175_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB175_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB175_73
.LBB175_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB175_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB175_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB175_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB175_72
.LBB175_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB175_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB175_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB175_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB175_71
.LBB175_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB175_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB175_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB175_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB175_70:                             # %if.end223
	jmp	.LBB175_71
.LBB175_71:                             # %if.end224
	jmp	.LBB175_72
.LBB175_72:                             # %if.end225
	jmp	.LBB175_73
.LBB175_73:                             # %if.end226
	jmp	.LBB175_74
.LBB175_74:                             # %if.end227
	jmp	.LBB175_75
.LBB175_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB175_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB175_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB175_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB175_82
.LBB175_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB175_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB175_81:                             # %if.end256
	jmp	.LBB175_82
.LBB175_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB175_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB175_88
.LBB175_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB175_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB175_87
.LBB175_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB175_87:                             # %if.end292
	jmp	.LBB175_88
.LBB175_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB175_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB175_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB175_92
.LBB175_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB175_92:                             # %if.end305
	jmp	.LBB175_94
.LBB175_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB175_94:                             # %if.end309
	jmp	.LBB175_95
.LBB175_95:                             # %if.end310
	jmp	.LBB175_96
.LBB175_96:                             # %if.end311
	jmp	.LBB175_97
.LBB175_97:                             # %if.end312
	jmp	.LBB175_102
.LBB175_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB175_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB175_101
.LBB175_100:                            # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB175_101:                            # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB175_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB175_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB175_105
.LBB175_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB175_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB175_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB175_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB175_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_110 Depth 2
                                        #       Child Loop BB175_112 Depth 3
                                        #         Child Loop BB175_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB175_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB175_108 Depth=1
	movl	$0, -16(%rbp)
.LBB175_110:                            # %for.cond364
                                        #   Parent Loop BB175_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_112 Depth 3
                                        #         Child Loop BB175_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB175_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB175_110 Depth=2
	movl	$0, -12(%rbp)
.LBB175_112:                            # %for.cond368
                                        #   Parent Loop BB175_108 Depth=1
                                        #     Parent Loop BB175_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB175_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB175_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB175_112 Depth=3
	movl	$0, -36(%rbp)
.LBB175_114:                            # %for.cond372
                                        #   Parent Loop BB175_108 Depth=1
                                        #     Parent Loop BB175_110 Depth=2
                                        #       Parent Loop BB175_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB175_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB175_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB175_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB175_114
.LBB175_117:                            # %for.end388
                                        #   in Loop: Header=BB175_112 Depth=3
	jmp	.LBB175_118
.LBB175_118:                            # %for.inc389
                                        #   in Loop: Header=BB175_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_112
.LBB175_119:                            # %for.end391
                                        #   in Loop: Header=BB175_110 Depth=2
	jmp	.LBB175_120
.LBB175_120:                            # %for.inc392
                                        #   in Loop: Header=BB175_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_110
.LBB175_121:                            # %for.end394
                                        #   in Loop: Header=BB175_108 Depth=1
	jmp	.LBB175_122
.LBB175_122:                            # %for.inc395
                                        #   in Loop: Header=BB175_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB175_108
.LBB175_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB175_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_126 Depth 2
                                        #       Child Loop BB175_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB175_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB175_124 Depth=1
	movl	$0, -12(%rbp)
.LBB175_126:                            # %for.cond402
                                        #   Parent Loop BB175_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB175_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB175_126 Depth=2
	movl	$0, -20(%rbp)
.LBB175_128:                            # %for.cond406
                                        #   Parent Loop BB175_124 Depth=1
                                        #     Parent Loop BB175_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB175_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB175_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB175_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB175_128
.LBB175_131:                            # %for.end432
                                        #   in Loop: Header=BB175_126 Depth=2
	jmp	.LBB175_132
.LBB175_132:                            # %for.inc433
                                        #   in Loop: Header=BB175_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_126
.LBB175_133:                            # %for.end435
                                        #   in Loop: Header=BB175_124 Depth=1
	jmp	.LBB175_134
.LBB175_134:                            # %for.inc436
                                        #   in Loop: Header=BB175_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_124
.LBB175_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB175_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB175_138 Depth 2
                                        #       Child Loop BB175_140 Depth 3
                                        #         Child Loop BB175_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB175_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB175_136 Depth=1
	movl	$0, -16(%rbp)
.LBB175_138:                            # %for.cond443
                                        #   Parent Loop BB175_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB175_140 Depth 3
                                        #         Child Loop BB175_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB175_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB175_138 Depth=2
	movl	$0, -12(%rbp)
.LBB175_140:                            # %for.cond447
                                        #   Parent Loop BB175_136 Depth=1
                                        #     Parent Loop BB175_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB175_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB175_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB175_140 Depth=3
	movl	$0, -36(%rbp)
.LBB175_142:                            # %for.cond451
                                        #   Parent Loop BB175_136 Depth=1
                                        #     Parent Loop BB175_138 Depth=2
                                        #       Parent Loop BB175_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB175_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB175_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB175_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB175_142
.LBB175_145:                            # %for.end465
                                        #   in Loop: Header=BB175_140 Depth=3
	jmp	.LBB175_146
.LBB175_146:                            # %for.inc466
                                        #   in Loop: Header=BB175_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_140
.LBB175_147:                            # %for.end468
                                        #   in Loop: Header=BB175_138 Depth=2
	jmp	.LBB175_148
.LBB175_148:                            # %for.inc469
                                        #   in Loop: Header=BB175_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB175_138
.LBB175_149:                            # %for.end471
                                        #   in Loop: Header=BB175_136 Depth=1
	jmp	.LBB175_150
.LBB175_150:                            # %for.inc472
                                        #   in Loop: Header=BB175_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB175_136
.LBB175_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB175_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB175_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB175_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB175_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_152
.LBB175_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB175_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB175_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB175_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB175_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB175_156
.LBB175_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB175_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB175_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB175_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB175_166
.LBB175_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB175_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB175_165:                            # %if.end520
	jmp	.LBB175_166
.LBB175_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB175_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB175_168:                            # %if.end536
	cmpl	$1770982314, -84(%rbp)  # imm = 0x698F0BAA
	jne	.LBB175_170
.LBB175_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_169
.Lfunc_end175:
	.size	start_macroblock.134, .Lfunc_end175-start_macroblock.134
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.135 # -- Begin function writeChromaIntraPredMode.135
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.135,@function
writeChromaIntraPredMode.135:           # @writeChromaIntraPredMode.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$632027197, -36(%rbp)   # imm = 0x25ABF83D
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB176_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB176_3
.LBB176_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB176_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$632027197, -36(%rbp)   # imm = 0x25ABF83D
	jne	.LBB176_5
.LBB176_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_4
.Lfunc_end176:
	.size	writeChromaIntraPredMode.135, .Lfunc_end176-writeChromaIntraPredMode.135
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.136 # -- Begin function write_terminating_bit.136
	.p2align	4, 0x90
	.type	write_terminating_bit.136,@function
write_terminating_bit.136:              # @write_terminating_bit.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$205941056, -8(%rbp)    # imm = 0xC466940
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$205941056, -8(%rbp)    # imm = 0xC466940
	jne	.LBB177_2
.LBB177_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_1
.Lfunc_end177:
	.size	write_terminating_bit.136, .Lfunc_end177-write_terminating_bit.136
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.137        # -- Begin function B8Mode2Value.137
	.p2align	4, 0x90
	.type	B8Mode2Value.137,@function
B8Mode2Value.137:                       # @B8Mode2Value.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$884979948, -20(%rbp)   # imm = 0x34BFB8EC
	movl	%edi, -12(%rbp)
	movl	%esi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB178_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB178_3
.LBB178_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-24(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB178_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$884979948, -20(%rbp)   # imm = 0x34BFB8EC
	jne	.LBB178_5
.LBB178_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_4
.Lfunc_end178:
	.size	B8Mode2Value.137, .Lfunc_end178-B8Mode2Value.137
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.138 # -- Begin function writeReferenceFrame.138
	.p2align	4, 0x90
	.type	writeReferenceFrame.138,@function
writeReferenceFrame.138:                # @writeReferenceFrame.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2126348690, -80(%rbp)  # imm = 0x7EBD8192
	movl	%edi, -84(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB179_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB179_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB179_4
.LBB179_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB179_4
.LBB179_4:                              # %cond.end
	movl	%ecx, -44(%rbp)
	cmpl	$0, -36(%rbp)
	je	.LBB179_6
# %bb.5:                                # %cond.true10
	movl	-44(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB179_7
.LBB179_6:                              # %cond.false13
	movl	-44(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB179_7:                              # %cond.end17
	movl	%eax, -52(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB179_9
# %bb.8:                                # %if.then
	movl	$0, -48(%rbp)
	jmp	.LBB179_18
.LBB179_9:                              # %if.end
	cmpl	$2, -52(%rbp)
	jne	.LBB179_11
# %bb.10:                               # %if.then20
	movl	$1, -40(%rbp)
.LBB179_11:                             # %if.end21
	movl	-68(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB179_16
# %bb.12:                               # %if.then28
	cmpl	$0, -40(%rbp)
	je	.LBB179_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB179_15
.LBB179_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB179_15:                             # %if.end33
	jmp	.LBB179_17
.LBB179_16:                             # %if.else34
	movl	-84(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-76(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-72(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB179_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB179_18:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$2126348690, -80(%rbp)  # imm = 0x7EBD8192
	jne	.LBB179_20
.LBB179_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_19
.Lfunc_end179:
	.size	writeReferenceFrame.138, .Lfunc_end179-writeReferenceFrame.138
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.139 # -- Begin function LumaResidualCoding8x8.139
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.139,@function
LumaResidualCoding8x8.139:              # @LumaResidualCoding8x8.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1880645950, -120(%rbp) # imm = 0x7018613E
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -72(%rbp)
	movl	%r9d, -60(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -64(%rbp)
	movl	$0, -124(%rbp)
	cmpl	$0, -72(%rbp)
	jne	.LBB180_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -60(%rbp)
	jne	.LBB180_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB180_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB180_5
# %bb.4:                                # %if.then
	movl	$1, -124(%rbp)
.LBB180_5:                              # %if.end
	movl	$0, -76(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB180_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_8 Depth 2
                                        #       Child Loop BB180_11 Depth 3
                                        #         Child Loop BB180_13 Depth 4
                                        #       Child Loop BB180_19 Depth 3
                                        #         Child Loop BB180_21 Depth 4
                                        #       Child Loop BB180_29 Depth 3
                                        #         Child Loop BB180_31 Depth 4
                                        #       Child Loop BB180_40 Depth 3
                                        #         Child Loop BB180_42 Depth 4
                                        #       Child Loop BB180_57 Depth 3
                                        #         Child Loop BB180_59 Depth 4
                                        #       Child Loop BB180_67 Depth 3
                                        #         Child Loop BB180_69 Depth 4
                                        #       Child Loop BB180_84 Depth 3
                                        #         Child Loop BB180_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB180_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -84(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB180_8:                              # %for.cond9
                                        #   Parent Loop BB180_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB180_11 Depth 3
                                        #         Child Loop BB180_13 Depth 4
                                        #       Child Loop BB180_19 Depth 3
                                        #         Child Loop BB180_21 Depth 4
                                        #       Child Loop BB180_29 Depth 3
                                        #         Child Loop BB180_31 Depth 4
                                        #       Child Loop BB180_40 Depth 3
                                        #         Child Loop BB180_42 Depth 4
                                        #       Child Loop BB180_57 Depth 3
                                        #         Child Loop BB180_59 Depth 4
                                        #       Child Loop BB180_67 Depth 3
                                        #         Child Loop BB180_69 Depth 4
                                        #       Child Loop BB180_84 Depth 3
                                        #         Child Loop BB180_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB180_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB180_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB180_11:                             # %for.cond16
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB180_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB180_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB180_11 Depth=3
	movl	$0, -16(%rbp)
.LBB180_13:                             # %for.cond20
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        #       Parent Loop BB180_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB180_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB180_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB180_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB180_13
.LBB180_16:                             # %for.end
                                        #   in Loop: Header=BB180_11 Depth=3
	jmp	.LBB180_17
.LBB180_17:                             # %for.inc37
                                        #   in Loop: Header=BB180_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_11
.LBB180_18:                             # %for.end39
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-60(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB180_19:                             # %for.cond41
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB180_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB180_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB180_19 Depth=3
	movl	$0, -16(%rbp)
.LBB180_21:                             # %for.cond45
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        #       Parent Loop BB180_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB180_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB180_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB180_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB180_21
.LBB180_24:                             # %for.end65
                                        #   in Loop: Header=BB180_19 Depth=3
	jmp	.LBB180_25
.LBB180_25:                             # %for.inc66
                                        #   in Loop: Header=BB180_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_19
.LBB180_26:                             # %for.end68
                                        #   in Loop: Header=BB180_8 Depth=2
	jmp	.LBB180_27
.LBB180_27:                             # %if.end69
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-60(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB180_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	$0, -12(%rbp)
.LBB180_29:                             # %for.cond74
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB180_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB180_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB180_29 Depth=3
	movl	$0, -16(%rbp)
.LBB180_31:                             # %for.cond78
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        #       Parent Loop BB180_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB180_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB180_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB180_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB180_31
.LBB180_34:                             # %for.end98
                                        #   in Loop: Header=BB180_29 Depth=3
	jmp	.LBB180_35
.LBB180_35:                             # %for.inc99
                                        #   in Loop: Header=BB180_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_29
.LBB180_36:                             # %for.end101
                                        #   in Loop: Header=BB180_8 Depth=2
	jmp	.LBB180_37
.LBB180_37:                             # %if.end102
                                        #   in Loop: Header=BB180_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB180_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB180_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB180_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	$0, -12(%rbp)
.LBB180_40:                             # %for.cond108
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB180_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB180_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB180_40 Depth=3
	movl	$0, -16(%rbp)
.LBB180_42:                             # %for.cond112
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        #       Parent Loop BB180_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB180_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB180_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB180_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB180_42
.LBB180_45:                             # %for.end137
                                        #   in Loop: Header=BB180_40 Depth=3
	jmp	.LBB180_46
.LBB180_46:                             # %for.inc138
                                        #   in Loop: Header=BB180_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_40
.LBB180_47:                             # %for.end140
                                        #   in Loop: Header=BB180_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB180_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB180_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB180_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB180_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB180_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB180_52
.LBB180_51:                             # %if.else
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB180_52:                             # %if.end151
                                        #   in Loop: Header=BB180_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB180_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB180_54:                             # %if.end157
                                        #   in Loop: Header=BB180_8 Depth=2
	jmp	.LBB180_55
.LBB180_55:                             # %if.end158
                                        #   in Loop: Header=BB180_8 Depth=2
	jmp	.LBB180_65
.LBB180_56:                             # %if.else159
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	$0, -12(%rbp)
.LBB180_57:                             # %for.cond160
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB180_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB180_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB180_57 Depth=3
	movl	$0, -16(%rbp)
.LBB180_59:                             # %for.cond164
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        #       Parent Loop BB180_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB180_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB180_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB180_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB180_59
.LBB180_62:                             # %for.end193
                                        #   in Loop: Header=BB180_57 Depth=3
	jmp	.LBB180_63
.LBB180_63:                             # %for.inc194
                                        #   in Loop: Header=BB180_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_57
.LBB180_64:                             # %for.end196
                                        #   in Loop: Header=BB180_8 Depth=2
	jmp	.LBB180_65
.LBB180_65:                             # %if.end197
                                        #   in Loop: Header=BB180_8 Depth=2
	jmp	.LBB180_95
.LBB180_66:                             # %if.else198
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	$0, -12(%rbp)
.LBB180_67:                             # %for.cond199
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB180_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB180_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB180_67 Depth=3
	movl	$0, -16(%rbp)
.LBB180_69:                             # %for.cond203
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        #       Parent Loop BB180_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB180_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB180_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-116(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -68(%rbp)
	jne	.LBB180_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB180_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB180_73
.LBB180_72:                             # %if.else300
                                        #   in Loop: Header=BB180_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-76(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB180_73:                             # %if.end314
                                        #   in Loop: Header=BB180_69 Depth=4
	jmp	.LBB180_74
.LBB180_74:                             # %for.inc315
                                        #   in Loop: Header=BB180_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB180_69
.LBB180_75:                             # %for.end317
                                        #   in Loop: Header=BB180_67 Depth=3
	jmp	.LBB180_76
.LBB180_76:                             # %for.inc318
                                        #   in Loop: Header=BB180_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_67
.LBB180_77:                             # %for.end320
                                        #   in Loop: Header=BB180_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB180_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB180_8 Depth=2
	cmpl	$0, -80(%rbp)
	jne	.LBB180_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB180_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB180_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB180_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB180_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB180_83
.LBB180_82:                             # %if.else334
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB180_83:                             # %if.end336
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	$0, -12(%rbp)
.LBB180_84:                             # %for.cond337
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB180_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB180_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB180_84 Depth=3
	movl	$0, -16(%rbp)
.LBB180_86:                             # %for.cond341
                                        #   Parent Loop BB180_6 Depth=1
                                        #     Parent Loop BB180_8 Depth=2
                                        #       Parent Loop BB180_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB180_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB180_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB180_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB180_86
.LBB180_89:                             # %for.end358
                                        #   in Loop: Header=BB180_84 Depth=3
	jmp	.LBB180_90
.LBB180_90:                             # %for.inc359
                                        #   in Loop: Header=BB180_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_84
.LBB180_91:                             # %for.end361
                                        #   in Loop: Header=BB180_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB180_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB180_93:                             # %if.end368
                                        #   in Loop: Header=BB180_8 Depth=2
	jmp	.LBB180_94
.LBB180_94:                             # %if.end369
                                        #   in Loop: Header=BB180_8 Depth=2
	jmp	.LBB180_95
.LBB180_95:                             # %if.end370
                                        #   in Loop: Header=BB180_8 Depth=2
	jmp	.LBB180_96
.LBB180_96:                             # %for.inc371
                                        #   in Loop: Header=BB180_8 Depth=2
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB180_8
.LBB180_97:                             # %for.end374
                                        #   in Loop: Header=BB180_6 Depth=1
	jmp	.LBB180_98
.LBB180_98:                             # %for.inc375
                                        #   in Loop: Header=BB180_6 Depth=1
	movl	-76(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -76(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB180_6
.LBB180_99:                             # %for.end378
	cmpl	$0, -68(%rbp)
	je	.LBB180_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB180_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -80(%rbp)
	jne	.LBB180_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB180_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB180_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB180_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB180_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB180_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB180_106 Depth=1
	movl	$0, -16(%rbp)
.LBB180_108:                            # %for.cond400
                                        #   Parent Loop BB180_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB180_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB180_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB180_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB180_108
.LBB180_111:                            # %for.end417
                                        #   in Loop: Header=BB180_106 Depth=1
	jmp	.LBB180_112
.LBB180_112:                            # %for.inc418
                                        #   in Loop: Header=BB180_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_106
.LBB180_113:                            # %for.end420
	jmp	.LBB180_114
.LBB180_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB180_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB180_116:                            # %if.end431
	jmp	.LBB180_117
.LBB180_117:                            # %if.end432
	jmp	.LBB180_118
.LBB180_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB180_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -80(%rbp)
	jne	.LBB180_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB180_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB180_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB180_145
.LBB180_123:                            # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB180_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB180_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB180_126:                            # %for.cond462
                                        #   Parent Loop BB180_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB180_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB180_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB180_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB180_130
.LBB180_129:                            # %if.else481
                                        #   in Loop: Header=BB180_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB180_130:                            # %if.end486
                                        #   in Loop: Header=BB180_126 Depth=2
	jmp	.LBB180_131
.LBB180_131:                            # %for.inc487
                                        #   in Loop: Header=BB180_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_126
.LBB180_132:                            # %for.end489
                                        #   in Loop: Header=BB180_124 Depth=1
	jmp	.LBB180_133
.LBB180_133:                            # %for.inc490
                                        #   in Loop: Header=BB180_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB180_124
.LBB180_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB180_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB180_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB180_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB180_138:                            # %for.cond502
                                        #   Parent Loop BB180_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB180_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB180_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB180_138
.LBB180_141:                            # %for.end509
                                        #   in Loop: Header=BB180_136 Depth=1
	jmp	.LBB180_142
.LBB180_142:                            # %for.inc510
                                        #   in Loop: Header=BB180_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB180_136
.LBB180_143:                            # %for.end512
	jmp	.LBB180_144
.LBB180_144:                            # %if.end513
	jmp	.LBB180_145
.LBB180_145:                            # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$1880645950, -120(%rbp) # imm = 0x7018613E
	jne	.LBB180_147
.LBB180_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_146
.Lfunc_end180:
	.size	LumaResidualCoding8x8.139, .Lfunc_end180-LumaResidualCoding8x8.139
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.140    # -- Begin function writeChromaCoeff.140
	.p2align	4, 0x90
	.type	writeChromaCoeff.140,@function
writeChromaCoeff.140:                   # @writeChromaCoeff.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1289921380, -84(%rbp)  # imm = 0x4CE2A364
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB181_24
# %bb.1:                                # %if.then
	movl	$0, -24(%rbp)
.LBB181_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_6 Depth 2
	cmpl	$2, -24(%rbp)
	jge	.LBB181_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB181_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB181_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB181_21
.LBB181_5:                              # %if.else
                                        #   in Loop: Header=BB181_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-24(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -20(%rbp)
.LBB181_6:                              # %for.cond18
                                        #   Parent Loop BB181_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-20(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB181_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB181_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB181_8:                              # %land.end
                                        #   in Loop: Header=BB181_6 Depth=2
	testb	$1, %al
	jne	.LBB181_9
	jmp	.LBB181_20
.LBB181_9:                              # %for.body21
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB181_12
.LBB181_11:                             # %if.else29
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB181_12:                             # %if.end
                                        #   in Loop: Header=BB181_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB181_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB181_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB181_15:                             # %lor.end
                                        #   in Loop: Header=BB181_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB181_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB181_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB181_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB181_18:                             # %lor.end45
                                        #   in Loop: Header=BB181_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB181_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB181_6
.LBB181_20:                             # %for.end
                                        #   in Loop: Header=BB181_2 Depth=1
	jmp	.LBB181_21
.LBB181_21:                             # %if.end58
                                        #   in Loop: Header=BB181_2 Depth=1
	jmp	.LBB181_22
.LBB181_22:                             # %for.inc59
                                        #   in Loop: Header=BB181_2 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB181_2
.LBB181_23:                             # %for.end61
	jmp	.LBB181_24
.LBB181_24:                             # %if.end62
	movl	$-1, -24(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB181_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB181_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_28 Depth 2
                                        #       Child Loop BB181_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB181_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB181_26 Depth=1
	movl	$0, -36(%rbp)
.LBB181_28:                             # %for.cond69
                                        #   Parent Loop BB181_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB181_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB181_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB181_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB181_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB181_47
.LBB181_31:                             # %if.else84
                                        #   in Loop: Header=BB181_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -20(%rbp)
.LBB181_32:                             # %for.cond115
                                        #   Parent Loop BB181_26 Depth=1
                                        #     Parent Loop BB181_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -20(%rbp)
	jge	.LBB181_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB181_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB181_34:                             # %land.end121
                                        #   in Loop: Header=BB181_32 Depth=3
	testb	$1, %al
	jne	.LBB181_35
	jmp	.LBB181_46
.LBB181_35:                             # %for.body122
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB181_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB181_38
.LBB181_37:                             # %if.else134
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB181_38:                             # %if.end136
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB181_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB181_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB181_41:                             # %lor.end149
                                        #   in Loop: Header=BB181_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB181_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB181_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB181_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB181_44:                             # %lor.end164
                                        #   in Loop: Header=BB181_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-24(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB181_32 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB181_32
.LBB181_46:                             # %for.end189
                                        #   in Loop: Header=BB181_28 Depth=2
	jmp	.LBB181_47
.LBB181_47:                             # %if.end190
                                        #   in Loop: Header=BB181_28 Depth=2
	jmp	.LBB181_48
.LBB181_48:                             # %for.inc191
                                        #   in Loop: Header=BB181_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB181_28
.LBB181_49:                             # %for.end193
                                        #   in Loop: Header=BB181_26 Depth=1
	jmp	.LBB181_50
.LBB181_50:                             # %for.inc194
                                        #   in Loop: Header=BB181_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB181_26
.LBB181_51:                             # %for.end196
	jmp	.LBB181_52
.LBB181_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$1289921380, -84(%rbp)  # imm = 0x4CE2A364
	jne	.LBB181_54
.LBB181_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_53
.Lfunc_end181:
	.size	writeChromaCoeff.140, .Lfunc_end181-writeChromaCoeff.140
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.141 # -- Begin function OneComponentChromaPrediction4x4.141
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.141,@function
OneComponentChromaPrediction4x4.141:    # @OneComponentChromaPrediction4x4.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1831838874, -112(%rbp) # imm = 0x6D2FA49A
	movq	%rdi, -144(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -60(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -68(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB182_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB182_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB182_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB182_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB182_6
.LBB182_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB182_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB182_8
.LBB182_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB182_8:                              # %if.end13
	movl	-68(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -40(%rbp)
.LBB182_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB182_11 Depth 2
	cmpl	$4, -40(%rbp)
	jge	.LBB182_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB182_9 Depth=1
	movl	$0, -36(%rbp)
.LBB182_11:                             # %for.cond20
                                        #   Parent Loop BB182_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -36(%rbp)
	jge	.LBB182_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB182_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-36(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-40(%rbp), %ecx
	addl	-60(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-36(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-40(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB182_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB182_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB182_15
.LBB182_14:                             # %cond.false
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB182_15:                             # %cond.end
                                        #   in Loop: Header=BB182_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB182_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB182_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB182_21
.LBB182_17:                             # %cond.false65
                                        #   in Loop: Header=BB182_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB182_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB182_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB182_20
.LBB182_19:                             # %cond.false74
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB182_20:                             # %cond.end76
                                        #   in Loop: Header=BB182_11 Depth=2
.LBB182_21:                             # %cond.end78
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB182_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB182_24
.LBB182_23:                             # %cond.false84
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB182_24:                             # %cond.end86
                                        #   in Loop: Header=BB182_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB182_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB182_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB182_30
.LBB182_26:                             # %cond.false91
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB182_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB182_29
.LBB182_28:                             # %cond.false96
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB182_29:                             # %cond.end98
                                        #   in Loop: Header=BB182_11 Depth=2
.LBB182_30:                             # %cond.end100
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB182_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB182_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB182_33
.LBB182_32:                             # %cond.false111
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB182_33:                             # %cond.end114
                                        #   in Loop: Header=BB182_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB182_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB182_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB182_39
.LBB182_35:                             # %cond.false119
                                        #   in Loop: Header=BB182_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB182_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB182_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB182_38
.LBB182_37:                             # %cond.false129
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB182_38:                             # %cond.end132
                                        #   in Loop: Header=BB182_11 Depth=2
.LBB182_39:                             # %cond.end134
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB182_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB182_42
.LBB182_41:                             # %cond.false141
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB182_42:                             # %cond.end144
                                        #   in Loop: Header=BB182_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB182_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB182_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB182_48
.LBB182_44:                             # %cond.false149
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB182_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB182_47
.LBB182_46:                             # %cond.false155
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB182_47:                             # %cond.end158
                                        #   in Loop: Header=BB182_11 Depth=2
.LBB182_48:                             # %cond.end160
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-12(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-92(%rbp), %eax
	imull	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-56(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-80(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-76(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-92(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-76(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-72(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB182_11 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB182_11
.LBB182_50:                             # %for.end
                                        #   in Loop: Header=BB182_9 Depth=1
	jmp	.LBB182_51
.LBB182_51:                             # %for.inc198
                                        #   in Loop: Header=BB182_9 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB182_9
.LBB182_52:                             # %for.end200
	cmpl	$1831838874, -112(%rbp) # imm = 0x6D2FA49A
	jne	.LBB182_54
.LBB182_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_53
.Lfunc_end182:
	.size	OneComponentChromaPrediction4x4.141, .Lfunc_end182-OneComponentChromaPrediction4x4.141
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.142 # -- Begin function writeMotionInfo2NAL.142
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.142,@function
writeMotionInfo2NAL.142:                # @writeMotionInfo2NAL.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2037469202, -56(%rbp)  # imm = 0x79715012
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB183_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB183_3
.LBB183_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB183_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB183_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB183_6
.LBB183_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB183_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB183_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB183_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB183_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB183_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB183_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB183_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB183_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB183_39
.LBB183_14:                             # %if.then42
	movl	$0, -16(%rbp)
.LBB183_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_17 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB183_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB183_15 Depth=1
	movl	$0, -12(%rbp)
.LBB183_17:                             # %for.cond45
                                        #   Parent Loop BB183_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB183_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB183_17 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB183_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB183_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB183_22
.LBB183_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB183_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB183_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB183_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB183_22:                             # %if.end
                                        #   in Loop: Header=BB183_17 Depth=2
	jmp	.LBB183_23
.LBB183_23:                             # %for.inc
                                        #   in Loop: Header=BB183_17 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_17
.LBB183_24:                             # %for.end
                                        #   in Loop: Header=BB183_15 Depth=1
	jmp	.LBB183_25
.LBB183_25:                             # %for.inc79
                                        #   in Loop: Header=BB183_15 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB183_15
.LBB183_26:                             # %for.end81
	movl	$0, -16(%rbp)
.LBB183_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_29 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB183_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB183_27 Depth=1
	movl	$0, -12(%rbp)
.LBB183_29:                             # %for.cond86
                                        #   Parent Loop BB183_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB183_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB183_29 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB183_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB183_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB183_34
.LBB183_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB183_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB183_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB183_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB183_34:                             # %if.end126
                                        #   in Loop: Header=BB183_29 Depth=2
	jmp	.LBB183_35
.LBB183_35:                             # %for.inc127
                                        #   in Loop: Header=BB183_29 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_29
.LBB183_36:                             # %for.end129
                                        #   in Loop: Header=BB183_27 Depth=1
	jmp	.LBB183_37
.LBB183_37:                             # %for.inc130
                                        #   in Loop: Header=BB183_27 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB183_27
.LBB183_38:                             # %for.end132
	jmp	.LBB183_39
.LBB183_39:                             # %if.end133
	jmp	.LBB183_40
.LBB183_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB183_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB183_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB183_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB183_57
# %bb.44:                               # %if.then150
	movl	$0, -16(%rbp)
.LBB183_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_47 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB183_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB183_45 Depth=1
	movl	$0, -12(%rbp)
.LBB183_47:                             # %for.cond155
                                        #   Parent Loop BB183_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB183_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB183_47 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB183_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB183_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB183_52
.LBB183_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB183_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB183_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB183_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB183_52:                             # %if.end197
                                        #   in Loop: Header=BB183_47 Depth=2
	jmp	.LBB183_53
.LBB183_53:                             # %for.inc198
                                        #   in Loop: Header=BB183_47 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_47
.LBB183_54:                             # %for.end200
                                        #   in Loop: Header=BB183_45 Depth=1
	jmp	.LBB183_55
.LBB183_55:                             # %for.inc201
                                        #   in Loop: Header=BB183_45 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB183_45
.LBB183_56:                             # %for.end203
	jmp	.LBB183_57
.LBB183_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB183_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB183_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB183_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB183_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB183_75
# %bb.62:                               # %if.then222
	movl	$0, -16(%rbp)
.LBB183_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_65 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB183_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB183_63 Depth=1
	movl	$0, -12(%rbp)
.LBB183_65:                             # %for.cond227
                                        #   Parent Loop BB183_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB183_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB183_65 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB183_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB183_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB183_70
.LBB183_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB183_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB183_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB183_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	addl	-44(%rbp), %edx
	movl	-16(%rbp), %ecx
	addl	-40(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB183_70:                             # %if.end269
                                        #   in Loop: Header=BB183_65 Depth=2
	jmp	.LBB183_71
.LBB183_71:                             # %for.inc270
                                        #   in Loop: Header=BB183_65 Depth=2
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB183_65
.LBB183_72:                             # %for.end272
                                        #   in Loop: Header=BB183_63 Depth=1
	jmp	.LBB183_73
.LBB183_73:                             # %for.inc273
                                        #   in Loop: Header=BB183_63 Depth=1
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB183_63
.LBB183_74:                             # %for.end275
	jmp	.LBB183_75
.LBB183_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$2037469202, -56(%rbp)  # imm = 0x79715012
	jne	.LBB183_77
.LBB183_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_76
.Lfunc_end183:
	.size	writeMotionInfo2NAL.142, .Lfunc_end183-writeMotionInfo2NAL.142
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.143 # -- Begin function OneComponentLumaPrediction4x4.143
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.143,@function
OneComponentLumaPrediction4x4.143:      # @OneComponentLumaPrediction4x4.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$761373163, -88(%rbp)   # imm = 0x2D61A1EB
	movq	%rdi, -16(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -84(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-92(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-48(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$761373163, -88(%rbp)   # imm = 0x2D61A1EB
	jne	.LBB184_2
.LBB184_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_1
.Lfunc_end184:
	.size	OneComponentLumaPrediction4x4.143, .Lfunc_end184-OneComponentLumaPrediction4x4.143
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.144         # -- Begin function predict_nnz.144
	.p2align	4, 0x90
	.type	predict_nnz.144,@function
predict_nnz.144:                        # @predict_nnz.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$88654153, -56(%rbp)    # imm = 0x548C149
	movl	%edi, -44(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB185_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB185_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB185_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB185_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB185_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB185_6:                              # %if.end14
	movl	-48(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB185_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB185_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB185_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB185_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB185_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB185_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB185_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB185_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$88654153, -56(%rbp)    # imm = 0x548C149
	jne	.LBB185_16
.LBB185_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_15
.Lfunc_end185:
	.size	predict_nnz.144, .Lfunc_end185-predict_nnz.144
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.145  # -- Begin function LumaResidualCoding.145
	.p2align	4, 0x90
	.type	LumaResidualCoding.145,@function
LumaResidualCoding.145:                 # @LumaResidualCoding.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$857730416, -52(%rbp)   # imm = 0x331FED70
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB186_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB186_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-44(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	leaq	-22(%rbp), %r8
	leaq	-20(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-44(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movw	-22(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-20(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB186_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_1
.LBB186_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB186_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB186_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB186_33
.LBB186_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB186_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB186_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB186_8 Depth=1
	movl	$0, -4(%rbp)
.LBB186_10:                             # %for.cond13
                                        #   Parent Loop BB186_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB186_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB186_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB186_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB186_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB186_14
.LBB186_13:                             # %if.else
                                        #   in Loop: Header=BB186_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB186_14:                             # %if.end
                                        #   in Loop: Header=BB186_10 Depth=2
	jmp	.LBB186_15
.LBB186_15:                             # %for.inc31
                                        #   in Loop: Header=BB186_10 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_10
.LBB186_16:                             # %for.end33
                                        #   in Loop: Header=BB186_8 Depth=1
	jmp	.LBB186_17
.LBB186_17:                             # %for.inc34
                                        #   in Loop: Header=BB186_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_8
.LBB186_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB186_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB186_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB186_22 Depth 2
                                        #       Child Loop BB186_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB186_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB186_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB186_22:                             # %for.cond45
                                        #   Parent Loop BB186_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB186_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB186_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB186_22 Depth=2
	movl	$0, -4(%rbp)
.LBB186_24:                             # %for.cond48
                                        #   Parent Loop BB186_20 Depth=1
                                        #     Parent Loop BB186_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB186_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB186_24 Depth=3
	movl	-40(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-4(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB186_24 Depth=3
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB186_24
.LBB186_27:                             # %for.end55
                                        #   in Loop: Header=BB186_22 Depth=2
	jmp	.LBB186_28
.LBB186_28:                             # %for.inc56
                                        #   in Loop: Header=BB186_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB186_22
.LBB186_29:                             # %for.end58
                                        #   in Loop: Header=BB186_20 Depth=1
	jmp	.LBB186_30
.LBB186_30:                             # %for.inc59
                                        #   in Loop: Header=BB186_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB186_20
.LBB186_31:                             # %for.end61
	jmp	.LBB186_32
.LBB186_32:                             # %if.end62
	jmp	.LBB186_33
.LBB186_33:                             # %if.end63
	cmpl	$857730416, -52(%rbp)   # imm = 0x331FED70
	jne	.LBB186_35
.LBB186_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_34
.Lfunc_end186:
	.size	LumaResidualCoding.145, .Lfunc_end186-LumaResidualCoding.145
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.146 # -- Begin function OneComponentChromaPrediction4x4.146
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.146,@function
OneComponentChromaPrediction4x4.146:    # @OneComponentChromaPrediction4x4.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$344345545, -116(%rbp)  # imm = 0x14864BC9
	movq	%rdi, -144(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -64(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -88(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB187_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB187_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB187_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB187_5
# %bb.4:                                # %if.then7
	movl	$4, -48(%rbp)
	jmp	.LBB187_6
.LBB187_5:                              # %if.else
	movl	$2, -48(%rbp)
.LBB187_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB187_8
.LBB187_7:                              # %if.else10
	movl	$0, -48(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB187_8:                              # %if.end13
	movl	-88(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -40(%rbp)
.LBB187_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB187_11 Depth 2
	cmpl	$4, -40(%rbp)
	jge	.LBB187_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB187_9 Depth=1
	movl	$0, -36(%rbp)
.LBB187_11:                             # %for.cond20
                                        #   Parent Loop BB187_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -36(%rbp)
	jge	.LBB187_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB187_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-36(%rbp), %ecx
	addl	-60(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-40(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-36(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB187_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB187_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB187_15
.LBB187_14:                             # %cond.false
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB187_15:                             # %cond.end
                                        #   in Loop: Header=BB187_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB187_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB187_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB187_21
.LBB187_17:                             # %cond.false65
                                        #   in Loop: Header=BB187_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB187_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB187_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB187_20
.LBB187_19:                             # %cond.false74
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB187_20:                             # %cond.end76
                                        #   in Loop: Header=BB187_11 Depth=2
.LBB187_21:                             # %cond.end78
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB187_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB187_24
.LBB187_23:                             # %cond.false84
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB187_24:                             # %cond.end86
                                        #   in Loop: Header=BB187_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB187_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB187_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB187_30
.LBB187_26:                             # %cond.false91
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB187_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB187_29
.LBB187_28:                             # %cond.false96
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB187_29:                             # %cond.end98
                                        #   in Loop: Header=BB187_11 Depth=2
.LBB187_30:                             # %cond.end100
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB187_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB187_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB187_33
.LBB187_32:                             # %cond.false111
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB187_33:                             # %cond.end114
                                        #   in Loop: Header=BB187_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB187_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB187_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB187_39
.LBB187_35:                             # %cond.false119
                                        #   in Loop: Header=BB187_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB187_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB187_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB187_38
.LBB187_37:                             # %cond.false129
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB187_38:                             # %cond.end132
                                        #   in Loop: Header=BB187_11 Depth=2
.LBB187_39:                             # %cond.end134
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB187_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB187_42
.LBB187_41:                             # %cond.false141
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB187_42:                             # %cond.end144
                                        #   in Loop: Header=BB187_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB187_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB187_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB187_48
.LBB187_44:                             # %cond.false149
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB187_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB187_47
.LBB187_46:                             # %cond.false155
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB187_47:                             # %cond.end158
                                        #   in Loop: Header=BB187_11 Depth=2
.LBB187_48:                             # %cond.end160
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-12(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-72(%rbp), %eax
	imull	-84(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-84(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-72(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-56(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-68(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB187_11 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB187_11
.LBB187_50:                             # %for.end
                                        #   in Loop: Header=BB187_9 Depth=1
	jmp	.LBB187_51
.LBB187_51:                             # %for.inc198
                                        #   in Loop: Header=BB187_9 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB187_9
.LBB187_52:                             # %for.end200
	cmpl	$344345545, -116(%rbp)  # imm = 0x14864BC9
	jne	.LBB187_54
.LBB187_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_53
.Lfunc_end187:
	.size	OneComponentChromaPrediction4x4.146, .Lfunc_end187-OneComponentChromaPrediction4x4.146
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.147 # -- Begin function IntraChromaPrediction.147
	.p2align	4, 0x90
	.type	IntraChromaPrediction.147,@function
IntraChromaPrediction.147:              # @IntraChromaPrediction.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1463266422, -164(%rbp) # imm = 0x5737AC76
	movq	%rdi, -176(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -116(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -112(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB188_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB188_1 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB188_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_1
.LBB188_4:                              # %for.end
	movl	-116(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB188_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB188_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB188_8
.LBB188_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB188_8
.LBB188_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB188_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB188_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB188_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB188_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB188_13
.LBB188_12:                             # %cond.false32
                                        #   in Loop: Header=BB188_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB188_13
.LBB188_13:                             # %cond.end33
                                        #   in Loop: Header=BB188_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB188_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_9
.LBB188_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB188_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB188_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB188_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB188_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB188_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB188_20
.LBB188_19:                             # %cond.false57
                                        #   in Loop: Header=BB188_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB188_20
.LBB188_20:                             # %cond.end58
                                        #   in Loop: Header=BB188_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB188_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_16
.LBB188_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB188_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB188_25
.LBB188_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB188_25
.LBB188_25:                             # %cond.end75
	movl	%eax, -104(%rbp)
.LBB188_26:                             # %if.end
	cmpq	$0, -176(%rbp)
	je	.LBB188_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB188_28:                             # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB188_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB188_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB188_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB188_32:                             # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB188_34
# %bb.33:                               # %if.then88
	movl	-104(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB188_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB188_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_37 Depth 2
                                        #       Child Loop BB188_39 Depth 3
                                        #         Child Loop BB188_104 Depth 4
                                        #         Child Loop BB188_110 Depth 4
                                        #         Child Loop BB188_85 Depth 4
                                        #         Child Loop BB188_91 Depth 4
                                        #         Child Loop BB188_66 Depth 4
                                        #         Child Loop BB188_72 Depth 4
                                        #         Child Loop BB188_44 Depth 4
                                        #         Child Loop BB188_50 Depth 4
                                        #         Child Loop BB188_125 Depth 4
                                        #           Child Loop BB188_127 Depth 5
                                        #     Child Loop BB188_138 Depth 2
                                        #     Child Loop BB188_142 Depth 2
                                        #       Child Loop BB188_144 Depth 3
                                        #     Child Loop BB188_153 Depth 2
                                        #     Child Loop BB188_157 Depth 2
                                        #       Child Loop BB188_159 Depth 3
                                        #     Child Loop BB188_170 Depth 2
                                        #     Child Loop BB188_174 Depth 2
                                        #     Child Loop BB188_178 Depth 2
                                        #       Child Loop BB188_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB188_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB188_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB188_37:                             # %for.cond95
                                        #   Parent Loop BB188_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_39 Depth 3
                                        #         Child Loop BB188_104 Depth 4
                                        #         Child Loop BB188_110 Depth 4
                                        #         Child Loop BB188_85 Depth 4
                                        #         Child Loop BB188_91 Depth 4
                                        #         Child Loop BB188_66 Depth 4
                                        #         Child Loop BB188_72 Depth 4
                                        #         Child Loop BB188_44 Depth 4
                                        #         Child Loop BB188_50 Depth 4
                                        #         Child Loop BB188_125 Depth 4
                                        #           Child Loop BB188_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB188_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB188_37 Depth=2
	movl	$0, -88(%rbp)
.LBB188_39:                             # %for.cond99
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB188_104 Depth 4
                                        #         Child Loop BB188_110 Depth 4
                                        #         Child Loop BB188_85 Depth 4
                                        #         Child Loop BB188_91 Depth 4
                                        #         Child Loop BB188_66 Depth 4
                                        #         Child Loop BB188_72 Depth 4
                                        #         Child Loop BB188_44 Depth 4
                                        #         Child Loop BB188_50 Depth 4
                                        #         Child Loop BB188_125 Depth 4
                                        #           Child Loop BB188_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB188_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB188_39 Depth=3
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movslq	-112(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB188_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB188_39 Depth=3
	movq	.LJTI188_0(,%rax,8), %rax
	jmpq	*%rax
.LBB188_42:                             # %sw.bb
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB188_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB188_44:                             # %for.cond124
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_37 Depth=2
                                        #       Parent Loop BB188_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB188_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB188_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_44
.LBB188_47:                             # %for.end138
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_48
.LBB188_48:                             # %if.end139
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB188_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB188_50:                             # %for.cond143
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_37 Depth=2
                                        #       Parent Loop BB188_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB188_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB188_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_50
.LBB188_53:                             # %for.end162
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_54
.LBB188_54:                             # %if.end163
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB188_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB188_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB188_63
.LBB188_57:                             # %if.else
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB188_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB188_62
.LBB188_59:                             # %if.else174
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB188_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB188_61:                             # %if.end180
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_62
.LBB188_62:                             # %if.end181
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_63
.LBB188_63:                             # %if.end182
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_124
.LBB188_64:                             # %sw.bb183
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB188_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB188_66:                             # %for.cond186
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_37 Depth=2
                                        #       Parent Loop BB188_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB188_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB188_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_66
.LBB188_69:                             # %for.end202
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_77
.LBB188_70:                             # %if.else203
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB188_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB188_72:                             # %for.cond207
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_37 Depth=2
                                        #       Parent Loop BB188_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB188_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB188_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_72
.LBB188_75:                             # %for.end226
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_76
.LBB188_76:                             # %if.end227
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_77
.LBB188_77:                             # %if.end228
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB188_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB188_82
.LBB188_79:                             # %if.else233
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB188_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB188_81:                             # %if.end239
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_82
.LBB188_82:                             # %if.end240
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_124
.LBB188_83:                             # %sw.bb241
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB188_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB188_85:                             # %for.cond245
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_37 Depth=2
                                        #       Parent Loop BB188_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB188_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB188_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_85
.LBB188_88:                             # %for.end264
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_96
.LBB188_89:                             # %if.else265
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB188_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB188_91:                             # %for.cond268
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_37 Depth=2
                                        #       Parent Loop BB188_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB188_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB188_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_91
.LBB188_94:                             # %for.end284
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_95
.LBB188_95:                             # %if.end285
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_96
.LBB188_96:                             # %if.end286
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB188_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB188_101
.LBB188_98:                             # %if.else292
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB188_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB188_100:                            # %if.end297
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_101
.LBB188_101:                            # %if.end298
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_124
.LBB188_102:                            # %sw.bb299
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB188_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB188_104:                            # %for.cond302
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_37 Depth=2
                                        #       Parent Loop BB188_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB188_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB188_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_104
.LBB188_107:                            # %for.end318
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_108
.LBB188_108:                            # %if.end319
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB188_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB188_110:                            # %for.cond323
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_37 Depth=2
                                        #       Parent Loop BB188_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB188_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB188_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_110
.LBB188_113:                            # %for.end342
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_114
.LBB188_114:                            # %if.end343
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB188_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB188_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB188_123
.LBB188_117:                            # %if.else352
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB188_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB188_122
.LBB188_119:                            # %if.else357
                                        #   in Loop: Header=BB188_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB188_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB188_121:                            # %if.end363
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_122
.LBB188_122:                            # %if.end364
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_123
.LBB188_123:                            # %if.end365
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_124
.LBB188_124:                            # %sw.epilog
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB188_125:                            # %for.cond366
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_37 Depth=2
                                        #       Parent Loop BB188_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB188_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB188_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB188_127:                            # %for.cond371
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_37 Depth=2
                                        #       Parent Loop BB188_39 Depth=3
                                        #         Parent Loop BB188_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB188_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB188_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_127
.LBB188_130:                            # %for.end386
                                        #   in Loop: Header=BB188_125 Depth=4
	jmp	.LBB188_131
.LBB188_131:                            # %for.inc387
                                        #   in Loop: Header=BB188_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_125
.LBB188_132:                            # %for.end389
                                        #   in Loop: Header=BB188_39 Depth=3
	jmp	.LBB188_133
.LBB188_133:                            # %for.inc390
                                        #   in Loop: Header=BB188_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB188_39
.LBB188_134:                            # %for.end392
                                        #   in Loop: Header=BB188_37 Depth=2
	jmp	.LBB188_135
.LBB188_135:                            # %for.inc393
                                        #   in Loop: Header=BB188_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB188_37
.LBB188_136:                            # %for.end395
                                        #   in Loop: Header=BB188_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB188_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB188_35 Depth=1
	movl	$0, -4(%rbp)
.LBB188_138:                            # %for.cond398
                                        #   Parent Loop BB188_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB188_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB188_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB188_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_138
.LBB188_141:                            # %for.end414
                                        #   in Loop: Header=BB188_35 Depth=1
	movl	$0, -4(%rbp)
.LBB188_142:                            # %for.cond415
                                        #   Parent Loop BB188_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB188_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB188_142 Depth=2
	movl	$0, -8(%rbp)
.LBB188_144:                            # %for.cond419
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB188_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB188_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB188_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_144
.LBB188_147:                            # %for.end436
                                        #   in Loop: Header=BB188_142 Depth=2
	jmp	.LBB188_148
.LBB188_148:                            # %for.inc437
                                        #   in Loop: Header=BB188_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_142
.LBB188_149:                            # %for.end439
                                        #   in Loop: Header=BB188_35 Depth=1
	jmp	.LBB188_150
.LBB188_150:                            # %if.end440
                                        #   in Loop: Header=BB188_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB188_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB188_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB188_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB188_35 Depth=1
	movl	$0, -4(%rbp)
.LBB188_153:                            # %for.cond447
                                        #   Parent Loop BB188_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB188_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB188_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB188_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_153
.LBB188_156:                            # %for.end468
                                        #   in Loop: Header=BB188_35 Depth=1
	movl	$0, -4(%rbp)
.LBB188_157:                            # %for.cond469
                                        #   Parent Loop BB188_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB188_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB188_157 Depth=2
	movl	$0, -8(%rbp)
.LBB188_159:                            # %for.cond473
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB188_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB188_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB188_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_159
.LBB188_162:                            # %for.end490
                                        #   in Loop: Header=BB188_157 Depth=2
	jmp	.LBB188_163
.LBB188_163:                            # %for.inc491
                                        #   in Loop: Header=BB188_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_157
.LBB188_164:                            # %for.end493
                                        #   in Loop: Header=BB188_35 Depth=1
	jmp	.LBB188_165
.LBB188_165:                            # %if.end494
                                        #   in Loop: Header=BB188_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB188_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB188_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB188_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB188_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB188_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB188_35 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB188_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB188_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB188_170:                            # %for.cond519
                                        #   Parent Loop BB188_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB188_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB188_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB188_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_170
.LBB188_173:                            # %for.end540
                                        #   in Loop: Header=BB188_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB188_174:                            # %for.cond556
                                        #   Parent Loop BB188_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB188_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB188_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB188_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_174
.LBB188_177:                            # %for.end577
                                        #   in Loop: Header=BB188_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -8(%rbp)
.LBB188_178:                            # %for.cond606
                                        #   Parent Loop BB188_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB188_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB188_178 Depth=2
	movl	$0, -4(%rbp)
.LBB188_180:                            # %for.cond610
                                        #   Parent Loop BB188_35 Depth=1
                                        #     Parent Loop BB188_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB188_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB188_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB188_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB188_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB188_184
.LBB188_183:                            # %cond.false630
                                        #   in Loop: Header=BB188_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB188_184:                            # %cond.end643
                                        #   in Loop: Header=BB188_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB188_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB188_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB188_190
.LBB188_186:                            # %cond.false648
                                        #   in Loop: Header=BB188_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB188_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB188_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB188_189
.LBB188_188:                            # %cond.false666
                                        #   in Loop: Header=BB188_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB188_189:                            # %cond.end679
                                        #   in Loop: Header=BB188_180 Depth=3
.LBB188_190:                            # %cond.end681
                                        #   in Loop: Header=BB188_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB188_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_180
.LBB188_192:                            # %for.end694
                                        #   in Loop: Header=BB188_178 Depth=2
	jmp	.LBB188_193
.LBB188_193:                            # %for.inc695
                                        #   in Loop: Header=BB188_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_178
.LBB188_194:                            # %for.end697
                                        #   in Loop: Header=BB188_35 Depth=1
	jmp	.LBB188_195
.LBB188_195:                            # %if.end698
                                        #   in Loop: Header=BB188_35 Depth=1
	jmp	.LBB188_196
.LBB188_196:                            # %for.inc699
                                        #   in Loop: Header=BB188_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB188_35
.LBB188_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB188_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB188_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB188_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB188_199 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB188_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_199
.LBB188_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB188_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_219 Depth 2
                                        #       Child Loop BB188_221 Depth 3
                                        #         Child Loop BB188_223 Depth 4
                                        #           Child Loop BB188_225 Depth 5
                                        #             Child Loop BB188_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB188_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB188_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB188_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB188_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB188_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB188_203 Depth=1
	jmp	.LBB188_241
.LBB188_207:                            # %if.end723
                                        #   in Loop: Header=BB188_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB188_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB188_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB188_217
.LBB188_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB188_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB188_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB188_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB188_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB188_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB188_217
.LBB188_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB188_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB188_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB188_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB188_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB188_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB188_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB188_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB188_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB188_203 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB188_218
.LBB188_217:                            # %if.then749
                                        #   in Loop: Header=BB188_203 Depth=1
	jmp	.LBB188_241
.LBB188_218:                            # %if.end750
                                        #   in Loop: Header=BB188_203 Depth=1
	movl	$0, -96(%rbp)
	movl	$0, -24(%rbp)
.LBB188_219:                            # %for.cond751
                                        #   Parent Loop BB188_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB188_221 Depth 3
                                        #         Child Loop BB188_223 Depth 4
                                        #           Child Loop BB188_225 Depth 5
                                        #             Child Loop BB188_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB188_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB188_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB188_221:                            # %for.cond757
                                        #   Parent Loop BB188_203 Depth=1
                                        #     Parent Loop BB188_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB188_223 Depth 4
                                        #           Child Loop BB188_225 Depth 5
                                        #             Child Loop BB188_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB188_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB188_221 Depth=3
	movl	$0, -44(%rbp)
.LBB188_223:                            # %for.cond761
                                        #   Parent Loop BB188_203 Depth=1
                                        #     Parent Loop BB188_219 Depth=2
                                        #       Parent Loop BB188_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB188_225 Depth 5
                                        #             Child Loop BB188_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB188_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB188_223 Depth=4
	movl	$0, -120(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB188_225:                            # %for.cond765
                                        #   Parent Loop BB188_203 Depth=1
                                        #     Parent Loop BB188_219 Depth=2
                                        #       Parent Loop BB188_221 Depth=3
                                        #         Parent Loop BB188_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB188_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB188_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB188_227:                            # %for.cond770
                                        #   Parent Loop BB188_203 Depth=1
                                        #     Parent Loop BB188_219 Depth=2
                                        #       Parent Loop BB188_221 Depth=3
                                        #         Parent Loop BB188_223 Depth=4
                                        #           Parent Loop BB188_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB188_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB188_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-120(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB188_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-120(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -120(%rbp)
	jmp	.LBB188_227
.LBB188_230:                            # %for.end803
                                        #   in Loop: Header=BB188_225 Depth=5
	jmp	.LBB188_231
.LBB188_231:                            # %for.inc804
                                        #   in Loop: Header=BB188_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_225
.LBB188_232:                            # %for.end806
                                        #   in Loop: Header=BB188_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-96(%rbp), %eax
	movl	%eax, -96(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB188_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB188_223
.LBB188_234:                            # %for.end810
                                        #   in Loop: Header=BB188_221 Depth=3
	jmp	.LBB188_235
.LBB188_235:                            # %for.inc811
                                        #   in Loop: Header=BB188_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB188_221
.LBB188_236:                            # %for.end813
                                        #   in Loop: Header=BB188_219 Depth=2
	jmp	.LBB188_237
.LBB188_237:                            # %for.inc814
                                        #   in Loop: Header=BB188_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB188_219
.LBB188_238:                            # %for.end816
                                        #   in Loop: Header=BB188_203 Depth=1
	movl	-96(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB188_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB188_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-96(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB188_240:                            # %if.end820
                                        #   in Loop: Header=BB188_203 Depth=1
	jmp	.LBB188_241
.LBB188_241:                            # %for.inc821
                                        #   in Loop: Header=BB188_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB188_203
.LBB188_242:                            # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB188_243:                            # %if.end824
	cmpl	$1463266422, -164(%rbp) # imm = 0x5737AC76
	jne	.LBB188_245
.LBB188_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_244
.Lfunc_end188:
	.size	IntraChromaPrediction.147, .Lfunc_end188-IntraChromaPrediction.147
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI188_0:
	.quad	.LBB188_42
	.quad	.LBB188_64
	.quad	.LBB188_83
	.quad	.LBB188_102
                                        # -- End function
	.text
	.globl	find_sad_16x16.148      # -- Begin function find_sad_16x16.148
	.p2align	4, 0x90
	.type	find_sad_16x16.148,@function
find_sad_16x16.148:                     # @find_sad_16x16.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$348136162, -80(%rbp)   # imm = 0x14C022E2
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB189_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB189_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB189_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB189_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_1
.LBB189_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB189_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB189_20
.LBB189_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB189_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB189_9
.LBB189_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB189_9
.LBB189_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB189_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB189_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB189_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB189_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB189_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB189_14
.LBB189_13:                             # %cond.false23
                                        #   in Loop: Header=BB189_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB189_14
.LBB189_14:                             # %cond.end24
                                        #   in Loop: Header=BB189_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB189_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_10
.LBB189_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB189_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB189_19
.LBB189_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB189_19
.LBB189_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB189_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB189_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB189_42 Depth 2
                                        #       Child Loop BB189_44 Depth 3
                                        #     Child Loop BB189_50 Depth 2
                                        #       Child Loop BB189_52 Depth 3
                                        #         Child Loop BB189_54 Depth 4
                                        #         Child Loop BB189_58 Depth 4
                                        #           Child Loop BB189_60 Depth 5
                                        #     Child Loop BB189_72 Depth 2
                                        #       Child Loop BB189_74 Depth 3
                                        #     Child Loop BB189_80 Depth 2
                                        #     Child Loop BB189_84 Depth 2
                                        #       Child Loop BB189_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB189_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB189_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB189_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB189_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB189_32
.LBB189_24:                             # %if.then46
                                        #   in Loop: Header=BB189_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB189_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB189_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB189_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB189_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB189_28
.LBB189_27:                             # %if.then51
                                        #   in Loop: Header=BB189_21 Depth=1
	jmp	.LBB189_95
.LBB189_28:                             # %if.end52
                                        #   in Loop: Header=BB189_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB189_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB189_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB189_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB189_21 Depth=1
	jmp	.LBB189_95
.LBB189_31:                             # %if.end57
                                        #   in Loop: Header=BB189_21 Depth=1
	jmp	.LBB189_32
.LBB189_32:                             # %if.end58
                                        #   in Loop: Header=BB189_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB189_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB189_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB189_40
.LBB189_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB189_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB189_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB189_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB189_40
.LBB189_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB189_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB189_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB189_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB189_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB189_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB189_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB189_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB189_41
.LBB189_40:                             # %if.then74
                                        #   in Loop: Header=BB189_21 Depth=1
	jmp	.LBB189_94
.LBB189_41:                             # %if.else75
                                        #   in Loop: Header=BB189_21 Depth=1
	movl	$0, -16(%rbp)
.LBB189_42:                             # %for.cond76
                                        #   Parent Loop BB189_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB189_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB189_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB189_42 Depth=2
	movl	$0, -12(%rbp)
.LBB189_44:                             # %for.cond79
                                        #   Parent Loop BB189_21 Depth=1
                                        #     Parent Loop BB189_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB189_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB189_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB189_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_44
.LBB189_47:                             # %for.end115
                                        #   in Loop: Header=BB189_42 Depth=2
	jmp	.LBB189_48
.LBB189_48:                             # %for.inc116
                                        #   in Loop: Header=BB189_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB189_42
.LBB189_49:                             # %for.end118
                                        #   in Loop: Header=BB189_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB189_50:                             # %for.cond119
                                        #   Parent Loop BB189_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB189_52 Depth 3
                                        #         Child Loop BB189_54 Depth 4
                                        #         Child Loop BB189_58 Depth 4
                                        #           Child Loop BB189_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB189_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB189_50 Depth=2
	movl	$0, -24(%rbp)
.LBB189_52:                             # %for.cond123
                                        #   Parent Loop BB189_21 Depth=1
                                        #     Parent Loop BB189_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB189_54 Depth 4
                                        #         Child Loop BB189_58 Depth 4
                                        #           Child Loop BB189_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB189_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB189_52 Depth=3
	movl	$0, -16(%rbp)
.LBB189_54:                             # %for.cond127
                                        #   Parent Loop BB189_21 Depth=1
                                        #     Parent Loop BB189_50 Depth=2
                                        #       Parent Loop BB189_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB189_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB189_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB189_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB189_54
.LBB189_57:                             # %for.end237
                                        #   in Loop: Header=BB189_52 Depth=3
	movl	$0, -12(%rbp)
.LBB189_58:                             # %for.cond238
                                        #   Parent Loop BB189_21 Depth=1
                                        #     Parent Loop BB189_50 Depth=2
                                        #       Parent Loop BB189_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB189_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB189_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB189_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB189_60:                             # %for.cond346
                                        #   Parent Loop BB189_21 Depth=1
                                        #     Parent Loop BB189_50 Depth=2
                                        #       Parent Loop BB189_52 Depth=3
                                        #         Parent Loop BB189_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB189_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB189_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB189_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB189_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB189_63:                             # %if.end363
                                        #   in Loop: Header=BB189_60 Depth=5
	jmp	.LBB189_64
.LBB189_64:                             # %for.inc364
                                        #   in Loop: Header=BB189_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB189_60
.LBB189_65:                             # %for.end366
                                        #   in Loop: Header=BB189_58 Depth=4
	jmp	.LBB189_66
.LBB189_66:                             # %for.inc367
                                        #   in Loop: Header=BB189_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_58
.LBB189_67:                             # %for.end369
                                        #   in Loop: Header=BB189_52 Depth=3
	jmp	.LBB189_68
.LBB189_68:                             # %for.inc370
                                        #   in Loop: Header=BB189_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB189_52
.LBB189_69:                             # %for.end372
                                        #   in Loop: Header=BB189_50 Depth=2
	jmp	.LBB189_70
.LBB189_70:                             # %for.inc373
                                        #   in Loop: Header=BB189_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB189_50
.LBB189_71:                             # %for.end375
                                        #   in Loop: Header=BB189_21 Depth=1
	movl	$0, -16(%rbp)
.LBB189_72:                             # %for.cond376
                                        #   Parent Loop BB189_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB189_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB189_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB189_72 Depth=2
	movl	$0, -12(%rbp)
.LBB189_74:                             # %for.cond380
                                        #   Parent Loop BB189_21 Depth=1
                                        #     Parent Loop BB189_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB189_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB189_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB189_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_74
.LBB189_77:                             # %for.end397
                                        #   in Loop: Header=BB189_72 Depth=2
	jmp	.LBB189_78
.LBB189_78:                             # %for.inc398
                                        #   in Loop: Header=BB189_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB189_72
.LBB189_79:                             # %for.end400
                                        #   in Loop: Header=BB189_21 Depth=1
	movl	$0, -16(%rbp)
.LBB189_80:                             # %for.cond401
                                        #   Parent Loop BB189_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB189_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB189_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB189_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB189_80
.LBB189_83:                             # %for.end463
                                        #   in Loop: Header=BB189_21 Depth=1
	movl	$0, -12(%rbp)
.LBB189_84:                             # %for.cond464
                                        #   Parent Loop BB189_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB189_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB189_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB189_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB189_86:                             # %for.cond524
                                        #   Parent Loop BB189_21 Depth=1
                                        #     Parent Loop BB189_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB189_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB189_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB189_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB189_86
.LBB189_89:                             # %for.end536
                                        #   in Loop: Header=BB189_84 Depth=2
	jmp	.LBB189_90
.LBB189_90:                             # %for.inc537
                                        #   in Loop: Header=BB189_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB189_84
.LBB189_91:                             # %for.end539
                                        #   in Loop: Header=BB189_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB189_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB189_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB189_93:                             # %if.end543
                                        #   in Loop: Header=BB189_21 Depth=1
	jmp	.LBB189_94
.LBB189_94:                             # %if.end544
                                        #   in Loop: Header=BB189_21 Depth=1
	jmp	.LBB189_95
.LBB189_95:                             # %for.inc545
                                        #   in Loop: Header=BB189_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB189_21
.LBB189_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$348136162, -80(%rbp)   # imm = 0x14C022E2
	jne	.LBB189_98
.LBB189_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_97
.Lfunc_end189:
	.size	find_sad_16x16.148, .Lfunc_end189-find_sad_16x16.148
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.149 # -- Begin function LumaPrediction4x4Bi.149
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.149,@function
LumaPrediction4x4Bi.149:                # @LumaPrediction4x4Bi.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1558448831, -76(%rbp)  # imm = 0x5CE40ABF
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -80(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB190_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB190_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB190_6
.LBB190_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB190_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB190_5:                              # %land.end
.LBB190_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB190_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB190_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB190_10
.LBB190_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB190_10
.LBB190_10:                             # %cond.end
	movl	%ecx, -64(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB190_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB190_13
.LBB190_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB190_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB190_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB190_16
.LBB190_15:                             # %if.then
	movl	-56(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-80(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB190_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB190_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB190_19
.LBB190_18:                             # %if.then39
	movl	-56(%rbp), %esi
	movl	-52(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB190_19:                             # %if.end52
	cmpl	$0, -84(%rbp)
	je	.LBB190_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB190_30
# %bb.21:                               # %if.then56
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB190_22 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_24:                             # %for.cond58
                                        #   Parent Loop BB190_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB190_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB190_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_24
.LBB190_27:                             # %for.end
                                        #   in Loop: Header=BB190_22 Depth=1
	jmp	.LBB190_28
.LBB190_28:                             # %for.inc96
                                        #   in Loop: Header=BB190_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_22
.LBB190_29:                             # %for.end98
	jmp	.LBB190_50
.LBB190_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB190_40
# %bb.31:                               # %if.then101
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB190_32 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_34:                             # %for.cond106
                                        #   Parent Loop BB190_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB190_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB190_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_34
.LBB190_37:                             # %for.end132
                                        #   in Loop: Header=BB190_32 Depth=1
	jmp	.LBB190_38
.LBB190_38:                             # %for.inc133
                                        #   in Loop: Header=BB190_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_32
.LBB190_39:                             # %for.end135
	jmp	.LBB190_49
.LBB190_40:                             # %if.else136
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB190_41 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_43:                             # %for.cond141
                                        #   Parent Loop BB190_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB190_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB190_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_43
.LBB190_46:                             # %for.end167
                                        #   in Loop: Header=BB190_41 Depth=1
	jmp	.LBB190_47
.LBB190_47:                             # %for.inc168
                                        #   in Loop: Header=BB190_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_41
.LBB190_48:                             # %for.end170
	jmp	.LBB190_49
.LBB190_49:                             # %if.end171
	jmp	.LBB190_50
.LBB190_50:                             # %if.end172
	jmp	.LBB190_82
.LBB190_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB190_61
# %bb.52:                               # %if.then176
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB190_53 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_55:                             # %for.cond181
                                        #   Parent Loop BB190_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB190_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB190_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_55
.LBB190_58:                             # %for.end197
                                        #   in Loop: Header=BB190_53 Depth=1
	jmp	.LBB190_59
.LBB190_59:                             # %for.inc198
                                        #   in Loop: Header=BB190_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_53
.LBB190_60:                             # %for.end200
	jmp	.LBB190_81
.LBB190_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB190_71
# %bb.62:                               # %if.then204
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB190_63 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_65:                             # %for.cond209
                                        #   Parent Loop BB190_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB190_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB190_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_65
.LBB190_68:                             # %for.end222
                                        #   in Loop: Header=BB190_63 Depth=1
	jmp	.LBB190_69
.LBB190_69:                             # %for.inc223
                                        #   in Loop: Header=BB190_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_63
.LBB190_70:                             # %for.end225
	jmp	.LBB190_80
.LBB190_71:                             # %if.else226
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB190_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB190_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB190_72 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB190_74:                             # %for.cond231
                                        #   Parent Loop BB190_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB190_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB190_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB190_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_74
.LBB190_77:                             # %for.end244
                                        #   in Loop: Header=BB190_72 Depth=1
	jmp	.LBB190_78
.LBB190_78:                             # %for.inc245
                                        #   in Loop: Header=BB190_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_72
.LBB190_79:                             # %for.end247
	jmp	.LBB190_80
.LBB190_80:                             # %if.end248
	jmp	.LBB190_81
.LBB190_81:                             # %if.end249
	jmp	.LBB190_82
.LBB190_82:                             # %if.end250
	cmpl	$1558448831, -76(%rbp)  # imm = 0x5CE40ABF
	jne	.LBB190_84
.LBB190_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_83
.Lfunc_end190:
	.size	LumaPrediction4x4Bi.149, .Lfunc_end190-LumaPrediction4x4Bi.149
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.150             # -- Begin function ZeroRef.150
	.p2align	4, 0x90
	.type	ZeroRef.150,@function
ZeroRef.150:                            # @ZeroRef.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$899730327, -24(%rbp)   # imm = 0x35A0CB97
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB191_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB191_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB191_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB191_1 Depth=1
	movl	$0, -16(%rbp)
.LBB191_3:                              # %for.cond1
                                        #   Parent Loop BB191_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB191_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB191_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB191_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB191_11
.LBB191_6:                              # %if.end
                                        #   in Loop: Header=BB191_3 Depth=2
	jmp	.LBB191_7
.LBB191_7:                              # %for.inc
                                        #   in Loop: Header=BB191_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB191_3
.LBB191_8:                              # %for.end
                                        #   in Loop: Header=BB191_1 Depth=1
	jmp	.LBB191_9
.LBB191_9:                              # %for.inc10
                                        #   in Loop: Header=BB191_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB191_1
.LBB191_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB191_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$899730327, -24(%rbp)   # imm = 0x35A0CB97
	jne	.LBB191_13
.LBB191_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_12
.Lfunc_end191:
	.size	ZeroRef.150, .Lfunc_end191-ZeroRef.150
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.151 # -- Begin function OneComponentChromaPrediction4x4.151
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.151,@function
OneComponentChromaPrediction4x4.151:    # @OneComponentChromaPrediction4x4.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$530612904, -112(%rbp)  # imm = 0x1FA082A8
	movq	%rdi, -144(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -64(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB192_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB192_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB192_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB192_5
# %bb.4:                                # %if.then7
	movl	$4, -48(%rbp)
	jmp	.LBB192_6
.LBB192_5:                              # %if.else
	movl	$2, -48(%rbp)
.LBB192_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB192_8
.LBB192_7:                              # %if.else10
	movl	$0, -48(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB192_8:                              # %if.end13
	movl	-76(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB192_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB192_11 Depth 2
	cmpl	$4, -28(%rbp)
	jge	.LBB192_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB192_9 Depth=1
	movl	$0, -40(%rbp)
.LBB192_11:                             # %for.cond20
                                        #   Parent Loop BB192_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -40(%rbp)
	jge	.LBB192_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-40(%rbp), %ecx
	addl	-92(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-28(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-40(%rbp), %eax
	addl	-92(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB192_15
.LBB192_14:                             # %cond.false
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB192_15:                             # %cond.end
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB192_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB192_21
.LBB192_17:                             # %cond.false65
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB192_20
.LBB192_19:                             # %cond.false74
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB192_20:                             # %cond.end76
                                        #   in Loop: Header=BB192_11 Depth=2
.LBB192_21:                             # %cond.end78
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB192_24
.LBB192_23:                             # %cond.false84
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB192_24:                             # %cond.end86
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB192_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB192_30
.LBB192_26:                             # %cond.false91
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB192_29
.LBB192_28:                             # %cond.false96
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB192_29:                             # %cond.end98
                                        #   in Loop: Header=BB192_11 Depth=2
.LBB192_30:                             # %cond.end100
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB192_33
.LBB192_32:                             # %cond.false111
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB192_33:                             # %cond.end114
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB192_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB192_39
.LBB192_35:                             # %cond.false119
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB192_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB192_38
.LBB192_37:                             # %cond.false129
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB192_38:                             # %cond.end132
                                        #   in Loop: Header=BB192_11 Depth=2
.LBB192_39:                             # %cond.end134
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB192_42
.LBB192_41:                             # %cond.false141
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB192_42:                             # %cond.end144
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB192_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB192_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB192_48
.LBB192_44:                             # %cond.false149
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB192_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB192_47
.LBB192_46:                             # %cond.false155
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB192_47:                             # %cond.end158
                                        #   in Loop: Header=BB192_11 Depth=2
.LBB192_48:                             # %cond.end160
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-68(%rbp), %eax
	imull	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-84(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-60(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-68(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-56(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB192_11 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB192_11
.LBB192_50:                             # %for.end
                                        #   in Loop: Header=BB192_9 Depth=1
	jmp	.LBB192_51
.LBB192_51:                             # %for.inc198
                                        #   in Loop: Header=BB192_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB192_9
.LBB192_52:                             # %for.end200
	cmpl	$530612904, -112(%rbp)  # imm = 0x1FA082A8
	jne	.LBB192_54
.LBB192_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_53
.Lfunc_end192:
	.size	OneComponentChromaPrediction4x4.151, .Lfunc_end192-OneComponentChromaPrediction4x4.151
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.152 # -- Begin function IntraChromaPrediction.152
	.p2align	4, 0x90
	.type	IntraChromaPrediction.152,@function
IntraChromaPrediction.152:              # @IntraChromaPrediction.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$416536932, -164(%rbp)  # imm = 0x18D3D964
	movq	%rdi, -184(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -192(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -128(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -120(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB193_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB193_1 Depth=1
	movl	-128(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB193_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_1
.LBB193_4:                              # %for.end
	movl	-128(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB193_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB193_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB193_8
.LBB193_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB193_8
.LBB193_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB193_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB193_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB193_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB193_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB193_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB193_13
.LBB193_12:                             # %cond.false32
                                        #   in Loop: Header=BB193_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB193_13
.LBB193_13:                             # %cond.end33
                                        #   in Loop: Header=BB193_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB193_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_9
.LBB193_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB193_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB193_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB193_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB193_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB193_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB193_20
.LBB193_19:                             # %cond.false57
                                        #   in Loop: Header=BB193_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB193_20
.LBB193_20:                             # %cond.end58
                                        #   in Loop: Header=BB193_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB193_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_16
.LBB193_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB193_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB193_25
.LBB193_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB193_25
.LBB193_25:                             # %cond.end75
	movl	%eax, -100(%rbp)
.LBB193_26:                             # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB193_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB193_28:                             # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB193_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB193_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB193_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB193_32:                             # %if.end86
	cmpq	$0, -192(%rbp)
	je	.LBB193_34
# %bb.33:                               # %if.then88
	movl	-100(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB193_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB193_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_37 Depth 2
                                        #       Child Loop BB193_39 Depth 3
                                        #         Child Loop BB193_104 Depth 4
                                        #         Child Loop BB193_110 Depth 4
                                        #         Child Loop BB193_85 Depth 4
                                        #         Child Loop BB193_91 Depth 4
                                        #         Child Loop BB193_66 Depth 4
                                        #         Child Loop BB193_72 Depth 4
                                        #         Child Loop BB193_44 Depth 4
                                        #         Child Loop BB193_50 Depth 4
                                        #         Child Loop BB193_125 Depth 4
                                        #           Child Loop BB193_127 Depth 5
                                        #     Child Loop BB193_138 Depth 2
                                        #     Child Loop BB193_142 Depth 2
                                        #       Child Loop BB193_144 Depth 3
                                        #     Child Loop BB193_153 Depth 2
                                        #     Child Loop BB193_157 Depth 2
                                        #       Child Loop BB193_159 Depth 3
                                        #     Child Loop BB193_170 Depth 2
                                        #     Child Loop BB193_174 Depth 2
                                        #     Child Loop BB193_178 Depth 2
                                        #       Child Loop BB193_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB193_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB193_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB193_37:                             # %for.cond95
                                        #   Parent Loop BB193_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB193_39 Depth 3
                                        #         Child Loop BB193_104 Depth 4
                                        #         Child Loop BB193_110 Depth 4
                                        #         Child Loop BB193_85 Depth 4
                                        #         Child Loop BB193_91 Depth 4
                                        #         Child Loop BB193_66 Depth 4
                                        #         Child Loop BB193_72 Depth 4
                                        #         Child Loop BB193_44 Depth 4
                                        #         Child Loop BB193_50 Depth 4
                                        #         Child Loop BB193_125 Depth 4
                                        #           Child Loop BB193_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB193_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB193_37 Depth=2
	movl	$0, -84(%rbp)
.LBB193_39:                             # %for.cond99
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB193_104 Depth 4
                                        #         Child Loop BB193_110 Depth 4
                                        #         Child Loop BB193_85 Depth 4
                                        #         Child Loop BB193_91 Depth 4
                                        #         Child Loop BB193_66 Depth 4
                                        #         Child Loop BB193_72 Depth 4
                                        #         Child Loop BB193_44 Depth 4
                                        #         Child Loop BB193_50 Depth 4
                                        #         Child Loop BB193_125 Depth 4
                                        #           Child Loop BB193_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB193_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB193_39 Depth=3
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -72(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB193_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB193_39 Depth=3
	movq	.LJTI193_0(,%rax,8), %rax
	jmpq	*%rax
.LBB193_42:                             # %sw.bb
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB193_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_44:                             # %for.cond124
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_37 Depth=2
                                        #       Parent Loop BB193_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB193_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB193_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_44
.LBB193_47:                             # %for.end138
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_48
.LBB193_48:                             # %if.end139
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB193_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_50:                             # %for.cond143
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_37 Depth=2
                                        #       Parent Loop BB193_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB193_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB193_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_50
.LBB193_53:                             # %for.end162
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_54
.LBB193_54:                             # %if.end163
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB193_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB193_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB193_63
.LBB193_57:                             # %if.else
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB193_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB193_62
.LBB193_59:                             # %if.else174
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB193_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB193_61:                             # %if.end180
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_62
.LBB193_62:                             # %if.end181
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_63
.LBB193_63:                             # %if.end182
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_124
.LBB193_64:                             # %sw.bb183
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB193_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_66:                             # %for.cond186
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_37 Depth=2
                                        #       Parent Loop BB193_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB193_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB193_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_66
.LBB193_69:                             # %for.end202
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_77
.LBB193_70:                             # %if.else203
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB193_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_72:                             # %for.cond207
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_37 Depth=2
                                        #       Parent Loop BB193_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB193_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB193_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_72
.LBB193_75:                             # %for.end226
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_76
.LBB193_76:                             # %if.end227
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_77
.LBB193_77:                             # %if.end228
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB193_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB193_82
.LBB193_79:                             # %if.else233
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB193_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB193_81:                             # %if.end239
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_82
.LBB193_82:                             # %if.end240
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_124
.LBB193_83:                             # %sw.bb241
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB193_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_85:                             # %for.cond245
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_37 Depth=2
                                        #       Parent Loop BB193_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB193_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB193_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_85
.LBB193_88:                             # %for.end264
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_96
.LBB193_89:                             # %if.else265
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB193_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_91:                             # %for.cond268
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_37 Depth=2
                                        #       Parent Loop BB193_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB193_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB193_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_91
.LBB193_94:                             # %for.end284
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_95
.LBB193_95:                             # %if.end285
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_96
.LBB193_96:                             # %if.end286
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB193_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB193_101
.LBB193_98:                             # %if.else292
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB193_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB193_100:                            # %if.end297
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_101
.LBB193_101:                            # %if.end298
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_124
.LBB193_102:                            # %sw.bb299
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB193_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_104:                            # %for.cond302
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_37 Depth=2
                                        #       Parent Loop BB193_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB193_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB193_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_104
.LBB193_107:                            # %for.end318
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_108
.LBB193_108:                            # %if.end319
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB193_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_110:                            # %for.cond323
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_37 Depth=2
                                        #       Parent Loop BB193_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB193_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB193_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_110
.LBB193_113:                            # %for.end342
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_114
.LBB193_114:                            # %if.end343
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB193_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB193_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB193_123
.LBB193_117:                            # %if.else352
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB193_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB193_122
.LBB193_119:                            # %if.else357
                                        #   in Loop: Header=BB193_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB193_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB193_121:                            # %if.end363
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_122
.LBB193_122:                            # %if.end364
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_123
.LBB193_123:                            # %if.end365
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_124
.LBB193_124:                            # %sw.epilog
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB193_125:                            # %for.cond366
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_37 Depth=2
                                        #       Parent Loop BB193_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB193_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB193_125 Depth=4
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_127:                            # %for.cond371
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_37 Depth=2
                                        #       Parent Loop BB193_39 Depth=3
                                        #         Parent Loop BB193_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB193_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB193_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_127
.LBB193_130:                            # %for.end386
                                        #   in Loop: Header=BB193_125 Depth=4
	jmp	.LBB193_131
.LBB193_131:                            # %for.inc387
                                        #   in Loop: Header=BB193_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB193_125
.LBB193_132:                            # %for.end389
                                        #   in Loop: Header=BB193_39 Depth=3
	jmp	.LBB193_133
.LBB193_133:                            # %for.inc390
                                        #   in Loop: Header=BB193_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB193_39
.LBB193_134:                            # %for.end392
                                        #   in Loop: Header=BB193_37 Depth=2
	jmp	.LBB193_135
.LBB193_135:                            # %for.inc393
                                        #   in Loop: Header=BB193_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB193_37
.LBB193_136:                            # %for.end395
                                        #   in Loop: Header=BB193_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB193_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB193_35 Depth=1
	movl	$0, -4(%rbp)
.LBB193_138:                            # %for.cond398
                                        #   Parent Loop BB193_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB193_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB193_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB193_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_138
.LBB193_141:                            # %for.end414
                                        #   in Loop: Header=BB193_35 Depth=1
	movl	$0, -4(%rbp)
.LBB193_142:                            # %for.cond415
                                        #   Parent Loop BB193_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB193_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB193_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB193_142 Depth=2
	movl	$0, -8(%rbp)
.LBB193_144:                            # %for.cond419
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB193_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB193_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB193_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB193_144
.LBB193_147:                            # %for.end436
                                        #   in Loop: Header=BB193_142 Depth=2
	jmp	.LBB193_148
.LBB193_148:                            # %for.inc437
                                        #   in Loop: Header=BB193_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_142
.LBB193_149:                            # %for.end439
                                        #   in Loop: Header=BB193_35 Depth=1
	jmp	.LBB193_150
.LBB193_150:                            # %if.end440
                                        #   in Loop: Header=BB193_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB193_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB193_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB193_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB193_35 Depth=1
	movl	$0, -4(%rbp)
.LBB193_153:                            # %for.cond447
                                        #   Parent Loop BB193_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB193_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB193_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB193_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_153
.LBB193_156:                            # %for.end468
                                        #   in Loop: Header=BB193_35 Depth=1
	movl	$0, -4(%rbp)
.LBB193_157:                            # %for.cond469
                                        #   Parent Loop BB193_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB193_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB193_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB193_157 Depth=2
	movl	$0, -8(%rbp)
.LBB193_159:                            # %for.cond473
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB193_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB193_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB193_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB193_159
.LBB193_162:                            # %for.end490
                                        #   in Loop: Header=BB193_157 Depth=2
	jmp	.LBB193_163
.LBB193_163:                            # %for.inc491
                                        #   in Loop: Header=BB193_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_157
.LBB193_164:                            # %for.end493
                                        #   in Loop: Header=BB193_35 Depth=1
	jmp	.LBB193_165
.LBB193_165:                            # %if.end494
                                        #   in Loop: Header=BB193_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB193_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB193_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB193_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB193_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB193_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB193_35 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB193_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB193_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB193_170:                            # %for.cond519
                                        #   Parent Loop BB193_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB193_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB193_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB193_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_170
.LBB193_173:                            # %for.end540
                                        #   in Loop: Header=BB193_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB193_174:                            # %for.cond556
                                        #   Parent Loop BB193_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB193_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB193_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB193_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_174
.LBB193_177:                            # %for.end577
                                        #   in Loop: Header=BB193_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB193_178:                            # %for.cond606
                                        #   Parent Loop BB193_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB193_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB193_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB193_178 Depth=2
	movl	$0, -4(%rbp)
.LBB193_180:                            # %for.cond610
                                        #   Parent Loop BB193_35 Depth=1
                                        #     Parent Loop BB193_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB193_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB193_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB193_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB193_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB193_184
.LBB193_183:                            # %cond.false630
                                        #   in Loop: Header=BB193_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB193_184:                            # %cond.end643
                                        #   in Loop: Header=BB193_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB193_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB193_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB193_190
.LBB193_186:                            # %cond.false648
                                        #   in Loop: Header=BB193_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB193_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB193_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB193_189
.LBB193_188:                            # %cond.false666
                                        #   in Loop: Header=BB193_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB193_189:                            # %cond.end679
                                        #   in Loop: Header=BB193_180 Depth=3
.LBB193_190:                            # %cond.end681
                                        #   in Loop: Header=BB193_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB193_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_180
.LBB193_192:                            # %for.end694
                                        #   in Loop: Header=BB193_178 Depth=2
	jmp	.LBB193_193
.LBB193_193:                            # %for.inc695
                                        #   in Loop: Header=BB193_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB193_178
.LBB193_194:                            # %for.end697
                                        #   in Loop: Header=BB193_35 Depth=1
	jmp	.LBB193_195
.LBB193_195:                            # %if.end698
                                        #   in Loop: Header=BB193_35 Depth=1
	jmp	.LBB193_196
.LBB193_196:                            # %for.inc699
                                        #   in Loop: Header=BB193_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB193_35
.LBB193_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB193_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB193_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB193_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB193_199 Depth=1
	movl	-128(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB193_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB193_199
.LBB193_202:                            # %for.end712
	movl	$0, -48(%rbp)
.LBB193_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_219 Depth 2
                                        #       Child Loop BB193_221 Depth 3
                                        #         Child Loop BB193_223 Depth 4
                                        #           Child Loop BB193_225 Depth 5
                                        #             Child Loop BB193_227 Depth 6
	cmpl	$3, -48(%rbp)
	jg	.LBB193_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB193_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB193_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB193_203 Depth=1
	cmpl	$0, -48(%rbp)
	je	.LBB193_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB193_203 Depth=1
	jmp	.LBB193_241
.LBB193_207:                            # %if.end723
                                        #   in Loop: Header=BB193_203 Depth=1
	cmpl	$2, -48(%rbp)
	jne	.LBB193_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB193_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB193_217
.LBB193_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB193_203 Depth=1
	cmpl	$1, -48(%rbp)
	jne	.LBB193_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB193_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB193_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB193_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB193_217
.LBB193_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB193_203 Depth=1
	cmpl	$3, -48(%rbp)
	jne	.LBB193_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB193_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB193_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB193_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB193_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB193_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB193_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB193_203 Depth=1
	cmpl	$0, -100(%rbp)
	jne	.LBB193_218
.LBB193_217:                            # %if.then749
                                        #   in Loop: Header=BB193_203 Depth=1
	jmp	.LBB193_241
.LBB193_218:                            # %if.end750
                                        #   in Loop: Header=BB193_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB193_219:                            # %for.cond751
                                        #   Parent Loop BB193_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB193_221 Depth 3
                                        #         Child Loop BB193_223 Depth 4
                                        #           Child Loop BB193_225 Depth 5
                                        #             Child Loop BB193_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB193_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB193_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB193_221:                            # %for.cond757
                                        #   Parent Loop BB193_203 Depth=1
                                        #     Parent Loop BB193_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB193_223 Depth 4
                                        #           Child Loop BB193_225 Depth 5
                                        #             Child Loop BB193_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB193_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB193_221 Depth=3
	movl	$0, -40(%rbp)
.LBB193_223:                            # %for.cond761
                                        #   Parent Loop BB193_203 Depth=1
                                        #     Parent Loop BB193_219 Depth=2
                                        #       Parent Loop BB193_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB193_225 Depth 5
                                        #             Child Loop BB193_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB193_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB193_223 Depth=4
	movl	$0, -124(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB193_225:                            # %for.cond765
                                        #   Parent Loop BB193_203 Depth=1
                                        #     Parent Loop BB193_219 Depth=2
                                        #       Parent Loop BB193_221 Depth=3
                                        #         Parent Loop BB193_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB193_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB193_225 Depth=5
	movl	-40(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB193_227:                            # %for.cond770
                                        #   Parent Loop BB193_203 Depth=1
                                        #     Parent Loop BB193_219 Depth=2
                                        #       Parent Loop BB193_221 Depth=3
                                        #         Parent Loop BB193_223 Depth=4
                                        #           Parent Loop BB193_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB193_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB193_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-48(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-124(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB193_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB193_227
.LBB193_230:                            # %for.end803
                                        #   in Loop: Header=BB193_225 Depth=5
	jmp	.LBB193_231
.LBB193_231:                            # %for.inc804
                                        #   in Loop: Header=BB193_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB193_225
.LBB193_232:                            # %for.end806
                                        #   in Loop: Header=BB193_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB193_223 Depth=4
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB193_223
.LBB193_234:                            # %for.end810
                                        #   in Loop: Header=BB193_221 Depth=3
	jmp	.LBB193_235
.LBB193_235:                            # %for.inc811
                                        #   in Loop: Header=BB193_221 Depth=3
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB193_221
.LBB193_236:                            # %for.end813
                                        #   in Loop: Header=BB193_219 Depth=2
	jmp	.LBB193_237
.LBB193_237:                            # %for.inc814
                                        #   in Loop: Header=BB193_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB193_219
.LBB193_238:                            # %for.end816
                                        #   in Loop: Header=BB193_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB193_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB193_203 Depth=1
	movl	-48(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB193_240:                            # %if.end820
                                        #   in Loop: Header=BB193_203 Depth=1
	jmp	.LBB193_241
.LBB193_241:                            # %for.inc821
                                        #   in Loop: Header=BB193_203 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB193_203
.LBB193_242:                            # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB193_243:                            # %if.end824
	cmpl	$416536932, -164(%rbp)  # imm = 0x18D3D964
	jne	.LBB193_245
.LBB193_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_244
.Lfunc_end193:
	.size	IntraChromaPrediction.152, .Lfunc_end193-IntraChromaPrediction.152
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI193_0:
	.quad	.LBB193_42
	.quad	.LBB193_64
	.quad	.LBB193_83
	.quad	.LBB193_102
                                        # -- End function
	.text
	.globl	LumaResidualCoding8x8.153 # -- Begin function LumaResidualCoding8x8.153
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.153,@function
LumaResidualCoding8x8.153:              # @LumaResidualCoding8x8.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1579845616, -120(%rbp) # imm = 0x5E2A87F0
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -28(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -76(%rbp)
	movl	%r9d, -80(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -44(%rbp)
	movl	-28(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -84(%rbp)
	movl	$0, -124(%rbp)
	cmpl	$0, -76(%rbp)
	jne	.LBB194_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -80(%rbp)
	jne	.LBB194_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB194_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB194_5
# %bb.4:                                # %if.then
	movl	$1, -124(%rbp)
.LBB194_5:                              # %if.end
	movl	$0, -60(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB194_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_8 Depth 2
                                        #       Child Loop BB194_11 Depth 3
                                        #         Child Loop BB194_13 Depth 4
                                        #       Child Loop BB194_19 Depth 3
                                        #         Child Loop BB194_21 Depth 4
                                        #       Child Loop BB194_29 Depth 3
                                        #         Child Loop BB194_31 Depth 4
                                        #       Child Loop BB194_40 Depth 3
                                        #         Child Loop BB194_42 Depth 4
                                        #       Child Loop BB194_57 Depth 3
                                        #         Child Loop BB194_59 Depth 4
                                        #       Child Loop BB194_67 Depth 3
                                        #         Child Loop BB194_69 Depth 4
                                        #       Child Loop BB194_84 Depth 3
                                        #         Child Loop BB194_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB194_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB194_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -72(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB194_8:                              # %for.cond9
                                        #   Parent Loop BB194_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB194_11 Depth 3
                                        #         Child Loop BB194_13 Depth 4
                                        #       Child Loop BB194_19 Depth 3
                                        #         Child Loop BB194_21 Depth 4
                                        #       Child Loop BB194_29 Depth 3
                                        #         Child Loop BB194_31 Depth 4
                                        #       Child Loop BB194_40 Depth 3
                                        #         Child Loop BB194_42 Depth 4
                                        #       Child Loop BB194_57 Depth 3
                                        #         Child Loop BB194_59 Depth 4
                                        #       Child Loop BB194_67 Depth 3
                                        #         Child Loop BB194_69 Depth 4
                                        #       Child Loop BB194_84 Depth 3
                                        #         Child Loop BB194_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB194_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB194_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -92(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB194_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB194_11:                             # %for.cond16
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB194_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB194_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB194_11 Depth=3
	movl	$0, -16(%rbp)
.LBB194_13:                             # %for.cond20
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        #       Parent Loop BB194_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB194_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB194_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB194_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_13
.LBB194_16:                             # %for.end
                                        #   in Loop: Header=BB194_11 Depth=3
	jmp	.LBB194_17
.LBB194_17:                             # %for.inc37
                                        #   in Loop: Header=BB194_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_11
.LBB194_18:                             # %for.end39
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB194_19:                             # %for.cond41
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB194_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB194_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB194_19 Depth=3
	movl	$0, -16(%rbp)
.LBB194_21:                             # %for.cond45
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        #       Parent Loop BB194_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB194_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB194_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB194_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_21
.LBB194_24:                             # %for.end65
                                        #   in Loop: Header=BB194_19 Depth=3
	jmp	.LBB194_25
.LBB194_25:                             # %for.inc66
                                        #   in Loop: Header=BB194_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_19
.LBB194_26:                             # %for.end68
                                        #   in Loop: Header=BB194_8 Depth=2
	jmp	.LBB194_27
.LBB194_27:                             # %if.end69
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB194_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	$0, -12(%rbp)
.LBB194_29:                             # %for.cond74
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB194_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB194_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB194_29 Depth=3
	movl	$0, -16(%rbp)
.LBB194_31:                             # %for.cond78
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        #       Parent Loop BB194_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB194_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB194_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB194_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_31
.LBB194_34:                             # %for.end98
                                        #   in Loop: Header=BB194_29 Depth=3
	jmp	.LBB194_35
.LBB194_35:                             # %for.inc99
                                        #   in Loop: Header=BB194_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_29
.LBB194_36:                             # %for.end101
                                        #   in Loop: Header=BB194_8 Depth=2
	jmp	.LBB194_37
.LBB194_37:                             # %if.end102
                                        #   in Loop: Header=BB194_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB194_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB194_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB194_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	$0, -12(%rbp)
.LBB194_40:                             # %for.cond108
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB194_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB194_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB194_40 Depth=3
	movl	$0, -16(%rbp)
.LBB194_42:                             # %for.cond112
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        #       Parent Loop BB194_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB194_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB194_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB194_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_42
.LBB194_45:                             # %for.end137
                                        #   in Loop: Header=BB194_40 Depth=3
	jmp	.LBB194_46
.LBB194_46:                             # %for.inc138
                                        #   in Loop: Header=BB194_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_40
.LBB194_47:                             # %for.end140
                                        #   in Loop: Header=BB194_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB194_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB194_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB194_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB194_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB194_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB194_52
.LBB194_51:                             # %if.else
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB194_52:                             # %if.end151
                                        #   in Loop: Header=BB194_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB194_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB194_54:                             # %if.end157
                                        #   in Loop: Header=BB194_8 Depth=2
	jmp	.LBB194_55
.LBB194_55:                             # %if.end158
                                        #   in Loop: Header=BB194_8 Depth=2
	jmp	.LBB194_65
.LBB194_56:                             # %if.else159
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	$0, -12(%rbp)
.LBB194_57:                             # %for.cond160
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB194_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB194_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB194_57 Depth=3
	movl	$0, -16(%rbp)
.LBB194_59:                             # %for.cond164
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        #       Parent Loop BB194_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB194_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB194_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB194_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_59
.LBB194_62:                             # %for.end193
                                        #   in Loop: Header=BB194_57 Depth=3
	jmp	.LBB194_63
.LBB194_63:                             # %for.inc194
                                        #   in Loop: Header=BB194_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_57
.LBB194_64:                             # %for.end196
                                        #   in Loop: Header=BB194_8 Depth=2
	jmp	.LBB194_65
.LBB194_65:                             # %if.end197
                                        #   in Loop: Header=BB194_8 Depth=2
	jmp	.LBB194_95
.LBB194_66:                             # %if.else198
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	$0, -12(%rbp)
.LBB194_67:                             # %for.cond199
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB194_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB194_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB194_67 Depth=3
	movl	$0, -16(%rbp)
.LBB194_69:                             # %for.cond203
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        #       Parent Loop BB194_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB194_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB194_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -128(%rbp)
	movl	-128(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movl	-116(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -64(%rbp)
	jne	.LBB194_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB194_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB194_73
.LBB194_72:                             # %if.else300
                                        #   in Loop: Header=BB194_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-72(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB194_73:                             # %if.end314
                                        #   in Loop: Header=BB194_69 Depth=4
	jmp	.LBB194_74
.LBB194_74:                             # %for.inc315
                                        #   in Loop: Header=BB194_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_69
.LBB194_75:                             # %for.end317
                                        #   in Loop: Header=BB194_67 Depth=3
	jmp	.LBB194_76
.LBB194_76:                             # %for.inc318
                                        #   in Loop: Header=BB194_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_67
.LBB194_77:                             # %for.end320
                                        #   in Loop: Header=BB194_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB194_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB194_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB194_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB194_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB194_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB194_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB194_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -36(%rbp)
	jmp	.LBB194_83
.LBB194_82:                             # %if.else334
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-32(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -36(%rbp)
.LBB194_83:                             # %if.end336
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	$0, -12(%rbp)
.LBB194_84:                             # %for.cond337
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB194_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB194_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB194_84 Depth=3
	movl	$0, -16(%rbp)
.LBB194_86:                             # %for.cond341
                                        #   Parent Loop BB194_6 Depth=1
                                        #     Parent Loop BB194_8 Depth=2
                                        #       Parent Loop BB194_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB194_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB194_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB194_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_86
.LBB194_89:                             # %for.end358
                                        #   in Loop: Header=BB194_84 Depth=3
	jmp	.LBB194_90
.LBB194_90:                             # %for.inc359
                                        #   in Loop: Header=BB194_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_84
.LBB194_91:                             # %for.end361
                                        #   in Loop: Header=BB194_8 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB194_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	-92(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB194_93:                             # %if.end368
                                        #   in Loop: Header=BB194_8 Depth=2
	jmp	.LBB194_94
.LBB194_94:                             # %if.end369
                                        #   in Loop: Header=BB194_8 Depth=2
	jmp	.LBB194_95
.LBB194_95:                             # %if.end370
                                        #   in Loop: Header=BB194_8 Depth=2
	jmp	.LBB194_96
.LBB194_96:                             # %for.inc371
                                        #   in Loop: Header=BB194_8 Depth=2
	movl	-72(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB194_8
.LBB194_97:                             # %for.end374
                                        #   in Loop: Header=BB194_6 Depth=1
	jmp	.LBB194_98
.LBB194_98:                             # %for.inc375
                                        #   in Loop: Header=BB194_6 Depth=1
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB194_6
.LBB194_99:                             # %for.end378
	cmpl	$0, -64(%rbp)
	je	.LBB194_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB194_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -68(%rbp)
	jne	.LBB194_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB194_104
# %bb.103:                              # %if.then390
	movl	-28(%rbp), %edi
	leaq	-32(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -36(%rbp)
.LBB194_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB194_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB194_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB194_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB194_106 Depth=1
	movl	$0, -16(%rbp)
.LBB194_108:                            # %for.cond400
                                        #   Parent Loop BB194_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB194_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB194_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-44(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-40(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB194_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_108
.LBB194_111:                            # %for.end417
                                        #   in Loop: Header=BB194_106 Depth=1
	jmp	.LBB194_112
.LBB194_112:                            # %for.inc418
                                        #   in Loop: Header=BB194_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_106
.LBB194_113:                            # %for.end420
	jmp	.LBB194_114
.LBB194_114:                            # %if.end421
	cmpl	$0, -36(%rbp)
	je	.LBB194_116
# %bb.115:                              # %if.then423
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB194_116:                            # %if.end431
	jmp	.LBB194_117
.LBB194_117:                            # %if.end432
	jmp	.LBB194_118
.LBB194_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB194_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -68(%rbp)
	jne	.LBB194_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -32(%rbp)
	jg	.LBB194_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB194_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB194_145
.LBB194_123:                            # %if.then448
	movl	$0, -32(%rbp)
	movl	$63, %eax
	subl	-84(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-28(%rbp), %ecx
	shll	$2, %ecx
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB194_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB194_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB194_124 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB194_126:                            # %for.cond462
                                        #   Parent Loop BB194_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB194_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB194_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB194_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB194_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB194_130
.LBB194_129:                            # %if.else481
                                        #   in Loop: Header=BB194_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB194_130:                            # %if.end486
                                        #   in Loop: Header=BB194_126 Depth=2
	jmp	.LBB194_131
.LBB194_131:                            # %for.inc487
                                        #   in Loop: Header=BB194_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_126
.LBB194_132:                            # %for.end489
                                        #   in Loop: Header=BB194_124 Depth=1
	jmp	.LBB194_133
.LBB194_133:                            # %for.inc490
                                        #   in Loop: Header=BB194_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_124
.LBB194_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB194_144
# %bb.135:                              # %if.then496
	movl	-44(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB194_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB194_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB194_136 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB194_138:                            # %for.cond502
                                        #   Parent Loop BB194_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB194_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB194_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB194_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_138
.LBB194_141:                            # %for.end509
                                        #   in Loop: Header=BB194_136 Depth=1
	jmp	.LBB194_142
.LBB194_142:                            # %for.inc510
                                        #   in Loop: Header=BB194_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_136
.LBB194_143:                            # %for.end512
	jmp	.LBB194_144
.LBB194_144:                            # %if.end513
	jmp	.LBB194_145
.LBB194_145:                            # %if.end514
	movl	-32(%rbp), %ebx
	cmpl	$1579845616, -120(%rbp) # imm = 0x5E2A87F0
	jne	.LBB194_147
.LBB194_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_146
.Lfunc_end194:
	.size	LumaResidualCoding8x8.153, .Lfunc_end194-LumaResidualCoding8x8.153
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.154 # -- Begin function writeCoeff4x4_CAVLC.154
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.154,@function
writeCoeff4x4_CAVLC.154:                # @writeCoeff4x4_CAVLC.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1919385576, -168(%rbp) # imm = 0x72677FE8
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -104(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB195_22
# %bb.1:                                # %entry
	movq	.LJTI195_0(,%rax,8), %rax
	jmpq	*%rax
.LBB195_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB195_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB195_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB195_6
.LBB195_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB195_7
.LBB195_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB195_7:                              # %if.end
	jmp	.LBB195_23
.LBB195_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB195_23
.LBB195_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB195_23
.LBB195_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -104(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB195_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB195_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB195_14
.LBB195_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB195_15
.LBB195_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB195_15:                             # %if.end67
	jmp	.LBB195_23
.LBB195_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -72(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB195_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB195_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB195_20
.LBB195_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB195_21
.LBB195_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB195_21:                             # %if.end93
	jmp	.LBB195_23
.LBB195_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB195_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB195_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -104(%rbp)
	je	.LBB195_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB195_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB195_27
.LBB195_26:                             # %cond.false
                                        #   in Loop: Header=BB195_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB195_27
.LBB195_27:                             # %cond.end
                                        #   in Loop: Header=BB195_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB195_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB195_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB195_29:                             # %land.end
                                        #   in Loop: Header=BB195_24 Depth=1
	testb	$1, %dl
	jne	.LBB195_30
	jmp	.LBB195_41
.LBB195_30:                             # %for.body
                                        #   in Loop: Header=BB195_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB195_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB195_24 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB195_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB195_24 Depth=1
	movl	-88(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB195_33:                             # %if.end110
                                        #   in Loop: Header=BB195_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB195_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB195_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB195_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB195_24 Depth=1
	movl	$3, -32(%rbp)
.LBB195_36:                             # %if.end117
                                        #   in Loop: Header=BB195_24 Depth=1
	jmp	.LBB195_38
.LBB195_37:                             # %if.else118
                                        #   in Loop: Header=BB195_24 Depth=1
	movl	$0, -32(%rbp)
.LBB195_38:                             # %if.end119
                                        #   in Loop: Header=BB195_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB195_39:                             # %if.end121
                                        #   in Loop: Header=BB195_24 Depth=1
	jmp	.LBB195_40
.LBB195_40:                             # %for.inc
                                        #   in Loop: Header=BB195_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB195_24
.LBB195_41:                             # %for.end
	cmpl	$0, -104(%rbp)
	jne	.LBB195_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB195_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB195_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB195_46
.LBB195_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB195_46:                             # %cond.end136
	movl	%eax, -100(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB195_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB195_49
.LBB195_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB195_49:                             # %cond.end145
	movl	%eax, -92(%rbp)
	movl	-100(%rbp), %edi
	movl	-92(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB195_51
.LBB195_50:                             # %if.else148
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -100(%rbp)
	movl	-76(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -92(%rbp)
	movl	-100(%rbp), %edi
	movl	-92(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB195_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB195_53
# %bb.52:                               # %if.then160
	movl	$0, -96(%rbp)
	jmp	.LBB195_60
.LBB195_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB195_55
# %bb.54:                               # %if.then163
	movl	$1, -96(%rbp)
	jmp	.LBB195_59
.LBB195_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB195_57
# %bb.56:                               # %if.then166
	movl	$2, -96(%rbp)
	jmp	.LBB195_58
.LBB195_57:                             # %if.else167
	movl	$3, -96(%rbp)
.LBB195_58:                             # %if.end168
	jmp	.LBB195_59
.LBB195_59:                             # %if.end169
	jmp	.LBB195_60
.LBB195_60:                             # %if.end170
	jmp	.LBB195_62
.LBB195_61:                             # %if.else171
	movl	$0, -96(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -92(%rbp)
.LBB195_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB195_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB195_65
.LBB195_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB195_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB195_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB195_122
.LBB195_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB195_121
# %bb.68:                               # %if.then192
	movl	$0, -84(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB195_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB195_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB195_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB195_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB195_72:                             # %if.end202
                                        #   in Loop: Header=BB195_69 Depth=1
	movl	-84(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB195_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB195_69 Depth=1
	movl	-84(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -84(%rbp)
.LBB195_74:                             # %if.end205
                                        #   in Loop: Header=BB195_69 Depth=1
	jmp	.LBB195_75
.LBB195_75:                             # %for.inc206
                                        #   in Loop: Header=BB195_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB195_69
.LBB195_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB195_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB195_78:                             # %if.end223
	movl	$1, -140(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB195_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB195_81
# %bb.80:                               # %if.then226
	movl	$0, -140(%rbp)
.LBB195_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB195_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB195_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB195_85
.LBB195_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB195_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB195_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB195_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB195_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -140(%rbp)
	je	.LBB195_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB195_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB195_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB195_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB195_91
.LBB195_90:                             # %if.else249
                                        #   in Loop: Header=BB195_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB195_91:                             # %if.end252
                                        #   in Loop: Header=BB195_86 Depth=1
	movl	$0, -140(%rbp)
.LBB195_92:                             # %if.end253
                                        #   in Loop: Header=BB195_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB195_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB195_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB195_95
.LBB195_94:                             # %if.else257
                                        #   in Loop: Header=BB195_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB195_95:                             # %if.end259
                                        #   in Loop: Header=BB195_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB195_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB195_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB195_97:                             # %if.end266
                                        #   in Loop: Header=BB195_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB195_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB195_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB195_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB195_86 Depth=1
	movl	$2, -28(%rbp)
.LBB195_100:                            # %if.end273
                                        #   in Loop: Header=BB195_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB195_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB195_86
.LBB195_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB195_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -104(%rbp)
	jne	.LBB195_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB195_106
.LBB195_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB195_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB195_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -144(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB195_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB195_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB195_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB195_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB195_108 Depth=1
	cmpl	$0, -80(%rbp)
	jne	.LBB195_112
.LBB195_111:                            # %if.then318
	jmp	.LBB195_120
.LBB195_112:                            # %if.end319
                                        #   in Loop: Header=BB195_108 Depth=1
	cmpl	$1, -144(%rbp)
	jle	.LBB195_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB195_108 Depth=1
	cmpl	$0, -80(%rbp)
	je	.LBB195_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB195_108 Depth=1
	movl	-80(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB195_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB195_108 Depth=1
	movl	$6, -28(%rbp)
.LBB195_116:                            # %if.end327
                                        #   in Loop: Header=BB195_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-88(%rbp), %eax
	movl	-80(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	-144(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -144(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB195_117:                            # %if.end341
                                        #   in Loop: Header=BB195_108 Depth=1
	jmp	.LBB195_118
.LBB195_118:                            # %for.inc342
                                        #   in Loop: Header=BB195_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB195_108
.LBB195_119:                            # %for.end344.loopexit
	jmp	.LBB195_120
.LBB195_120:                            # %for.end344
	jmp	.LBB195_121
.LBB195_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB195_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$1919385576, -168(%rbp) # imm = 0x72677FE8
	jne	.LBB195_124
.LBB195_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_123
.Lfunc_end195:
	.size	writeCoeff4x4_CAVLC.154, .Lfunc_end195-writeCoeff4x4_CAVLC.154
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI195_0:
	.quad	.LBB195_2
	.quad	.LBB195_8
	.quad	.LBB195_9
	.quad	.LBB195_22
	.quad	.LBB195_22
	.quad	.LBB195_22
	.quad	.LBB195_10
	.quad	.LBB195_16
                                        # -- End function
	.text
	.globl	OneComponentChromaPrediction4x4.155 # -- Begin function OneComponentChromaPrediction4x4.155
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.155,@function
OneComponentChromaPrediction4x4.155:    # @OneComponentChromaPrediction4x4.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1541267718, -112(%rbp) # imm = 0x5BDDE106
	movq	%rdi, -144(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -76(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -88(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-4(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB196_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB196_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB196_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB196_5
# %bb.4:                                # %if.then7
	movl	$4, -48(%rbp)
	jmp	.LBB196_6
.LBB196_5:                              # %if.else
	movl	$2, -48(%rbp)
.LBB196_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB196_8
.LBB196_7:                              # %if.else10
	movl	$0, -48(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB196_8:                              # %if.end13
	movl	-88(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
.LBB196_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB196_11 Depth 2
	cmpl	$4, -36(%rbp)
	jge	.LBB196_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB196_9 Depth=1
	movl	$0, -40(%rbp)
.LBB196_11:                             # %for.cond20
                                        #   Parent Loop BB196_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -40(%rbp)
	jge	.LBB196_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB196_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-40(%rbp), %ecx
	addl	-64(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-36(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-88(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -136(%rbp)
	movl	-40(%rbp), %eax
	addl	-64(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-36(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-136(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-128(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB196_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB196_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB196_15
.LBB196_14:                             # %cond.false
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB196_15:                             # %cond.end
                                        #   in Loop: Header=BB196_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB196_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB196_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB196_21
.LBB196_17:                             # %cond.false65
                                        #   in Loop: Header=BB196_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB196_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB196_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB196_20
.LBB196_19:                             # %cond.false74
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB196_20:                             # %cond.end76
                                        #   in Loop: Header=BB196_11 Depth=2
.LBB196_21:                             # %cond.end78
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB196_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB196_24
.LBB196_23:                             # %cond.false84
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB196_24:                             # %cond.end86
                                        #   in Loop: Header=BB196_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB196_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB196_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB196_30
.LBB196_26:                             # %cond.false91
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB196_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB196_29
.LBB196_28:                             # %cond.false96
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB196_29:                             # %cond.end98
                                        #   in Loop: Header=BB196_11 Depth=2
.LBB196_30:                             # %cond.end100
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB196_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB196_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB196_33
.LBB196_32:                             # %cond.false111
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB196_33:                             # %cond.end114
                                        #   in Loop: Header=BB196_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB196_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB196_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB196_39
.LBB196_35:                             # %cond.false119
                                        #   in Loop: Header=BB196_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB196_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB196_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB196_38
.LBB196_37:                             # %cond.false129
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB196_38:                             # %cond.end132
                                        #   in Loop: Header=BB196_11 Depth=2
.LBB196_39:                             # %cond.end134
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB196_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB196_42
.LBB196_41:                             # %cond.false141
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB196_42:                             # %cond.end144
                                        #   in Loop: Header=BB196_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB196_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB196_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB196_48
.LBB196_44:                             # %cond.false149
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB196_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB196_47
.LBB196_46:                             # %cond.false155
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB196_47:                             # %cond.end158
                                        #   in Loop: Header=BB196_11 Depth=2
.LBB196_48:                             # %cond.end160
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-16(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-8(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-68(%rbp), %eax
	imull	-56(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-84(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-56(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-60(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-68(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-80(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-92(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB196_11 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB196_11
.LBB196_50:                             # %for.end
                                        #   in Loop: Header=BB196_9 Depth=1
	jmp	.LBB196_51
.LBB196_51:                             # %for.inc198
                                        #   in Loop: Header=BB196_9 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB196_9
.LBB196_52:                             # %for.end200
	cmpl	$1541267718, -112(%rbp) # imm = 0x5BDDE106
	jne	.LBB196_54
.LBB196_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_53
.Lfunc_end196:
	.size	OneComponentChromaPrediction4x4.155, .Lfunc_end196-OneComponentChromaPrediction4x4.155
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.156   # -- Begin function writeLumaCoeff8x8.156
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.156,@function
writeLumaCoeff8x8.156:                  # @writeLumaCoeff8x8.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1667859048, -36(%rbp)  # imm = 0x63698268
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	cmpl	$13, -20(%rbp)
	jne	.LBB197_2
# %bb.1:                                # %if.then
	jmp	.LBB197_2
.LBB197_2:                              # %if.end
	cmpl	$0, -32(%rbp)
	je	.LBB197_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB197_15
.LBB197_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB197_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB197_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB197_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB197_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB197_5 Depth=1
	movl	-24(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -32(%rbp)
	je	.LBB197_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB197_5 Depth=1
	cmpl	$13, -20(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB197_10
.LBB197_9:                              # %cond.false
                                        #   in Loop: Header=BB197_5 Depth=1
	movl	-28(%rbp), %ecx
.LBB197_10:                             # %cond.end
                                        #   in Loop: Header=BB197_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB197_12
.LBB197_11:                             # %if.else
                                        #   in Loop: Header=BB197_5 Depth=1
	movl	-24(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-28(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB197_12:                             # %if.end17
                                        #   in Loop: Header=BB197_5 Depth=1
	jmp	.LBB197_13
.LBB197_13:                             # %for.inc
                                        #   in Loop: Header=BB197_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB197_5
.LBB197_14:                             # %for.end
	jmp	.LBB197_19
.LBB197_15:                             # %if.else18
	cmpl	$13, -20(%rbp)
	jne	.LBB197_17
# %bb.16:                               # %if.then21
	movl	-24(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB197_18
.LBB197_17:                             # %if.else24
	movl	-24(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB197_18:                             # %if.end27
	jmp	.LBB197_19
.LBB197_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$1667859048, -36(%rbp)  # imm = 0x63698268
	jne	.LBB197_21
.LBB197_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_20
.Lfunc_end197:
	.size	writeLumaCoeff8x8.156, .Lfunc_end197-writeLumaCoeff8x8.156
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.157      # -- Begin function find_sad_16x16.157
	.p2align	4, 0x90
	.type	find_sad_16x16.157,@function
find_sad_16x16.157:                     # @find_sad_16x16.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$516529844, -80(%rbp)   # imm = 0x1EC99EB4
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB198_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB198_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB198_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB198_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_1
.LBB198_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB198_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB198_20
.LBB198_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB198_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB198_9
.LBB198_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB198_9
.LBB198_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB198_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB198_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB198_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB198_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB198_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB198_14
.LBB198_13:                             # %cond.false23
                                        #   in Loop: Header=BB198_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB198_14
.LBB198_14:                             # %cond.end24
                                        #   in Loop: Header=BB198_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB198_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_10
.LBB198_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB198_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB198_19
.LBB198_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB198_19
.LBB198_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB198_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB198_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB198_42 Depth 2
                                        #       Child Loop BB198_44 Depth 3
                                        #     Child Loop BB198_50 Depth 2
                                        #       Child Loop BB198_52 Depth 3
                                        #         Child Loop BB198_54 Depth 4
                                        #         Child Loop BB198_58 Depth 4
                                        #           Child Loop BB198_60 Depth 5
                                        #     Child Loop BB198_72 Depth 2
                                        #       Child Loop BB198_74 Depth 3
                                        #     Child Loop BB198_80 Depth 2
                                        #     Child Loop BB198_84 Depth 2
                                        #       Child Loop BB198_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB198_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB198_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB198_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB198_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB198_32
.LBB198_24:                             # %if.then46
                                        #   in Loop: Header=BB198_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB198_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB198_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB198_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB198_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB198_28
.LBB198_27:                             # %if.then51
                                        #   in Loop: Header=BB198_21 Depth=1
	jmp	.LBB198_95
.LBB198_28:                             # %if.end52
                                        #   in Loop: Header=BB198_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB198_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB198_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB198_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB198_21 Depth=1
	jmp	.LBB198_95
.LBB198_31:                             # %if.end57
                                        #   in Loop: Header=BB198_21 Depth=1
	jmp	.LBB198_32
.LBB198_32:                             # %if.end58
                                        #   in Loop: Header=BB198_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB198_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB198_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB198_40
.LBB198_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB198_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB198_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB198_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB198_40
.LBB198_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB198_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB198_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB198_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB198_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB198_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB198_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB198_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB198_41
.LBB198_40:                             # %if.then74
                                        #   in Loop: Header=BB198_21 Depth=1
	jmp	.LBB198_94
.LBB198_41:                             # %if.else75
                                        #   in Loop: Header=BB198_21 Depth=1
	movl	$0, -16(%rbp)
.LBB198_42:                             # %for.cond76
                                        #   Parent Loop BB198_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB198_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB198_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB198_42 Depth=2
	movl	$0, -12(%rbp)
.LBB198_44:                             # %for.cond79
                                        #   Parent Loop BB198_21 Depth=1
                                        #     Parent Loop BB198_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB198_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB198_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB198_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_44
.LBB198_47:                             # %for.end115
                                        #   in Loop: Header=BB198_42 Depth=2
	jmp	.LBB198_48
.LBB198_48:                             # %for.inc116
                                        #   in Loop: Header=BB198_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB198_42
.LBB198_49:                             # %for.end118
                                        #   in Loop: Header=BB198_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB198_50:                             # %for.cond119
                                        #   Parent Loop BB198_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB198_52 Depth 3
                                        #         Child Loop BB198_54 Depth 4
                                        #         Child Loop BB198_58 Depth 4
                                        #           Child Loop BB198_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB198_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB198_50 Depth=2
	movl	$0, -24(%rbp)
.LBB198_52:                             # %for.cond123
                                        #   Parent Loop BB198_21 Depth=1
                                        #     Parent Loop BB198_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB198_54 Depth 4
                                        #         Child Loop BB198_58 Depth 4
                                        #           Child Loop BB198_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB198_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB198_52 Depth=3
	movl	$0, -16(%rbp)
.LBB198_54:                             # %for.cond127
                                        #   Parent Loop BB198_21 Depth=1
                                        #     Parent Loop BB198_50 Depth=2
                                        #       Parent Loop BB198_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB198_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB198_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB198_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB198_54
.LBB198_57:                             # %for.end237
                                        #   in Loop: Header=BB198_52 Depth=3
	movl	$0, -12(%rbp)
.LBB198_58:                             # %for.cond238
                                        #   Parent Loop BB198_21 Depth=1
                                        #     Parent Loop BB198_50 Depth=2
                                        #       Parent Loop BB198_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB198_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB198_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB198_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB198_60:                             # %for.cond346
                                        #   Parent Loop BB198_21 Depth=1
                                        #     Parent Loop BB198_50 Depth=2
                                        #       Parent Loop BB198_52 Depth=3
                                        #         Parent Loop BB198_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB198_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB198_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB198_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB198_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB198_63:                             # %if.end363
                                        #   in Loop: Header=BB198_60 Depth=5
	jmp	.LBB198_64
.LBB198_64:                             # %for.inc364
                                        #   in Loop: Header=BB198_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB198_60
.LBB198_65:                             # %for.end366
                                        #   in Loop: Header=BB198_58 Depth=4
	jmp	.LBB198_66
.LBB198_66:                             # %for.inc367
                                        #   in Loop: Header=BB198_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_58
.LBB198_67:                             # %for.end369
                                        #   in Loop: Header=BB198_52 Depth=3
	jmp	.LBB198_68
.LBB198_68:                             # %for.inc370
                                        #   in Loop: Header=BB198_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB198_52
.LBB198_69:                             # %for.end372
                                        #   in Loop: Header=BB198_50 Depth=2
	jmp	.LBB198_70
.LBB198_70:                             # %for.inc373
                                        #   in Loop: Header=BB198_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB198_50
.LBB198_71:                             # %for.end375
                                        #   in Loop: Header=BB198_21 Depth=1
	movl	$0, -16(%rbp)
.LBB198_72:                             # %for.cond376
                                        #   Parent Loop BB198_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB198_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB198_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB198_72 Depth=2
	movl	$0, -12(%rbp)
.LBB198_74:                             # %for.cond380
                                        #   Parent Loop BB198_21 Depth=1
                                        #     Parent Loop BB198_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB198_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB198_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB198_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_74
.LBB198_77:                             # %for.end397
                                        #   in Loop: Header=BB198_72 Depth=2
	jmp	.LBB198_78
.LBB198_78:                             # %for.inc398
                                        #   in Loop: Header=BB198_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB198_72
.LBB198_79:                             # %for.end400
                                        #   in Loop: Header=BB198_21 Depth=1
	movl	$0, -16(%rbp)
.LBB198_80:                             # %for.cond401
                                        #   Parent Loop BB198_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB198_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB198_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB198_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB198_80
.LBB198_83:                             # %for.end463
                                        #   in Loop: Header=BB198_21 Depth=1
	movl	$0, -12(%rbp)
.LBB198_84:                             # %for.cond464
                                        #   Parent Loop BB198_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB198_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB198_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB198_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB198_86:                             # %for.cond524
                                        #   Parent Loop BB198_21 Depth=1
                                        #     Parent Loop BB198_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB198_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB198_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB198_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB198_86
.LBB198_89:                             # %for.end536
                                        #   in Loop: Header=BB198_84 Depth=2
	jmp	.LBB198_90
.LBB198_90:                             # %for.inc537
                                        #   in Loop: Header=BB198_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB198_84
.LBB198_91:                             # %for.end539
                                        #   in Loop: Header=BB198_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB198_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB198_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB198_93:                             # %if.end543
                                        #   in Loop: Header=BB198_21 Depth=1
	jmp	.LBB198_94
.LBB198_94:                             # %if.end544
                                        #   in Loop: Header=BB198_21 Depth=1
	jmp	.LBB198_95
.LBB198_95:                             # %for.inc545
                                        #   in Loop: Header=BB198_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB198_21
.LBB198_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$516529844, -80(%rbp)   # imm = 0x1EC99EB4
	jne	.LBB198_98
.LBB198_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_97
.Lfunc_end198:
	.size	find_sad_16x16.157, .Lfunc_end198-find_sad_16x16.157
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.158 # -- Begin function terminate_macroblock.158
	.p2align	4, 0x90
	.type	terminate_macroblock.158,@function
terminate_macroblock.158:               # @terminate_macroblock.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1668425291, -112(%rbp) # imm = 0x6372264B
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB199_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB199_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB199_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB199_5
.LBB199_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB199_8
.LBB199_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB199_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB199_7:                              # %if.end
	jmp	.LBB199_8
.LBB199_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB199_45
# %bb.9:                                # %if.end18
	movq	.LJTI199_0(,%rax,8), %rax
	jmpq	*%rax
.LBB199_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB199_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB199_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB199_46
.LBB199_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB199_46
.LBB199_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB199_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB199_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB199_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB199_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB199_22
.LBB199_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB199_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB199_21:                             # %if.end64
	jmp	.LBB199_22
.LBB199_22:                             # %if.end65
	jmp	.LBB199_23
.LBB199_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB199_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB199_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB199_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB199_27:                             # %if.end79
	jmp	.LBB199_28
.LBB199_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB199_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB199_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB199_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB199_32:                             # %if.end89
	jmp	.LBB199_33
.LBB199_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB199_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB199_35:                             # %if.end95
	jmp	.LBB199_46
.LBB199_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB199_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB199_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB199_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB199_40:                             # %if.end106
	jmp	.LBB199_41
.LBB199_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB199_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB199_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB199_44:                             # %if.end118
	jmp	.LBB199_46
.LBB199_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB199_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB199_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB199_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB199_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB199_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB199_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB199_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB199_51:                             # %if.end139
                                        #   in Loop: Header=BB199_48 Depth=1
	jmp	.LBB199_52
.LBB199_52:                             # %for.inc
                                        #   in Loop: Header=BB199_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB199_48
.LBB199_53:                             # %for.end
	jmp	.LBB199_54
.LBB199_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB199_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB199_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB199_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB199_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB199_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB199_60:                             # %if.end174
	jmp	.LBB199_62
.LBB199_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB199_62:                             # %if.end188
	jmp	.LBB199_63
.LBB199_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB199_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB199_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB199_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB199_67:                             # %if.end218
	cmpl	$1668425291, -112(%rbp) # imm = 0x6372264B
	jne	.LBB199_69
.LBB199_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_68
.Lfunc_end199:
	.size	terminate_macroblock.158, .Lfunc_end199-terminate_macroblock.158
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI199_0:
	.quad	.LBB199_10
	.quad	.LBB199_13
	.quad	.LBB199_14
	.quad	.LBB199_36
                                        # -- End function
	.text
	.globl	writeLumaCoeff4x4_CABAC.159 # -- Begin function writeLumaCoeff4x4_CABAC.159
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.159,@function
writeLumaCoeff4x4_CABAC.159:            # @writeLumaCoeff4x4_CABAC.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$605368854, -52(%rbp)   # imm = 0x24153216
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -80(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB200_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB200_3
.LBB200_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB200_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB200_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB200_6
.LBB200_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB200_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB200_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB200_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB200_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB200_9:                              # %land.end
                                        #   in Loop: Header=BB200_7 Depth=1
	testb	$1, %al
	jne	.LBB200_10
	jmp	.LBB200_15
.LBB200_10:                             # %for.body
                                        #   in Loop: Header=BB200_7 Depth=1
	movq	-104(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB200_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB200_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB200_13
.LBB200_12:                             # %cond.false40
                                        #   in Loop: Header=BB200_7 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB200_13:                             # %cond.end43
                                        #   in Loop: Header=BB200_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB200_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB200_7
.LBB200_15:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$605368854, -52(%rbp)   # imm = 0x24153216
	jne	.LBB200_17
.LBB200_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_16
.Lfunc_end200:
	.size	writeLumaCoeff4x4_CABAC.159, .Lfunc_end200-writeLumaCoeff4x4_CABAC.159
	.cfi_endproc
                                        # -- End function
	.globl	B8Mode2Value.160        # -- Begin function B8Mode2Value.160
	.p2align	4, 0x90
	.type	B8Mode2Value.160,@function
B8Mode2Value.160:                       # @B8Mode2Value.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1145016643, -24(%rbp)  # imm = 0x443F9143
	movl	%edi, -12(%rbp)
	movl	%esi, -20(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB201_2
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	subl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB201_3
.LBB201_2:                              # %if.else
	movslq	-12(%rbp), %rax
	movl	B8Mode2Value.b8start(,%rax,4), %eax
	movslq	-12(%rbp), %rcx
	movl	B8Mode2Value.b8inc(,%rcx,4), %ecx
	imull	-20(%rbp), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
.LBB201_3:                              # %return
	movl	-16(%rbp), %ebx
	cmpl	$1145016643, -24(%rbp)  # imm = 0x443F9143
	jne	.LBB201_5
.LBB201_4:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_4
.Lfunc_end201:
	.size	B8Mode2Value.160, .Lfunc_end201-B8Mode2Value.160
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.161 # -- Begin function write_terminating_bit.161
	.p2align	4, 0x90
	.type	write_terminating_bit.161,@function
write_terminating_bit.161:              # @write_terminating_bit.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$152114597, -8(%rbp)    # imm = 0x91115A5
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$152114597, -8(%rbp)    # imm = 0x91115A5
	jne	.LBB202_2
.LBB202_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_1
.Lfunc_end202:
	.size	write_terminating_bit.161, .Lfunc_end202-write_terminating_bit.161
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.162 # -- Begin function writeCBPandLumaCoeff.162
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.162,@function
writeCBPandLumaCoeff.162:               # @writeCBPandLumaCoeff.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$463417834, -100(%rbp)  # imm = 0x1B9F31EA
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB203_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB203_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB203_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB203_7
.LBB203_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB203_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB203_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB203_10
.LBB203_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB203_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB203_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB203_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB203_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB203_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB203_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB203_18
.LBB203_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB203_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB203_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB203_18
.LBB203_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB203_22
.LBB203_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB203_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB203_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB203_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB203_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB203_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB203_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB203_26
.LBB203_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB203_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB203_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB203_29
.LBB203_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB203_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB203_30:                             # %if.end93
	jmp	.LBB203_31
.LBB203_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB203_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB203_42
.LBB203_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB203_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB203_36
.LBB203_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB203_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB203_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB203_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB203_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB203_41
.LBB203_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB203_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB203_42:                             # %if.end138
	movl	$0, -36(%rbp)
.LBB203_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB203_45 Depth 2
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB203_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB203_43 Depth=1
	movl	$0, -20(%rbp)
.LBB203_45:                             # %for.cond141
                                        #   Parent Loop BB203_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB203_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB203_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB203_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB203_45
.LBB203_48:                             # %for.end
                                        #   in Loop: Header=BB203_43 Depth=1
	jmp	.LBB203_49
.LBB203_49:                             # %for.inc152
                                        #   in Loop: Header=BB203_43 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB203_43
.LBB203_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB203_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB203_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB203_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB203_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB203_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB203_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB203_55:                             # %if.end169
                                        #   in Loop: Header=BB203_52 Depth=1
	jmp	.LBB203_56
.LBB203_56:                             # %for.inc170
                                        #   in Loop: Header=BB203_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB203_52
.LBB203_57:                             # %for.end172
	jmp	.LBB203_101
.LBB203_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB203_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB203_70
.LBB203_60:                             # %if.else179
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB203_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jg	.LBB203_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB203_61 Depth=1
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB203_63:                             # %land.end184
                                        #   in Loop: Header=BB203_61 Depth=1
	testb	$1, %al
	jne	.LBB203_64
	jmp	.LBB203_69
.LBB203_64:                             # %for.body186
                                        #   in Loop: Header=BB203_61 Depth=1
	movq	-128(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-144(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB203_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB203_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB203_67
.LBB203_66:                             # %if.else196
                                        #   in Loop: Header=BB203_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB203_67:                             # %if.end198
                                        #   in Loop: Header=BB203_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB203_61 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB203_61
.LBB203_69:                             # %for.end218
	jmp	.LBB203_70
.LBB203_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB203_100
# %bb.71:                               # %if.then222
	movl	$0, -52(%rbp)
.LBB203_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB203_74 Depth 2
                                        #       Child Loop BB203_76 Depth 3
                                        #         Child Loop BB203_78 Depth 4
                                        #           Child Loop BB203_82 Depth 5
	cmpl	$4, -52(%rbp)
	jge	.LBB203_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB203_72 Depth=1
	movl	$0, -56(%rbp)
.LBB203_74:                             # %for.cond226
                                        #   Parent Loop BB203_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB203_76 Depth 3
                                        #         Child Loop BB203_78 Depth 4
                                        #           Child Loop BB203_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB203_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB203_74 Depth=2
	movl	-52(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB203_76:                             # %for.cond229
                                        #   Parent Loop BB203_72 Depth=1
                                        #     Parent Loop BB203_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB203_78 Depth 4
                                        #           Child Loop BB203_82 Depth 5
	movl	-36(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB203_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB203_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB203_78:                             # %for.cond233
                                        #   Parent Loop BB203_72 Depth=1
                                        #     Parent Loop BB203_74 Depth=2
                                        #       Parent Loop BB203_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB203_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB203_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB203_78 Depth=4
	movl	-36(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -68(%rbp)
	movl	-36(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -72(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB203_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB203_78 Depth=4
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB203_91
.LBB203_81:                             # %if.else247
                                        #   in Loop: Header=BB203_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -60(%rbp)
	movl	$0, -40(%rbp)
.LBB203_82:                             # %for.cond259
                                        #   Parent Loop BB203_72 Depth=1
                                        #     Parent Loop BB203_74 Depth=2
                                        #       Parent Loop BB203_76 Depth=3
                                        #         Parent Loop BB203_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -40(%rbp)
	jge	.LBB203_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB203_82 Depth=5
	cmpl	$0, -60(%rbp)
	setne	%al
.LBB203_84:                             # %land.end263
                                        #   in Loop: Header=BB203_82 Depth=5
	testb	$1, %al
	jne	.LBB203_85
	jmp	.LBB203_90
.LBB203_85:                             # %for.body265
                                        #   in Loop: Header=BB203_82 Depth=5
	movq	-136(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -60(%rbp)
	movq	-120(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -104(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB203_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB203_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB203_88
.LBB203_87:                             # %if.else276
                                        #   in Loop: Header=BB203_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB203_88:                             # %if.end278
                                        #   in Loop: Header=BB203_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB203_82 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB203_82
.LBB203_90:                             # %for.end300
                                        #   in Loop: Header=BB203_78 Depth=4
	jmp	.LBB203_91
.LBB203_91:                             # %if.end301
                                        #   in Loop: Header=BB203_78 Depth=4
	jmp	.LBB203_92
.LBB203_92:                             # %for.inc302
                                        #   in Loop: Header=BB203_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB203_78
.LBB203_93:                             # %for.end304
                                        #   in Loop: Header=BB203_76 Depth=3
	jmp	.LBB203_94
.LBB203_94:                             # %for.inc305
                                        #   in Loop: Header=BB203_76 Depth=3
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB203_76
.LBB203_95:                             # %for.end307
                                        #   in Loop: Header=BB203_74 Depth=2
	jmp	.LBB203_96
.LBB203_96:                             # %for.inc308
                                        #   in Loop: Header=BB203_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB203_74
.LBB203_97:                             # %for.end310
                                        #   in Loop: Header=BB203_72 Depth=1
	jmp	.LBB203_98
.LBB203_98:                             # %for.inc311
                                        #   in Loop: Header=BB203_72 Depth=1
	movl	-52(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB203_72
.LBB203_99:                             # %for.end313
	jmp	.LBB203_100
.LBB203_100:                            # %if.end314
	jmp	.LBB203_101
.LBB203_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$463417834, -100(%rbp)  # imm = 0x1B9F31EA
	jne	.LBB203_103
.LBB203_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_102
.Lfunc_end203:
	.size	writeCBPandLumaCoeff.162, .Lfunc_end203-writeCBPandLumaCoeff.162
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.163        # -- Begin function writeMBLayer.163
	.p2align	4, 0x90
	.type	writeMBLayer.163,@function
writeMBLayer.163:                       # @writeMBLayer.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$417395362, -100(%rbp)  # imm = 0x18E0F2A2
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB204_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB204_3
.LBB204_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB204_3
.LBB204_3:                              # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -120(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB204_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB204_9
.LBB204_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB204_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB204_8
.LBB204_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB204_8
.LBB204_8:                              # %cond.end14
.LBB204_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -68(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB204_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB204_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -68(%rbp)
	jmp	.LBB204_24
.LBB204_12:                             # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB204_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB204_17
	jmp	.LBB204_18
.LBB204_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB204_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB204_18
	jmp	.LBB204_17
.LBB204_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB204_17
	jmp	.LBB204_18
.LBB204_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB204_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB204_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB204_23
.LBB204_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB204_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB204_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB204_23:                             # %if.end50
	jmp	.LBB204_24
.LBB204_24:                             # %if.end51
	jmp	.LBB204_25
.LBB204_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB204_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB204_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB204_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB204_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB204_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB204_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB204_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB204_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB204_35
.LBB204_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB204_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB204_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB204_38
.LBB204_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB204_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB204_39:                             # %if.end96
	jmp	.LBB204_40
.LBB204_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB204_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB204_43
.LBB204_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB204_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB204_89
.LBB204_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB204_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB204_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB204_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -68(%rbp)
	je	.LBB204_49
.LBB204_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB204_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB204_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB204_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB204_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB204_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB204_55
.LBB204_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB204_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB204_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB204_58
.LBB204_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB204_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB204_59:                             # %if.end198
	jmp	.LBB204_60
.LBB204_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB204_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB204_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB204_64
.LBB204_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB204_64:                             # %if.end226
	jmp	.LBB204_88
.LBB204_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB204_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB204_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB204_76
.LBB204_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB204_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB204_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB204_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB204_72:                             # %if.end281
	jmp	.LBB204_73
.LBB204_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB204_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB204_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB204_87
.LBB204_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -64(%rbp)
.LBB204_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_79 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB204_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB204_77 Depth=1
	movl	$0, -44(%rbp)
.LBB204_79:                             # %for.cond310
                                        #   Parent Loop BB204_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB204_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB204_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB204_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB204_79
.LBB204_82:                             # %for.end
                                        #   in Loop: Header=BB204_77 Depth=1
	jmp	.LBB204_83
.LBB204_83:                             # %for.inc322
                                        #   in Loop: Header=BB204_77 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB204_77
.LBB204_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB204_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB204_86:                             # %if.end345
	jmp	.LBB204_87
.LBB204_87:                             # %if.end346
	jmp	.LBB204_88
.LBB204_88:                             # %if.end347
	jmp	.LBB204_89
.LBB204_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB204_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB204_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB204_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB204_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-120(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB204_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB204_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB204_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB204_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB204_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB204_98
.LBB204_97:                             # %if.else380
                                        #   in Loop: Header=BB204_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB204_98:                             # %if.end382
                                        #   in Loop: Header=BB204_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB204_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB204_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB204_101
.LBB204_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB204_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB204_101:                            # %lor.end415
                                        #   in Loop: Header=BB204_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB204_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB204_94
.LBB204_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB204_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB204_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB204_114
.LBB204_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB204_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB204_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB204_110
.LBB204_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB204_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB204_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB204_113
.LBB204_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB204_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB204_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB204_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB204_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB204_120
.LBB204_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB204_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB204_119:                            # %if.end483
	jmp	.LBB204_120
.LBB204_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB204_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB204_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB204_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB204_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB204_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB204_129
.LBB204_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB204_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB204_128:                            # %if.end516
	jmp	.LBB204_129
.LBB204_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$417395362, -100(%rbp)  # imm = 0x18E0F2A2
	jne	.LBB204_131
.LBB204_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_130
.Lfunc_end204:
	.size	writeMBLayer.163, .Lfunc_end204-writeMBLayer.163
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.164 # -- Begin function LumaResidualCoding8x8.164
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.164,@function
LumaResidualCoding8x8.164:              # @LumaResidualCoding8x8.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1968157463, -128(%rbp) # imm = 0x754FB317
	movq	%rdi, -104(%rbp)
	movq	%rsi, -112(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -72(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -36(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -124(%rbp)
	cmpl	$0, -84(%rbp)
	jne	.LBB205_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -72(%rbp)
	jne	.LBB205_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB205_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB205_5
# %bb.4:                                # %if.then
	movl	$1, -124(%rbp)
.LBB205_5:                              # %if.end
	movl	$0, -80(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB205_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_8 Depth 2
                                        #       Child Loop BB205_11 Depth 3
                                        #         Child Loop BB205_13 Depth 4
                                        #       Child Loop BB205_19 Depth 3
                                        #         Child Loop BB205_21 Depth 4
                                        #       Child Loop BB205_29 Depth 3
                                        #         Child Loop BB205_31 Depth 4
                                        #       Child Loop BB205_40 Depth 3
                                        #         Child Loop BB205_42 Depth 4
                                        #       Child Loop BB205_57 Depth 3
                                        #         Child Loop BB205_59 Depth 4
                                        #       Child Loop BB205_67 Depth 3
                                        #         Child Loop BB205_69 Depth 4
                                        #       Child Loop BB205_84 Depth 3
                                        #         Child Loop BB205_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB205_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB205_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -60(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB205_8:                              # %for.cond9
                                        #   Parent Loop BB205_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB205_11 Depth 3
                                        #         Child Loop BB205_13 Depth 4
                                        #       Child Loop BB205_19 Depth 3
                                        #         Child Loop BB205_21 Depth 4
                                        #       Child Loop BB205_29 Depth 3
                                        #         Child Loop BB205_31 Depth 4
                                        #       Child Loop BB205_40 Depth 3
                                        #         Child Loop BB205_42 Depth 4
                                        #       Child Loop BB205_57 Depth 3
                                        #         Child Loop BB205_59 Depth 4
                                        #       Child Loop BB205_67 Depth 3
                                        #         Child Loop BB205_69 Depth 4
                                        #       Child Loop BB205_84 Depth 3
                                        #         Child Loop BB205_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB205_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB205_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB205_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB205_11:                             # %for.cond16
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB205_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB205_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB205_11 Depth=3
	movl	$0, -16(%rbp)
.LBB205_13:                             # %for.cond20
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        #       Parent Loop BB205_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB205_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB205_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB205_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_13
.LBB205_16:                             # %for.end
                                        #   in Loop: Header=BB205_11 Depth=3
	jmp	.LBB205_17
.LBB205_17:                             # %for.inc37
                                        #   in Loop: Header=BB205_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_11
.LBB205_18:                             # %for.end39
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB205_19:                             # %for.cond41
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB205_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB205_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB205_19 Depth=3
	movl	$0, -16(%rbp)
.LBB205_21:                             # %for.cond45
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        #       Parent Loop BB205_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB205_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB205_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB205_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_21
.LBB205_24:                             # %for.end65
                                        #   in Loop: Header=BB205_19 Depth=3
	jmp	.LBB205_25
.LBB205_25:                             # %for.inc66
                                        #   in Loop: Header=BB205_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_19
.LBB205_26:                             # %for.end68
                                        #   in Loop: Header=BB205_8 Depth=2
	jmp	.LBB205_27
.LBB205_27:                             # %if.end69
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB205_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	$0, -12(%rbp)
.LBB205_29:                             # %for.cond74
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB205_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB205_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB205_29 Depth=3
	movl	$0, -16(%rbp)
.LBB205_31:                             # %for.cond78
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        #       Parent Loop BB205_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB205_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB205_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB205_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_31
.LBB205_34:                             # %for.end98
                                        #   in Loop: Header=BB205_29 Depth=3
	jmp	.LBB205_35
.LBB205_35:                             # %for.inc99
                                        #   in Loop: Header=BB205_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_29
.LBB205_36:                             # %for.end101
                                        #   in Loop: Header=BB205_8 Depth=2
	jmp	.LBB205_37
.LBB205_37:                             # %if.end102
                                        #   in Loop: Header=BB205_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB205_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB205_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB205_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	$0, -12(%rbp)
.LBB205_40:                             # %for.cond108
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB205_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB205_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB205_40 Depth=3
	movl	$0, -16(%rbp)
.LBB205_42:                             # %for.cond112
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        #       Parent Loop BB205_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB205_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB205_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB205_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_42
.LBB205_45:                             # %for.end137
                                        #   in Loop: Header=BB205_40 Depth=3
	jmp	.LBB205_46
.LBB205_46:                             # %for.inc138
                                        #   in Loop: Header=BB205_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_40
.LBB205_47:                             # %for.end140
                                        #   in Loop: Header=BB205_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB205_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB205_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB205_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB205_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB205_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB205_52
.LBB205_51:                             # %if.else
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB205_52:                             # %if.end151
                                        #   in Loop: Header=BB205_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB205_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB205_54:                             # %if.end157
                                        #   in Loop: Header=BB205_8 Depth=2
	jmp	.LBB205_55
.LBB205_55:                             # %if.end158
                                        #   in Loop: Header=BB205_8 Depth=2
	jmp	.LBB205_65
.LBB205_56:                             # %if.else159
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	$0, -12(%rbp)
.LBB205_57:                             # %for.cond160
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB205_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB205_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB205_57 Depth=3
	movl	$0, -16(%rbp)
.LBB205_59:                             # %for.cond164
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        #       Parent Loop BB205_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB205_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB205_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB205_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_59
.LBB205_62:                             # %for.end193
                                        #   in Loop: Header=BB205_57 Depth=3
	jmp	.LBB205_63
.LBB205_63:                             # %for.inc194
                                        #   in Loop: Header=BB205_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_57
.LBB205_64:                             # %for.end196
                                        #   in Loop: Header=BB205_8 Depth=2
	jmp	.LBB205_65
.LBB205_65:                             # %if.end197
                                        #   in Loop: Header=BB205_8 Depth=2
	jmp	.LBB205_95
.LBB205_66:                             # %if.else198
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	$0, -12(%rbp)
.LBB205_67:                             # %for.cond199
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB205_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB205_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB205_67 Depth=3
	movl	$0, -16(%rbp)
.LBB205_69:                             # %for.cond203
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        #       Parent Loop BB205_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB205_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB205_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -88(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -120(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -116(%rbp)
	movl	-116(%rbp), %eax
	subl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-88(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-120(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -64(%rbp)
	jne	.LBB205_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB205_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB205_73
.LBB205_72:                             # %if.else300
                                        #   in Loop: Header=BB205_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-60(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-80(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB205_73:                             # %if.end314
                                        #   in Loop: Header=BB205_69 Depth=4
	jmp	.LBB205_74
.LBB205_74:                             # %for.inc315
                                        #   in Loop: Header=BB205_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_69
.LBB205_75:                             # %for.end317
                                        #   in Loop: Header=BB205_67 Depth=3
	jmp	.LBB205_76
.LBB205_76:                             # %for.inc318
                                        #   in Loop: Header=BB205_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_67
.LBB205_77:                             # %for.end320
                                        #   in Loop: Header=BB205_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB205_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB205_8 Depth=2
	cmpl	$0, -68(%rbp)
	jne	.LBB205_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB205_8 Depth=2
	cmpl	$0, -64(%rbp)
	jne	.LBB205_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB205_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB205_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB205_83
.LBB205_82:                             # %if.else334
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	-20(%rbp), %edi
	movl	-24(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB205_83:                             # %if.end336
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	$0, -12(%rbp)
.LBB205_84:                             # %for.cond337
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB205_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB205_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB205_84 Depth=3
	movl	$0, -16(%rbp)
.LBB205_86:                             # %for.cond341
                                        #   Parent Loop BB205_6 Depth=1
                                        #     Parent Loop BB205_8 Depth=2
                                        #       Parent Loop BB205_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB205_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB205_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB205_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_86
.LBB205_89:                             # %for.end358
                                        #   in Loop: Header=BB205_84 Depth=3
	jmp	.LBB205_90
.LBB205_90:                             # %for.inc359
                                        #   in Loop: Header=BB205_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_84
.LBB205_91:                             # %for.end361
                                        #   in Loop: Header=BB205_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB205_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	-96(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB205_93:                             # %if.end368
                                        #   in Loop: Header=BB205_8 Depth=2
	jmp	.LBB205_94
.LBB205_94:                             # %if.end369
                                        #   in Loop: Header=BB205_8 Depth=2
	jmp	.LBB205_95
.LBB205_95:                             # %if.end370
                                        #   in Loop: Header=BB205_8 Depth=2
	jmp	.LBB205_96
.LBB205_96:                             # %for.inc371
                                        #   in Loop: Header=BB205_8 Depth=2
	movl	-60(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -60(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB205_8
.LBB205_97:                             # %for.end374
                                        #   in Loop: Header=BB205_6 Depth=1
	jmp	.LBB205_98
.LBB205_98:                             # %for.inc375
                                        #   in Loop: Header=BB205_6 Depth=1
	movl	-80(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -80(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB205_6
.LBB205_99:                             # %for.end378
	cmpl	$0, -64(%rbp)
	je	.LBB205_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB205_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -68(%rbp)
	jne	.LBB205_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB205_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-36(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB205_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB205_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB205_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB205_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB205_106 Depth=1
	movl	$0, -16(%rbp)
.LBB205_108:                            # %for.cond400
                                        #   Parent Loop BB205_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB205_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB205_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB205_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_108
.LBB205_111:                            # %for.end417
                                        #   in Loop: Header=BB205_106 Depth=1
	jmp	.LBB205_112
.LBB205_112:                            # %for.inc418
                                        #   in Loop: Header=BB205_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_106
.LBB205_113:                            # %for.end420
	jmp	.LBB205_114
.LBB205_114:                            # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB205_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-112(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-76(%rbp), %eax
	movq	-104(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB205_116:                            # %if.end431
	jmp	.LBB205_117
.LBB205_117:                            # %if.end432
	jmp	.LBB205_118
.LBB205_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB205_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -68(%rbp)
	jne	.LBB205_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -36(%rbp)
	jg	.LBB205_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB205_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB205_145
.LBB205_123:                            # %if.then448
	movl	$0, -36(%rbp)
	movl	$63, %eax
	subl	-76(%rbp), %eax
	movq	-104(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-112(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB205_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB205_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB205_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB205_126:                            # %for.cond462
                                        #   Parent Loop BB205_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB205_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB205_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB205_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB205_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB205_130
.LBB205_129:                            # %if.else481
                                        #   in Loop: Header=BB205_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB205_130:                            # %if.end486
                                        #   in Loop: Header=BB205_126 Depth=2
	jmp	.LBB205_131
.LBB205_131:                            # %for.inc487
                                        #   in Loop: Header=BB205_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_126
.LBB205_132:                            # %for.end489
                                        #   in Loop: Header=BB205_124 Depth=1
	jmp	.LBB205_133
.LBB205_133:                            # %for.inc490
                                        #   in Loop: Header=BB205_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_124
.LBB205_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB205_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB205_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB205_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB205_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB205_138:                            # %for.cond502
                                        #   Parent Loop BB205_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB205_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB205_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB205_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_138
.LBB205_141:                            # %for.end509
                                        #   in Loop: Header=BB205_136 Depth=1
	jmp	.LBB205_142
.LBB205_142:                            # %for.inc510
                                        #   in Loop: Header=BB205_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_136
.LBB205_143:                            # %for.end512
	jmp	.LBB205_144
.LBB205_144:                            # %if.end513
	jmp	.LBB205_145
.LBB205_145:                            # %if.end514
	movl	-36(%rbp), %ebx
	cmpl	$1968157463, -128(%rbp) # imm = 0x754FB317
	jne	.LBB205_147
.LBB205_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_146
.Lfunc_end205:
	.size	LumaResidualCoding8x8.164, .Lfunc_end205-LumaResidualCoding8x8.164
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.165         # -- Begin function predict_nnz.165
	.p2align	4, 0x90
	.type	predict_nnz.165,@function
predict_nnz.165:                        # @predict_nnz.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$707220606, -56(%rbp)   # imm = 0x2A27547E
	movl	%edi, -52(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB206_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB206_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB206_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB206_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB206_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB206_6:                              # %if.end14
	movl	-48(%rbp), %edi
	movl	-52(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB206_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB206_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB206_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB206_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB206_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB206_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB206_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB206_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$707220606, -56(%rbp)   # imm = 0x2A27547E
	jne	.LBB206_16
.LBB206_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_15
.Lfunc_end206:
	.size	predict_nnz.165, .Lfunc_end206-predict_nnz.165
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.166 # -- Begin function LumaPrediction4x4Bi.166
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.166,@function
LumaPrediction4x4Bi.166:                # @LumaPrediction4x4Bi.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1059570956, -72(%rbp)  # imm = 0x3F27C50C
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB207_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB207_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB207_6
.LBB207_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB207_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB207_5:                              # %land.end
.LBB207_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB207_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB207_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB207_10
.LBB207_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB207_10
.LBB207_10:                             # %cond.end
	movl	%ecx, -64(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB207_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB207_13
.LBB207_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB207_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB207_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB207_16
.LBB207_15:                             # %if.then
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB207_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB207_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB207_19
.LBB207_18:                             # %if.then39
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB207_19:                             # %if.end52
	cmpl	$0, -80(%rbp)
	je	.LBB207_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB207_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB207_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_24:                             # %for.cond58
                                        #   Parent Loop BB207_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB207_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB207_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_24
.LBB207_27:                             # %for.end
                                        #   in Loop: Header=BB207_22 Depth=1
	jmp	.LBB207_28
.LBB207_28:                             # %for.inc96
                                        #   in Loop: Header=BB207_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_22
.LBB207_29:                             # %for.end98
	jmp	.LBB207_50
.LBB207_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB207_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB207_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_34:                             # %for.cond106
                                        #   Parent Loop BB207_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB207_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB207_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_34
.LBB207_37:                             # %for.end132
                                        #   in Loop: Header=BB207_32 Depth=1
	jmp	.LBB207_38
.LBB207_38:                             # %for.inc133
                                        #   in Loop: Header=BB207_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_32
.LBB207_39:                             # %for.end135
	jmp	.LBB207_49
.LBB207_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB207_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_43:                             # %for.cond141
                                        #   Parent Loop BB207_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB207_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB207_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_43
.LBB207_46:                             # %for.end167
                                        #   in Loop: Header=BB207_41 Depth=1
	jmp	.LBB207_47
.LBB207_47:                             # %for.inc168
                                        #   in Loop: Header=BB207_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_41
.LBB207_48:                             # %for.end170
	jmp	.LBB207_49
.LBB207_49:                             # %if.end171
	jmp	.LBB207_50
.LBB207_50:                             # %if.end172
	jmp	.LBB207_82
.LBB207_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB207_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB207_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_55:                             # %for.cond181
                                        #   Parent Loop BB207_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB207_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB207_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_55
.LBB207_58:                             # %for.end197
                                        #   in Loop: Header=BB207_53 Depth=1
	jmp	.LBB207_59
.LBB207_59:                             # %for.inc198
                                        #   in Loop: Header=BB207_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_53
.LBB207_60:                             # %for.end200
	jmp	.LBB207_81
.LBB207_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB207_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB207_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_65:                             # %for.cond209
                                        #   Parent Loop BB207_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB207_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB207_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_65
.LBB207_68:                             # %for.end222
                                        #   in Loop: Header=BB207_63 Depth=1
	jmp	.LBB207_69
.LBB207_69:                             # %for.inc223
                                        #   in Loop: Header=BB207_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_63
.LBB207_70:                             # %for.end225
	jmp	.LBB207_80
.LBB207_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB207_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB207_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB207_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB207_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB207_74:                             # %for.cond231
                                        #   Parent Loop BB207_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB207_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB207_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB207_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_74
.LBB207_77:                             # %for.end244
                                        #   in Loop: Header=BB207_72 Depth=1
	jmp	.LBB207_78
.LBB207_78:                             # %for.inc245
                                        #   in Loop: Header=BB207_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB207_72
.LBB207_79:                             # %for.end247
	jmp	.LBB207_80
.LBB207_80:                             # %if.end248
	jmp	.LBB207_81
.LBB207_81:                             # %if.end249
	jmp	.LBB207_82
.LBB207_82:                             # %if.end250
	cmpl	$1059570956, -72(%rbp)  # imm = 0x3F27C50C
	jne	.LBB207_84
.LBB207_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_83
.Lfunc_end207:
	.size	LumaPrediction4x4Bi.166, .Lfunc_end207-LumaPrediction4x4Bi.166
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding8x8.167 # -- Begin function LumaResidualCoding8x8.167
	.p2align	4, 0x90
	.type	LumaResidualCoding8x8.167,@function
LumaResidualCoding8x8.167:              # @LumaResidualCoding8x8.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movw	24(%rbp), %ax
	movw	16(%rbp), %ax
	xorl	%ebx, %ebx
	movl	$1332338485, -120(%rbp) # imm = 0x4F69DF35
	movq	%rdi, -112(%rbp)
	movq	%rsi, -104(%rbp)
	movl	%edx, -32(%rbp)
	movw	%cx, -46(%rbp)
	movl	%r8d, -64(%rbp)
	movl	%r9d, -72(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -36(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -40(%rbp)
	movl	-32(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	movl	%eax, -80(%rbp)
	movl	$0, -128(%rbp)
	cmpl	$0, -64(%rbp)
	jne	.LBB208_3
# %bb.1:                                # %land.lhs.true
	xorl	%ebx, %ebx
	cmpl	$0, -72(%rbp)
	jne	.LBB208_3
# %bb.2:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	setne	%bl
.LBB208_3:                              # %land.end
	andb	$1, %bl
	movzbl	%bl, %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movl	572(%rax), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB208_5
# %bb.4:                                # %if.then
	movl	$1, -128(%rbp)
.LBB208_5:                              # %if.end
	movl	$0, -84(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB208_6:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_8 Depth 2
                                        #       Child Loop BB208_11 Depth 3
                                        #         Child Loop BB208_13 Depth 4
                                        #       Child Loop BB208_19 Depth 3
                                        #         Child Loop BB208_21 Depth 4
                                        #       Child Loop BB208_29 Depth 3
                                        #         Child Loop BB208_31 Depth 4
                                        #       Child Loop BB208_40 Depth 3
                                        #         Child Loop BB208_42 Depth 4
                                        #       Child Loop BB208_57 Depth 3
                                        #         Child Loop BB208_59 Depth 4
                                        #       Child Loop BB208_67 Depth 3
                                        #         Child Loop BB208_69 Depth 4
                                        #       Child Loop BB208_84 Depth 3
                                        #         Child Loop BB208_86 Depth 4
	movl	-20(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB208_99
# %bb.7:                                # %for.body
                                        #   in Loop: Header=BB208_6 Depth=1
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	$0, -68(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB208_8:                              # %for.cond9
                                        #   Parent Loop BB208_6 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB208_11 Depth 3
                                        #         Child Loop BB208_13 Depth 4
                                        #       Child Loop BB208_19 Depth 3
                                        #         Child Loop BB208_21 Depth 4
                                        #       Child Loop BB208_29 Depth 3
                                        #         Child Loop BB208_31 Depth 4
                                        #       Child Loop BB208_40 Depth 3
                                        #         Child Loop BB208_42 Depth 4
                                        #       Child Loop BB208_57 Depth 3
                                        #         Child Loop BB208_59 Depth 4
                                        #       Child Loop BB208_67 Depth 3
                                        #         Child Loop BB208_69 Depth 4
                                        #       Child Loop BB208_84 Depth 3
                                        #         Child Loop BB208_86 Depth 4
	movl	-24(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB208_97
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB208_8 Depth=2
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB208_27
# %bb.10:                               # %if.then15
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	16(%rbp), %ax
	xorl	%edi, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB208_11:                             # %for.cond16
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB208_13 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB208_18
# %bb.12:                               # %for.body19
                                        #   in Loop: Header=BB208_11 Depth=3
	movl	$0, -16(%rbp)
.LBB208_13:                             # %for.cond20
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        #       Parent Loop BB208_11 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB208_16
# %bb.14:                               # %for.body23
                                        #   in Loop: Header=BB208_13 Depth=4
	movabsq	$mprRGB, %rax
	addq	$1024, %rax             # imm = 0x400
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.15:                               # %for.inc
                                        #   in Loop: Header=BB208_13 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_13
.LBB208_16:                             # %for.end
                                        #   in Loop: Header=BB208_11 Depth=3
	jmp	.LBB208_17
.LBB208_17:                             # %for.inc37
                                        #   in Loop: Header=BB208_11 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_11
.LBB208_18:                             # %for.end39
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-46(%rbp), %ecx
	movl	-64(%rbp), %r8d
	movl	-72(%rbp), %r9d
	movw	16(%rbp), %ax
	movl	$1, %edi
	cwtl
	movl	%eax, (%rsp)
	movswl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
	movl	$0, -12(%rbp)
.LBB208_19:                             # %for.cond41
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB208_21 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB208_26
# %bb.20:                               # %for.body44
                                        #   in Loop: Header=BB208_19 Depth=3
	movl	$0, -16(%rbp)
.LBB208_21:                             # %for.cond45
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        #       Parent Loop BB208_19 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB208_24
# %bb.22:                               # %for.body48
                                        #   in Loop: Header=BB208_21 Depth=4
	movabsq	$mprRGB, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.23:                               # %for.inc63
                                        #   in Loop: Header=BB208_21 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_21
.LBB208_24:                             # %for.end65
                                        #   in Loop: Header=BB208_19 Depth=3
	jmp	.LBB208_25
.LBB208_25:                             # %for.inc66
                                        #   in Loop: Header=BB208_19 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_19
.LBB208_26:                             # %for.end68
                                        #   in Loop: Header=BB208_8 Depth=2
	jmp	.LBB208_27
.LBB208_27:                             # %if.end69
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-46(%rbp), %edx
	movl	-64(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	16(%rbp), %ax
	movswl	%ax, %r9d
	movswl	24(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB208_37
# %bb.28:                               # %if.then73
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	$0, -12(%rbp)
.LBB208_29:                             # %for.cond74
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB208_31 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB208_36
# %bb.30:                               # %for.body77
                                        #   in Loop: Header=BB208_29 Depth=3
	movl	$0, -16(%rbp)
.LBB208_31:                             # %for.cond78
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        #       Parent Loop BB208_29 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB208_34
# %bb.32:                               # %for.body81
                                        #   in Loop: Header=BB208_31 Depth=4
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.33:                               # %for.inc96
                                        #   in Loop: Header=BB208_31 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_31
.LBB208_34:                             # %for.end98
                                        #   in Loop: Header=BB208_29 Depth=3
	jmp	.LBB208_35
.LBB208_35:                             # %for.inc99
                                        #   in Loop: Header=BB208_29 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_29
.LBB208_36:                             # %for.end101
                                        #   in Loop: Header=BB208_8 Depth=2
	jmp	.LBB208_37
.LBB208_37:                             # %if.end102
                                        #   in Loop: Header=BB208_8 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB208_66
# %bb.38:                               # %if.then105
                                        #   in Loop: Header=BB208_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB208_56
# %bb.39:                               # %if.then107
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	$0, -12(%rbp)
.LBB208_40:                             # %for.cond108
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB208_42 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB208_47
# %bb.41:                               # %for.body111
                                        #   in Loop: Header=BB208_40 Depth=3
	movl	$0, -16(%rbp)
.LBB208_42:                             # %for.cond112
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        #       Parent Loop BB208_40 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB208_45
# %bb.43:                               # %for.body115
                                        #   in Loop: Header=BB208_42 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.44:                               # %for.inc135
                                        #   in Loop: Header=BB208_42 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_42
.LBB208_45:                             # %for.end137
                                        #   in Loop: Header=BB208_40 Depth=3
	jmp	.LBB208_46
.LBB208_46:                             # %for.inc138
                                        #   in Loop: Header=BB208_40 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_40
.LBB208_47:                             # %for.end140
                                        #   in Loop: Header=BB208_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB208_55
# %bb.48:                               # %land.lhs.true143
                                        #   in Loop: Header=BB208_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB208_55
# %bb.49:                               # %if.then145
                                        #   in Loop: Header=BB208_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB208_51
# %bb.50:                               # %if.then149
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB208_52
.LBB208_51:                             # %if.else
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB208_52:                             # %if.end151
                                        #   in Loop: Header=BB208_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB208_54
# %bb.53:                               # %if.then153
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB208_54:                             # %if.end157
                                        #   in Loop: Header=BB208_8 Depth=2
	jmp	.LBB208_55
.LBB208_55:                             # %if.end158
                                        #   in Loop: Header=BB208_8 Depth=2
	jmp	.LBB208_65
.LBB208_56:                             # %if.else159
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	$0, -12(%rbp)
.LBB208_57:                             # %for.cond160
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB208_59 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB208_64
# %bb.58:                               # %for.body163
                                        #   in Loop: Header=BB208_57 Depth=3
	movl	$0, -16(%rbp)
.LBB208_59:                             # %for.cond164
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        #       Parent Loop BB208_57 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB208_62
# %bb.60:                               # %for.body167
                                        #   in Loop: Header=BB208_59 Depth=4
	movq	imgY_org, %rax
	movl	-52(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.61:                               # %for.inc191
                                        #   in Loop: Header=BB208_59 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_59
.LBB208_62:                             # %for.end193
                                        #   in Loop: Header=BB208_57 Depth=3
	jmp	.LBB208_63
.LBB208_63:                             # %for.inc194
                                        #   in Loop: Header=BB208_57 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_57
.LBB208_64:                             # %for.end196
                                        #   in Loop: Header=BB208_8 Depth=2
	jmp	.LBB208_65
.LBB208_65:                             # %if.end197
                                        #   in Loop: Header=BB208_8 Depth=2
	jmp	.LBB208_95
.LBB208_66:                             # %if.else198
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	$0, -12(%rbp)
.LBB208_67:                             # %for.cond199
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB208_69 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB208_77
# %bb.68:                               # %for.body202
                                        #   in Loop: Header=BB208_67 Depth=3
	movl	$0, -16(%rbp)
.LBB208_69:                             # %for.cond203
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        #       Parent Loop BB208_67 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB208_75
# %bb.70:                               # %for.body206
                                        #   in Loop: Header=BB208_69 Depth=4
	movabsq	$mprRGB, %rcx
	movq	%rcx, %rax
	addq	$2048, %rax             # imm = 0x800
	movq	%rcx, %rdx
	addq	$1024, %rdx             # imm = 0x400
	movq	imgUV_org, %rsi
	movq	(%rsi), %rsi
	movl	-52(%rbp), %edi
	addl	-12(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movl	-56(%rbp), %edi
	addl	-16(%rbp), %edi
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	movl	-16(%rbp), %edi
	addl	-24(%rbp), %edi
	movslq	%edi, %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movl	-12(%rbp), %edi
	addl	-20(%rbp), %edi
	movslq	%edi, %rdi
	subl	(%rdx,%rdi,4), %esi
	movl	%esi, -96(%rbp)
	movq	imgY_org, %rdx
	movl	-52(%rbp), %esi
	addl	-12(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-56(%rbp), %esi
	addl	-16(%rbp), %esi
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movl	-16(%rbp), %esi
	addl	-24(%rbp), %esi
	movslq	%esi, %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movl	-12(%rbp), %esi
	addl	-20(%rbp), %esi
	movslq	%esi, %rsi
	subl	(%rcx,%rsi,4), %edx
	movl	%edx, -116(%rbp)
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movl	-52(%rbp), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-56(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movl	-16(%rbp), %edx
	addl	-24(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movl	-12(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	subl	(%rax,%rdx,4), %ecx
	movl	%ecx, -124(%rbp)
	movl	-124(%rbp), %eax
	subl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_R, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-96(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movl	-116(%rbp), %eax
	subl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_B, %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rsi,%rcx,4)
	movl	-92(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rdx,%rcx,4), %ecx
	sarl	$1, %ecx
	addl	%ecx, %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$resTrans_G, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
	cmpl	$0, -60(%rbp)
	jne	.LBB208_72
# %bb.71:                               # %if.then288
                                        #   in Loop: Header=BB208_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-16(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB208_73
.LBB208_72:                             # %if.else300
                                        #   in Loop: Header=BB208_69 Depth=4
	movl	-16(%rbp), %eax
	addl	-24(%rbp), %eax
	cltq
	shlq	$6, %rax
	movabsq	$resTrans_G, %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	addl	-20(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movl	-16(%rbp), %edx
	addl	-68(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-84(%rbp), %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB208_73:                             # %if.end314
                                        #   in Loop: Header=BB208_69 Depth=4
	jmp	.LBB208_74
.LBB208_74:                             # %for.inc315
                                        #   in Loop: Header=BB208_69 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_69
.LBB208_75:                             # %for.end317
                                        #   in Loop: Header=BB208_67 Depth=3
	jmp	.LBB208_76
.LBB208_76:                             # %for.inc318
                                        #   in Loop: Header=BB208_67 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_67
.LBB208_77:                             # %for.end320
                                        #   in Loop: Header=BB208_8 Depth=2
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB208_94
# %bb.78:                               # %land.lhs.true324
                                        #   in Loop: Header=BB208_8 Depth=2
	cmpl	$0, -76(%rbp)
	jne	.LBB208_94
# %bb.79:                               # %land.lhs.true326
                                        #   in Loop: Header=BB208_8 Depth=2
	cmpl	$0, -60(%rbp)
	jne	.LBB208_94
# %bb.80:                               # %if.then328
                                        #   in Loop: Header=BB208_8 Depth=2
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB208_82
# %bb.81:                               # %if.then332
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	xorl	%ecx, %ecx
	callq	dct_luma
	movl	%eax, -28(%rbp)
	jmp	.LBB208_83
.LBB208_82:                             # %if.else334
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	-24(%rbp), %edi
	movl	-20(%rbp), %esi
	leaq	-36(%rbp), %rdx
	callq	dct_luma_sp
	movl	%eax, -28(%rbp)
.LBB208_83:                             # %if.end336
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	$0, -12(%rbp)
.LBB208_84:                             # %for.cond337
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB208_86 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB208_91
# %bb.85:                               # %for.body340
                                        #   in Loop: Header=BB208_84 Depth=3
	movl	$0, -16(%rbp)
.LBB208_86:                             # %for.cond341
                                        #   Parent Loop BB208_6 Depth=1
                                        #     Parent Loop BB208_8 Depth=2
                                        #       Parent Loop BB208_84 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB208_89
# %bb.87:                               # %for.body344
                                        #   in Loop: Header=BB208_86 Depth=4
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-16(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-12(%rbp), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.88:                               # %for.inc356
                                        #   in Loop: Header=BB208_86 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_86
.LBB208_89:                             # %for.end358
                                        #   in Loop: Header=BB208_84 Depth=3
	jmp	.LBB208_90
.LBB208_90:                             # %for.inc359
                                        #   in Loop: Header=BB208_84 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_84
.LBB208_91:                             # %for.end361
                                        #   in Loop: Header=BB208_8 Depth=2
	cmpl	$0, -28(%rbp)
	je	.LBB208_93
# %bb.92:                               # %if.then363
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	-88(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB208_93:                             # %if.end368
                                        #   in Loop: Header=BB208_8 Depth=2
	jmp	.LBB208_94
.LBB208_94:                             # %if.end369
                                        #   in Loop: Header=BB208_8 Depth=2
	jmp	.LBB208_95
.LBB208_95:                             # %if.end370
                                        #   in Loop: Header=BB208_8 Depth=2
	jmp	.LBB208_96
.LBB208_96:                             # %for.inc371
                                        #   in Loop: Header=BB208_8 Depth=2
	movl	-68(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB208_8
.LBB208_97:                             # %for.end374
                                        #   in Loop: Header=BB208_6 Depth=1
	jmp	.LBB208_98
.LBB208_98:                             # %for.inc375
                                        #   in Loop: Header=BB208_6 Depth=1
	movl	-84(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB208_6
.LBB208_99:                             # %for.end378
	cmpl	$0, -60(%rbp)
	je	.LBB208_118
# %bb.100:                              # %if.then380
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB208_117
# %bb.101:                              # %land.lhs.true384
	cmpl	$0, -76(%rbp)
	jne	.LBB208_117
# %bb.102:                              # %if.then386
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB208_104
# %bb.103:                              # %if.then390
	movl	-32(%rbp), %edi
	leaq	-36(%rbp), %rsi
	xorl	%edx, %edx
	callq	dct_luma8x8
	movl	%eax, -28(%rbp)
.LBB208_104:                            # %if.end392
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB208_114
# %bb.105:                              # %if.then395
	movl	$0, -12(%rbp)
.LBB208_106:                            # %for.cond396
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_108 Depth 2
	cmpl	$8, -12(%rbp)
	jge	.LBB208_113
# %bb.107:                              # %for.body399
                                        #   in Loop: Header=BB208_106 Depth=1
	movl	$0, -16(%rbp)
.LBB208_108:                            # %for.cond400
                                        #   Parent Loop BB208_106 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$8, -16(%rbp)
	jge	.LBB208_111
# %bb.109:                              # %for.body403
                                        #   in Loop: Header=BB208_108 Depth=2
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-16(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	-40(%rbp), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	shlq	$6, %rcx
	movabsq	$rec_resG, %rdx
	addq	%rcx, %rdx
	movl	-44(%rbp), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.110:                              # %for.inc415
                                        #   in Loop: Header=BB208_108 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_108
.LBB208_111:                            # %for.end417
                                        #   in Loop: Header=BB208_106 Depth=1
	jmp	.LBB208_112
.LBB208_112:                            # %for.inc418
                                        #   in Loop: Header=BB208_106 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_106
.LBB208_113:                            # %for.end420
	jmp	.LBB208_114
.LBB208_114:                            # %if.end421
	cmpl	$0, -28(%rbp)
	je	.LBB208_116
# %bb.115:                              # %if.then423
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	cltq
	movq	-104(%rbp), %rcx
	orq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
.LBB208_116:                            # %if.end431
	jmp	.LBB208_117
.LBB208_117:                            # %if.end432
	jmp	.LBB208_118
.LBB208_118:                            # %if.end433
	movq	img, %rax
	cmpl	$1, 72392(%rax)
	je	.LBB208_145
# %bb.119:                              # %land.lhs.true437
	cmpl	$0, -76(%rbp)
	jne	.LBB208_145
# %bb.120:                              # %land.lhs.true439
	cmpl	$4, -36(%rbp)
	jg	.LBB208_145
# %bb.121:                              # %land.lhs.true442
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB208_123
# %bb.122:                              # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB208_145
.LBB208_123:                            # %if.then448
	movl	$0, -36(%rbp)
	movl	$63, %eax
	subl	-80(%rbp), %eax
	movq	-112(%rbp), %rcx
	andl	(%rcx), %eax
	movl	%eax, (%rcx)
	movl	-32(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %edx
	subl	%edx, %ecx
                                        # kill: def $cl killed $ecx
	movl	$51, %eax
	shll	%cl, %eax
	xorl	$-1, %eax
	cltq
	movq	-104(%rbp), %rcx
	andq	(%rcx), %rax
	movq	%rax, (%rcx)
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB208_124:                            # %for.cond457
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_126 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB208_134
# %bb.125:                              # %for.body461
                                        #   in Loop: Header=BB208_124 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB208_126:                            # %for.cond462
                                        #   Parent Loop BB208_124 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB208_132
# %bb.127:                              # %for.body466
                                        #   in Loop: Header=BB208_126 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB208_129
# %bb.128:                              # %if.then469
                                        #   in Loop: Header=BB208_126 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB208_130
.LBB208_129:                            # %if.else481
                                        #   in Loop: Header=BB208_126 Depth=2
	movslq	-16(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB208_130:                            # %if.end486
                                        #   in Loop: Header=BB208_126 Depth=2
	jmp	.LBB208_131
.LBB208_131:                            # %for.inc487
                                        #   in Loop: Header=BB208_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_126
.LBB208_132:                            # %for.end489
                                        #   in Loop: Header=BB208_124 Depth=1
	jmp	.LBB208_133
.LBB208_133:                            # %for.inc490
                                        #   in Loop: Header=BB208_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_124
.LBB208_134:                            # %for.end492
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB208_144
# %bb.135:                              # %if.then496
	movl	-40(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB208_136:                            # %for.cond497
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB208_138 Depth 2
	movl	-16(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB208_143
# %bb.137:                              # %for.body501
                                        #   in Loop: Header=BB208_136 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB208_138:                            # %for.cond502
                                        #   Parent Loop BB208_136 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB208_141
# %bb.139:                              # %for.body506
                                        #   in Loop: Header=BB208_138 Depth=2
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.140:                              # %for.inc507
                                        #   in Loop: Header=BB208_138 Depth=2
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB208_138
.LBB208_141:                            # %for.end509
                                        #   in Loop: Header=BB208_136 Depth=1
	jmp	.LBB208_142
.LBB208_142:                            # %for.inc510
                                        #   in Loop: Header=BB208_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB208_136
.LBB208_143:                            # %for.end512
	jmp	.LBB208_144
.LBB208_144:                            # %if.end513
	jmp	.LBB208_145
.LBB208_145:                            # %if.end514
	movl	-36(%rbp), %ebx
	cmpl	$1332338485, -120(%rbp) # imm = 0x4F69DF35
	jne	.LBB208_147
.LBB208_146:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_147:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_146
.Lfunc_end208:
	.size	LumaResidualCoding8x8.167, .Lfunc_end208-LumaResidualCoding8x8.167
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8.168   # -- Begin function writeLumaCoeff8x8.168
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8.168,@function
writeLumaCoeff8x8.168:                  # @writeLumaCoeff8x8.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$167179960, -36(%rbp)   # imm = 0x9F6F6B8
	movl	%edi, -20(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$11, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	cmpl	$13, -24(%rbp)
	jne	.LBB209_2
# %bb.1:                                # %if.then
	jmp	.LBB209_2
.LBB209_2:                              # %if.end
	cmpl	$0, -28(%rbp)
	je	.LBB209_4
# %bb.3:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB209_15
.LBB209_4:                              # %if.then5
	movl	$0, -16(%rbp)
.LBB209_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB209_14
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB209_5 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB209_11
# %bb.7:                                # %if.then11
                                        #   in Loop: Header=BB209_5 Depth=1
	movl	-20(%rbp), %esi
	movl	-16(%rbp), %edx
	cmpl	$0, -28(%rbp)
	je	.LBB209_9
# %bb.8:                                # %cond.true
                                        #   in Loop: Header=BB209_5 Depth=1
	cmpl	$13, -24(%rbp)
	sete	%al
	andb	$1, %al
	movzbl	%al, %ecx
	jmp	.LBB209_10
.LBB209_9:                              # %cond.false
                                        #   in Loop: Header=BB209_5 Depth=1
	movl	-32(%rbp), %ecx
.LBB209_10:                             # %cond.end
                                        #   in Loop: Header=BB209_5 Depth=1
	xorl	%edi, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB209_12
.LBB209_11:                             # %if.else
                                        #   in Loop: Header=BB209_5 Depth=1
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-32(%rbp), %edx
	callq	writeLumaCoeff4x4_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB209_12:                             # %if.end17
                                        #   in Loop: Header=BB209_5 Depth=1
	jmp	.LBB209_13
.LBB209_13:                             # %for.inc
                                        #   in Loop: Header=BB209_5 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB209_5
.LBB209_14:                             # %for.end
	jmp	.LBB209_19
.LBB209_15:                             # %if.else18
	cmpl	$13, -24(%rbp)
	jne	.LBB209_17
# %bb.16:                               # %if.then21
	movl	-20(%rbp), %edi
	movl	$1, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB209_18
.LBB209_17:                             # %if.else24
	movl	-20(%rbp), %edi
	xorl	%esi, %esi
	callq	writeLumaCoeff8x8_CABAC
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB209_18:                             # %if.end27
	jmp	.LBB209_19
.LBB209_19:                             # %if.end28
	movl	-12(%rbp), %ebx
	cmpl	$167179960, -36(%rbp)   # imm = 0x9F6F6B8
	jne	.LBB209_21
.LBB209_20:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_21:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_20
.Lfunc_end209:
	.size	writeLumaCoeff8x8.168, .Lfunc_end209-writeLumaCoeff8x8.168
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.169  # -- Begin function LumaResidualCoding.169
	.p2align	4, 0x90
	.type	LumaResidualCoding.169,@function
LumaResidualCoding.169:                 # @LumaResidualCoding.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1086911828, -40(%rbp)  # imm = 0x40C8F554
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB210_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB210_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB210_1 Depth=1
	movl	-4(%rbp), %edi
	leaq	-22(%rbp), %rsi
	leaq	-44(%rbp), %rdx
	leaq	-48(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-18(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-4(%rbp), %edx
	movw	-22(%rbp), %ax
	movl	-44(%rbp), %r8d
	movl	-48(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-18(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB210_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_1
.LBB210_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB210_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB210_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB210_33
.LBB210_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB210_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB210_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB210_8 Depth=1
	movl	$0, -12(%rbp)
.LBB210_10:                             # %for.cond13
                                        #   Parent Loop BB210_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB210_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB210_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB210_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB210_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB210_14
.LBB210_13:                             # %if.else
                                        #   in Loop: Header=BB210_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB210_14:                             # %if.end
                                        #   in Loop: Header=BB210_10 Depth=2
	jmp	.LBB210_15
.LBB210_15:                             # %for.inc31
                                        #   in Loop: Header=BB210_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_10
.LBB210_16:                             # %for.end33
                                        #   in Loop: Header=BB210_8 Depth=1
	jmp	.LBB210_17
.LBB210_17:                             # %for.inc34
                                        #   in Loop: Header=BB210_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_8
.LBB210_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB210_32
# %bb.19:                               # %if.then38
	movl	$0, -4(%rbp)
.LBB210_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB210_22 Depth 2
                                        #       Child Loop BB210_24 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB210_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB210_20 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB210_22:                             # %for.cond45
                                        #   Parent Loop BB210_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB210_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB210_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB210_22 Depth=2
	movl	$0, -12(%rbp)
.LBB210_24:                             # %for.cond48
                                        #   Parent Loop BB210_20 Depth=1
                                        #     Parent Loop BB210_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB210_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB210_24 Depth=3
	movl	-52(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB210_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB210_24
.LBB210_27:                             # %for.end55
                                        #   in Loop: Header=BB210_22 Depth=2
	jmp	.LBB210_28
.LBB210_28:                             # %for.inc56
                                        #   in Loop: Header=BB210_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB210_22
.LBB210_29:                             # %for.end58
                                        #   in Loop: Header=BB210_20 Depth=1
	jmp	.LBB210_30
.LBB210_30:                             # %for.inc59
                                        #   in Loop: Header=BB210_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB210_20
.LBB210_31:                             # %for.end61
	jmp	.LBB210_32
.LBB210_32:                             # %if.end62
	jmp	.LBB210_33
.LBB210_33:                             # %if.end63
	cmpl	$1086911828, -40(%rbp)  # imm = 0x40C8F554
	jne	.LBB210_35
.LBB210_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_34
.Lfunc_end210:
	.size	LumaResidualCoding.169, .Lfunc_end210-LumaResidualCoding.169
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.170 # -- Begin function IntraChromaPrediction.170
	.p2align	4, 0x90
	.type	IntraChromaPrediction.170,@function
IntraChromaPrediction.170:              # @IntraChromaPrediction.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$204747016, -164(%rbp)  # imm = 0xC343108
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -112(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -116(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB211_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB211_1 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB211_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_1
.LBB211_4:                              # %for.end
	movl	-112(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB211_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB211_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB211_8
.LBB211_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB211_8
.LBB211_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB211_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB211_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB211_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB211_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB211_13
.LBB211_12:                             # %cond.false32
                                        #   in Loop: Header=BB211_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB211_13
.LBB211_13:                             # %cond.end33
                                        #   in Loop: Header=BB211_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB211_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_9
.LBB211_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB211_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB211_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB211_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB211_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB211_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB211_20
.LBB211_19:                             # %cond.false57
                                        #   in Loop: Header=BB211_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB211_20
.LBB211_20:                             # %cond.end58
                                        #   in Loop: Header=BB211_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB211_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_16
.LBB211_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB211_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB211_25
.LBB211_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB211_25
.LBB211_25:                             # %cond.end75
	movl	%eax, -104(%rbp)
.LBB211_26:                             # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB211_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB211_28:                             # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB211_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB211_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB211_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB211_32:                             # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB211_34
# %bb.33:                               # %if.then88
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB211_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB211_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_37 Depth 2
                                        #       Child Loop BB211_39 Depth 3
                                        #         Child Loop BB211_104 Depth 4
                                        #         Child Loop BB211_110 Depth 4
                                        #         Child Loop BB211_85 Depth 4
                                        #         Child Loop BB211_91 Depth 4
                                        #         Child Loop BB211_66 Depth 4
                                        #         Child Loop BB211_72 Depth 4
                                        #         Child Loop BB211_44 Depth 4
                                        #         Child Loop BB211_50 Depth 4
                                        #         Child Loop BB211_125 Depth 4
                                        #           Child Loop BB211_127 Depth 5
                                        #     Child Loop BB211_138 Depth 2
                                        #     Child Loop BB211_142 Depth 2
                                        #       Child Loop BB211_144 Depth 3
                                        #     Child Loop BB211_153 Depth 2
                                        #     Child Loop BB211_157 Depth 2
                                        #       Child Loop BB211_159 Depth 3
                                        #     Child Loop BB211_170 Depth 2
                                        #     Child Loop BB211_174 Depth 2
                                        #     Child Loop BB211_178 Depth 2
                                        #       Child Loop BB211_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB211_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB211_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB211_37:                             # %for.cond95
                                        #   Parent Loop BB211_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB211_39 Depth 3
                                        #         Child Loop BB211_104 Depth 4
                                        #         Child Loop BB211_110 Depth 4
                                        #         Child Loop BB211_85 Depth 4
                                        #         Child Loop BB211_91 Depth 4
                                        #         Child Loop BB211_66 Depth 4
                                        #         Child Loop BB211_72 Depth 4
                                        #         Child Loop BB211_44 Depth 4
                                        #         Child Loop BB211_50 Depth 4
                                        #         Child Loop BB211_125 Depth 4
                                        #           Child Loop BB211_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB211_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB211_37 Depth=2
	movl	$0, -88(%rbp)
.LBB211_39:                             # %for.cond99
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB211_104 Depth 4
                                        #         Child Loop BB211_110 Depth 4
                                        #         Child Loop BB211_85 Depth 4
                                        #         Child Loop BB211_91 Depth 4
                                        #         Child Loop BB211_66 Depth 4
                                        #         Child Loop BB211_72 Depth 4
                                        #         Child Loop BB211_44 Depth 4
                                        #         Child Loop BB211_50 Depth 4
                                        #         Child Loop BB211_125 Depth 4
                                        #           Child Loop BB211_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB211_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB211_39 Depth=3
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	movslq	-116(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB211_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB211_39 Depth=3
	movq	.LJTI211_0(,%rax,8), %rax
	jmpq	*%rax
.LBB211_42:                             # %sw.bb
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB211_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB211_44:                             # %for.cond124
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_37 Depth=2
                                        #       Parent Loop BB211_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB211_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB211_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_44
.LBB211_47:                             # %for.end138
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_48
.LBB211_48:                             # %if.end139
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB211_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB211_50:                             # %for.cond143
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_37 Depth=2
                                        #       Parent Loop BB211_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB211_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB211_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_50
.LBB211_53:                             # %for.end162
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_54
.LBB211_54:                             # %if.end163
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB211_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB211_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB211_63
.LBB211_57:                             # %if.else
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB211_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB211_62
.LBB211_59:                             # %if.else174
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB211_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB211_61:                             # %if.end180
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_62
.LBB211_62:                             # %if.end181
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_63
.LBB211_63:                             # %if.end182
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_124
.LBB211_64:                             # %sw.bb183
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB211_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB211_66:                             # %for.cond186
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_37 Depth=2
                                        #       Parent Loop BB211_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB211_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB211_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_66
.LBB211_69:                             # %for.end202
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_77
.LBB211_70:                             # %if.else203
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB211_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB211_72:                             # %for.cond207
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_37 Depth=2
                                        #       Parent Loop BB211_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB211_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB211_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_72
.LBB211_75:                             # %for.end226
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_76
.LBB211_76:                             # %if.end227
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_77
.LBB211_77:                             # %if.end228
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB211_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB211_82
.LBB211_79:                             # %if.else233
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB211_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB211_81:                             # %if.end239
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_82
.LBB211_82:                             # %if.end240
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_124
.LBB211_83:                             # %sw.bb241
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB211_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB211_85:                             # %for.cond245
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_37 Depth=2
                                        #       Parent Loop BB211_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB211_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB211_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_85
.LBB211_88:                             # %for.end264
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_96
.LBB211_89:                             # %if.else265
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB211_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB211_91:                             # %for.cond268
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_37 Depth=2
                                        #       Parent Loop BB211_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB211_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB211_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_91
.LBB211_94:                             # %for.end284
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_95
.LBB211_95:                             # %if.end285
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_96
.LBB211_96:                             # %if.end286
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB211_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB211_101
.LBB211_98:                             # %if.else292
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB211_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB211_100:                            # %if.end297
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_101
.LBB211_101:                            # %if.end298
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_124
.LBB211_102:                            # %sw.bb299
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB211_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB211_104:                            # %for.cond302
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_37 Depth=2
                                        #       Parent Loop BB211_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB211_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB211_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_104
.LBB211_107:                            # %for.end318
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_108
.LBB211_108:                            # %if.end319
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB211_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB211_110:                            # %for.cond323
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_37 Depth=2
                                        #       Parent Loop BB211_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB211_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB211_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_110
.LBB211_113:                            # %for.end342
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_114
.LBB211_114:                            # %if.end343
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB211_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB211_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB211_123
.LBB211_117:                            # %if.else352
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB211_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB211_122
.LBB211_119:                            # %if.else357
                                        #   in Loop: Header=BB211_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB211_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB211_121:                            # %if.end363
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_122
.LBB211_122:                            # %if.end364
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_123
.LBB211_123:                            # %if.end365
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_124
.LBB211_124:                            # %sw.epilog
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB211_125:                            # %for.cond366
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_37 Depth=2
                                        #       Parent Loop BB211_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB211_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB211_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB211_127:                            # %for.cond371
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_37 Depth=2
                                        #       Parent Loop BB211_39 Depth=3
                                        #         Parent Loop BB211_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB211_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB211_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_127
.LBB211_130:                            # %for.end386
                                        #   in Loop: Header=BB211_125 Depth=4
	jmp	.LBB211_131
.LBB211_131:                            # %for.inc387
                                        #   in Loop: Header=BB211_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB211_125
.LBB211_132:                            # %for.end389
                                        #   in Loop: Header=BB211_39 Depth=3
	jmp	.LBB211_133
.LBB211_133:                            # %for.inc390
                                        #   in Loop: Header=BB211_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB211_39
.LBB211_134:                            # %for.end392
                                        #   in Loop: Header=BB211_37 Depth=2
	jmp	.LBB211_135
.LBB211_135:                            # %for.inc393
                                        #   in Loop: Header=BB211_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB211_37
.LBB211_136:                            # %for.end395
                                        #   in Loop: Header=BB211_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB211_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB211_35 Depth=1
	movl	$0, -4(%rbp)
.LBB211_138:                            # %for.cond398
                                        #   Parent Loop BB211_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB211_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB211_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB211_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_138
.LBB211_141:                            # %for.end414
                                        #   in Loop: Header=BB211_35 Depth=1
	movl	$0, -4(%rbp)
.LBB211_142:                            # %for.cond415
                                        #   Parent Loop BB211_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB211_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB211_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB211_142 Depth=2
	movl	$0, -8(%rbp)
.LBB211_144:                            # %for.cond419
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB211_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB211_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB211_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB211_144
.LBB211_147:                            # %for.end436
                                        #   in Loop: Header=BB211_142 Depth=2
	jmp	.LBB211_148
.LBB211_148:                            # %for.inc437
                                        #   in Loop: Header=BB211_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_142
.LBB211_149:                            # %for.end439
                                        #   in Loop: Header=BB211_35 Depth=1
	jmp	.LBB211_150
.LBB211_150:                            # %if.end440
                                        #   in Loop: Header=BB211_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB211_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB211_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB211_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB211_35 Depth=1
	movl	$0, -4(%rbp)
.LBB211_153:                            # %for.cond447
                                        #   Parent Loop BB211_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB211_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB211_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB211_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_153
.LBB211_156:                            # %for.end468
                                        #   in Loop: Header=BB211_35 Depth=1
	movl	$0, -4(%rbp)
.LBB211_157:                            # %for.cond469
                                        #   Parent Loop BB211_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB211_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB211_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB211_157 Depth=2
	movl	$0, -8(%rbp)
.LBB211_159:                            # %for.cond473
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB211_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB211_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB211_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB211_159
.LBB211_162:                            # %for.end490
                                        #   in Loop: Header=BB211_157 Depth=2
	jmp	.LBB211_163
.LBB211_163:                            # %for.inc491
                                        #   in Loop: Header=BB211_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_157
.LBB211_164:                            # %for.end493
                                        #   in Loop: Header=BB211_35 Depth=1
	jmp	.LBB211_165
.LBB211_165:                            # %if.end494
                                        #   in Loop: Header=BB211_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB211_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB211_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB211_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB211_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB211_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB211_35 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB211_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB211_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB211_170:                            # %for.cond519
                                        #   Parent Loop BB211_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB211_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB211_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB211_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_170
.LBB211_173:                            # %for.end540
                                        #   in Loop: Header=BB211_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB211_174:                            # %for.cond556
                                        #   Parent Loop BB211_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB211_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB211_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB211_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_174
.LBB211_177:                            # %for.end577
                                        #   in Loop: Header=BB211_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -92(%rbp)
	movl	$0, -8(%rbp)
.LBB211_178:                            # %for.cond606
                                        #   Parent Loop BB211_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB211_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB211_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB211_178 Depth=2
	movl	$0, -4(%rbp)
.LBB211_180:                            # %for.cond610
                                        #   Parent Loop BB211_35 Depth=1
                                        #     Parent Loop BB211_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB211_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB211_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB211_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB211_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB211_184
.LBB211_183:                            # %cond.false630
                                        #   in Loop: Header=BB211_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB211_184:                            # %cond.end643
                                        #   in Loop: Header=BB211_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB211_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB211_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB211_190
.LBB211_186:                            # %cond.false648
                                        #   in Loop: Header=BB211_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-92(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB211_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB211_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB211_189
.LBB211_188:                            # %cond.false666
                                        #   in Loop: Header=BB211_180 Depth=3
	movl	-92(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB211_189:                            # %cond.end679
                                        #   in Loop: Header=BB211_180 Depth=3
.LBB211_190:                            # %cond.end681
                                        #   in Loop: Header=BB211_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB211_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_180
.LBB211_192:                            # %for.end694
                                        #   in Loop: Header=BB211_178 Depth=2
	jmp	.LBB211_193
.LBB211_193:                            # %for.inc695
                                        #   in Loop: Header=BB211_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB211_178
.LBB211_194:                            # %for.end697
                                        #   in Loop: Header=BB211_35 Depth=1
	jmp	.LBB211_195
.LBB211_195:                            # %if.end698
                                        #   in Loop: Header=BB211_35 Depth=1
	jmp	.LBB211_196
.LBB211_196:                            # %for.inc699
                                        #   in Loop: Header=BB211_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB211_35
.LBB211_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB211_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB211_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB211_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB211_199 Depth=1
	movl	-112(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB211_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_199
.LBB211_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB211_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_219 Depth 2
                                        #       Child Loop BB211_221 Depth 3
                                        #         Child Loop BB211_223 Depth 4
                                        #           Child Loop BB211_225 Depth 5
                                        #             Child Loop BB211_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB211_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB211_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB211_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB211_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB211_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB211_203 Depth=1
	jmp	.LBB211_241
.LBB211_207:                            # %if.end723
                                        #   in Loop: Header=BB211_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB211_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB211_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB211_217
.LBB211_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB211_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB211_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB211_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB211_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB211_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB211_217
.LBB211_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB211_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB211_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB211_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB211_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB211_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB211_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB211_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB211_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB211_203 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB211_218
.LBB211_217:                            # %if.then749
                                        #   in Loop: Header=BB211_203 Depth=1
	jmp	.LBB211_241
.LBB211_218:                            # %if.end750
                                        #   in Loop: Header=BB211_203 Depth=1
	movl	$0, -108(%rbp)
	movl	$0, -24(%rbp)
.LBB211_219:                            # %for.cond751
                                        #   Parent Loop BB211_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB211_221 Depth 3
                                        #         Child Loop BB211_223 Depth 4
                                        #           Child Loop BB211_225 Depth 5
                                        #             Child Loop BB211_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB211_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB211_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB211_221:                            # %for.cond757
                                        #   Parent Loop BB211_203 Depth=1
                                        #     Parent Loop BB211_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB211_223 Depth 4
                                        #           Child Loop BB211_225 Depth 5
                                        #             Child Loop BB211_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB211_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB211_221 Depth=3
	movl	$0, -48(%rbp)
.LBB211_223:                            # %for.cond761
                                        #   Parent Loop BB211_203 Depth=1
                                        #     Parent Loop BB211_219 Depth=2
                                        #       Parent Loop BB211_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB211_225 Depth 5
                                        #             Child Loop BB211_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB211_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB211_223 Depth=4
	movl	$0, -128(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB211_225:                            # %for.cond765
                                        #   Parent Loop BB211_203 Depth=1
                                        #     Parent Loop BB211_219 Depth=2
                                        #       Parent Loop BB211_221 Depth=3
                                        #         Parent Loop BB211_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB211_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB211_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB211_227:                            # %for.cond770
                                        #   Parent Loop BB211_203 Depth=1
                                        #     Parent Loop BB211_219 Depth=2
                                        #       Parent Loop BB211_221 Depth=3
                                        #         Parent Loop BB211_223 Depth=4
                                        #           Parent Loop BB211_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB211_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB211_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-128(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB211_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-128(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -128(%rbp)
	jmp	.LBB211_227
.LBB211_230:                            # %for.end803
                                        #   in Loop: Header=BB211_225 Depth=5
	jmp	.LBB211_231
.LBB211_231:                            # %for.inc804
                                        #   in Loop: Header=BB211_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB211_225
.LBB211_232:                            # %for.end806
                                        #   in Loop: Header=BB211_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB211_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB211_223
.LBB211_234:                            # %for.end810
                                        #   in Loop: Header=BB211_221 Depth=3
	jmp	.LBB211_235
.LBB211_235:                            # %for.inc811
                                        #   in Loop: Header=BB211_221 Depth=3
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB211_221
.LBB211_236:                            # %for.end813
                                        #   in Loop: Header=BB211_219 Depth=2
	jmp	.LBB211_237
.LBB211_237:                            # %for.inc814
                                        #   in Loop: Header=BB211_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB211_219
.LBB211_238:                            # %for.end816
                                        #   in Loop: Header=BB211_203 Depth=1
	movl	-108(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB211_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB211_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-108(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB211_240:                            # %if.end820
                                        #   in Loop: Header=BB211_203 Depth=1
	jmp	.LBB211_241
.LBB211_241:                            # %for.inc821
                                        #   in Loop: Header=BB211_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB211_203
.LBB211_242:                            # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB211_243:                            # %if.end824
	cmpl	$204747016, -164(%rbp)  # imm = 0xC343108
	jne	.LBB211_245
.LBB211_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_244
.Lfunc_end211:
	.size	IntraChromaPrediction.170, .Lfunc_end211-IntraChromaPrediction.170
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI211_0:
	.quad	.LBB211_42
	.quad	.LBB211_64
	.quad	.LBB211_83
	.quad	.LBB211_102
                                        # -- End function
	.text
	.globl	terminate_macroblock.171 # -- Begin function terminate_macroblock.171
	.p2align	4, 0x90
	.type	terminate_macroblock.171,@function
terminate_macroblock.171:               # @terminate_macroblock.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1151470858, -108(%rbp) # imm = 0x44A20D0A
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB212_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB212_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB212_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB212_5
.LBB212_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB212_8
.LBB212_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB212_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB212_7:                              # %if.end
	jmp	.LBB212_8
.LBB212_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB212_45
# %bb.9:                                # %if.end18
	movq	.LJTI212_0(,%rax,8), %rax
	jmpq	*%rax
.LBB212_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB212_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB212_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB212_46
.LBB212_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB212_46
.LBB212_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB212_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB212_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB212_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB212_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB212_22
.LBB212_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB212_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB212_21:                             # %if.end64
	jmp	.LBB212_22
.LBB212_22:                             # %if.end65
	jmp	.LBB212_23
.LBB212_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB212_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB212_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB212_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB212_27:                             # %if.end79
	jmp	.LBB212_28
.LBB212_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB212_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB212_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB212_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB212_32:                             # %if.end89
	jmp	.LBB212_33
.LBB212_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB212_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB212_35:                             # %if.end95
	jmp	.LBB212_46
.LBB212_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB212_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB212_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB212_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB212_40:                             # %if.end106
	jmp	.LBB212_41
.LBB212_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB212_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB212_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB212_44:                             # %if.end118
	jmp	.LBB212_46
.LBB212_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB212_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB212_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB212_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB212_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB212_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB212_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB212_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB212_51:                             # %if.end139
                                        #   in Loop: Header=BB212_48 Depth=1
	jmp	.LBB212_52
.LBB212_52:                             # %for.inc
                                        #   in Loop: Header=BB212_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB212_48
.LBB212_53:                             # %for.end
	jmp	.LBB212_54
.LBB212_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB212_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB212_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB212_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB212_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB212_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB212_60:                             # %if.end174
	jmp	.LBB212_62
.LBB212_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB212_62:                             # %if.end188
	jmp	.LBB212_63
.LBB212_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB212_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB212_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB212_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB212_67:                             # %if.end218
	cmpl	$1151470858, -108(%rbp) # imm = 0x44A20D0A
	jne	.LBB212_69
.LBB212_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_68
.Lfunc_end212:
	.size	terminate_macroblock.171, .Lfunc_end212-terminate_macroblock.171
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI212_0:
	.quad	.LBB212_10
	.quad	.LBB212_13
	.quad	.LBB212_14
	.quad	.LBB212_36
                                        # -- End function
	.text
	.globl	terminate_macroblock.172 # -- Begin function terminate_macroblock.172
	.p2align	4, 0x90
	.type	terminate_macroblock.172,@function
terminate_macroblock.172:               # @terminate_macroblock.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1855893900, -112(%rbp) # imm = 0x6E9EB18C
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB213_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB213_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB213_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB213_5
.LBB213_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB213_8
.LBB213_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB213_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB213_7:                              # %if.end
	jmp	.LBB213_8
.LBB213_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB213_45
# %bb.9:                                # %if.end18
	movq	.LJTI213_0(,%rax,8), %rax
	jmpq	*%rax
.LBB213_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB213_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB213_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB213_46
.LBB213_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB213_46
.LBB213_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB213_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB213_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB213_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB213_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB213_22
.LBB213_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB213_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB213_21:                             # %if.end64
	jmp	.LBB213_22
.LBB213_22:                             # %if.end65
	jmp	.LBB213_23
.LBB213_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB213_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB213_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB213_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB213_27:                             # %if.end79
	jmp	.LBB213_28
.LBB213_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB213_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB213_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB213_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB213_32:                             # %if.end89
	jmp	.LBB213_33
.LBB213_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB213_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB213_35:                             # %if.end95
	jmp	.LBB213_46
.LBB213_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB213_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB213_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB213_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB213_40:                             # %if.end106
	jmp	.LBB213_41
.LBB213_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB213_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB213_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB213_44:                             # %if.end118
	jmp	.LBB213_46
.LBB213_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB213_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB213_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB213_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB213_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB213_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB213_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB213_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB213_51:                             # %if.end139
                                        #   in Loop: Header=BB213_48 Depth=1
	jmp	.LBB213_52
.LBB213_52:                             # %for.inc
                                        #   in Loop: Header=BB213_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB213_48
.LBB213_53:                             # %for.end
	jmp	.LBB213_54
.LBB213_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB213_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB213_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB213_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB213_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB213_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB213_60:                             # %if.end174
	jmp	.LBB213_62
.LBB213_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB213_62:                             # %if.end188
	jmp	.LBB213_63
.LBB213_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB213_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB213_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -108(%rbp)
	jne	.LBB213_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB213_67:                             # %if.end218
	cmpl	$1855893900, -112(%rbp) # imm = 0x6E9EB18C
	jne	.LBB213_69
.LBB213_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_68
.Lfunc_end213:
	.size	terminate_macroblock.172, .Lfunc_end213-terminate_macroblock.172
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI213_0:
	.quad	.LBB213_10
	.quad	.LBB213_13
	.quad	.LBB213_14
	.quad	.LBB213_36
                                        # -- End function
	.text
	.globl	writeChromaIntraPredMode.173 # -- Begin function writeChromaIntraPredMode.173
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.173,@function
writeChromaIntraPredMode.173:           # @writeChromaIntraPredMode.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$780862546, -36(%rbp)   # imm = 0x2E8B0452
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -64(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB214_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB214_3
.LBB214_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB214_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-64(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$780862546, -36(%rbp)   # imm = 0x2E8B0452
	jne	.LBB214_5
.LBB214_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_4
.Lfunc_end214:
	.size	writeChromaIntraPredMode.173, .Lfunc_end214-writeChromaIntraPredMode.173
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.174 # -- Begin function LumaPrediction4x4Bi.174
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.174,@function
LumaPrediction4x4Bi.174:                # @LumaPrediction4x4Bi.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$142375718, -84(%rbp)   # imm = 0x87C7B26
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB215_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB215_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB215_6
.LBB215_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB215_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB215_5:                              # %land.end
.LBB215_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB215_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB215_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB215_10
.LBB215_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB215_10
.LBB215_10:                             # %cond.end
	movl	%ecx, -60(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB215_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB215_13
.LBB215_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB215_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB215_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB215_16
.LBB215_15:                             # %if.then
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB215_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB215_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB215_19
.LBB215_18:                             # %if.then39
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB215_19:                             # %if.end52
	cmpl	$0, -80(%rbp)
	je	.LBB215_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB215_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB215_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB215_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB215_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB215_24:                             # %for.cond58
                                        #   Parent Loop BB215_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB215_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB215_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB215_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB215_24
.LBB215_27:                             # %for.end
                                        #   in Loop: Header=BB215_22 Depth=1
	jmp	.LBB215_28
.LBB215_28:                             # %for.inc96
                                        #   in Loop: Header=BB215_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB215_22
.LBB215_29:                             # %for.end98
	jmp	.LBB215_50
.LBB215_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB215_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB215_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB215_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB215_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB215_34:                             # %for.cond106
                                        #   Parent Loop BB215_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB215_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB215_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB215_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB215_34
.LBB215_37:                             # %for.end132
                                        #   in Loop: Header=BB215_32 Depth=1
	jmp	.LBB215_38
.LBB215_38:                             # %for.inc133
                                        #   in Loop: Header=BB215_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB215_32
.LBB215_39:                             # %for.end135
	jmp	.LBB215_49
.LBB215_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB215_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB215_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB215_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB215_43:                             # %for.cond141
                                        #   Parent Loop BB215_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB215_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB215_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB215_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB215_43
.LBB215_46:                             # %for.end167
                                        #   in Loop: Header=BB215_41 Depth=1
	jmp	.LBB215_47
.LBB215_47:                             # %for.inc168
                                        #   in Loop: Header=BB215_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB215_41
.LBB215_48:                             # %for.end170
	jmp	.LBB215_49
.LBB215_49:                             # %if.end171
	jmp	.LBB215_50
.LBB215_50:                             # %if.end172
	jmp	.LBB215_82
.LBB215_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB215_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB215_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB215_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB215_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB215_55:                             # %for.cond181
                                        #   Parent Loop BB215_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB215_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB215_55 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB215_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB215_55
.LBB215_58:                             # %for.end197
                                        #   in Loop: Header=BB215_53 Depth=1
	jmp	.LBB215_59
.LBB215_59:                             # %for.inc198
                                        #   in Loop: Header=BB215_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB215_53
.LBB215_60:                             # %for.end200
	jmp	.LBB215_81
.LBB215_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB215_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB215_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB215_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB215_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB215_65:                             # %for.cond209
                                        #   Parent Loop BB215_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB215_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB215_65 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB215_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB215_65
.LBB215_68:                             # %for.end222
                                        #   in Loop: Header=BB215_63 Depth=1
	jmp	.LBB215_69
.LBB215_69:                             # %for.inc223
                                        #   in Loop: Header=BB215_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB215_63
.LBB215_70:                             # %for.end225
	jmp	.LBB215_80
.LBB215_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB215_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB215_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB215_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB215_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB215_74:                             # %for.cond231
                                        #   Parent Loop BB215_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB215_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB215_74 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB215_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB215_74
.LBB215_77:                             # %for.end244
                                        #   in Loop: Header=BB215_72 Depth=1
	jmp	.LBB215_78
.LBB215_78:                             # %for.inc245
                                        #   in Loop: Header=BB215_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB215_72
.LBB215_79:                             # %for.end247
	jmp	.LBB215_80
.LBB215_80:                             # %if.end248
	jmp	.LBB215_81
.LBB215_81:                             # %if.end249
	jmp	.LBB215_82
.LBB215_82:                             # %if.end250
	cmpl	$142375718, -84(%rbp)   # imm = 0x87C7B26
	jne	.LBB215_84
.LBB215_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_83
.Lfunc_end215:
	.size	LumaPrediction4x4Bi.174, .Lfunc_end215-LumaPrediction4x4Bi.174
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.175      # -- Begin function find_sad_16x16.175
	.p2align	4, 0x90
	.type	find_sad_16x16.175,@function
find_sad_16x16.175:                     # @find_sad_16x16.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$996711453, -80(%rbp)   # imm = 0x3B689C1D
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB216_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB216_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB216_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB216_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_1
.LBB216_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB216_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB216_20
.LBB216_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB216_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB216_9
.LBB216_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB216_9
.LBB216_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB216_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB216_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB216_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB216_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB216_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB216_14
.LBB216_13:                             # %cond.false23
                                        #   in Loop: Header=BB216_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB216_14
.LBB216_14:                             # %cond.end24
                                        #   in Loop: Header=BB216_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB216_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_10
.LBB216_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB216_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB216_19
.LBB216_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB216_19
.LBB216_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB216_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB216_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_42 Depth 2
                                        #       Child Loop BB216_44 Depth 3
                                        #     Child Loop BB216_50 Depth 2
                                        #       Child Loop BB216_52 Depth 3
                                        #         Child Loop BB216_54 Depth 4
                                        #         Child Loop BB216_58 Depth 4
                                        #           Child Loop BB216_60 Depth 5
                                        #     Child Loop BB216_72 Depth 2
                                        #       Child Loop BB216_74 Depth 3
                                        #     Child Loop BB216_80 Depth 2
                                        #     Child Loop BB216_84 Depth 2
                                        #       Child Loop BB216_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB216_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB216_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB216_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB216_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB216_32
.LBB216_24:                             # %if.then46
                                        #   in Loop: Header=BB216_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB216_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB216_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB216_28
.LBB216_27:                             # %if.then51
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_95
.LBB216_28:                             # %if.end52
                                        #   in Loop: Header=BB216_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB216_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB216_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_95
.LBB216_31:                             # %if.end57
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_32
.LBB216_32:                             # %if.end58
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB216_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB216_40
.LBB216_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB216_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB216_40
.LBB216_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB216_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB216_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB216_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB216_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB216_41
.LBB216_40:                             # %if.then74
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_94
.LBB216_41:                             # %if.else75
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	$0, -16(%rbp)
.LBB216_42:                             # %for.cond76
                                        #   Parent Loop BB216_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB216_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB216_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB216_42 Depth=2
	movl	$0, -12(%rbp)
.LBB216_44:                             # %for.cond79
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB216_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB216_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB216_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_44
.LBB216_47:                             # %for.end115
                                        #   in Loop: Header=BB216_42 Depth=2
	jmp	.LBB216_48
.LBB216_48:                             # %for.inc116
                                        #   in Loop: Header=BB216_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_42
.LBB216_49:                             # %for.end118
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB216_50:                             # %for.cond119
                                        #   Parent Loop BB216_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB216_52 Depth 3
                                        #         Child Loop BB216_54 Depth 4
                                        #         Child Loop BB216_58 Depth 4
                                        #           Child Loop BB216_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB216_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB216_50 Depth=2
	movl	$0, -24(%rbp)
.LBB216_52:                             # %for.cond123
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB216_54 Depth 4
                                        #         Child Loop BB216_58 Depth 4
                                        #           Child Loop BB216_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB216_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB216_52 Depth=3
	movl	$0, -16(%rbp)
.LBB216_54:                             # %for.cond127
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_50 Depth=2
                                        #       Parent Loop BB216_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB216_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB216_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB216_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_54
.LBB216_57:                             # %for.end237
                                        #   in Loop: Header=BB216_52 Depth=3
	movl	$0, -12(%rbp)
.LBB216_58:                             # %for.cond238
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_50 Depth=2
                                        #       Parent Loop BB216_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB216_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB216_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB216_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB216_60:                             # %for.cond346
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_50 Depth=2
                                        #       Parent Loop BB216_52 Depth=3
                                        #         Parent Loop BB216_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB216_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB216_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB216_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB216_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB216_63:                             # %if.end363
                                        #   in Loop: Header=BB216_60 Depth=5
	jmp	.LBB216_64
.LBB216_64:                             # %for.inc364
                                        #   in Loop: Header=BB216_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_60
.LBB216_65:                             # %for.end366
                                        #   in Loop: Header=BB216_58 Depth=4
	jmp	.LBB216_66
.LBB216_66:                             # %for.inc367
                                        #   in Loop: Header=BB216_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_58
.LBB216_67:                             # %for.end369
                                        #   in Loop: Header=BB216_52 Depth=3
	jmp	.LBB216_68
.LBB216_68:                             # %for.inc370
                                        #   in Loop: Header=BB216_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB216_52
.LBB216_69:                             # %for.end372
                                        #   in Loop: Header=BB216_50 Depth=2
	jmp	.LBB216_70
.LBB216_70:                             # %for.inc373
                                        #   in Loop: Header=BB216_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB216_50
.LBB216_71:                             # %for.end375
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	$0, -16(%rbp)
.LBB216_72:                             # %for.cond376
                                        #   Parent Loop BB216_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB216_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB216_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB216_72 Depth=2
	movl	$0, -12(%rbp)
.LBB216_74:                             # %for.cond380
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB216_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB216_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB216_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_74
.LBB216_77:                             # %for.end397
                                        #   in Loop: Header=BB216_72 Depth=2
	jmp	.LBB216_78
.LBB216_78:                             # %for.inc398
                                        #   in Loop: Header=BB216_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_72
.LBB216_79:                             # %for.end400
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	$0, -16(%rbp)
.LBB216_80:                             # %for.cond401
                                        #   Parent Loop BB216_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB216_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB216_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB216_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_80
.LBB216_83:                             # %for.end463
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	$0, -12(%rbp)
.LBB216_84:                             # %for.cond464
                                        #   Parent Loop BB216_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB216_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB216_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB216_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB216_86:                             # %for.cond524
                                        #   Parent Loop BB216_21 Depth=1
                                        #     Parent Loop BB216_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB216_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB216_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB216_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB216_86
.LBB216_89:                             # %for.end536
                                        #   in Loop: Header=BB216_84 Depth=2
	jmp	.LBB216_90
.LBB216_90:                             # %for.inc537
                                        #   in Loop: Header=BB216_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB216_84
.LBB216_91:                             # %for.end539
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB216_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB216_93:                             # %if.end543
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_94
.LBB216_94:                             # %if.end544
                                        #   in Loop: Header=BB216_21 Depth=1
	jmp	.LBB216_95
.LBB216_95:                             # %for.inc545
                                        #   in Loop: Header=BB216_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB216_21
.LBB216_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$996711453, -80(%rbp)   # imm = 0x3B689C1D
	jne	.LBB216_98
.LBB216_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_97
.Lfunc_end216:
	.size	find_sad_16x16.175, .Lfunc_end216-find_sad_16x16.175
	.cfi_endproc
                                        # -- End function
	.globl	writeCBPandLumaCoeff.176 # -- Begin function writeCBPandLumaCoeff.176
	.p2align	4, 0x90
	.type	writeCBPandLumaCoeff.176,@function
writeCBPandLumaCoeff.176:               # @writeCBPandLumaCoeff.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1502169922, -100(%rbp) # imm = 0x59894B42
	movl	$0, -24(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -88(%rbp)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB217_31
# %bb.1:                                # %if.then
	movl	-64(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB217_4
# %bb.2:                                # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$12, 72(%rax)
	je	.LBB217_4
# %bb.3:                                # %lor.lhs.false15
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB217_7
.LBB217_4:                              # %if.then18
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_6
# %bb.5:                                # %if.then20
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_intra, %rcx
	movq	%rcx, 32(%rax)
.LBB217_6:                              # %if.end
	movq	-16(%rbp), %rax
	movl	$6, (%rax)
	jmp	.LBB217_10
.LBB217_7:                              # %if.else
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_9
# %bb.8:                                # %if.then23
	movq	-16(%rbp), %rax
	movabsq	$cbp_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
.LBB217_9:                              # %if.end25
	movq	-16(%rbp), %rax
	movl	$11, (%rax)
.LBB217_10:                             # %if.end27
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB217_12
# %bb.11:                               # %if.then30
	movq	-16(%rbp), %rax
	movabsq	$writeCBP_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB217_12:                             # %if.end31
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	cmpl	$1, 72(%rax)
	jl	.LBB217_14
# %bb.13:                               # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$3, 72(%rax)
	jle	.LBB217_18
.LBB217_14:                             # %lor.lhs.false45
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB217_17
# %bb.15:                               # %land.lhs.true48
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB217_17
# %bb.16:                               # %land.lhs.true51
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	jne	.LBB217_18
.LBB217_17:                             # %lor.lhs.false52
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 576(%rcx)
	je	.LBB217_22
.LBB217_18:                             # %land.lhs.true54
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$13, 72(%rcx)
	je	.LBB217_22
# %bb.19:                               # %land.lhs.true57
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$9, 72(%rcx)
	je	.LBB217_22
# %bb.20:                               # %land.lhs.true60
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	460(%rcx), %ecx
	andl	$15, %ecx
	cmpl	$0, %ecx
	je	.LBB217_22
# %bb.21:                               # %land.rhs
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	setne	%al
.LBB217_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -104(%rbp)
	je	.LBB217_30
# %bb.23:                               # %if.then65
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_25
# %bb.24:                               # %if.then70
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB217_26
.LBB217_25:                             # %if.else72
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB217_26:                             # %if.end74
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_28
# %bb.27:                               # %if.then77
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB217_29
.LBB217_28:                             # %if.else81
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
.LBB217_29:                             # %if.end84
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB217_30:                             # %if.end93
	jmp	.LBB217_31
.LBB217_31:                             # %if.end94
	cmpl	$0, -64(%rbp)
	jne	.LBB217_33
# %bb.32:                               # %lor.lhs.false96
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB217_42
.LBB217_33:                             # %if.then99
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_35
# %bb.34:                               # %if.then103
	movq	-16(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB217_36
.LBB217_35:                             # %if.else105
	movq	-16(%rbp), %rax
	movabsq	$writeDquant_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB217_36:                             # %if.end107
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB217_40
# %bb.37:                               # %land.lhs.true110
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB217_40
# %bb.38:                               # %land.lhs.true113
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB217_40
# %bb.39:                               # %if.then116
	movq	-16(%rbp), %rax
	movl	$16, (%rax)
	jmp	.LBB217_41
.LBB217_40:                             # %if.else118
	movq	-16(%rbp), %rax
	movl	$17, (%rax)
.LBB217_41:                             # %if.end120
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB217_42:                             # %if.end138
	movl	$0, -40(%rbp)
.LBB217_43:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_45 Depth 2
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB217_50
# %bb.44:                               # %for.body
                                        #   in Loop: Header=BB217_43 Depth=1
	movl	$0, -20(%rbp)
.LBB217_45:                             # %for.cond141
                                        #   Parent Loop BB217_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB217_48
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB217_45 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc
                                        #   in Loop: Header=BB217_45 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB217_45
.LBB217_48:                             # %for.end
                                        #   in Loop: Header=BB217_43 Depth=1
	jmp	.LBB217_49
.LBB217_49:                             # %for.inc152
                                        #   in Loop: Header=BB217_43 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB217_43
.LBB217_50:                             # %for.end154
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB217_58
# %bb.51:                               # %if.then157
	movl	$0, -20(%rbp)
.LBB217_52:                             # %for.cond158
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB217_57
# %bb.53:                               # %for.body160
                                        #   in Loop: Header=BB217_52 Depth=1
	movl	-64(%rbp), %eax
	movl	-20(%rbp), %ecx
                                        # kill: def $cl killed $ecx
	movl	$1, %edx
	shll	%cl, %edx
	andl	%edx, %eax
	cmpl	$0, %eax
	je	.LBB217_55
# %bb.54:                               # %if.then163
                                        #   in Loop: Header=BB217_52 Depth=1
	movl	-20(%rbp), %edi
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %esi
	movq	-32(%rbp), %rax
	movl	572(%rax), %edx
	callq	writeLumaCoeff8x8
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
.LBB217_55:                             # %if.end169
                                        #   in Loop: Header=BB217_52 Depth=1
	jmp	.LBB217_56
.LBB217_56:                             # %for.inc170
                                        #   in Loop: Header=BB217_52 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB217_52
.LBB217_57:                             # %for.end172
	jmp	.LBB217_101
.LBB217_58:                             # %if.else173
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_60
# %bb.59:                               # %if.then176
	movl	$1, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB217_70
.LBB217_60:                             # %if.else179
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB217_61:                             # %for.cond180
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jg	.LBB217_63
# %bb.62:                               # %land.rhs182
                                        #   in Loop: Header=BB217_61 Depth=1
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB217_63:                             # %land.end184
                                        #   in Loop: Header=BB217_61 Depth=1
	testb	$1, %al
	jne	.LBB217_64
	jmp	.LBB217_69
.LBB217_64:                             # %for.body186
                                        #   in Loop: Header=BB217_61 Depth=1
	movq	-120(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_66
# %bb.65:                               # %if.then194
                                        #   in Loop: Header=BB217_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB217_67
.LBB217_66:                             # %if.else196
                                        #   in Loop: Header=BB217_61 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB217_67:                             # %if.end198
                                        #   in Loop: Header=BB217_61 Depth=1
	movq	-16(%rbp), %rax
	movl	$0, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$7, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.68:                               # %for.inc216
                                        #   in Loop: Header=BB217_61 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB217_61
.LBB217_69:                             # %for.end218
	jmp	.LBB217_70
.LBB217_70:                             # %if.end219
	movl	-64(%rbp), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB217_100
# %bb.71:                               # %if.then222
	movl	$0, -60(%rbp)
.LBB217_72:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB217_74 Depth 2
                                        #       Child Loop BB217_76 Depth 3
                                        #         Child Loop BB217_78 Depth 4
                                        #           Child Loop BB217_82 Depth 5
	cmpl	$4, -60(%rbp)
	jge	.LBB217_99
# %bb.73:                               # %for.body225
                                        #   in Loop: Header=BB217_72 Depth=1
	movl	$0, -56(%rbp)
.LBB217_74:                             # %for.cond226
                                        #   Parent Loop BB217_72 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB217_76 Depth 3
                                        #         Child Loop BB217_78 Depth 4
                                        #           Child Loop BB217_82 Depth 5
	cmpl	$4, -56(%rbp)
	jge	.LBB217_97
# %bb.75:                               # %for.body228
                                        #   in Loop: Header=BB217_74 Depth=2
	movl	-60(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB217_76:                             # %for.cond229
                                        #   Parent Loop BB217_72 Depth=1
                                        #     Parent Loop BB217_74 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB217_78 Depth 4
                                        #           Child Loop BB217_82 Depth 5
	movl	-40(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB217_95
# %bb.77:                               # %for.body232
                                        #   in Loop: Header=BB217_76 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB217_78:                             # %for.cond233
                                        #   Parent Loop BB217_72 Depth=1
                                        #     Parent Loop BB217_74 Depth=2
                                        #       Parent Loop BB217_76 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB217_82 Depth 5
	movl	-20(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB217_93
# %bb.79:                               # %for.body236
                                        #   in Loop: Header=BB217_78 Depth=4
	movl	-40(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -72(%rbp)
	movl	-40(%rbp), %eax
	cltd
	idivl	%esi
	movl	%edx, %ecx
	shll	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	%esi
	addl	%edx, %ecx
	movl	%ecx, -68(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_81
# %bb.80:                               # %if.then244
                                        #   in Loop: Header=BB217_78 Depth=4
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movl	$2, %edi
	xorl	%ecx, %ecx
	callq	writeCoeff4x4_CAVLC
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB217_91
.LBB217_81:                             # %if.else247
                                        #   in Loop: Header=BB217_78 Depth=4
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$1, -52(%rbp)
	movl	$0, -36(%rbp)
.LBB217_82:                             # %for.cond259
                                        #   Parent Loop BB217_72 Depth=1
                                        #     Parent Loop BB217_74 Depth=2
                                        #       Parent Loop BB217_76 Depth=3
                                        #         Parent Loop BB217_78 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	xorl	%eax, %eax
	cmpl	$16, -36(%rbp)
	jge	.LBB217_84
# %bb.83:                               # %land.rhs261
                                        #   in Loop: Header=BB217_82 Depth=5
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB217_84:                             # %land.end263
                                        #   in Loop: Header=BB217_82 Depth=5
	testb	$1, %al
	jne	.LBB217_85
	jmp	.LBB217_90
.LBB217_85:                             # %for.body265
                                        #   in Loop: Header=BB217_82 Depth=5
	movq	-144(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB217_87
# %bb.86:                               # %if.then274
                                        #   in Loop: Header=BB217_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB217_88
.LBB217_87:                             # %if.else276
                                        #   in Loop: Header=BB217_82 Depth=5
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB217_88:                             # %if.end278
                                        #   in Loop: Header=BB217_82 Depth=5
	movq	-16(%rbp), %rax
	movl	$1, 24(%rax)
	movq	-16(%rbp), %rax
	movl	$9, (%rax)
	movq	img, %rax
	movl	$1, 80(%rax)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-88(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-80(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -24(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.89:                               # %for.inc298
                                        #   in Loop: Header=BB217_82 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB217_82
.LBB217_90:                             # %for.end300
                                        #   in Loop: Header=BB217_78 Depth=4
	jmp	.LBB217_91
.LBB217_91:                             # %if.end301
                                        #   in Loop: Header=BB217_78 Depth=4
	jmp	.LBB217_92
.LBB217_92:                             # %for.inc302
                                        #   in Loop: Header=BB217_78 Depth=4
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB217_78
.LBB217_93:                             # %for.end304
                                        #   in Loop: Header=BB217_76 Depth=3
	jmp	.LBB217_94
.LBB217_94:                             # %for.inc305
                                        #   in Loop: Header=BB217_76 Depth=3
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB217_76
.LBB217_95:                             # %for.end307
                                        #   in Loop: Header=BB217_74 Depth=2
	jmp	.LBB217_96
.LBB217_96:                             # %for.inc308
                                        #   in Loop: Header=BB217_74 Depth=2
	movl	-56(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	jmp	.LBB217_74
.LBB217_97:                             # %for.end310
                                        #   in Loop: Header=BB217_72 Depth=1
	jmp	.LBB217_98
.LBB217_98:                             # %for.inc311
                                        #   in Loop: Header=BB217_72 Depth=1
	movl	-60(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -60(%rbp)
	jmp	.LBB217_72
.LBB217_99:                             # %for.end313
	jmp	.LBB217_100
.LBB217_100:                            # %if.end314
	jmp	.LBB217_101
.LBB217_101:                            # %if.end315
	movl	-24(%rbp), %ebx
	cmpl	$1502169922, -100(%rbp) # imm = 0x59894B42
	jne	.LBB217_103
.LBB217_102:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_103:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_102
.Lfunc_end217:
	.size	writeCBPandLumaCoeff.176, .Lfunc_end217-writeCBPandLumaCoeff.176
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.177 # -- Begin function IntraChromaPrediction.177
	.p2align	4, 0x90
	.type	IntraChromaPrediction.177,@function
IntraChromaPrediction.177:              # @IntraChromaPrediction.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1359492308, -164(%rbp) # imm = 0x510834D4
	movq	%rdi, -176(%rbp)
	movq	%rsi, -192(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -116(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB218_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB218_1 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB218_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_1
.LBB218_4:                              # %for.end
	movl	-116(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB218_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB218_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB218_8
.LBB218_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB218_8
.LBB218_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB218_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB218_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB218_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB218_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB218_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB218_13
.LBB218_12:                             # %cond.false32
                                        #   in Loop: Header=BB218_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB218_13
.LBB218_13:                             # %cond.end33
                                        #   in Loop: Header=BB218_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB218_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_9
.LBB218_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB218_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB218_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB218_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB218_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB218_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB218_20
.LBB218_19:                             # %cond.false57
                                        #   in Loop: Header=BB218_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB218_20
.LBB218_20:                             # %cond.end58
                                        #   in Loop: Header=BB218_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB218_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_16
.LBB218_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB218_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB218_25
.LBB218_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB218_25
.LBB218_25:                             # %cond.end75
	movl	%eax, -92(%rbp)
.LBB218_26:                             # %if.end
	cmpq	$0, -176(%rbp)
	je	.LBB218_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB218_28:                             # %if.end79
	cmpq	$0, -192(%rbp)
	je	.LBB218_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB218_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB218_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB218_32:                             # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB218_34
# %bb.33:                               # %if.then88
	movl	-92(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB218_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB218_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_37 Depth 2
                                        #       Child Loop BB218_39 Depth 3
                                        #         Child Loop BB218_104 Depth 4
                                        #         Child Loop BB218_110 Depth 4
                                        #         Child Loop BB218_85 Depth 4
                                        #         Child Loop BB218_91 Depth 4
                                        #         Child Loop BB218_66 Depth 4
                                        #         Child Loop BB218_72 Depth 4
                                        #         Child Loop BB218_44 Depth 4
                                        #         Child Loop BB218_50 Depth 4
                                        #         Child Loop BB218_125 Depth 4
                                        #           Child Loop BB218_127 Depth 5
                                        #     Child Loop BB218_138 Depth 2
                                        #     Child Loop BB218_142 Depth 2
                                        #       Child Loop BB218_144 Depth 3
                                        #     Child Loop BB218_153 Depth 2
                                        #     Child Loop BB218_157 Depth 2
                                        #       Child Loop BB218_159 Depth 3
                                        #     Child Loop BB218_170 Depth 2
                                        #     Child Loop BB218_174 Depth 2
                                        #     Child Loop BB218_178 Depth 2
                                        #       Child Loop BB218_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB218_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB218_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB218_37:                             # %for.cond95
                                        #   Parent Loop BB218_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB218_39 Depth 3
                                        #         Child Loop BB218_104 Depth 4
                                        #         Child Loop BB218_110 Depth 4
                                        #         Child Loop BB218_85 Depth 4
                                        #         Child Loop BB218_91 Depth 4
                                        #         Child Loop BB218_66 Depth 4
                                        #         Child Loop BB218_72 Depth 4
                                        #         Child Loop BB218_44 Depth 4
                                        #         Child Loop BB218_50 Depth 4
                                        #         Child Loop BB218_125 Depth 4
                                        #           Child Loop BB218_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB218_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB218_37 Depth=2
	movl	$0, -84(%rbp)
.LBB218_39:                             # %for.cond99
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB218_104 Depth 4
                                        #         Child Loop BB218_110 Depth 4
                                        #         Child Loop BB218_85 Depth 4
                                        #         Child Loop BB218_91 Depth 4
                                        #         Child Loop BB218_66 Depth 4
                                        #         Child Loop BB218_72 Depth 4
                                        #         Child Loop BB218_44 Depth 4
                                        #         Child Loop BB218_50 Depth 4
                                        #         Child Loop BB218_125 Depth 4
                                        #           Child Loop BB218_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB218_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB218_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -40(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -64(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB218_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB218_39 Depth=3
	movq	.LJTI218_0(,%rax,8), %rax
	jmpq	*%rax
.LBB218_42:                             # %sw.bb
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB218_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB218_44:                             # %for.cond124
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_37 Depth=2
                                        #       Parent Loop BB218_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB218_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB218_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_44
.LBB218_47:                             # %for.end138
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_48
.LBB218_48:                             # %if.end139
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB218_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB218_50:                             # %for.cond143
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_37 Depth=2
                                        #       Parent Loop BB218_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB218_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB218_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_50
.LBB218_53:                             # %for.end162
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_54
.LBB218_54:                             # %if.end163
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB218_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB218_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB218_63
.LBB218_57:                             # %if.else
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB218_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB218_62
.LBB218_59:                             # %if.else174
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB218_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB218_61:                             # %if.end180
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_62
.LBB218_62:                             # %if.end181
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_63
.LBB218_63:                             # %if.end182
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_124
.LBB218_64:                             # %sw.bb183
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB218_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB218_66:                             # %for.cond186
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_37 Depth=2
                                        #       Parent Loop BB218_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB218_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB218_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_66
.LBB218_69:                             # %for.end202
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_77
.LBB218_70:                             # %if.else203
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB218_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB218_72:                             # %for.cond207
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_37 Depth=2
                                        #       Parent Loop BB218_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB218_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB218_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_72
.LBB218_75:                             # %for.end226
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_76
.LBB218_76:                             # %if.end227
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_77
.LBB218_77:                             # %if.end228
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB218_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB218_82
.LBB218_79:                             # %if.else233
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB218_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB218_81:                             # %if.end239
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_82
.LBB218_82:                             # %if.end240
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_124
.LBB218_83:                             # %sw.bb241
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB218_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB218_85:                             # %for.cond245
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_37 Depth=2
                                        #       Parent Loop BB218_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB218_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB218_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_85
.LBB218_88:                             # %for.end264
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_96
.LBB218_89:                             # %if.else265
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB218_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB218_91:                             # %for.cond268
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_37 Depth=2
                                        #       Parent Loop BB218_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB218_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB218_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_91
.LBB218_94:                             # %for.end284
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_95
.LBB218_95:                             # %if.end285
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_96
.LBB218_96:                             # %if.end286
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB218_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB218_101
.LBB218_98:                             # %if.else292
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB218_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB218_100:                            # %if.end297
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_101
.LBB218_101:                            # %if.end298
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_124
.LBB218_102:                            # %sw.bb299
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB218_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB218_104:                            # %for.cond302
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_37 Depth=2
                                        #       Parent Loop BB218_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB218_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB218_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_104
.LBB218_107:                            # %for.end318
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_108
.LBB218_108:                            # %if.end319
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB218_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB218_110:                            # %for.cond323
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_37 Depth=2
                                        #       Parent Loop BB218_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB218_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB218_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_110
.LBB218_113:                            # %for.end342
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_114
.LBB218_114:                            # %if.end343
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB218_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB218_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB218_123
.LBB218_117:                            # %if.else352
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB218_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB218_122
.LBB218_119:                            # %if.else357
                                        #   in Loop: Header=BB218_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB218_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB218_121:                            # %if.end363
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_122
.LBB218_122:                            # %if.end364
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_123
.LBB218_123:                            # %if.end365
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_124
.LBB218_124:                            # %sw.epilog
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB218_125:                            # %for.cond366
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_37 Depth=2
                                        #       Parent Loop BB218_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB218_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB218_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB218_127:                            # %for.cond371
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_37 Depth=2
                                        #       Parent Loop BB218_39 Depth=3
                                        #         Parent Loop BB218_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB218_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB218_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_127
.LBB218_130:                            # %for.end386
                                        #   in Loop: Header=BB218_125 Depth=4
	jmp	.LBB218_131
.LBB218_131:                            # %for.inc387
                                        #   in Loop: Header=BB218_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_125
.LBB218_132:                            # %for.end389
                                        #   in Loop: Header=BB218_39 Depth=3
	jmp	.LBB218_133
.LBB218_133:                            # %for.inc390
                                        #   in Loop: Header=BB218_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB218_39
.LBB218_134:                            # %for.end392
                                        #   in Loop: Header=BB218_37 Depth=2
	jmp	.LBB218_135
.LBB218_135:                            # %for.inc393
                                        #   in Loop: Header=BB218_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB218_37
.LBB218_136:                            # %for.end395
                                        #   in Loop: Header=BB218_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB218_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB218_35 Depth=1
	movl	$0, -4(%rbp)
.LBB218_138:                            # %for.cond398
                                        #   Parent Loop BB218_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB218_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB218_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB218_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_138
.LBB218_141:                            # %for.end414
                                        #   in Loop: Header=BB218_35 Depth=1
	movl	$0, -4(%rbp)
.LBB218_142:                            # %for.cond415
                                        #   Parent Loop BB218_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB218_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB218_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB218_142 Depth=2
	movl	$0, -8(%rbp)
.LBB218_144:                            # %for.cond419
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB218_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB218_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB218_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_144
.LBB218_147:                            # %for.end436
                                        #   in Loop: Header=BB218_142 Depth=2
	jmp	.LBB218_148
.LBB218_148:                            # %for.inc437
                                        #   in Loop: Header=BB218_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_142
.LBB218_149:                            # %for.end439
                                        #   in Loop: Header=BB218_35 Depth=1
	jmp	.LBB218_150
.LBB218_150:                            # %if.end440
                                        #   in Loop: Header=BB218_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB218_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB218_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB218_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB218_35 Depth=1
	movl	$0, -4(%rbp)
.LBB218_153:                            # %for.cond447
                                        #   Parent Loop BB218_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB218_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB218_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB218_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_153
.LBB218_156:                            # %for.end468
                                        #   in Loop: Header=BB218_35 Depth=1
	movl	$0, -4(%rbp)
.LBB218_157:                            # %for.cond469
                                        #   Parent Loop BB218_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB218_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB218_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB218_157 Depth=2
	movl	$0, -8(%rbp)
.LBB218_159:                            # %for.cond473
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB218_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB218_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB218_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_159
.LBB218_162:                            # %for.end490
                                        #   in Loop: Header=BB218_157 Depth=2
	jmp	.LBB218_163
.LBB218_163:                            # %for.inc491
                                        #   in Loop: Header=BB218_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_157
.LBB218_164:                            # %for.end493
                                        #   in Loop: Header=BB218_35 Depth=1
	jmp	.LBB218_165
.LBB218_165:                            # %if.end494
                                        #   in Loop: Header=BB218_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB218_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB218_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB218_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB218_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB218_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB218_35 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB218_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB218_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB218_170:                            # %for.cond519
                                        #   Parent Loop BB218_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB218_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB218_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB218_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_170
.LBB218_173:                            # %for.end540
                                        #   in Loop: Header=BB218_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB218_174:                            # %for.cond556
                                        #   Parent Loop BB218_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB218_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB218_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB218_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_174
.LBB218_177:                            # %for.end577
                                        #   in Loop: Header=BB218_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -96(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -104(%rbp)
	movl	$0, -8(%rbp)
.LBB218_178:                            # %for.cond606
                                        #   Parent Loop BB218_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB218_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB218_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB218_178 Depth=2
	movl	$0, -4(%rbp)
.LBB218_180:                            # %for.cond610
                                        #   Parent Loop BB218_35 Depth=1
                                        #     Parent Loop BB218_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB218_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB218_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB218_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB218_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB218_184
.LBB218_183:                            # %cond.false630
                                        #   in Loop: Header=BB218_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB218_184:                            # %cond.end643
                                        #   in Loop: Header=BB218_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB218_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB218_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB218_190
.LBB218_186:                            # %cond.false648
                                        #   in Loop: Header=BB218_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-104(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-96(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB218_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB218_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB218_189
.LBB218_188:                            # %cond.false666
                                        #   in Loop: Header=BB218_180 Depth=3
	movl	-104(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-96(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB218_189:                            # %cond.end679
                                        #   in Loop: Header=BB218_180 Depth=3
.LBB218_190:                            # %cond.end681
                                        #   in Loop: Header=BB218_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB218_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_180
.LBB218_192:                            # %for.end694
                                        #   in Loop: Header=BB218_178 Depth=2
	jmp	.LBB218_193
.LBB218_193:                            # %for.inc695
                                        #   in Loop: Header=BB218_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_178
.LBB218_194:                            # %for.end697
                                        #   in Loop: Header=BB218_35 Depth=1
	jmp	.LBB218_195
.LBB218_195:                            # %if.end698
                                        #   in Loop: Header=BB218_35 Depth=1
	jmp	.LBB218_196
.LBB218_196:                            # %for.inc699
                                        #   in Loop: Header=BB218_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB218_35
.LBB218_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB218_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB218_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB218_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB218_199 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB218_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_199
.LBB218_202:                            # %for.end712
	movl	$0, -44(%rbp)
.LBB218_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_219 Depth 2
                                        #       Child Loop BB218_221 Depth 3
                                        #         Child Loop BB218_223 Depth 4
                                        #           Child Loop BB218_225 Depth 5
                                        #             Child Loop BB218_227 Depth 6
	cmpl	$3, -44(%rbp)
	jg	.LBB218_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB218_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB218_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB218_203 Depth=1
	cmpl	$0, -44(%rbp)
	je	.LBB218_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB218_203 Depth=1
	jmp	.LBB218_241
.LBB218_207:                            # %if.end723
                                        #   in Loop: Header=BB218_203 Depth=1
	cmpl	$2, -44(%rbp)
	jne	.LBB218_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB218_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB218_217
.LBB218_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB218_203 Depth=1
	cmpl	$1, -44(%rbp)
	jne	.LBB218_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB218_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB218_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB218_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB218_217
.LBB218_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB218_203 Depth=1
	cmpl	$3, -44(%rbp)
	jne	.LBB218_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB218_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB218_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB218_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB218_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB218_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB218_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB218_203 Depth=1
	cmpl	$0, -92(%rbp)
	jne	.LBB218_218
.LBB218_217:                            # %if.then749
                                        #   in Loop: Header=BB218_203 Depth=1
	jmp	.LBB218_241
.LBB218_218:                            # %if.end750
                                        #   in Loop: Header=BB218_203 Depth=1
	movl	$0, -100(%rbp)
	movl	$0, -24(%rbp)
.LBB218_219:                            # %for.cond751
                                        #   Parent Loop BB218_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB218_221 Depth 3
                                        #         Child Loop BB218_223 Depth 4
                                        #           Child Loop BB218_225 Depth 5
                                        #             Child Loop BB218_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB218_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB218_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -40(%rbp)
.LBB218_221:                            # %for.cond757
                                        #   Parent Loop BB218_203 Depth=1
                                        #     Parent Loop BB218_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB218_223 Depth 4
                                        #           Child Loop BB218_225 Depth 5
                                        #             Child Loop BB218_227 Depth 6
	movl	-40(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB218_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB218_221 Depth=3
	movl	$0, -48(%rbp)
.LBB218_223:                            # %for.cond761
                                        #   Parent Loop BB218_203 Depth=1
                                        #     Parent Loop BB218_219 Depth=2
                                        #       Parent Loop BB218_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB218_225 Depth 5
                                        #             Child Loop BB218_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB218_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB218_223 Depth=4
	movl	$0, -124(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB218_225:                            # %for.cond765
                                        #   Parent Loop BB218_203 Depth=1
                                        #     Parent Loop BB218_219 Depth=2
                                        #       Parent Loop BB218_221 Depth=3
                                        #         Parent Loop BB218_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB218_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-40(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB218_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB218_227:                            # %for.cond770
                                        #   Parent Loop BB218_203 Depth=1
                                        #     Parent Loop BB218_219 Depth=2
                                        #       Parent Loop BB218_221 Depth=3
                                        #         Parent Loop BB218_223 Depth=4
                                        #           Parent Loop BB218_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB218_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB218_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-124(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB218_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-124(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -124(%rbp)
	jmp	.LBB218_227
.LBB218_230:                            # %for.end803
                                        #   in Loop: Header=BB218_225 Depth=5
	jmp	.LBB218_231
.LBB218_231:                            # %for.inc804
                                        #   in Loop: Header=BB218_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_225
.LBB218_232:                            # %for.end806
                                        #   in Loop: Header=BB218_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB218_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB218_223
.LBB218_234:                            # %for.end810
                                        #   in Loop: Header=BB218_221 Depth=3
	jmp	.LBB218_235
.LBB218_235:                            # %for.inc811
                                        #   in Loop: Header=BB218_221 Depth=3
	movl	-40(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB218_221
.LBB218_236:                            # %for.end813
                                        #   in Loop: Header=BB218_219 Depth=2
	jmp	.LBB218_237
.LBB218_237:                            # %for.inc814
                                        #   in Loop: Header=BB218_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB218_219
.LBB218_238:                            # %for.end816
                                        #   in Loop: Header=BB218_203 Depth=1
	movl	-100(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB218_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB218_203 Depth=1
	movl	-44(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB218_240:                            # %if.end820
                                        #   in Loop: Header=BB218_203 Depth=1
	jmp	.LBB218_241
.LBB218_241:                            # %for.inc821
                                        #   in Loop: Header=BB218_203 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB218_203
.LBB218_242:                            # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB218_243:                            # %if.end824
	cmpl	$1359492308, -164(%rbp) # imm = 0x510834D4
	jne	.LBB218_245
.LBB218_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_244
.Lfunc_end218:
	.size	IntraChromaPrediction.177, .Lfunc_end218-IntraChromaPrediction.177
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI218_0:
	.quad	.LBB218_42
	.quad	.LBB218_64
	.quad	.LBB218_83
	.quad	.LBB218_102
                                        # -- End function
	.text
	.globl	LumaResidualCoding.178  # -- Begin function LumaResidualCoding.178
	.p2align	4, 0x90
	.type	LumaResidualCoding.178,@function
LumaResidualCoding.178:                 # @LumaResidualCoding.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$498794299, -44(%rbp)   # imm = 0x1DBAFF3B
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -12(%rbp)
.LBB219_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB219_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB219_1 Depth=1
	movl	-12(%rbp), %edi
	leaq	-20(%rbp), %rsi
	leaq	-52(%rbp), %rdx
	leaq	-36(%rbp), %rcx
	leaq	-18(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-12(%rbp), %edx
	movw	-20(%rbp), %ax
	movl	-52(%rbp), %r8d
	movl	-36(%rbp), %r9d
	movw	-18(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB219_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB219_1
.LBB219_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB219_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB219_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB219_33
.LBB219_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -4(%rbp)
.LBB219_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_10 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB219_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB219_8 Depth=1
	movl	$0, -8(%rbp)
.LBB219_10:                             # %for.cond13
                                        #   Parent Loop BB219_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB219_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB219_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB219_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB219_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB219_14
.LBB219_13:                             # %if.else
                                        #   in Loop: Header=BB219_10 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB219_14:                             # %if.end
                                        #   in Loop: Header=BB219_10 Depth=2
	jmp	.LBB219_15
.LBB219_15:                             # %for.inc31
                                        #   in Loop: Header=BB219_10 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_10
.LBB219_16:                             # %for.end33
                                        #   in Loop: Header=BB219_8 Depth=1
	jmp	.LBB219_17
.LBB219_17:                             # %for.inc34
                                        #   in Loop: Header=BB219_8 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_8
.LBB219_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB219_32
# %bb.19:                               # %if.then38
	movl	$0, -12(%rbp)
.LBB219_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_22 Depth 2
                                        #       Child Loop BB219_24 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB219_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB219_20 Depth=1
	movl	-12(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -40(%rbp)
	movl	-12(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -48(%rbp)
	movl	$0, -4(%rbp)
.LBB219_22:                             # %for.cond45
                                        #   Parent Loop BB219_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB219_24 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB219_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB219_22 Depth=2
	movl	$0, -8(%rbp)
.LBB219_24:                             # %for.cond48
                                        #   Parent Loop BB219_20 Depth=1
                                        #     Parent Loop BB219_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB219_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB219_24 Depth=3
	movl	-40(%rbp), %edi
	addl	-4(%rbp), %edi
	movl	-48(%rbp), %esi
	addl	-8(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB219_24 Depth=3
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_24
.LBB219_27:                             # %for.end55
                                        #   in Loop: Header=BB219_22 Depth=2
	jmp	.LBB219_28
.LBB219_28:                             # %for.inc56
                                        #   in Loop: Header=BB219_22 Depth=2
	movl	-4(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_22
.LBB219_29:                             # %for.end58
                                        #   in Loop: Header=BB219_20 Depth=1
	jmp	.LBB219_30
.LBB219_30:                             # %for.inc59
                                        #   in Loop: Header=BB219_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB219_20
.LBB219_31:                             # %for.end61
	jmp	.LBB219_32
.LBB219_32:                             # %if.end62
	jmp	.LBB219_33
.LBB219_33:                             # %if.end63
	cmpl	$498794299, -44(%rbp)   # imm = 0x1DBAFF3B
	jne	.LBB219_35
.LBB219_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB219_34
.Lfunc_end219:
	.size	LumaResidualCoding.178, .Lfunc_end219-LumaResidualCoding.178
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.179   # -- Begin function LumaPrediction4x4.179
	.p2align	4, 0x90
	.type	LumaPrediction4x4.179,@function
LumaPrediction4x4.179:                  # @LumaPrediction4x4.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$285323628, -100(%rbp)  # imm = 0x1101B16C
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -52(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB220_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB220_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB220_6
.LBB220_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB220_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB220_5:                              # %land.end
.LBB220_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB220_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB220_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB220_10
.LBB220_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB220_10
.LBB220_10:                             # %cond.end
	movl	%ecx, -64(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB220_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB220_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB220_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -16(%rbp)
	jne	.LBB220_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -52(%rbp)
	jne	.LBB220_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -72(%rbp)
	jne	.LBB220_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB220_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB220_19
.LBB220_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB220_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB220_20:                             # %if.end
	cmpl	$0, -16(%rbp)
	je	.LBB220_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -16(%rbp)
	jne	.LBB220_23
.LBB220_22:                             # %if.then45
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB220_23:                             # %if.end58
	cmpl	$1, -16(%rbp)
	je	.LBB220_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -16(%rbp)
	jne	.LBB220_26
.LBB220_25:                             # %if.then64
	movl	-56(%rbp), %esi
	movl	-68(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-64(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB220_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB220_58
# %bb.27:                               # %if.then79
	cmpl	$2, -16(%rbp)
	jne	.LBB220_37
# %bb.28:                               # %if.then82
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB220_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB220_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB220_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB220_31:                             # %for.cond85
                                        #   Parent Loop BB220_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB220_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB220_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB220_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB220_31
.LBB220_34:                             # %for.end
                                        #   in Loop: Header=BB220_29 Depth=1
	jmp	.LBB220_35
.LBB220_35:                             # %for.inc125
                                        #   in Loop: Header=BB220_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB220_29
.LBB220_36:                             # %for.end127
	jmp	.LBB220_57
.LBB220_37:                             # %if.else
	cmpl	$0, -16(%rbp)
	jne	.LBB220_47
# %bb.38:                               # %if.then130
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB220_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB220_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB220_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB220_41:                             # %for.cond135
                                        #   Parent Loop BB220_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB220_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB220_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB220_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB220_41
.LBB220_44:                             # %for.end161
                                        #   in Loop: Header=BB220_39 Depth=1
	jmp	.LBB220_45
.LBB220_45:                             # %for.inc162
                                        #   in Loop: Header=BB220_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB220_39
.LBB220_46:                             # %for.end164
	jmp	.LBB220_56
.LBB220_47:                             # %if.else165
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB220_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB220_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB220_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB220_50:                             # %for.cond170
                                        #   Parent Loop BB220_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB220_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB220_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB220_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB220_50
.LBB220_53:                             # %for.end196
                                        #   in Loop: Header=BB220_48 Depth=1
	jmp	.LBB220_54
.LBB220_54:                             # %for.inc197
                                        #   in Loop: Header=BB220_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB220_48
.LBB220_55:                             # %for.end199
	jmp	.LBB220_56
.LBB220_56:                             # %if.end200
	jmp	.LBB220_57
.LBB220_57:                             # %if.end201
	jmp	.LBB220_89
.LBB220_58:                             # %if.else202
	cmpl	$2, -16(%rbp)
	jne	.LBB220_68
# %bb.59:                               # %if.then205
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB220_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB220_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB220_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB220_62:                             # %for.cond210
                                        #   Parent Loop BB220_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB220_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB220_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB220_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB220_62
.LBB220_65:                             # %for.end226
                                        #   in Loop: Header=BB220_60 Depth=1
	jmp	.LBB220_66
.LBB220_66:                             # %for.inc227
                                        #   in Loop: Header=BB220_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB220_60
.LBB220_67:                             # %for.end229
	jmp	.LBB220_88
.LBB220_68:                             # %if.else230
	cmpl	$0, -16(%rbp)
	jne	.LBB220_78
# %bb.69:                               # %if.then233
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB220_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB220_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB220_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB220_72:                             # %for.cond238
                                        #   Parent Loop BB220_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB220_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB220_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB220_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB220_72
.LBB220_75:                             # %for.end251
                                        #   in Loop: Header=BB220_70 Depth=1
	jmp	.LBB220_76
.LBB220_76:                             # %for.inc252
                                        #   in Loop: Header=BB220_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB220_70
.LBB220_77:                             # %for.end254
	jmp	.LBB220_87
.LBB220_78:                             # %if.else255
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB220_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB220_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB220_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB220_81:                             # %for.cond260
                                        #   Parent Loop BB220_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB220_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB220_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB220_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB220_81
.LBB220_84:                             # %for.end273
                                        #   in Loop: Header=BB220_79 Depth=1
	jmp	.LBB220_85
.LBB220_85:                             # %for.inc274
                                        #   in Loop: Header=BB220_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB220_79
.LBB220_86:                             # %for.end276
	jmp	.LBB220_87
.LBB220_87:                             # %if.end277
	jmp	.LBB220_88
.LBB220_88:                             # %if.end278
	jmp	.LBB220_89
.LBB220_89:                             # %if.end279
	cmpl	$285323628, -100(%rbp)  # imm = 0x1101B16C
	jne	.LBB220_91
.LBB220_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_90
.Lfunc_end220:
	.size	LumaPrediction4x4.179, .Lfunc_end220-LumaPrediction4x4.179
	.cfi_endproc
                                        # -- End function
	.globl	LumaResidualCoding.180  # -- Begin function LumaResidualCoding.180
	.p2align	4, 0x90
	.type	LumaResidualCoding.180,@function
LumaResidualCoding.180:                 # @LumaResidualCoding.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1677128989, -40(%rbp)  # imm = 0x63F6F51D
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	$0, 460(%rax)
	movq	-32(%rbp), %rax
	movq	$0, 464(%rax)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB221_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB221_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB221_1 Depth=1
	movl	-4(%rbp), %edi
	leaq	-18(%rbp), %rsi
	leaq	-48(%rbp), %rdx
	leaq	-52(%rbp), %rcx
	leaq	-20(%rbp), %r8
	leaq	-22(%rbp), %r9
	callq	SetModesAndRefframe
	movq	-32(%rbp), %rdi
	addq	$460, %rdi              # imm = 0x1CC
	movq	-32(%rbp), %rsi
	addq	$464, %rsi              # imm = 0x1D0
	movl	-4(%rbp), %edx
	movw	-18(%rbp), %ax
	movl	-48(%rbp), %r8d
	movl	-52(%rbp), %r9d
	movw	-20(%rbp), %r10w
	movswl	%ax, %ecx
	movswl	%r10w, %eax
	movl	%eax, (%rsp)
	movswl	-22(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	LumaResidualCoding8x8
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB221_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_1
.LBB221_4:                              # %for.end
	cmpl	$5, -16(%rbp)
	jg	.LBB221_33
# %bb.5:                                # %land.lhs.true
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	addl	72668(%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB221_7
# %bb.6:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$0, 72704(%rax)
	jne	.LBB221_33
.LBB221_7:                              # %if.then
	movq	-32(%rbp), %rax
	movl	460(%rax), %ecx
	andl	$16777200, %ecx         # imm = 0xFFFFF0
	movl	%ecx, 460(%rax)
	movq	-32(%rbp), %rax
	movq	464(%rax), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	movq	%rcx, 464(%rax)
	movl	$0, -8(%rbp)
.LBB221_8:                              # %for.cond10
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_10 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB221_18
# %bb.9:                                # %for.body12
                                        #   in Loop: Header=BB221_8 Depth=1
	movl	$0, -12(%rbp)
.LBB221_10:                             # %for.cond13
                                        #   Parent Loop BB221_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -12(%rbp)
	jge	.LBB221_16
# %bb.11:                               # %for.body15
                                        #   in Loop: Header=BB221_10 Depth=2
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB221_13
# %bb.12:                               # %if.then16
                                        #   in Loop: Header=BB221_10 Depth=2
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-12(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB221_14
.LBB221_13:                             # %if.else
                                        #   in Loop: Header=BB221_10 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resG, %rcx
	addq	%rax, %rcx
	movslq	-12(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB221_14:                             # %if.end
                                        #   in Loop: Header=BB221_10 Depth=2
	jmp	.LBB221_15
.LBB221_15:                             # %for.inc31
                                        #   in Loop: Header=BB221_10 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_10
.LBB221_16:                             # %for.end33
                                        #   in Loop: Header=BB221_8 Depth=1
	jmp	.LBB221_17
.LBB221_17:                             # %for.inc34
                                        #   in Loop: Header=BB221_8 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_8
.LBB221_18:                             # %for.end36
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB221_32
# %bb.19:                               # %if.then38
	movl	$0, -4(%rbp)
.LBB221_20:                             # %for.cond39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_22 Depth 2
                                        #       Child Loop BB221_24 Depth 3
	cmpl	$4, -4(%rbp)
	jge	.LBB221_31
# %bb.21:                               # %for.body41
                                        #   in Loop: Header=BB221_20 Depth=1
	movl	-4(%rbp), %eax
	andl	$1, %eax
	shll	$3, %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	andl	$2, %eax
	shll	$2, %eax
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB221_22:                             # %for.cond45
                                        #   Parent Loop BB221_20 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB221_24 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB221_29
# %bb.23:                               # %for.body47
                                        #   in Loop: Header=BB221_22 Depth=2
	movl	$0, -12(%rbp)
.LBB221_24:                             # %for.cond48
                                        #   Parent Loop BB221_20 Depth=1
                                        #     Parent Loop BB221_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -12(%rbp)
	jge	.LBB221_27
# %bb.25:                               # %for.body50
                                        #   in Loop: Header=BB221_24 Depth=3
	movl	-44(%rbp), %edi
	addl	-8(%rbp), %edi
	movl	-36(%rbp), %esi
	addl	-12(%rbp), %esi
	callq	copyblock_sp
# %bb.26:                               # %for.inc53
                                        #   in Loop: Header=BB221_24 Depth=3
	movl	-12(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB221_24
.LBB221_27:                             # %for.end55
                                        #   in Loop: Header=BB221_22 Depth=2
	jmp	.LBB221_28
.LBB221_28:                             # %for.inc56
                                        #   in Loop: Header=BB221_22 Depth=2
	movl	-8(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_22
.LBB221_29:                             # %for.end58
                                        #   in Loop: Header=BB221_20 Depth=1
	jmp	.LBB221_30
.LBB221_30:                             # %for.inc59
                                        #   in Loop: Header=BB221_20 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_20
.LBB221_31:                             # %for.end61
	jmp	.LBB221_32
.LBB221_32:                             # %if.end62
	jmp	.LBB221_33
.LBB221_33:                             # %if.end63
	cmpl	$1677128989, -40(%rbp)  # imm = 0x63F6F51D
	jne	.LBB221_35
.LBB221_34:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_35:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_34
.Lfunc_end221:
	.size	LumaResidualCoding.180, .Lfunc_end221-LumaResidualCoding.180
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.181 # -- Begin function write_terminating_bit.181
	.p2align	4, 0x90
	.type	write_terminating_bit.181,@function
write_terminating_bit.181:              # @write_terminating_bit.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$249530921, -8(%rbp)    # imm = 0xEDF8A29
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$249530921, -8(%rbp)    # imm = 0xEDF8A29
	jne	.LBB222_2
.LBB222_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_1
.Lfunc_end222:
	.size	write_terminating_bit.181, .Lfunc_end222-write_terminating_bit.181
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.182  # -- Begin function writeIntra4x4Modes.182
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.182,@function
writeIntra4x4Modes.182:                 # @writeIntra4x4Modes.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1672424345, -68(%rbp)  # imm = 0x63AF2B99
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB223_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_9 Depth 2
                                        #       Child Loop BB223_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB223_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB223_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB223_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB223_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB223_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB223_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB223_8
.LBB223_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB223_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB223_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB223_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB223_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB223_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB223_17
.LBB223_8:                              # %if.then
                                        #   in Loop: Header=BB223_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -80(%rbp)
	movl	%ecx, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -32(%rbp)
.LBB223_9:                              # %for.cond24
                                        #   Parent Loop BB223_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB223_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB223_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB223_9 Depth=2
	movl	$0, -12(%rbp)
.LBB223_11:                             # %for.cond27
                                        #   Parent Loop BB223_1 Depth=1
                                        #     Parent Loop BB223_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB223_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB223_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB223_11 Depth=3
	movl	-76(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB223_11
.LBB223_14:                             # %for.end
                                        #   in Loop: Header=BB223_9 Depth=2
	jmp	.LBB223_15
.LBB223_15:                             # %for.inc42
                                        #   in Loop: Header=BB223_9 Depth=2
	movl	-72(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB223_9
.LBB223_16:                             # %for.end44
                                        #   in Loop: Header=BB223_1 Depth=1
	jmp	.LBB223_17
.LBB223_17:                             # %if.end
                                        #   in Loop: Header=BB223_1 Depth=1
	jmp	.LBB223_18
.LBB223_18:                             # %for.inc45
                                        #   in Loop: Header=BB223_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB223_1
.LBB223_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB223_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB223_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB223_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB223_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB223_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB223_23:                             # %if.end57
                                        #   in Loop: Header=BB223_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB223_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB223_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB223_26
.LBB223_25:                             # %if.else
                                        #   in Loop: Header=BB223_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB223_26:                             # %if.end65
                                        #   in Loop: Header=BB223_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB223_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB223_20
.LBB223_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1672424345, -68(%rbp)  # imm = 0x63AF2B99
	jne	.LBB223_30
.LBB223_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_29
.Lfunc_end223:
	.size	writeIntra4x4Modes.182, .Lfunc_end223-writeIntra4x4Modes.182
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.183 # -- Begin function writeLumaCoeff8x8_CABAC.183
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.183,@function
writeLumaCoeff8x8_CABAC.183:            # @writeLumaCoeff8x8_CABAC.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1070830398, -60(%rbp)  # imm = 0x3FD3933E
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB224_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB224_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB224_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB224_3:                              # %land.end
                                        #   in Loop: Header=BB224_1 Depth=1
	testb	$1, %al
	jne	.LBB224_4
	jmp	.LBB224_12
.LBB224_4:                              # %for.body
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB224_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB224_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB224_7
.LBB224_6:                              # %cond.false
                                        #   in Loop: Header=BB224_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB224_7:                              # %cond.end
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB224_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB224_10
.LBB224_9:                              # %if.else
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB224_10:                             # %if.end
                                        #   in Loop: Header=BB224_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB224_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB224_1
.LBB224_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$1070830398, -60(%rbp)  # imm = 0x3FD3933E
	jne	.LBB224_14
.LBB224_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_13
.Lfunc_end224:
	.size	writeLumaCoeff8x8_CABAC.183, .Lfunc_end224-writeLumaCoeff8x8_CABAC.183
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.184         # -- Begin function predict_nnz.184
	.p2align	4, 0x90
	.type	predict_nnz.184,@function
predict_nnz.184:                        # @predict_nnz.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$915512196, -56(%rbp)   # imm = 0x36919B84
	movl	%edi, -44(%rbp)
	movl	%esi, -48(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB225_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB225_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB225_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB225_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB225_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB225_6:                              # %if.end14
	movl	-52(%rbp), %edi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB225_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB225_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB225_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB225_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB225_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB225_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB225_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB225_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$915512196, -56(%rbp)   # imm = 0x36919B84
	jne	.LBB225_16
.LBB225_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB225_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB225_15
.Lfunc_end225:
	.size	predict_nnz.184, .Lfunc_end225-predict_nnz.184
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.185 # -- Begin function writeCoeff4x4_CAVLC.185
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.185,@function
writeCoeff4x4_CAVLC.185:                # @writeCoeff4x4_CAVLC.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$20146890, -172(%rbp)   # imm = 0x1336ACA
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -72(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -96(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB226_22
# %bb.1:                                # %entry
	movq	.LJTI226_0(,%rax,8), %rax
	jmpq	*%rax
.LBB226_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB226_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB226_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB226_6
.LBB226_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB226_7
.LBB226_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB226_7:                              # %if.end
	jmp	.LBB226_23
.LBB226_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB226_23
.LBB226_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB226_23
.LBB226_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -96(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-72(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB226_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB226_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB226_14
.LBB226_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB226_15
.LBB226_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB226_15:                             # %if.end67
	jmp	.LBB226_23
.LBB226_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB226_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB226_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB226_20
.LBB226_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB226_21
.LBB226_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB226_21:                             # %if.end93
	jmp	.LBB226_23
.LBB226_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB226_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB226_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -96(%rbp)
	je	.LBB226_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB226_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB226_27
.LBB226_26:                             # %cond.false
                                        #   in Loop: Header=BB226_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB226_27
.LBB226_27:                             # %cond.end
                                        #   in Loop: Header=BB226_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB226_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB226_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB226_29:                             # %land.end
                                        #   in Loop: Header=BB226_24 Depth=1
	testb	$1, %dl
	jne	.LBB226_30
	jmp	.LBB226_41
.LBB226_30:                             # %for.body
                                        #   in Loop: Header=BB226_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB226_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB226_24 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB226_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB226_24 Depth=1
	movl	-84(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB226_33:                             # %if.end110
                                        #   in Loop: Header=BB226_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB226_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB226_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB226_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB226_24 Depth=1
	movl	$3, -32(%rbp)
.LBB226_36:                             # %if.end117
                                        #   in Loop: Header=BB226_24 Depth=1
	jmp	.LBB226_38
.LBB226_37:                             # %if.else118
                                        #   in Loop: Header=BB226_24 Depth=1
	movl	$0, -32(%rbp)
.LBB226_38:                             # %if.end119
                                        #   in Loop: Header=BB226_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -68(%rbp)
.LBB226_39:                             # %if.end121
                                        #   in Loop: Header=BB226_24 Depth=1
	jmp	.LBB226_40
.LBB226_40:                             # %for.inc
                                        #   in Loop: Header=BB226_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB226_24
.LBB226_41:                             # %for.end
	cmpl	$0, -96(%rbp)
	jne	.LBB226_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB226_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB226_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB226_46
.LBB226_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB226_46:                             # %cond.end136
	movl	%eax, -88(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB226_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB226_49
.LBB226_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB226_49:                             # %cond.end145
	movl	%eax, -80(%rbp)
	movl	-88(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB226_51
.LBB226_50:                             # %if.else148
	movl	-72(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -80(%rbp)
	movl	-88(%rbp), %edi
	movl	-80(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB226_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-88(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB226_53
# %bb.52:                               # %if.then160
	movl	$0, -92(%rbp)
	jmp	.LBB226_60
.LBB226_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB226_55
# %bb.54:                               # %if.then163
	movl	$1, -92(%rbp)
	jmp	.LBB226_59
.LBB226_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB226_57
# %bb.56:                               # %if.then166
	movl	$2, -92(%rbp)
	jmp	.LBB226_58
.LBB226_57:                             # %if.else167
	movl	$3, -92(%rbp)
.LBB226_58:                             # %if.end168
	jmp	.LBB226_59
.LBB226_59:                             # %if.end169
	jmp	.LBB226_60
.LBB226_60:                             # %if.end170
	jmp	.LBB226_62
.LBB226_61:                             # %if.else171
	movl	$0, -92(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -80(%rbp)
.LBB226_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -96(%rbp)
	jne	.LBB226_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB226_65
.LBB226_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB226_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB226_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB226_122
.LBB226_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB226_121
# %bb.68:                               # %if.then192
	movl	$0, -104(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB226_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB226_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB226_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB226_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB226_72:                             # %if.end202
                                        #   in Loop: Header=BB226_69 Depth=1
	movl	-104(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -104(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB226_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB226_69 Depth=1
	movl	-104(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -104(%rbp)
.LBB226_74:                             # %if.end205
                                        #   in Loop: Header=BB226_69 Depth=1
	jmp	.LBB226_75
.LBB226_75:                             # %for.inc206
                                        #   in Loop: Header=BB226_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB226_69
.LBB226_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB226_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB226_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB226_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB226_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB226_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB226_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB226_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB226_85
.LBB226_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB226_85:                             # %if.end233
	movl	-68(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB226_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB226_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB226_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB226_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB226_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB226_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB226_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB226_91
.LBB226_90:                             # %if.else249
                                        #   in Loop: Header=BB226_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB226_91:                             # %if.end252
                                        #   in Loop: Header=BB226_86 Depth=1
	movl	$0, -144(%rbp)
.LBB226_92:                             # %if.end253
                                        #   in Loop: Header=BB226_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB226_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB226_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB226_95
.LBB226_94:                             # %if.else257
                                        #   in Loop: Header=BB226_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB226_95:                             # %if.end259
                                        #   in Loop: Header=BB226_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB226_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB226_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB226_97:                             # %if.end266
                                        #   in Loop: Header=BB226_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB226_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB226_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB226_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB226_86 Depth=1
	movl	$2, -28(%rbp)
.LBB226_100:                            # %if.end273
                                        #   in Loop: Header=BB226_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB226_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB226_86
.LBB226_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB226_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -96(%rbp)
	jne	.LBB226_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB226_106
.LBB226_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB226_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB226_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB226_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB226_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB226_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB226_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB226_108 Depth=1
	cmpl	$0, -100(%rbp)
	jne	.LBB226_112
.LBB226_111:                            # %if.then318
	jmp	.LBB226_120
.LBB226_112:                            # %if.end319
                                        #   in Loop: Header=BB226_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB226_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB226_108 Depth=1
	cmpl	$0, -100(%rbp)
	je	.LBB226_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB226_108 Depth=1
	movl	-100(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB226_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB226_108 Depth=1
	movl	$6, -28(%rbp)
.LBB226_116:                            # %if.end327
                                        #   in Loop: Header=BB226_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-84(%rbp), %eax
	movl	-100(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -100(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB226_117:                            # %if.end341
                                        #   in Loop: Header=BB226_108 Depth=1
	jmp	.LBB226_118
.LBB226_118:                            # %for.inc342
                                        #   in Loop: Header=BB226_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB226_108
.LBB226_119:                            # %for.end344.loopexit
	jmp	.LBB226_120
.LBB226_120:                            # %for.end344
	jmp	.LBB226_121
.LBB226_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB226_122:                            # %return
	movl	-160(%rbp), %ebx
	cmpl	$20146890, -172(%rbp)   # imm = 0x1336ACA
	jne	.LBB226_124
.LBB226_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB226_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB226_123
.Lfunc_end226:
	.size	writeCoeff4x4_CAVLC.185, .Lfunc_end226-writeCoeff4x4_CAVLC.185
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI226_0:
	.quad	.LBB226_2
	.quad	.LBB226_8
	.quad	.LBB226_9
	.quad	.LBB226_22
	.quad	.LBB226_22
	.quad	.LBB226_22
	.quad	.LBB226_10
	.quad	.LBB226_16
                                        # -- End function
	.text
	.globl	IntraChromaPrediction.186 # -- Begin function IntraChromaPrediction.186
	.p2align	4, 0x90
	.type	IntraChromaPrediction.186,@function
IntraChromaPrediction.186:              # @IntraChromaPrediction.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1055518526, -164(%rbp) # imm = 0x3EE9EF3E
	movq	%rdi, -192(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -184(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -120(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB227_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB227_1 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB227_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_1
.LBB227_4:                              # %for.end
	movl	-120(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB227_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB227_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB227_8
.LBB227_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB227_8
.LBB227_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB227_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB227_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB227_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB227_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB227_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB227_13
.LBB227_12:                             # %cond.false32
                                        #   in Loop: Header=BB227_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB227_13
.LBB227_13:                             # %cond.end33
                                        #   in Loop: Header=BB227_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB227_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_9
.LBB227_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB227_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB227_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB227_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB227_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB227_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB227_20
.LBB227_19:                             # %cond.false57
                                        #   in Loop: Header=BB227_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB227_20
.LBB227_20:                             # %cond.end58
                                        #   in Loop: Header=BB227_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB227_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_16
.LBB227_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB227_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB227_25
.LBB227_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB227_25
.LBB227_25:                             # %cond.end75
	movl	%eax, -96(%rbp)
.LBB227_26:                             # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB227_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB227_28:                             # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB227_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB227_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB227_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB227_32:                             # %if.end86
	cmpq	$0, -184(%rbp)
	je	.LBB227_34
# %bb.33:                               # %if.then88
	movl	-96(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB227_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB227_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB227_37 Depth 2
                                        #       Child Loop BB227_39 Depth 3
                                        #         Child Loop BB227_104 Depth 4
                                        #         Child Loop BB227_110 Depth 4
                                        #         Child Loop BB227_85 Depth 4
                                        #         Child Loop BB227_91 Depth 4
                                        #         Child Loop BB227_66 Depth 4
                                        #         Child Loop BB227_72 Depth 4
                                        #         Child Loop BB227_44 Depth 4
                                        #         Child Loop BB227_50 Depth 4
                                        #         Child Loop BB227_125 Depth 4
                                        #           Child Loop BB227_127 Depth 5
                                        #     Child Loop BB227_138 Depth 2
                                        #     Child Loop BB227_142 Depth 2
                                        #       Child Loop BB227_144 Depth 3
                                        #     Child Loop BB227_153 Depth 2
                                        #     Child Loop BB227_157 Depth 2
                                        #       Child Loop BB227_159 Depth 3
                                        #     Child Loop BB227_170 Depth 2
                                        #     Child Loop BB227_174 Depth 2
                                        #     Child Loop BB227_178 Depth 2
                                        #       Child Loop BB227_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB227_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB227_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB227_37:                             # %for.cond95
                                        #   Parent Loop BB227_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB227_39 Depth 3
                                        #         Child Loop BB227_104 Depth 4
                                        #         Child Loop BB227_110 Depth 4
                                        #         Child Loop BB227_85 Depth 4
                                        #         Child Loop BB227_91 Depth 4
                                        #         Child Loop BB227_66 Depth 4
                                        #         Child Loop BB227_72 Depth 4
                                        #         Child Loop BB227_44 Depth 4
                                        #         Child Loop BB227_50 Depth 4
                                        #         Child Loop BB227_125 Depth 4
                                        #           Child Loop BB227_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB227_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB227_37 Depth=2
	movl	$0, -84(%rbp)
.LBB227_39:                             # %for.cond99
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB227_104 Depth 4
                                        #         Child Loop BB227_110 Depth 4
                                        #         Child Loop BB227_85 Depth 4
                                        #         Child Loop BB227_91 Depth 4
                                        #         Child Loop BB227_66 Depth 4
                                        #         Child Loop BB227_72 Depth 4
                                        #         Child Loop BB227_44 Depth 4
                                        #         Child Loop BB227_50 Depth 4
                                        #         Child Loop BB227_125 Depth 4
                                        #           Child Loop BB227_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB227_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB227_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB227_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB227_39 Depth=3
	movq	.LJTI227_0(,%rax,8), %rax
	jmpq	*%rax
.LBB227_42:                             # %sw.bb
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB227_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB227_44:                             # %for.cond124
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_37 Depth=2
                                        #       Parent Loop BB227_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB227_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB227_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_44
.LBB227_47:                             # %for.end138
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_48
.LBB227_48:                             # %if.end139
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB227_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB227_50:                             # %for.cond143
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_37 Depth=2
                                        #       Parent Loop BB227_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB227_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB227_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_50
.LBB227_53:                             # %for.end162
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_54
.LBB227_54:                             # %if.end163
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB227_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB227_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-72(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB227_63
.LBB227_57:                             # %if.else
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB227_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB227_62
.LBB227_59:                             # %if.else174
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB227_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB227_61:                             # %if.end180
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_62
.LBB227_62:                             # %if.end181
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_63
.LBB227_63:                             # %if.end182
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_124
.LBB227_64:                             # %sw.bb183
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB227_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB227_66:                             # %for.cond186
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_37 Depth=2
                                        #       Parent Loop BB227_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB227_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB227_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_66
.LBB227_69:                             # %for.end202
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_77
.LBB227_70:                             # %if.else203
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB227_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB227_72:                             # %for.cond207
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_37 Depth=2
                                        #       Parent Loop BB227_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB227_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB227_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_72
.LBB227_75:                             # %for.end226
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_76
.LBB227_76:                             # %if.end227
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_77
.LBB227_77:                             # %if.end228
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB227_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB227_82
.LBB227_79:                             # %if.else233
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB227_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB227_81:                             # %if.end239
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_82
.LBB227_82:                             # %if.end240
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_124
.LBB227_83:                             # %sw.bb241
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB227_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB227_85:                             # %for.cond245
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_37 Depth=2
                                        #       Parent Loop BB227_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB227_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB227_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_85
.LBB227_88:                             # %for.end264
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_96
.LBB227_89:                             # %if.else265
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB227_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB227_91:                             # %for.cond268
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_37 Depth=2
                                        #       Parent Loop BB227_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB227_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB227_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_91
.LBB227_94:                             # %for.end284
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_95
.LBB227_95:                             # %if.end285
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_96
.LBB227_96:                             # %if.end286
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB227_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB227_101
.LBB227_98:                             # %if.else292
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB227_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB227_100:                            # %if.end297
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_101
.LBB227_101:                            # %if.end298
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_124
.LBB227_102:                            # %sw.bb299
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB227_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB227_104:                            # %for.cond302
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_37 Depth=2
                                        #       Parent Loop BB227_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB227_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB227_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_104
.LBB227_107:                            # %for.end318
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_108
.LBB227_108:                            # %if.end319
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB227_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB227_110:                            # %for.cond323
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_37 Depth=2
                                        #       Parent Loop BB227_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB227_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB227_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_110
.LBB227_113:                            # %for.end342
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_114
.LBB227_114:                            # %if.end343
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB227_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB227_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-68(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB227_123
.LBB227_117:                            # %if.else352
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB227_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB227_122
.LBB227_119:                            # %if.else357
                                        #   in Loop: Header=BB227_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB227_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB227_121:                            # %if.end363
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_122
.LBB227_122:                            # %if.end364
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_123
.LBB227_123:                            # %if.end365
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_124
.LBB227_124:                            # %sw.epilog
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB227_125:                            # %for.cond366
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_37 Depth=2
                                        #       Parent Loop BB227_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB227_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB227_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB227_127:                            # %for.cond371
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_37 Depth=2
                                        #       Parent Loop BB227_39 Depth=3
                                        #         Parent Loop BB227_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB227_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB227_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_127
.LBB227_130:                            # %for.end386
                                        #   in Loop: Header=BB227_125 Depth=4
	jmp	.LBB227_131
.LBB227_131:                            # %for.inc387
                                        #   in Loop: Header=BB227_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB227_125
.LBB227_132:                            # %for.end389
                                        #   in Loop: Header=BB227_39 Depth=3
	jmp	.LBB227_133
.LBB227_133:                            # %for.inc390
                                        #   in Loop: Header=BB227_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB227_39
.LBB227_134:                            # %for.end392
                                        #   in Loop: Header=BB227_37 Depth=2
	jmp	.LBB227_135
.LBB227_135:                            # %for.inc393
                                        #   in Loop: Header=BB227_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB227_37
.LBB227_136:                            # %for.end395
                                        #   in Loop: Header=BB227_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB227_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB227_35 Depth=1
	movl	$0, -4(%rbp)
.LBB227_138:                            # %for.cond398
                                        #   Parent Loop BB227_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB227_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB227_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB227_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_138
.LBB227_141:                            # %for.end414
                                        #   in Loop: Header=BB227_35 Depth=1
	movl	$0, -4(%rbp)
.LBB227_142:                            # %for.cond415
                                        #   Parent Loop BB227_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB227_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB227_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB227_142 Depth=2
	movl	$0, -8(%rbp)
.LBB227_144:                            # %for.cond419
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB227_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB227_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB227_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB227_144
.LBB227_147:                            # %for.end436
                                        #   in Loop: Header=BB227_142 Depth=2
	jmp	.LBB227_148
.LBB227_148:                            # %for.inc437
                                        #   in Loop: Header=BB227_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_142
.LBB227_149:                            # %for.end439
                                        #   in Loop: Header=BB227_35 Depth=1
	jmp	.LBB227_150
.LBB227_150:                            # %if.end440
                                        #   in Loop: Header=BB227_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB227_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB227_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB227_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB227_35 Depth=1
	movl	$0, -4(%rbp)
.LBB227_153:                            # %for.cond447
                                        #   Parent Loop BB227_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB227_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB227_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB227_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_153
.LBB227_156:                            # %for.end468
                                        #   in Loop: Header=BB227_35 Depth=1
	movl	$0, -4(%rbp)
.LBB227_157:                            # %for.cond469
                                        #   Parent Loop BB227_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB227_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB227_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB227_157 Depth=2
	movl	$0, -8(%rbp)
.LBB227_159:                            # %for.cond473
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB227_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB227_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB227_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB227_159
.LBB227_162:                            # %for.end490
                                        #   in Loop: Header=BB227_157 Depth=2
	jmp	.LBB227_163
.LBB227_163:                            # %for.inc491
                                        #   in Loop: Header=BB227_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_157
.LBB227_164:                            # %for.end493
                                        #   in Loop: Header=BB227_35 Depth=1
	jmp	.LBB227_165
.LBB227_165:                            # %if.end494
                                        #   in Loop: Header=BB227_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB227_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB227_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB227_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB227_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB227_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB227_35 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB227_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB227_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -116(%rbp)
	movl	$0, -4(%rbp)
.LBB227_170:                            # %for.cond519
                                        #   Parent Loop BB227_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB227_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB227_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-116(%rbp), %ecx
	movl	%ecx, -116(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB227_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_170
.LBB227_173:                            # %for.end540
                                        #   in Loop: Header=BB227_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB227_174:                            # %for.cond556
                                        #   Parent Loop BB227_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB227_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB227_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB227_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_174
.LBB227_177:                            # %for.end577
                                        #   in Loop: Header=BB227_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-116(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -8(%rbp)
.LBB227_178:                            # %for.cond606
                                        #   Parent Loop BB227_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB227_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB227_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB227_178 Depth=2
	movl	$0, -4(%rbp)
.LBB227_180:                            # %for.cond610
                                        #   Parent Loop BB227_35 Depth=1
                                        #     Parent Loop BB227_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB227_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB227_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB227_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB227_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB227_184
.LBB227_183:                            # %cond.false630
                                        #   in Loop: Header=BB227_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB227_184:                            # %cond.end643
                                        #   in Loop: Header=BB227_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB227_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB227_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB227_190
.LBB227_186:                            # %cond.false648
                                        #   in Loop: Header=BB227_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB227_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB227_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB227_189
.LBB227_188:                            # %cond.false666
                                        #   in Loop: Header=BB227_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB227_189:                            # %cond.end679
                                        #   in Loop: Header=BB227_180 Depth=3
.LBB227_190:                            # %cond.end681
                                        #   in Loop: Header=BB227_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB227_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_180
.LBB227_192:                            # %for.end694
                                        #   in Loop: Header=BB227_178 Depth=2
	jmp	.LBB227_193
.LBB227_193:                            # %for.inc695
                                        #   in Loop: Header=BB227_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB227_178
.LBB227_194:                            # %for.end697
                                        #   in Loop: Header=BB227_35 Depth=1
	jmp	.LBB227_195
.LBB227_195:                            # %if.end698
                                        #   in Loop: Header=BB227_35 Depth=1
	jmp	.LBB227_196
.LBB227_196:                            # %for.inc699
                                        #   in Loop: Header=BB227_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB227_35
.LBB227_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB227_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB227_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB227_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB227_199 Depth=1
	movl	-120(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB227_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB227_199
.LBB227_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB227_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB227_219 Depth 2
                                        #       Child Loop BB227_221 Depth 3
                                        #         Child Loop BB227_223 Depth 4
                                        #           Child Loop BB227_225 Depth 5
                                        #             Child Loop BB227_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB227_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB227_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB227_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB227_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB227_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB227_203 Depth=1
	jmp	.LBB227_241
.LBB227_207:                            # %if.end723
                                        #   in Loop: Header=BB227_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB227_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB227_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB227_217
.LBB227_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB227_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB227_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB227_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB227_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB227_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB227_217
.LBB227_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB227_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB227_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB227_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB227_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB227_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB227_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB227_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB227_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB227_203 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB227_218
.LBB227_217:                            # %if.then749
                                        #   in Loop: Header=BB227_203 Depth=1
	jmp	.LBB227_241
.LBB227_218:                            # %if.end750
                                        #   in Loop: Header=BB227_203 Depth=1
	movl	$0, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB227_219:                            # %for.cond751
                                        #   Parent Loop BB227_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB227_221 Depth 3
                                        #         Child Loop BB227_223 Depth 4
                                        #           Child Loop BB227_225 Depth 5
                                        #             Child Loop BB227_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB227_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB227_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB227_221:                            # %for.cond757
                                        #   Parent Loop BB227_203 Depth=1
                                        #     Parent Loop BB227_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB227_223 Depth 4
                                        #           Child Loop BB227_225 Depth 5
                                        #             Child Loop BB227_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB227_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB227_221 Depth=3
	movl	$0, -44(%rbp)
.LBB227_223:                            # %for.cond761
                                        #   Parent Loop BB227_203 Depth=1
                                        #     Parent Loop BB227_219 Depth=2
                                        #       Parent Loop BB227_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB227_225 Depth 5
                                        #             Child Loop BB227_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB227_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB227_223 Depth=4
	movl	$0, -112(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB227_225:                            # %for.cond765
                                        #   Parent Loop BB227_203 Depth=1
                                        #     Parent Loop BB227_219 Depth=2
                                        #       Parent Loop BB227_221 Depth=3
                                        #         Parent Loop BB227_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB227_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB227_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB227_227:                            # %for.cond770
                                        #   Parent Loop BB227_203 Depth=1
                                        #     Parent Loop BB227_219 Depth=2
                                        #       Parent Loop BB227_221 Depth=3
                                        #         Parent Loop BB227_223 Depth=4
                                        #           Parent Loop BB227_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB227_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB227_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB227_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB227_227
.LBB227_230:                            # %for.end803
                                        #   in Loop: Header=BB227_225 Depth=5
	jmp	.LBB227_231
.LBB227_231:                            # %for.inc804
                                        #   in Loop: Header=BB227_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB227_225
.LBB227_232:                            # %for.end806
                                        #   in Loop: Header=BB227_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-104(%rbp), %eax
	movl	%eax, -104(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB227_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB227_223
.LBB227_234:                            # %for.end810
                                        #   in Loop: Header=BB227_221 Depth=3
	jmp	.LBB227_235
.LBB227_235:                            # %for.inc811
                                        #   in Loop: Header=BB227_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB227_221
.LBB227_236:                            # %for.end813
                                        #   in Loop: Header=BB227_219 Depth=2
	jmp	.LBB227_237
.LBB227_237:                            # %for.inc814
                                        #   in Loop: Header=BB227_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB227_219
.LBB227_238:                            # %for.end816
                                        #   in Loop: Header=BB227_203 Depth=1
	movl	-104(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB227_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB227_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-104(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB227_240:                            # %if.end820
                                        #   in Loop: Header=BB227_203 Depth=1
	jmp	.LBB227_241
.LBB227_241:                            # %for.inc821
                                        #   in Loop: Header=BB227_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB227_203
.LBB227_242:                            # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB227_243:                            # %if.end824
	cmpl	$1055518526, -164(%rbp) # imm = 0x3EE9EF3E
	jne	.LBB227_245
.LBB227_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB227_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB227_244
.Lfunc_end227:
	.size	IntraChromaPrediction.186, .Lfunc_end227-IntraChromaPrediction.186
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI227_0:
	.quad	.LBB227_42
	.quad	.LBB227_64
	.quad	.LBB227_83
	.quad	.LBB227_102
                                        # -- End function
	.text
	.globl	writeChromaIntraPredMode.187 # -- Begin function writeChromaIntraPredMode.187
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.187,@function
writeChromaIntraPredMode.187:           # @writeChromaIntraPredMode.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$856461373, -36(%rbp)   # imm = 0x330C903D
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB228_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB228_3
.LBB228_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB228_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$856461373, -36(%rbp)   # imm = 0x330C903D
	jne	.LBB228_5
.LBB228_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB228_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB228_4
.Lfunc_end228:
	.size	writeChromaIntraPredMode.187, .Lfunc_end228-writeChromaIntraPredMode.187
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.188    # -- Begin function writeChromaCoeff.188
	.p2align	4, 0x90
	.type	writeChromaCoeff.188,@function
writeChromaCoeff.188:                   # @writeChromaCoeff.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$2044445356, -80(%rbp)  # imm = 0x79DBC2AC
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB229_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB229_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB229_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB229_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB229_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB229_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB229_21
.LBB229_5:                              # %if.else
                                        #   in Loop: Header=BB229_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB229_6:                              # %for.cond18
                                        #   Parent Loop BB229_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB229_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB229_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB229_8:                              # %land.end
                                        #   in Loop: Header=BB229_6 Depth=2
	testb	$1, %al
	jne	.LBB229_9
	jmp	.LBB229_20
.LBB229_9:                              # %for.body21
                                        #   in Loop: Header=BB229_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB229_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB229_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB229_12
.LBB229_11:                             # %if.else29
                                        #   in Loop: Header=BB229_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB229_12:                             # %if.end
                                        #   in Loop: Header=BB229_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB229_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB229_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB229_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB229_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB229_15:                             # %lor.end
                                        #   in Loop: Header=BB229_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB229_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB229_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB229_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB229_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB229_18:                             # %lor.end45
                                        #   in Loop: Header=BB229_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB229_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB229_6
.LBB229_20:                             # %for.end
                                        #   in Loop: Header=BB229_2 Depth=1
	jmp	.LBB229_21
.LBB229_21:                             # %if.end58
                                        #   in Loop: Header=BB229_2 Depth=1
	jmp	.LBB229_22
.LBB229_22:                             # %for.inc59
                                        #   in Loop: Header=BB229_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB229_2
.LBB229_23:                             # %for.end61
	jmp	.LBB229_24
.LBB229_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB229_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB229_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB229_28 Depth 2
                                        #       Child Loop BB229_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB229_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB229_26 Depth=1
	movl	$0, -32(%rbp)
.LBB229_28:                             # %for.cond69
                                        #   Parent Loop BB229_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB229_32 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB229_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB229_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB229_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB229_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB229_47
.LBB229_31:                             # %if.else84
                                        #   in Loop: Header=BB229_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB229_32:                             # %for.cond115
                                        #   Parent Loop BB229_26 Depth=1
                                        #     Parent Loop BB229_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB229_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB229_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB229_34:                             # %land.end121
                                        #   in Loop: Header=BB229_32 Depth=3
	testb	$1, %al
	jne	.LBB229_35
	jmp	.LBB229_46
.LBB229_35:                             # %for.body122
                                        #   in Loop: Header=BB229_32 Depth=3
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB229_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB229_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB229_38
.LBB229_37:                             # %if.else134
                                        #   in Loop: Header=BB229_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB229_38:                             # %if.end136
                                        #   in Loop: Header=BB229_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB229_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB229_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB229_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB229_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB229_41:                             # %lor.end149
                                        #   in Loop: Header=BB229_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB229_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB229_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB229_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB229_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB229_44:                             # %lor.end164
                                        #   in Loop: Header=BB229_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB229_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB229_32
.LBB229_46:                             # %for.end189
                                        #   in Loop: Header=BB229_28 Depth=2
	jmp	.LBB229_47
.LBB229_47:                             # %if.end190
                                        #   in Loop: Header=BB229_28 Depth=2
	jmp	.LBB229_48
.LBB229_48:                             # %for.inc191
                                        #   in Loop: Header=BB229_28 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB229_28
.LBB229_49:                             # %for.end193
                                        #   in Loop: Header=BB229_26 Depth=1
	jmp	.LBB229_50
.LBB229_50:                             # %for.inc194
                                        #   in Loop: Header=BB229_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB229_26
.LBB229_51:                             # %for.end196
	jmp	.LBB229_52
.LBB229_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$2044445356, -80(%rbp)  # imm = 0x79DBC2AC
	jne	.LBB229_54
.LBB229_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB229_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB229_53
.Lfunc_end229:
	.size	writeChromaCoeff.188, .Lfunc_end229-writeChromaCoeff.188
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction.189 # -- Begin function IntraChromaPrediction.189
	.p2align	4, 0x90
	.type	IntraChromaPrediction.189,@function
IntraChromaPrediction.189:              # @IntraChromaPrediction.189
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$724619497, -164(%rbp)  # imm = 0x2B30D0E9
	movq	%rdi, -184(%rbp)
	movq	%rsi, -176(%rbp)
	movq	%rdx, -192(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -124(%rbp)
	movl	$0, -136(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -128(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB230_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB230_1 Depth=1
	movl	-124(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB230_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_1
.LBB230_4:                              # %for.end
	movl	-124(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -96(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB230_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB230_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB230_8
.LBB230_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB230_8
.LBB230_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB230_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB230_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB230_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB230_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB230_13
.LBB230_12:                             # %cond.false32
                                        #   in Loop: Header=BB230_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB230_13
.LBB230_13:                             # %cond.end33
                                        #   in Loop: Header=BB230_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB230_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_9
.LBB230_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB230_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB230_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB230_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB230_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB230_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB230_20
.LBB230_19:                             # %cond.false57
                                        #   in Loop: Header=BB230_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB230_20
.LBB230_20:                             # %cond.end58
                                        #   in Loop: Header=BB230_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB230_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_16
.LBB230_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB230_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB230_25
.LBB230_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB230_25
.LBB230_25:                             # %cond.end75
	movl	%eax, -96(%rbp)
.LBB230_26:                             # %if.end
	cmpq	$0, -184(%rbp)
	je	.LBB230_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB230_28:                             # %if.end79
	cmpq	$0, -176(%rbp)
	je	.LBB230_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB230_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB230_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB230_32:                             # %if.end86
	cmpq	$0, -192(%rbp)
	je	.LBB230_34
# %bb.33:                               # %if.then88
	movl	-96(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB230_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB230_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_37 Depth 2
                                        #       Child Loop BB230_39 Depth 3
                                        #         Child Loop BB230_104 Depth 4
                                        #         Child Loop BB230_110 Depth 4
                                        #         Child Loop BB230_85 Depth 4
                                        #         Child Loop BB230_91 Depth 4
                                        #         Child Loop BB230_66 Depth 4
                                        #         Child Loop BB230_72 Depth 4
                                        #         Child Loop BB230_44 Depth 4
                                        #         Child Loop BB230_50 Depth 4
                                        #         Child Loop BB230_125 Depth 4
                                        #           Child Loop BB230_127 Depth 5
                                        #     Child Loop BB230_138 Depth 2
                                        #     Child Loop BB230_142 Depth 2
                                        #       Child Loop BB230_144 Depth 3
                                        #     Child Loop BB230_153 Depth 2
                                        #     Child Loop BB230_157 Depth 2
                                        #       Child Loop BB230_159 Depth 3
                                        #     Child Loop BB230_170 Depth 2
                                        #     Child Loop BB230_174 Depth 2
                                        #     Child Loop BB230_178 Depth 2
                                        #       Child Loop BB230_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB230_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB230_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -88(%rbp)
.LBB230_37:                             # %for.cond95
                                        #   Parent Loop BB230_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB230_39 Depth 3
                                        #         Child Loop BB230_104 Depth 4
                                        #         Child Loop BB230_110 Depth 4
                                        #         Child Loop BB230_85 Depth 4
                                        #         Child Loop BB230_91 Depth 4
                                        #         Child Loop BB230_66 Depth 4
                                        #         Child Loop BB230_72 Depth 4
                                        #         Child Loop BB230_44 Depth 4
                                        #         Child Loop BB230_50 Depth 4
                                        #         Child Loop BB230_125 Depth 4
                                        #           Child Loop BB230_127 Depth 5
	movl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB230_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB230_37 Depth=2
	movl	$0, -84(%rbp)
.LBB230_39:                             # %for.cond99
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB230_104 Depth 4
                                        #         Child Loop BB230_110 Depth 4
                                        #         Child Loop BB230_85 Depth 4
                                        #         Child Loop BB230_91 Depth 4
                                        #         Child Loop BB230_66 Depth 4
                                        #         Child Loop BB230_72 Depth 4
                                        #         Child Loop BB230_44 Depth 4
                                        #         Child Loop BB230_50 Depth 4
                                        #         Child Loop BB230_125 Depth 4
                                        #           Child Loop BB230_127 Depth 5
	cmpl	$4, -84(%rbp)
	jge	.LBB230_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB230_39 Depth=3
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$5, %rax
	movslq	-88(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-84(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -60(%rbp)
	movslq	-128(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-88(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-84(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB230_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB230_39 Depth=3
	movq	.LJTI230_0(,%rax,8), %rax
	jmpq	*%rax
.LBB230_42:                             # %sw.bb
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB230_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB230_44:                             # %for.cond124
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_37 Depth=2
                                        #       Parent Loop BB230_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB230_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB230_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_44
.LBB230_47:                             # %for.end138
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_48
.LBB230_48:                             # %if.end139
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB230_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB230_50:                             # %for.cond143
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_37 Depth=2
                                        #       Parent Loop BB230_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB230_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB230_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_50
.LBB230_53:                             # %for.end162
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_54
.LBB230_54:                             # %if.end163
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB230_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB230_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-60(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB230_63
.LBB230_57:                             # %if.else
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB230_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB230_62
.LBB230_59:                             # %if.else174
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB230_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB230_61:                             # %if.end180
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_62
.LBB230_62:                             # %if.end181
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_63
.LBB230_63:                             # %if.end182
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_124
.LBB230_64:                             # %sw.bb183
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB230_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB230_66:                             # %for.cond186
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_37 Depth=2
                                        #       Parent Loop BB230_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB230_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB230_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_66
.LBB230_69:                             # %for.end202
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_77
.LBB230_70:                             # %if.else203
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB230_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB230_72:                             # %for.cond207
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_37 Depth=2
                                        #       Parent Loop BB230_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB230_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB230_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_72
.LBB230_75:                             # %for.end226
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_76
.LBB230_76:                             # %if.end227
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_77
.LBB230_77:                             # %if.end228
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB230_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB230_82
.LBB230_79:                             # %if.else233
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB230_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB230_81:                             # %if.end239
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_82
.LBB230_82:                             # %if.end240
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_124
.LBB230_83:                             # %sw.bb241
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB230_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB230_85:                             # %for.cond245
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_37 Depth=2
                                        #       Parent Loop BB230_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB230_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB230_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_85
.LBB230_88:                             # %for.end264
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_96
.LBB230_89:                             # %if.else265
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB230_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB230_91:                             # %for.cond268
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_37 Depth=2
                                        #       Parent Loop BB230_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB230_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB230_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_91
.LBB230_94:                             # %for.end284
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_95
.LBB230_95:                             # %if.end285
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_96
.LBB230_96:                             # %if.end286
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB230_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB230_101
.LBB230_98:                             # %if.else292
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB230_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB230_100:                            # %if.end297
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_101
.LBB230_101:                            # %if.end298
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_124
.LBB230_102:                            # %sw.bb299
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB230_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB230_104:                            # %for.cond302
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_37 Depth=2
                                        #       Parent Loop BB230_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB230_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB230_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_104
.LBB230_107:                            # %for.end318
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_108
.LBB230_108:                            # %if.end319
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB230_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB230_110:                            # %for.cond323
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_37 Depth=2
                                        #       Parent Loop BB230_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB230_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB230_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_110
.LBB230_113:                            # %for.end342
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_114
.LBB230_114:                            # %if.end343
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB230_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB230_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-64(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB230_123
.LBB230_117:                            # %if.else352
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB230_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB230_122
.LBB230_119:                            # %if.else357
                                        #   in Loop: Header=BB230_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB230_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB230_121:                            # %if.end363
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_122
.LBB230_122:                            # %if.end364
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_123
.LBB230_123:                            # %if.end365
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_124
.LBB230_124:                            # %sw.epilog
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB230_125:                            # %for.cond366
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_37 Depth=2
                                        #       Parent Loop BB230_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB230_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB230_125 Depth=4
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB230_127:                            # %for.cond371
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_37 Depth=2
                                        #       Parent Loop BB230_39 Depth=3
                                        #         Parent Loop BB230_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB230_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB230_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_127
.LBB230_130:                            # %for.end386
                                        #   in Loop: Header=BB230_125 Depth=4
	jmp	.LBB230_131
.LBB230_131:                            # %for.inc387
                                        #   in Loop: Header=BB230_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB230_125
.LBB230_132:                            # %for.end389
                                        #   in Loop: Header=BB230_39 Depth=3
	jmp	.LBB230_133
.LBB230_133:                            # %for.inc390
                                        #   in Loop: Header=BB230_39 Depth=3
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB230_39
.LBB230_134:                            # %for.end392
                                        #   in Loop: Header=BB230_37 Depth=2
	jmp	.LBB230_135
.LBB230_135:                            # %for.inc393
                                        #   in Loop: Header=BB230_37 Depth=2
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB230_37
.LBB230_136:                            # %for.end395
                                        #   in Loop: Header=BB230_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB230_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB230_35 Depth=1
	movl	$0, -4(%rbp)
.LBB230_138:                            # %for.cond398
                                        #   Parent Loop BB230_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB230_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB230_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB230_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_138
.LBB230_141:                            # %for.end414
                                        #   in Loop: Header=BB230_35 Depth=1
	movl	$0, -4(%rbp)
.LBB230_142:                            # %for.cond415
                                        #   Parent Loop BB230_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB230_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB230_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB230_142 Depth=2
	movl	$0, -8(%rbp)
.LBB230_144:                            # %for.cond419
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB230_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB230_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB230_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB230_144
.LBB230_147:                            # %for.end436
                                        #   in Loop: Header=BB230_142 Depth=2
	jmp	.LBB230_148
.LBB230_148:                            # %for.inc437
                                        #   in Loop: Header=BB230_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_142
.LBB230_149:                            # %for.end439
                                        #   in Loop: Header=BB230_35 Depth=1
	jmp	.LBB230_150
.LBB230_150:                            # %if.end440
                                        #   in Loop: Header=BB230_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB230_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB230_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB230_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB230_35 Depth=1
	movl	$0, -4(%rbp)
.LBB230_153:                            # %for.cond447
                                        #   Parent Loop BB230_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB230_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB230_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB230_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_153
.LBB230_156:                            # %for.end468
                                        #   in Loop: Header=BB230_35 Depth=1
	movl	$0, -4(%rbp)
.LBB230_157:                            # %for.cond469
                                        #   Parent Loop BB230_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB230_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB230_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB230_157 Depth=2
	movl	$0, -8(%rbp)
.LBB230_159:                            # %for.cond473
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB230_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB230_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB230_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB230_159
.LBB230_162:                            # %for.end490
                                        #   in Loop: Header=BB230_157 Depth=2
	jmp	.LBB230_163
.LBB230_163:                            # %for.inc491
                                        #   in Loop: Header=BB230_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_157
.LBB230_164:                            # %for.end493
                                        #   in Loop: Header=BB230_35 Depth=1
	jmp	.LBB230_165
.LBB230_165:                            # %if.end494
                                        #   in Loop: Header=BB230_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB230_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB230_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB230_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB230_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB230_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB230_35 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB230_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB230_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -4(%rbp)
.LBB230_170:                            # %for.cond519
                                        #   Parent Loop BB230_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB230_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB230_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-112(%rbp), %ecx
	movl	%ecx, -112(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB230_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_170
.LBB230_173:                            # %for.end540
                                        #   in Loop: Header=BB230_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -120(%rbp)
	movl	$0, -4(%rbp)
.LBB230_174:                            # %for.cond556
                                        #   Parent Loop BB230_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB230_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB230_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-120(%rbp), %ecx
	movl	%ecx, -120(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB230_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_174
.LBB230_177:                            # %for.end577
                                        #   in Loop: Header=BB230_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-112(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -104(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-120(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -100(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-336(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-272(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -108(%rbp)
	movl	$0, -8(%rbp)
.LBB230_178:                            # %for.cond606
                                        #   Parent Loop BB230_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB230_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB230_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB230_178 Depth=2
	movl	$0, -4(%rbp)
.LBB230_180:                            # %for.cond610
                                        #   Parent Loop BB230_35 Depth=1
                                        #     Parent Loop BB230_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB230_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB230_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB230_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB230_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB230_184
.LBB230_183:                            # %cond.false630
                                        #   in Loop: Header=BB230_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB230_184:                            # %cond.end643
                                        #   in Loop: Header=BB230_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB230_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB230_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB230_190
.LBB230_186:                            # %cond.false648
                                        #   in Loop: Header=BB230_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-108(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-104(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-100(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB230_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB230_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB230_189
.LBB230_188:                            # %cond.false666
                                        #   in Loop: Header=BB230_180 Depth=3
	movl	-108(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-104(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-100(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB230_189:                            # %cond.end679
                                        #   in Loop: Header=BB230_180 Depth=3
.LBB230_190:                            # %cond.end681
                                        #   in Loop: Header=BB230_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB230_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_180
.LBB230_192:                            # %for.end694
                                        #   in Loop: Header=BB230_178 Depth=2
	jmp	.LBB230_193
.LBB230_193:                            # %for.inc695
                                        #   in Loop: Header=BB230_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB230_178
.LBB230_194:                            # %for.end697
                                        #   in Loop: Header=BB230_35 Depth=1
	jmp	.LBB230_195
.LBB230_195:                            # %if.end698
                                        #   in Loop: Header=BB230_35 Depth=1
	jmp	.LBB230_196
.LBB230_196:                            # %for.inc699
                                        #   in Loop: Header=BB230_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB230_35
.LBB230_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB230_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -132(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB230_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB230_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB230_199 Depth=1
	movl	-124(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB230_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB230_199
.LBB230_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB230_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB230_219 Depth 2
                                        #       Child Loop BB230_221 Depth 3
                                        #         Child Loop BB230_223 Depth 4
                                        #           Child Loop BB230_225 Depth 5
                                        #             Child Loop BB230_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB230_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB230_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB230_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB230_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB230_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB230_203 Depth=1
	jmp	.LBB230_241
.LBB230_207:                            # %if.end723
                                        #   in Loop: Header=BB230_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB230_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB230_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB230_217
.LBB230_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB230_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB230_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB230_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB230_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB230_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB230_217
.LBB230_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB230_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB230_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB230_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB230_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB230_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB230_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB230_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB230_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB230_203 Depth=1
	cmpl	$0, -96(%rbp)
	jne	.LBB230_218
.LBB230_217:                            # %if.then749
                                        #   in Loop: Header=BB230_203 Depth=1
	jmp	.LBB230_241
.LBB230_218:                            # %if.end750
                                        #   in Loop: Header=BB230_203 Depth=1
	movl	$0, -92(%rbp)
	movl	$0, -24(%rbp)
.LBB230_219:                            # %for.cond751
                                        #   Parent Loop BB230_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB230_221 Depth 3
                                        #         Child Loop BB230_223 Depth 4
                                        #           Child Loop BB230_225 Depth 5
                                        #             Child Loop BB230_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB230_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB230_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -44(%rbp)
.LBB230_221:                            # %for.cond757
                                        #   Parent Loop BB230_203 Depth=1
                                        #     Parent Loop BB230_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB230_223 Depth 4
                                        #           Child Loop BB230_225 Depth 5
                                        #             Child Loop BB230_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB230_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB230_221 Depth=3
	movl	$0, -48(%rbp)
.LBB230_223:                            # %for.cond761
                                        #   Parent Loop BB230_203 Depth=1
                                        #     Parent Loop BB230_219 Depth=2
                                        #       Parent Loop BB230_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB230_225 Depth 5
                                        #             Child Loop BB230_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB230_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB230_223 Depth=4
	movl	$0, -116(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB230_225:                            # %for.cond765
                                        #   Parent Loop BB230_203 Depth=1
                                        #     Parent Loop BB230_219 Depth=2
                                        #       Parent Loop BB230_221 Depth=3
                                        #         Parent Loop BB230_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB230_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB230_225 Depth=5
	movl	-48(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB230_227:                            # %for.cond770
                                        #   Parent Loop BB230_203 Depth=1
                                        #     Parent Loop BB230_219 Depth=2
                                        #       Parent Loop BB230_221 Depth=3
                                        #         Parent Loop BB230_223 Depth=4
                                        #           Parent Loop BB230_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB230_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB230_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-116(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB230_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-116(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -116(%rbp)
	jmp	.LBB230_227
.LBB230_230:                            # %for.end803
                                        #   in Loop: Header=BB230_225 Depth=5
	jmp	.LBB230_231
.LBB230_231:                            # %for.inc804
                                        #   in Loop: Header=BB230_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB230_225
.LBB230_232:                            # %for.end806
                                        #   in Loop: Header=BB230_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-92(%rbp), %eax
	movl	%eax, -92(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB230_223 Depth=4
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB230_223
.LBB230_234:                            # %for.end810
                                        #   in Loop: Header=BB230_221 Depth=3
	jmp	.LBB230_235
.LBB230_235:                            # %for.inc811
                                        #   in Loop: Header=BB230_221 Depth=3
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB230_221
.LBB230_236:                            # %for.end813
                                        #   in Loop: Header=BB230_219 Depth=2
	jmp	.LBB230_237
.LBB230_237:                            # %for.inc814
                                        #   in Loop: Header=BB230_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB230_219
.LBB230_238:                            # %for.end816
                                        #   in Loop: Header=BB230_203 Depth=1
	movl	-92(%rbp), %eax
	cmpl	-132(%rbp), %eax
	jge	.LBB230_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB230_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -136(%rbp)
	movl	-92(%rbp), %eax
	movl	%eax, -132(%rbp)
.LBB230_240:                            # %if.end820
                                        #   in Loop: Header=BB230_203 Depth=1
	jmp	.LBB230_241
.LBB230_241:                            # %for.inc821
                                        #   in Loop: Header=BB230_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB230_203
.LBB230_242:                            # %for.end823
	movl	-136(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB230_243:                            # %if.end824
	cmpl	$724619497, -164(%rbp)  # imm = 0x2B30D0E9
	jne	.LBB230_245
.LBB230_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB230_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB230_244
.Lfunc_end230:
	.size	IntraChromaPrediction.189, .Lfunc_end230-IntraChromaPrediction.189
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI230_0:
	.quad	.LBB230_42
	.quad	.LBB230_64
	.quad	.LBB230_83
	.quad	.LBB230_102
                                        # -- End function
	.text
	.globl	predict_nnz.190         # -- Begin function predict_nnz.190
	.p2align	4, 0x90
	.type	predict_nnz.190,@function
predict_nnz.190:                        # @predict_nnz.190
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1894158411, -56(%rbp)  # imm = 0x70E6904B
	movl	%edi, -48(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB231_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB231_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB231_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB231_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB231_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB231_6:                              # %if.end14
	movl	-44(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-52(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB231_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB231_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB231_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB231_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB231_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB231_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB231_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB231_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1894158411, -56(%rbp)  # imm = 0x70E6904B
	jne	.LBB231_16
.LBB231_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB231_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB231_15
.Lfunc_end231:
	.size	predict_nnz.190, .Lfunc_end231-predict_nnz.190
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.191 # -- Begin function OneComponentChromaPrediction4x4.191
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.191,@function
OneComponentChromaPrediction4x4.191:    # @OneComponentChromaPrediction4x4.191
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$156452788, -116(%rbp)  # imm = 0x95347B4
	movq	%rdi, -128(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -68(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -84(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -112(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB232_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB232_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB232_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB232_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB232_6
.LBB232_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB232_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB232_8
.LBB232_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB232_8:                              # %if.end13
	movl	-84(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -40(%rbp)
.LBB232_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB232_11 Depth 2
	cmpl	$4, -40(%rbp)
	jge	.LBB232_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB232_9 Depth=1
	movl	$0, -28(%rbp)
.LBB232_11:                             # %for.cond20
                                        #   Parent Loop BB232_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -28(%rbp)
	jge	.LBB232_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB232_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-28(%rbp), %ecx
	addl	-60(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-40(%rbp), %ecx
	addl	-68(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -144(%rbp)
	movl	-28(%rbp), %eax
	addl	-60(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	-68(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-144(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB232_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB232_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB232_15
.LBB232_14:                             # %cond.false
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB232_15:                             # %cond.end
                                        #   in Loop: Header=BB232_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB232_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB232_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB232_21
.LBB232_17:                             # %cond.false65
                                        #   in Loop: Header=BB232_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB232_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB232_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB232_20
.LBB232_19:                             # %cond.false74
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB232_20:                             # %cond.end76
                                        #   in Loop: Header=BB232_11 Depth=2
.LBB232_21:                             # %cond.end78
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB232_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB232_24
.LBB232_23:                             # %cond.false84
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB232_24:                             # %cond.end86
                                        #   in Loop: Header=BB232_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB232_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB232_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB232_30
.LBB232_26:                             # %cond.false91
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB232_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB232_29
.LBB232_28:                             # %cond.false96
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB232_29:                             # %cond.end98
                                        #   in Loop: Header=BB232_11 Depth=2
.LBB232_30:                             # %cond.end100
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	%eax, -92(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB232_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB232_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB232_33
.LBB232_32:                             # %cond.false111
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB232_33:                             # %cond.end114
                                        #   in Loop: Header=BB232_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB232_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB232_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB232_39
.LBB232_35:                             # %cond.false119
                                        #   in Loop: Header=BB232_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB232_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB232_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB232_38
.LBB232_37:                             # %cond.false129
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB232_38:                             # %cond.end132
                                        #   in Loop: Header=BB232_11 Depth=2
.LBB232_39:                             # %cond.end134
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	%eax, -76(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB232_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB232_42
.LBB232_41:                             # %cond.false141
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB232_42:                             # %cond.end144
                                        #   in Loop: Header=BB232_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB232_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB232_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB232_48
.LBB232_44:                             # %cond.false149
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB232_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB232_47
.LBB232_46:                             # %cond.false155
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB232_47:                             # %cond.end158
                                        #   in Loop: Header=BB232_11 Depth=2
.LBB232_48:                             # %cond.end160
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-64(%rbp), %eax
	imull	-80(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-80(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-92(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-76(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-64(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-72(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-88(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-76(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-112(%rbp), %eax
	cltd
	idivl	-56(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -128(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB232_11 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB232_11
.LBB232_50:                             # %for.end
                                        #   in Loop: Header=BB232_9 Depth=1
	jmp	.LBB232_51
.LBB232_51:                             # %for.inc198
                                        #   in Loop: Header=BB232_9 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB232_9
.LBB232_52:                             # %for.end200
	cmpl	$156452788, -116(%rbp)  # imm = 0x95347B4
	jne	.LBB232_54
.LBB232_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB232_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB232_53
.Lfunc_end232:
	.size	OneComponentChromaPrediction4x4.191, .Lfunc_end232-OneComponentChromaPrediction4x4.191
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.192 # -- Begin function writeLumaCoeff8x8_CABAC.192
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.192,@function
writeLumaCoeff8x8_CABAC.192:            # @writeLumaCoeff8x8_CABAC.192
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$1301959095, -60(%rbp)  # imm = 0x4D9A51B7
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB233_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB233_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB233_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB233_3:                              # %land.end
                                        #   in Loop: Header=BB233_1 Depth=1
	testb	$1, %al
	jne	.LBB233_4
	jmp	.LBB233_12
.LBB233_4:                              # %for.body
                                        #   in Loop: Header=BB233_1 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB233_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB233_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB233_7
.LBB233_6:                              # %cond.false
                                        #   in Loop: Header=BB233_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB233_7:                              # %cond.end
                                        #   in Loop: Header=BB233_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB233_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB233_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB233_10
.LBB233_9:                              # %if.else
                                        #   in Loop: Header=BB233_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB233_10:                             # %if.end
                                        #   in Loop: Header=BB233_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB233_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB233_1
.LBB233_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1301959095, -60(%rbp)  # imm = 0x4D9A51B7
	jne	.LBB233_14
.LBB233_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB233_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB233_13
.Lfunc_end233:
	.size	writeLumaCoeff8x8_CABAC.192, .Lfunc_end233-writeLumaCoeff8x8_CABAC.192
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.193  # -- Begin function predict_nnz_chroma.193
	.p2align	4, 0x90
	.type	predict_nnz_chroma.193,@function
predict_nnz_chroma.193:                 # @predict_nnz_chroma.193
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1973640172, -64(%rbp)  # imm = 0x75A35BEC
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB234_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB234_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB234_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB234_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB234_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB234_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB234_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB234_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB234_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB234_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB234_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB234_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB234_13:                             # %if.end57
	jmp	.LBB234_27
.LBB234_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB234_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB234_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB234_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB234_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB234_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB234_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB234_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB234_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB234_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB234_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB234_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB234_26:                             # %if.end124
	jmp	.LBB234_27
.LBB234_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB234_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB234_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1973640172, -64(%rbp)  # imm = 0x75A35BEC
	jne	.LBB234_31
.LBB234_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB234_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB234_30
.Lfunc_end234:
	.size	predict_nnz_chroma.193, .Lfunc_end234-predict_nnz_chroma.193
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionInfo2NAL.194 # -- Begin function writeMotionInfo2NAL.194
	.p2align	4, 0x90
	.type	writeMotionInfo2NAL.194,@function
writeMotionInfo2NAL.194:                # @writeMotionInfo2NAL.194
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1594040015, -56(%rbp)  # imm = 0x5F031ECF
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB235_2
# %bb.1:                                # %cond.true
	movl	$4, %ecx
	jmp	.LBB235_3
.LBB235_2:                              # %cond.false
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB235_3:                              # %cond.end
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	addq	$80, %rax
	movq	-32(%rbp), %rcx
	cmpl	$8, 72(%rcx)
	jne	.LBB235_5
# %bb.4:                                # %cond.true11
	movl	$4, %ecx
	jmp	.LBB235_6
.LBB235_5:                              # %cond.false12
	movq	-32(%rbp), %rcx
	movl	72(%rcx), %ecx
.LBB235_6:                              # %cond.end14
	movslq	%ecx, %rcx
	movl	4(%rax,%rcx,8), %eax
	sarl	$2, %eax
	movl	%eax, -44(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB235_40
# %bb.7:                                # %land.lhs.true
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB235_40
# %bb.8:                                # %land.lhs.true26
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB235_40
# %bb.9:                                # %land.lhs.true30
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB235_40
# %bb.10:                               # %if.then
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB235_14
# %bb.11:                               # %lor.lhs.false
	movq	-32(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB235_14
# %bb.12:                               # %lor.lhs.false37
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	je	.LBB235_14
# %bb.13:                               # %lor.lhs.false40
	cmpl	$0, -52(%rbp)
	je	.LBB235_39
.LBB235_14:                             # %if.then42
	movl	$0, -12(%rbp)
.LBB235_15:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_17 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB235_26
# %bb.16:                               # %for.body
                                        #   in Loop: Header=BB235_15 Depth=1
	movl	$0, -16(%rbp)
.LBB235_17:                             # %for.cond45
                                        #   Parent Loop BB235_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB235_24
# %bb.18:                               # %for.body48
                                        #   in Loop: Header=BB235_17 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB235_20
# %bb.19:                               # %lor.lhs.false53
                                        #   in Loop: Header=BB235_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB235_22
.LBB235_20:                             # %land.lhs.true59
                                        #   in Loop: Header=BB235_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB235_22
# %bb.21:                               # %if.then64
                                        #   in Loop: Header=BB235_17 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	movl	$1, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB235_22:                             # %if.end
                                        #   in Loop: Header=BB235_17 Depth=2
	jmp	.LBB235_23
.LBB235_23:                             # %for.inc
                                        #   in Loop: Header=BB235_17 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB235_17
.LBB235_24:                             # %for.end
                                        #   in Loop: Header=BB235_15 Depth=1
	jmp	.LBB235_25
.LBB235_25:                             # %for.inc79
                                        #   in Loop: Header=BB235_15 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_15
.LBB235_26:                             # %for.end81
	movl	$0, -12(%rbp)
.LBB235_27:                             # %for.cond82
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_29 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB235_38
# %bb.28:                               # %for.body85
                                        #   in Loop: Header=BB235_27 Depth=1
	movl	$0, -16(%rbp)
.LBB235_29:                             # %for.cond86
                                        #   Parent Loop BB235_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB235_36
# %bb.30:                               # %for.body89
                                        #   in Loop: Header=BB235_29 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB235_32
# %bb.31:                               # %lor.lhs.false97
                                        #   in Loop: Header=BB235_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB235_34
.LBB235_32:                             # %land.lhs.true103
                                        #   in Loop: Header=BB235_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB235_34
# %bb.33:                               # %if.then109
                                        #   in Loop: Header=BB235_29 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %r8d
	xorl	%ecx, %ecx
	callq	writeReferenceFrame
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB235_34:                             # %if.end126
                                        #   in Loop: Header=BB235_29 Depth=2
	jmp	.LBB235_35
.LBB235_35:                             # %for.inc127
                                        #   in Loop: Header=BB235_29 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB235_29
.LBB235_36:                             # %for.end129
                                        #   in Loop: Header=BB235_27 Depth=1
	jmp	.LBB235_37
.LBB235_37:                             # %for.inc130
                                        #   in Loop: Header=BB235_27 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_27
.LBB235_38:                             # %for.end132
	jmp	.LBB235_39
.LBB235_39:                             # %if.end133
	jmp	.LBB235_40
.LBB235_40:                             # %if.end134
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB235_57
# %bb.41:                               # %land.lhs.true138
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB235_57
# %bb.42:                               # %land.lhs.true142
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB235_57
# %bb.43:                               # %land.lhs.true146
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB235_57
# %bb.44:                               # %if.then150
	movl	$0, -12(%rbp)
.LBB235_45:                             # %for.cond151
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_47 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB235_56
# %bb.46:                               # %for.body154
                                        #   in Loop: Header=BB235_45 Depth=1
	movl	$0, -16(%rbp)
.LBB235_47:                             # %for.cond155
                                        #   Parent Loop BB235_45 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB235_54
# %bb.48:                               # %for.body158
                                        #   in Loop: Header=BB235_47 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	je	.LBB235_50
# %bb.49:                               # %lor.lhs.false166
                                        #   in Loop: Header=BB235_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB235_52
.LBB235_50:                             # %land.lhs.true172
                                        #   in Loop: Header=BB235_47 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB235_52
# %bb.51:                               # %if.then178
                                        #   in Loop: Header=BB235_47 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	xorl	%r9d, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB235_52:                             # %if.end197
                                        #   in Loop: Header=BB235_47 Depth=2
	jmp	.LBB235_53
.LBB235_53:                             # %for.inc198
                                        #   in Loop: Header=BB235_47 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB235_47
.LBB235_54:                             # %for.end200
                                        #   in Loop: Header=BB235_45 Depth=1
	jmp	.LBB235_55
.LBB235_55:                             # %for.inc201
                                        #   in Loop: Header=BB235_45 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_45
.LBB235_56:                             # %for.end203
	jmp	.LBB235_57
.LBB235_57:                             # %if.end204
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB235_75
# %bb.58:                               # %land.lhs.true208
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB235_75
# %bb.59:                               # %land.lhs.true212
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB235_75
# %bb.60:                               # %land.lhs.true216
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB235_75
# %bb.61:                               # %land.lhs.true220
	cmpl	$0, -52(%rbp)
	je	.LBB235_75
# %bb.62:                               # %if.then222
	movl	$0, -12(%rbp)
.LBB235_63:                             # %for.cond223
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB235_65 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB235_74
# %bb.64:                               # %for.body226
                                        #   in Loop: Header=BB235_63 Depth=1
	movl	$0, -16(%rbp)
.LBB235_65:                             # %for.cond227
                                        #   Parent Loop BB235_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB235_72
# %bb.66:                               # %for.body230
                                        #   in Loop: Header=BB235_65 Depth=2
	movl	-12(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	%eax, %ecx
	movl	%ecx, -20(%rbp)
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	je	.LBB235_68
# %bb.67:                               # %lor.lhs.false238
                                        #   in Loop: Header=BB235_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$2, 488(%rax,%rcx,4)
	jne	.LBB235_70
.LBB235_68:                             # %land.lhs.true244
                                        #   in Loop: Header=BB235_65 Depth=2
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	je	.LBB235_70
# %bb.69:                               # %if.then250
                                        #   in Loop: Header=BB235_65 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	movl	%eax, -48(%rbp)
	movl	-16(%rbp), %edi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movl	-12(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movl	-48(%rbp), %r8d
	movq	-32(%rbp), %rax
	movslq	-20(%rbp), %rbx
	movl	472(%rax,%rbx,4), %eax
	movl	$1, %r9d
	movl	%eax, (%rsp)
	callq	writeMotionVector8x8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
.LBB235_70:                             # %if.end269
                                        #   in Loop: Header=BB235_65 Depth=2
	jmp	.LBB235_71
.LBB235_71:                             # %for.inc270
                                        #   in Loop: Header=BB235_65 Depth=2
	movl	-40(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB235_65
.LBB235_72:                             # %for.end272
                                        #   in Loop: Header=BB235_63 Depth=1
	jmp	.LBB235_73
.LBB235_73:                             # %for.inc273
                                        #   in Loop: Header=BB235_63 Depth=1
	movl	-44(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB235_63
.LBB235_74:                             # %for.end275
	jmp	.LBB235_75
.LBB235_75:                             # %if.end276
	movl	-36(%rbp), %ebx
	cmpl	$1594040015, -56(%rbp)  # imm = 0x5F031ECF
	jne	.LBB235_77
.LBB235_76:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB235_77:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB235_76
.Lfunc_end235:
	.size	writeMotionInfo2NAL.194, .Lfunc_end235-writeMotionInfo2NAL.194
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.195    # -- Begin function writeChromaCoeff.195
	.p2align	4, 0x90
	.type	writeChromaCoeff.195,@function
writeChromaCoeff.195:                   # @writeChromaCoeff.195
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$138647922, -80(%rbp)   # imm = 0x8439972
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB236_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB236_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB236_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB236_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB236_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB236_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB236_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB236_21
.LBB236_5:                              # %if.else
                                        #   in Loop: Header=BB236_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB236_6:                              # %for.cond18
                                        #   Parent Loop BB236_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB236_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB236_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB236_8:                              # %land.end
                                        #   in Loop: Header=BB236_6 Depth=2
	testb	$1, %al
	jne	.LBB236_9
	jmp	.LBB236_20
.LBB236_9:                              # %for.body21
                                        #   in Loop: Header=BB236_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB236_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB236_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB236_12
.LBB236_11:                             # %if.else29
                                        #   in Loop: Header=BB236_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB236_12:                             # %if.end
                                        #   in Loop: Header=BB236_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB236_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB236_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB236_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB236_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB236_15:                             # %lor.end
                                        #   in Loop: Header=BB236_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB236_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB236_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB236_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB236_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB236_18:                             # %lor.end45
                                        #   in Loop: Header=BB236_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB236_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB236_6
.LBB236_20:                             # %for.end
                                        #   in Loop: Header=BB236_2 Depth=1
	jmp	.LBB236_21
.LBB236_21:                             # %if.end58
                                        #   in Loop: Header=BB236_2 Depth=1
	jmp	.LBB236_22
.LBB236_22:                             # %for.inc59
                                        #   in Loop: Header=BB236_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB236_2
.LBB236_23:                             # %for.end61
	jmp	.LBB236_24
.LBB236_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB236_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB236_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB236_28 Depth 2
                                        #       Child Loop BB236_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB236_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB236_26 Depth=1
	movl	$0, -28(%rbp)
.LBB236_28:                             # %for.cond69
                                        #   Parent Loop BB236_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB236_32 Depth 3
	cmpl	$4, -28(%rbp)
	jge	.LBB236_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB236_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB236_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB236_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-28(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB236_47
.LBB236_31:                             # %if.else84
                                        #   in Loop: Header=BB236_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-28(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB236_32:                             # %for.cond115
                                        #   Parent Loop BB236_26 Depth=1
                                        #     Parent Loop BB236_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB236_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB236_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB236_34:                             # %land.end121
                                        #   in Loop: Header=BB236_32 Depth=3
	testb	$1, %al
	jne	.LBB236_35
	jmp	.LBB236_46
.LBB236_35:                             # %for.body122
                                        #   in Loop: Header=BB236_32 Depth=3
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB236_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB236_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB236_38
.LBB236_37:                             # %if.else134
                                        #   in Loop: Header=BB236_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB236_38:                             # %if.end136
                                        #   in Loop: Header=BB236_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB236_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB236_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB236_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB236_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB236_41:                             # %lor.end149
                                        #   in Loop: Header=BB236_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB236_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB236_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB236_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB236_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB236_44:                             # %lor.end164
                                        #   in Loop: Header=BB236_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB236_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB236_32
.LBB236_46:                             # %for.end189
                                        #   in Loop: Header=BB236_28 Depth=2
	jmp	.LBB236_47
.LBB236_47:                             # %if.end190
                                        #   in Loop: Header=BB236_28 Depth=2
	jmp	.LBB236_48
.LBB236_48:                             # %for.inc191
                                        #   in Loop: Header=BB236_28 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB236_28
.LBB236_49:                             # %for.end193
                                        #   in Loop: Header=BB236_26 Depth=1
	jmp	.LBB236_50
.LBB236_50:                             # %for.inc194
                                        #   in Loop: Header=BB236_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB236_26
.LBB236_51:                             # %for.end196
	jmp	.LBB236_52
.LBB236_52:                             # %if.end197
	movl	-36(%rbp), %ebx
	cmpl	$138647922, -80(%rbp)   # imm = 0x8439972
	jne	.LBB236_54
.LBB236_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB236_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB236_53
.Lfunc_end236:
	.size	writeChromaCoeff.195, .Lfunc_end236-writeChromaCoeff.195
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.196 # -- Begin function writeLumaCoeff4x4_CABAC.196
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.196,@function
writeLumaCoeff4x4_CABAC.196:            # @writeLumaCoeff4x4_CABAC.196
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1692256740, -52(%rbp)  # imm = 0x64DDC9E4
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB237_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB237_3
.LBB237_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB237_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB237_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB237_6
.LBB237_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB237_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB237_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB237_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB237_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB237_9:                              # %land.end
                                        #   in Loop: Header=BB237_7 Depth=1
	testb	$1, %al
	jne	.LBB237_10
	jmp	.LBB237_15
.LBB237_10:                             # %for.body
                                        #   in Loop: Header=BB237_7 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB237_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB237_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB237_13
.LBB237_12:                             # %cond.false40
                                        #   in Loop: Header=BB237_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB237_13:                             # %cond.end43
                                        #   in Loop: Header=BB237_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB237_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB237_7
.LBB237_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1692256740, -52(%rbp)  # imm = 0x64DDC9E4
	jne	.LBB237_17
.LBB237_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB237_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB237_16
.Lfunc_end237:
	.size	writeLumaCoeff4x4_CABAC.196, .Lfunc_end237-writeLumaCoeff4x4_CABAC.196
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.197 # -- Begin function writeMotionVector8x8.197
	.p2align	4, 0x90
	.type	writeMotionVector8x8.197,@function
writeMotionVector8x8.197:               # @writeMotionVector8x8.197
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$2146962528, -88(%rbp)  # imm = 0x7FF80C60
	movl	%edi, -80(%rbp)
	movl	%esi, -92(%rbp)
	movl	%edx, -100(%rbp)
	movl	%ecx, -96(%rbp)
	movl	%r8d, -84(%rbp)
	movl	%r9d, -40(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movl	-84(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB238_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB238_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB238_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB238_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB238_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB238_7
.LBB238_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB238_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB238_8:                              # %if.end
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB238_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB238_11 Depth 2
                                        #       Child Loop BB238_13 Depth 3
                                        #         Child Loop BB238_15 Depth 4
                                        #           Child Loop BB238_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB238_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB238_9 Depth=1
	movl	-80(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB238_11:                             # %for.cond22
                                        #   Parent Loop BB238_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB238_13 Depth 3
                                        #         Child Loop BB238_15 Depth 4
                                        #           Child Loop BB238_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-100(%rbp), %eax
	jge	.LBB238_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB238_11 Depth=2
	movl	$0, -12(%rbp)
.LBB238_13:                             # %for.cond25
                                        #   Parent Loop BB238_9 Depth=1
                                        #     Parent Loop BB238_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB238_15 Depth 4
                                        #           Child Loop BB238_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB238_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB238_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-136(%rbp), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -36(%rbp)
.LBB238_15:                             # %for.cond53
                                        #   Parent Loop BB238_9 Depth=1
                                        #     Parent Loop BB238_11 Depth=2
                                        #       Parent Loop BB238_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB238_17 Depth 5
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB238_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB238_15 Depth=4
	movl	$0, -44(%rbp)
.LBB238_17:                             # %for.cond57
                                        #   Parent Loop BB238_9 Depth=1
                                        #     Parent Loop BB238_11 Depth=2
                                        #       Parent Loop BB238_13 Depth=3
                                        #         Parent Loop BB238_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-44(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB238_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB238_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB238_17 Depth=5
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB238_17
.LBB238_20:                             # %for.end
                                        #   in Loop: Header=BB238_15 Depth=4
	jmp	.LBB238_21
.LBB238_21:                             # %for.inc70
                                        #   in Loop: Header=BB238_15 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB238_15
.LBB238_22:                             # %for.end72
                                        #   in Loop: Header=BB238_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB238_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB238_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB238_25
.LBB238_24:                             # %if.else
                                        #   in Loop: Header=BB238_13 Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-40(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB238_25:                             # %if.end78
                                        #   in Loop: Header=BB238_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-144(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-128(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB238_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB238_13
.LBB238_27:                             # %for.end90
                                        #   in Loop: Header=BB238_11 Depth=2
	jmp	.LBB238_28
.LBB238_28:                             # %for.inc91
                                        #   in Loop: Header=BB238_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB238_11
.LBB238_29:                             # %for.end93
                                        #   in Loop: Header=BB238_9 Depth=1
	jmp	.LBB238_30
.LBB238_30:                             # %for.inc94
                                        #   in Loop: Header=BB238_9 Depth=1
	movl	-68(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB238_9
.LBB238_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$2146962528, -88(%rbp)  # imm = 0x7FF80C60
	jne	.LBB238_33
.LBB238_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB238_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB238_32
.Lfunc_end238:
	.size	writeMotionVector8x8.197, .Lfunc_end238-writeMotionVector8x8.197
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.198 # -- Begin function OneComponentChromaPrediction4x4.198
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.198,@function
OneComponentChromaPrediction4x4.198:    # @OneComponentChromaPrediction4x4.198
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$867640125, -116(%rbp)  # imm = 0x33B7233D
	movq	%rdi, -136(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -72(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -56(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB239_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB239_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -112(%rbp)
	cmpl	$0, -112(%rbp)
	je	.LBB239_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB239_5
# %bb.4:                                # %if.then7
	movl	$4, -48(%rbp)
	jmp	.LBB239_6
.LBB239_5:                              # %if.else
	movl	$2, -48(%rbp)
.LBB239_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB239_8
.LBB239_7:                              # %if.else10
	movl	$0, -48(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB239_8:                              # %if.end13
	movl	-56(%rbp), %eax
	addl	-48(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -40(%rbp)
.LBB239_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB239_11 Depth 2
	cmpl	$4, -40(%rbp)
	jge	.LBB239_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB239_9 Depth=1
	movl	$0, -32(%rbp)
.LBB239_11:                             # %for.cond20
                                        #   Parent Loop BB239_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -32(%rbp)
	jge	.LBB239_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB239_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-32(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-40(%rbp), %ecx
	addl	-72(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-32(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-40(%rbp), %eax
	addl	-72(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB239_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB239_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB239_15
.LBB239_14:                             # %cond.false
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB239_15:                             # %cond.end
                                        #   in Loop: Header=BB239_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB239_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB239_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB239_21
.LBB239_17:                             # %cond.false65
                                        #   in Loop: Header=BB239_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB239_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB239_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB239_20
.LBB239_19:                             # %cond.false74
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB239_20:                             # %cond.end76
                                        #   in Loop: Header=BB239_11 Depth=2
.LBB239_21:                             # %cond.end78
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	%eax, -84(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB239_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB239_24
.LBB239_23:                             # %cond.false84
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB239_24:                             # %cond.end86
                                        #   in Loop: Header=BB239_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB239_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB239_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB239_30
.LBB239_26:                             # %cond.false91
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB239_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB239_29
.LBB239_28:                             # %cond.false96
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB239_29:                             # %cond.end98
                                        #   in Loop: Header=BB239_11 Depth=2
.LBB239_30:                             # %cond.end100
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB239_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB239_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB239_33
.LBB239_32:                             # %cond.false111
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB239_33:                             # %cond.end114
                                        #   in Loop: Header=BB239_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB239_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB239_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB239_39
.LBB239_35:                             # %cond.false119
                                        #   in Loop: Header=BB239_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB239_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB239_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB239_38
.LBB239_37:                             # %cond.false129
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-28(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB239_38:                             # %cond.end132
                                        #   in Loop: Header=BB239_11 Depth=2
.LBB239_39:                             # %cond.end134
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	%eax, -92(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB239_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB239_42
.LBB239_41:                             # %cond.false141
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB239_42:                             # %cond.end144
                                        #   in Loop: Header=BB239_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB239_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB239_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB239_48
.LBB239_44:                             # %cond.false149
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB239_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB239_47
.LBB239_46:                             # %cond.false155
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB239_47:                             # %cond.end158
                                        #   in Loop: Header=BB239_11 Depth=2
.LBB239_48:                             # %cond.end160
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	%eax, -80(%rbp)
	movl	-16(%rbp), %eax
	andl	-28(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-8(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-4(%rbp), %eax
	subl	-52(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-88(%rbp), %eax
	imull	-60(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-84(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-60(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-64(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-92(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-88(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-80(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-84(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-44(%rbp), %ecx
	imull	-52(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-80(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-92(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-68(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB239_11 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB239_11
.LBB239_50:                             # %for.end
                                        #   in Loop: Header=BB239_9 Depth=1
	jmp	.LBB239_51
.LBB239_51:                             # %for.inc198
                                        #   in Loop: Header=BB239_9 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB239_9
.LBB239_52:                             # %for.end200
	cmpl	$867640125, -116(%rbp)  # imm = 0x33B7233D
	jne	.LBB239_54
.LBB239_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB239_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB239_53
.Lfunc_end239:
	.size	OneComponentChromaPrediction4x4.198, .Lfunc_end239-OneComponentChromaPrediction4x4.198
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.199        # -- Begin function writeMBLayer.199
	.p2align	4, 0x90
	.type	writeMBLayer.199,@function
writeMBLayer.199:                       # @writeMBLayer.199
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$938028664, -92(%rbp)   # imm = 0x37E92E78
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-64(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -64(%rbp)
	je	.LBB240_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-64(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB240_3
.LBB240_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB240_3
.LBB240_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB240_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB240_9
.LBB240_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB240_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB240_8
.LBB240_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB240_8
.LBB240_8:                              # %cond.end14
.LBB240_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB240_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB240_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB240_24
.LBB240_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB240_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB240_17
	jmp	.LBB240_18
.LBB240_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB240_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB240_18
	jmp	.LBB240_17
.LBB240_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB240_17
	jmp	.LBB240_18
.LBB240_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB240_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB240_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB240_23
.LBB240_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB240_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB240_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB240_23:                             # %if.end50
	jmp	.LBB240_24
.LBB240_24:                             # %if.end51
	jmp	.LBB240_25
.LBB240_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB240_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB240_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB240_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB240_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB240_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB240_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB240_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB240_35
.LBB240_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB240_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB240_38
.LBB240_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB240_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB240_39:                             # %if.end96
	jmp	.LBB240_40
.LBB240_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB240_43
.LBB240_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB240_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB240_89
.LBB240_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB240_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB240_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB240_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB240_49
.LBB240_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -100(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-100(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB240_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB240_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB240_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB240_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB240_55
.LBB240_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB240_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB240_58
.LBB240_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB240_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB240_59:                             # %if.end198
	jmp	.LBB240_60
.LBB240_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB240_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB240_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB240_64
.LBB240_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB240_64:                             # %if.end226
	jmp	.LBB240_88
.LBB240_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB240_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB240_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB240_76
.LBB240_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB240_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB240_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB240_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB240_72:                             # %if.end281
	jmp	.LBB240_73
.LBB240_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB240_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB240_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB240_87
.LBB240_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB240_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB240_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB240_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB240_77 Depth=1
	movl	$0, -44(%rbp)
.LBB240_79:                             # %for.cond310
                                        #   Parent Loop BB240_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB240_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB240_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB240_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB240_79
.LBB240_82:                             # %for.end
                                        #   in Loop: Header=BB240_77 Depth=1
	jmp	.LBB240_83
.LBB240_83:                             # %for.inc322
                                        #   in Loop: Header=BB240_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB240_77
.LBB240_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB240_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB240_86:                             # %if.end345
	jmp	.LBB240_87
.LBB240_87:                             # %if.end346
	jmp	.LBB240_88
.LBB240_88:                             # %if.end347
	jmp	.LBB240_89
.LBB240_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB240_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB240_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB240_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB240_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB240_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB240_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB240_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB240_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB240_98
.LBB240_97:                             # %if.else380
                                        #   in Loop: Header=BB240_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB240_98:                             # %if.end382
                                        #   in Loop: Header=BB240_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB240_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB240_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB240_101
.LBB240_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB240_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB240_101:                            # %lor.end415
                                        #   in Loop: Header=BB240_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB240_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB240_94
.LBB240_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB240_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB240_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB240_114
.LBB240_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB240_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB240_110
.LBB240_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB240_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB240_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB240_113
.LBB240_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB240_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB240_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB240_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB240_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB240_120
.LBB240_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB240_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB240_119:                            # %if.end483
	jmp	.LBB240_120
.LBB240_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB240_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB240_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB240_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB240_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB240_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB240_129
.LBB240_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB240_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB240_128:                            # %if.end516
	jmp	.LBB240_129
.LBB240_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$938028664, -92(%rbp)   # imm = 0x37E92E78
	jne	.LBB240_131
.LBB240_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB240_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB240_130
.Lfunc_end240:
	.size	writeMBLayer.199, .Lfunc_end240-writeMBLayer.199
	.cfi_endproc
                                        # -- End function
	.globl	IntraChromaPrediction4x4.200 # -- Begin function IntraChromaPrediction4x4.200
	.p2align	4, 0x90
	.type	IntraChromaPrediction4x4.200,@function
IntraChromaPrediction4x4.200:           # @IntraChromaPrediction4x4.200
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$587748430, -28(%rbp)   # imm = 0x2308544E
	movl	%edi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	524(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB241_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB241_3 Depth 2
	movl	-8(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB241_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB241_1 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB241_3:                              # %for.cond1
                                        #   Parent Loop BB241_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB241_6
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB241_3 Depth=2
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rcx
	shlq	$11, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$9, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB241_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB241_3
.LBB241_6:                              # %for.end
                                        #   in Loop: Header=BB241_1 Depth=1
	jmp	.LBB241_7
.LBB241_7:                              # %for.inc17
                                        #   in Loop: Header=BB241_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB241_1
.LBB241_8:                              # %for.end19
	cmpl	$587748430, -28(%rbp)   # imm = 0x2308544E
	jne	.LBB241_10
.LBB241_9:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB241_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB241_9
.Lfunc_end241:
	.size	IntraChromaPrediction4x4.200, .Lfunc_end241-IntraChromaPrediction4x4.200
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz.201         # -- Begin function predict_nnz.201
	.p2align	4, 0x90
	.type	predict_nnz.201,@function
predict_nnz.201:                        # @predict_nnz.201
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1911023479, -56(%rbp)  # imm = 0x71E7E777
	movl	%edi, -48(%rbp)
	movl	%esi, -44(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB242_4
# %bb.1:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB242_4
# %bb.2:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB242_4
# %bb.3:                                # %if.then
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB242_4:                              # %if.end
	cmpl	$0, -40(%rbp)
	je	.LBB242_6
# %bb.5:                                # %if.then6
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB242_6:                              # %if.end14
	movl	-52(%rbp), %edi
	movl	-48(%rbp), %esi
	movl	-44(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-40(%rbp), %r9
	callq	getLuma4x4Neighbour
	cmpl	$0, -40(%rbp)
	je	.LBB242_10
# %bb.7:                                # %land.lhs.true17
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB242_10
# %bb.8:                                # %land.lhs.true20
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB242_10
# %bb.9:                                # %if.then23
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-36(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB242_10:                             # %if.end30
	cmpl	$0, -40(%rbp)
	je	.LBB242_12
# %bb.11:                               # %if.then33
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-28(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB242_12:                             # %if.end45
	cmpl	$2, -16(%rbp)
	jne	.LBB242_14
# %bb.13:                               # %if.then47
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB242_14:                             # %if.end49
	movl	-12(%rbp), %ebx
	cmpl	$1911023479, -56(%rbp)  # imm = 0x71E7E777
	jne	.LBB242_16
.LBB242_15:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB242_16:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB242_15
.Lfunc_end242:
	.size	predict_nnz.201, .Lfunc_end242-predict_nnz.201
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.202 # -- Begin function writeLumaCoeff8x8_CABAC.202
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.202,@function
writeLumaCoeff8x8_CABAC.202:            # @writeLumaCoeff8x8_CABAC.202
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$82488460, -60(%rbp)    # imm = 0x4EAAC8C
	movl	%edi, -28(%rbp)
	movl	%esi, -36(%rbp)
	movl	$0, -32(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -48(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-48(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -80(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -72(%rbp)
	movq	-48(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB243_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB243_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB243_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB243_3:                              # %land.end
                                        #   in Loop: Header=BB243_1 Depth=1
	testb	$1, %al
	jne	.LBB243_4
	jmp	.LBB243_12
.LBB243_4:                              # %for.body
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB243_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB243_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB243_7
.LBB243_6:                              # %cond.false
                                        #   in Loop: Header=BB243_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB243_7:                              # %cond.end
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB243_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	jmp	.LBB243_10
.LBB243_9:                              # %if.else
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
.LBB243_10:                             # %if.end
                                        #   in Loop: Header=BB243_1 Depth=1
	movq	-56(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-56(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB243_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB243_1
.LBB243_12:                             # %for.end
	movl	-32(%rbp), %ebx
	cmpl	$82488460, -60(%rbp)    # imm = 0x4EAAC8C
	jne	.LBB243_14
.LBB243_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB243_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB243_13
.Lfunc_end243:
	.size	writeLumaCoeff8x8_CABAC.202, .Lfunc_end243-writeLumaCoeff8x8_CABAC.202
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.203 # -- Begin function proceed2nextMacroblock.203
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.203,@function
proceed2nextMacroblock.203:             # @proceed2nextMacroblock.203
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$5090784, -28(%rbp)     # imm = 0x4DADE0
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB244_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB244_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB244_9
.LBB244_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB244_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB244_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB244_7
.LBB244_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB244_7:                              # %if.end
	jmp	.LBB244_8
.LBB244_8:                              # %if.end48
	jmp	.LBB244_9
.LBB244_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB244_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB244_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB244_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB244_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB244_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB244_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB244_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB244_16
.LBB244_15:                             # %if.else86
                                        #   in Loop: Header=BB244_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB244_16:                             # %if.end94
                                        #   in Loop: Header=BB244_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB244_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB244_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB244_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB244_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB244_20
.LBB244_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB244_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB244_21
.LBB244_20:                             # %if.then107
                                        #   in Loop: Header=BB244_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB244_22
.LBB244_21:                             # %if.else114
                                        #   in Loop: Header=BB244_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB244_22:                             # %if.end121
                                        #   in Loop: Header=BB244_12 Depth=1
	jmp	.LBB244_23
.LBB244_23:                             # %if.end122
                                        #   in Loop: Header=BB244_12 Depth=1
	jmp	.LBB244_24
.LBB244_24:                             # %for.inc
                                        #   in Loop: Header=BB244_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB244_12
.LBB244_25:                             # %for.end
	jmp	.LBB244_34
.LBB244_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB244_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB244_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB244_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB244_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB244_32
.LBB244_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB244_32:                             # %if.end155
	jmp	.LBB244_33
.LBB244_33:                             # %if.end156
	jmp	.LBB244_34
.LBB244_34:                             # %if.end157
	jmp	.LBB244_35
.LBB244_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB244_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB244_38
.LBB244_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB244_38:                             # %if.end167
	cmpl	$5090784, -28(%rbp)     # imm = 0x4DADE0
	jne	.LBB244_40
.LBB244_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB244_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB244_39
.Lfunc_end244:
	.size	proceed2nextMacroblock.203, .Lfunc_end244-proceed2nextMacroblock.203
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.204  # -- Begin function predict_nnz_chroma.204
	.p2align	4, 0x90
	.type	predict_nnz_chroma.204,@function
predict_nnz_chroma.204:                 # @predict_nnz_chroma.204
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$88048401, -64(%rbp)    # imm = 0x53F8311
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB245_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB245_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB245_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB245_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB245_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB245_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB245_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB245_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB245_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB245_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB245_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB245_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB245_13:                             # %if.end57
	jmp	.LBB245_27
.LBB245_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB245_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB245_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB245_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB245_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB245_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB245_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB245_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB245_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB245_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB245_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB245_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB245_26:                             # %if.end124
	jmp	.LBB245_27
.LBB245_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB245_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB245_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$88048401, -64(%rbp)    # imm = 0x53F8311
	jne	.LBB245_31
.LBB245_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB245_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB245_30
.Lfunc_end245:
	.size	predict_nnz_chroma.204, .Lfunc_end245-predict_nnz_chroma.204
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.205    # -- Begin function writeChromaCoeff.205
	.p2align	4, 0x90
	.type	writeChromaCoeff.205,@function
writeChromaCoeff.205:                   # @writeChromaCoeff.205
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$733502748, -84(%rbp)   # imm = 0x2BB85D1C
	movl	$0, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB246_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB246_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB246_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB246_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB246_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB246_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB246_21
.LBB246_5:                              # %if.else
                                        #   in Loop: Header=BB246_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -128(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB246_6:                              # %for.cond18
                                        #   Parent Loop BB246_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB246_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB246_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB246_8:                              # %land.end
                                        #   in Loop: Header=BB246_6 Depth=2
	testb	$1, %al
	jne	.LBB246_9
	jmp	.LBB246_20
.LBB246_9:                              # %for.body21
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB246_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB246_12
.LBB246_11:                             # %if.else29
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB246_12:                             # %if.end
                                        #   in Loop: Header=BB246_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB246_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB246_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB246_15:                             # %lor.end
                                        #   in Loop: Header=BB246_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB246_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB246_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB246_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB246_18:                             # %lor.end45
                                        #   in Loop: Header=BB246_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB246_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB246_6
.LBB246_20:                             # %for.end
                                        #   in Loop: Header=BB246_2 Depth=1
	jmp	.LBB246_21
.LBB246_21:                             # %if.end58
                                        #   in Loop: Header=BB246_2 Depth=1
	jmp	.LBB246_22
.LBB246_22:                             # %for.inc59
                                        #   in Loop: Header=BB246_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB246_2
.LBB246_23:                             # %for.end61
	jmp	.LBB246_24
.LBB246_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB246_52
# %bb.25:                               # %if.then64
	movl	$4, -28(%rbp)
.LBB246_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB246_28 Depth 2
                                        #       Child Loop BB246_32 Depth 3
	movl	-28(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB246_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB246_26 Depth=1
	movl	$0, -36(%rbp)
.LBB246_28:                             # %for.cond69
                                        #   Parent Loop BB246_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB246_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB246_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB246_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB246_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB246_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-28(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB246_47
.LBB246_31:                             # %if.else84
                                        #   in Loop: Header=BB246_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-28(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB246_32:                             # %for.cond115
                                        #   Parent Loop BB246_26 Depth=1
                                        #     Parent Loop BB246_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB246_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB246_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB246_34:                             # %land.end121
                                        #   in Loop: Header=BB246_32 Depth=3
	testb	$1, %al
	jne	.LBB246_35
	jmp	.LBB246_46
.LBB246_35:                             # %for.body122
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -80(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB246_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB246_38
.LBB246_37:                             # %if.else134
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB246_38:                             # %if.end136
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB246_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB246_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB246_41:                             # %lor.end149
                                        #   in Loop: Header=BB246_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB246_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB246_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB246_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB246_44:                             # %lor.end164
                                        #   in Loop: Header=BB246_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB246_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB246_32
.LBB246_46:                             # %for.end189
                                        #   in Loop: Header=BB246_28 Depth=2
	jmp	.LBB246_47
.LBB246_47:                             # %if.end190
                                        #   in Loop: Header=BB246_28 Depth=2
	jmp	.LBB246_48
.LBB246_48:                             # %for.inc191
                                        #   in Loop: Header=BB246_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB246_28
.LBB246_49:                             # %for.end193
                                        #   in Loop: Header=BB246_26 Depth=1
	jmp	.LBB246_50
.LBB246_50:                             # %for.inc194
                                        #   in Loop: Header=BB246_26 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB246_26
.LBB246_51:                             # %for.end196
	jmp	.LBB246_52
.LBB246_52:                             # %if.end197
	movl	-32(%rbp), %ebx
	cmpl	$733502748, -84(%rbp)   # imm = 0x2BB85D1C
	jne	.LBB246_54
.LBB246_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB246_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB246_53
.Lfunc_end246:
	.size	writeChromaCoeff.205, .Lfunc_end246-writeChromaCoeff.205
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.206 # -- Begin function SetModesAndRefframe.206
	.p2align	4, 0x90
	.type	SetModesAndRefframe.206,@function
SetModesAndRefframe.206:                # @SetModesAndRefframe.206
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$710731907, -60(%rbp)   # imm = 0x2A5CE883
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB247_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB247_12
.LBB247_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB247_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB247_11
.LBB247_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB247_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB247_10
.LBB247_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB247_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB247_9
.LBB247_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB247_9:                              # %if.end
	jmp	.LBB247_10
.LBB247_10:                             # %if.end86
	jmp	.LBB247_11
.LBB247_11:                             # %if.end87
	jmp	.LBB247_12
.LBB247_12:                             # %if.end88
	cmpl	$710731907, -60(%rbp)   # imm = 0x2A5CE883
	jne	.LBB247_14
.LBB247_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB247_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB247_13
.Lfunc_end247:
	.size	SetModesAndRefframe.206, .Lfunc_end247-SetModesAndRefframe.206
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.207      # -- Begin function find_sad_16x16.207
	.p2align	4, 0x90
	.type	find_sad_16x16.207,@function
find_sad_16x16.207:                     # @find_sad_16x16.207
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$416285848, -80(%rbp)   # imm = 0x18D00498
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB248_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB248_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB248_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB248_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB248_1
.LBB248_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB248_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB248_20
.LBB248_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB248_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB248_9
.LBB248_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB248_9
.LBB248_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -60(%rbp)
.LBB248_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB248_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB248_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB248_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB248_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB248_14
.LBB248_13:                             # %cond.false23
                                        #   in Loop: Header=BB248_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB248_14
.LBB248_14:                             # %cond.end24
                                        #   in Loop: Header=BB248_10 Depth=1
	andl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB248_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB248_10
.LBB248_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB248_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB248_19
.LBB248_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB248_19
.LBB248_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB248_20:                             # %if.end
	movl	$999999, -64(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB248_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB248_42 Depth 2
                                        #       Child Loop BB248_44 Depth 3
                                        #     Child Loop BB248_50 Depth 2
                                        #       Child Loop BB248_52 Depth 3
                                        #         Child Loop BB248_54 Depth 4
                                        #         Child Loop BB248_58 Depth 4
                                        #           Child Loop BB248_60 Depth 5
                                        #     Child Loop BB248_72 Depth 2
                                        #       Child Loop BB248_74 Depth 3
                                        #     Child Loop BB248_80 Depth 2
                                        #     Child Loop BB248_84 Depth 2
                                        #       Child Loop BB248_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB248_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB248_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB248_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB248_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB248_32
.LBB248_24:                             # %if.then46
                                        #   in Loop: Header=BB248_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB248_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB248_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB248_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB248_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB248_28
.LBB248_27:                             # %if.then51
                                        #   in Loop: Header=BB248_21 Depth=1
	jmp	.LBB248_95
.LBB248_28:                             # %if.end52
                                        #   in Loop: Header=BB248_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB248_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB248_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB248_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB248_21 Depth=1
	jmp	.LBB248_95
.LBB248_31:                             # %if.end57
                                        #   in Loop: Header=BB248_21 Depth=1
	jmp	.LBB248_32
.LBB248_32:                             # %if.end58
                                        #   in Loop: Header=BB248_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB248_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB248_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB248_40
.LBB248_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB248_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB248_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB248_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB248_40
.LBB248_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB248_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB248_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB248_21 Depth=1
	cmpl	$0, -60(%rbp)
	je	.LBB248_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB248_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB248_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB248_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB248_41
.LBB248_40:                             # %if.then74
                                        #   in Loop: Header=BB248_21 Depth=1
	jmp	.LBB248_94
.LBB248_41:                             # %if.else75
                                        #   in Loop: Header=BB248_21 Depth=1
	movl	$0, -16(%rbp)
.LBB248_42:                             # %for.cond76
                                        #   Parent Loop BB248_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB248_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB248_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB248_42 Depth=2
	movl	$0, -12(%rbp)
.LBB248_44:                             # %for.cond79
                                        #   Parent Loop BB248_21 Depth=1
                                        #     Parent Loop BB248_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB248_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB248_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB248_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB248_44
.LBB248_47:                             # %for.end115
                                        #   in Loop: Header=BB248_42 Depth=2
	jmp	.LBB248_48
.LBB248_48:                             # %for.inc116
                                        #   in Loop: Header=BB248_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB248_42
.LBB248_49:                             # %for.end118
                                        #   in Loop: Header=BB248_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -24(%rbp)
.LBB248_50:                             # %for.cond119
                                        #   Parent Loop BB248_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB248_52 Depth 3
                                        #         Child Loop BB248_54 Depth 4
                                        #         Child Loop BB248_58 Depth 4
                                        #           Child Loop BB248_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB248_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB248_50 Depth=2
	movl	$0, -20(%rbp)
.LBB248_52:                             # %for.cond123
                                        #   Parent Loop BB248_21 Depth=1
                                        #     Parent Loop BB248_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB248_54 Depth 4
                                        #         Child Loop BB248_58 Depth 4
                                        #           Child Loop BB248_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB248_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB248_52 Depth=3
	movl	$0, -16(%rbp)
.LBB248_54:                             # %for.cond127
                                        #   Parent Loop BB248_21 Depth=1
                                        #     Parent Loop BB248_50 Depth=2
                                        #       Parent Loop BB248_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB248_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB248_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-24(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-20(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-24(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB248_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB248_54
.LBB248_57:                             # %for.end237
                                        #   in Loop: Header=BB248_52 Depth=3
	movl	$0, -12(%rbp)
.LBB248_58:                             # %for.cond238
                                        #   Parent Loop BB248_21 Depth=1
                                        #     Parent Loop BB248_50 Depth=2
                                        #       Parent Loop BB248_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB248_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB248_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB248_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB248_60:                             # %for.cond346
                                        #   Parent Loop BB248_21 Depth=1
                                        #     Parent Loop BB248_50 Depth=2
                                        #       Parent Loop BB248_52 Depth=3
                                        #         Parent Loop BB248_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB248_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB248_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB248_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB248_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB248_63:                             # %if.end363
                                        #   in Loop: Header=BB248_60 Depth=5
	jmp	.LBB248_64
.LBB248_64:                             # %for.inc364
                                        #   in Loop: Header=BB248_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB248_60
.LBB248_65:                             # %for.end366
                                        #   in Loop: Header=BB248_58 Depth=4
	jmp	.LBB248_66
.LBB248_66:                             # %for.inc367
                                        #   in Loop: Header=BB248_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB248_58
.LBB248_67:                             # %for.end369
                                        #   in Loop: Header=BB248_52 Depth=3
	jmp	.LBB248_68
.LBB248_68:                             # %for.inc370
                                        #   in Loop: Header=BB248_52 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB248_52
.LBB248_69:                             # %for.end372
                                        #   in Loop: Header=BB248_50 Depth=2
	jmp	.LBB248_70
.LBB248_70:                             # %for.inc373
                                        #   in Loop: Header=BB248_50 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB248_50
.LBB248_71:                             # %for.end375
                                        #   in Loop: Header=BB248_21 Depth=1
	movl	$0, -16(%rbp)
.LBB248_72:                             # %for.cond376
                                        #   Parent Loop BB248_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB248_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB248_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB248_72 Depth=2
	movl	$0, -12(%rbp)
.LBB248_74:                             # %for.cond380
                                        #   Parent Loop BB248_21 Depth=1
                                        #     Parent Loop BB248_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB248_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB248_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB248_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB248_74
.LBB248_77:                             # %for.end397
                                        #   in Loop: Header=BB248_72 Depth=2
	jmp	.LBB248_78
.LBB248_78:                             # %for.inc398
                                        #   in Loop: Header=BB248_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB248_72
.LBB248_79:                             # %for.end400
                                        #   in Loop: Header=BB248_21 Depth=1
	movl	$0, -16(%rbp)
.LBB248_80:                             # %for.cond401
                                        #   Parent Loop BB248_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB248_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB248_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB248_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB248_80
.LBB248_83:                             # %for.end463
                                        #   in Loop: Header=BB248_21 Depth=1
	movl	$0, -12(%rbp)
.LBB248_84:                             # %for.cond464
                                        #   Parent Loop BB248_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB248_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB248_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB248_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB248_86:                             # %for.cond524
                                        #   Parent Loop BB248_21 Depth=1
                                        #     Parent Loop BB248_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB248_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB248_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB248_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB248_86
.LBB248_89:                             # %for.end536
                                        #   in Loop: Header=BB248_84 Depth=2
	jmp	.LBB248_90
.LBB248_90:                             # %for.inc537
                                        #   in Loop: Header=BB248_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB248_84
.LBB248_91:                             # %for.end539
                                        #   in Loop: Header=BB248_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB248_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB248_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB248_93:                             # %if.end543
                                        #   in Loop: Header=BB248_21 Depth=1
	jmp	.LBB248_94
.LBB248_94:                             # %if.end544
                                        #   in Loop: Header=BB248_21 Depth=1
	jmp	.LBB248_95
.LBB248_95:                             # %for.inc545
                                        #   in Loop: Header=BB248_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB248_21
.LBB248_96:                             # %for.end547
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %ebx
	cmpl	$416285848, -80(%rbp)   # imm = 0x18D00498
	jne	.LBB248_98
.LBB248_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB248_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB248_97
.Lfunc_end248:
	.size	find_sad_16x16.207, .Lfunc_end248-find_sad_16x16.207
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.208 # -- Begin function writeMotionVector8x8.208
	.p2align	4, 0x90
	.type	writeMotionVector8x8.208,@function
writeMotionVector8x8.208:               # @writeMotionVector8x8.208
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$720963054, -88(%rbp)   # imm = 0x2AF905EE
	movl	%edi, -80(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -92(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -144(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB249_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB249_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB249_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB249_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB249_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB249_7
.LBB249_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB249_7:                              # %cond.end
	movq	%rax, -120(%rbp)
.LBB249_8:                              # %if.end
	movl	-96(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB249_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB249_11 Depth 2
                                        #       Child Loop BB249_13 Depth 3
                                        #         Child Loop BB249_15 Depth 4
                                        #           Child Loop BB249_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB249_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB249_9 Depth=1
	movl	-80(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB249_11:                             # %for.cond22
                                        #   Parent Loop BB249_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB249_13 Depth 3
                                        #         Child Loop BB249_15 Depth 4
                                        #           Child Loop BB249_17 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB249_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB249_11 Depth=2
	movl	$0, -16(%rbp)
.LBB249_13:                             # %for.cond25
                                        #   Parent Loop BB249_9 Depth=1
                                        #     Parent Loop BB249_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB249_15 Depth 4
                                        #           Child Loop BB249_17 Depth 5
	cmpl	$2, -16(%rbp)
	jge	.LBB249_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB249_13 Depth=3
	movq	-120(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-128(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -40(%rbp)
.LBB249_15:                             # %for.cond53
                                        #   Parent Loop BB249_9 Depth=1
                                        #     Parent Loop BB249_11 Depth=2
                                        #       Parent Loop BB249_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB249_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB249_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB249_15 Depth=4
	movl	$0, -36(%rbp)
.LBB249_17:                             # %for.cond57
                                        #   Parent Loop BB249_9 Depth=1
                                        #     Parent Loop BB249_11 Depth=2
                                        #       Parent Loop BB249_13 Depth=3
                                        #         Parent Loop BB249_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB249_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB249_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-12(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB249_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB249_17
.LBB249_20:                             # %for.end
                                        #   in Loop: Header=BB249_15 Depth=4
	jmp	.LBB249_21
.LBB249_21:                             # %for.inc70
                                        #   in Loop: Header=BB249_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB249_15
.LBB249_22:                             # %for.end72
                                        #   in Loop: Header=BB249_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB249_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB249_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB249_25
.LBB249_24:                             # %if.else
                                        #   in Loop: Header=BB249_13 Depth=3
	movl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB249_25:                             # %if.end78
                                        #   in Loop: Header=BB249_13 Depth=3
	movq	-152(%rbp), %rax
	movq	24(%rax), %rax
	movq	-136(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	-112(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-112(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-144(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB249_13 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB249_13
.LBB249_27:                             # %for.end90
                                        #   in Loop: Header=BB249_11 Depth=2
	jmp	.LBB249_28
.LBB249_28:                             # %for.inc91
                                        #   in Loop: Header=BB249_11 Depth=2
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB249_11
.LBB249_29:                             # %for.end93
                                        #   in Loop: Header=BB249_9 Depth=1
	jmp	.LBB249_30
.LBB249_30:                             # %for.inc94
                                        #   in Loop: Header=BB249_9 Depth=1
	movl	-68(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB249_9
.LBB249_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$720963054, -88(%rbp)   # imm = 0x2AF905EE
	jne	.LBB249_33
.LBB249_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB249_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB249_32
.Lfunc_end249:
	.size	writeMotionVector8x8.208, .Lfunc_end249-writeMotionVector8x8.208
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.209 # -- Begin function write_terminating_bit.209
	.p2align	4, 0x90
	.type	write_terminating_bit.209,@function
write_terminating_bit.209:              # @write_terminating_bit.209
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1237072982, -8(%rbp)   # imm = 0x49BC3C56
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$1237072982, -8(%rbp)   # imm = 0x49BC3C56
	jne	.LBB250_2
.LBB250_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB250_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB250_1
.Lfunc_end250:
	.size	write_terminating_bit.209, .Lfunc_end250-write_terminating_bit.209
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.210 # -- Begin function writeMotionVector8x8.210
	.p2align	4, 0x90
	.type	writeMotionVector8x8.210,@function
writeMotionVector8x8.210:               # @writeMotionVector8x8.210
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1330286457, -100(%rbp) # imm = 0x4F4A8F79
	movl	%edi, -92(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -96(%rbp)
	movl	%r8d, -88(%rbp)
	movl	%r9d, -44(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -68(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -136(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	-88(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -152(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB251_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB251_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB251_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB251_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB251_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB251_7
.LBB251_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB251_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB251_8:                              # %if.end
	movl	-84(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB251_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB251_11 Depth 2
                                        #       Child Loop BB251_13 Depth 3
                                        #         Child Loop BB251_15 Depth 4
                                        #           Child Loop BB251_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-96(%rbp), %eax
	jge	.LBB251_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB251_9 Depth=1
	movl	-92(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB251_11:                             # %for.cond22
                                        #   Parent Loop BB251_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB251_13 Depth 3
                                        #         Child Loop BB251_15 Depth 4
                                        #           Child Loop BB251_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-80(%rbp), %eax
	jge	.LBB251_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB251_11 Depth=2
	movl	$0, -12(%rbp)
.LBB251_13:                             # %for.cond25
                                        #   Parent Loop BB251_9 Depth=1
                                        #     Parent Loop BB251_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB251_15 Depth 4
                                        #           Child Loop BB251_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB251_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB251_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-152(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -40(%rbp)
.LBB251_15:                             # %for.cond53
                                        #   Parent Loop BB251_9 Depth=1
                                        #     Parent Loop BB251_11 Depth=2
                                        #       Parent Loop BB251_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB251_17 Depth 5
	movl	-40(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB251_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB251_15 Depth=4
	movl	$0, -36(%rbp)
.LBB251_17:                             # %for.cond57
                                        #   Parent Loop BB251_9 Depth=1
                                        #     Parent Loop BB251_11 Depth=2
                                        #       Parent Loop BB251_13 Depth=3
                                        #         Parent Loop BB251_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB251_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB251_17 Depth=5
	movl	-76(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-44(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-36(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB251_17 Depth=5
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB251_17
.LBB251_20:                             # %for.end
                                        #   in Loop: Header=BB251_15 Depth=4
	jmp	.LBB251_21
.LBB251_21:                             # %for.inc70
                                        #   in Loop: Header=BB251_15 Depth=4
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB251_15
.LBB251_22:                             # %for.end72
                                        #   in Loop: Header=BB251_13 Depth=3
	movl	-76(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB251_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB251_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB251_25
.LBB251_24:                             # %if.else
                                        #   in Loop: Header=BB251_13 Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-44(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB251_25:                             # %if.end78
                                        #   in Loop: Header=BB251_13 Depth=3
	movq	-144(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-136(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB251_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB251_13
.LBB251_27:                             # %for.end90
                                        #   in Loop: Header=BB251_11 Depth=2
	jmp	.LBB251_28
.LBB251_28:                             # %for.inc91
                                        #   in Loop: Header=BB251_11 Depth=2
	movl	-68(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB251_11
.LBB251_29:                             # %for.end93
                                        #   in Loop: Header=BB251_9 Depth=1
	jmp	.LBB251_30
.LBB251_30:                             # %for.inc94
                                        #   in Loop: Header=BB251_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB251_9
.LBB251_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$1330286457, -100(%rbp) # imm = 0x4F4A8F79
	jne	.LBB251_33
.LBB251_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB251_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB251_32
.Lfunc_end251:
	.size	writeMotionVector8x8.210, .Lfunc_end251-writeMotionVector8x8.210
	.cfi_endproc
                                        # -- End function
	.globl	write_terminating_bit.211 # -- Begin function write_terminating_bit.211
	.p2align	4, 0x90
	.type	write_terminating_bit.211,@function
write_terminating_bit.211:              # @write_terminating_bit.211
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$703384135, -8(%rbp)    # imm = 0x29ECCA47
	movw	%di, -2(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	-24(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	(%rax), %rax
	movl	$1, 40(%rax)
	movq	-16(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rdi
	movswl	-2(%rbp), %esi
	callq	biari_encode_symbol_final
	cmpl	$703384135, -8(%rbp)    # imm = 0x29ECCA47
	jne	.LBB252_2
.LBB252_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB252_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB252_1
.Lfunc_end252:
	.size	write_terminating_bit.211, .Lfunc_end252-write_terminating_bit.211
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.212  # -- Begin function predict_nnz_chroma.212
	.p2align	4, 0x90
	.type	predict_nnz_chroma.212,@function
predict_nnz_chroma.212:                 # @predict_nnz_chroma.212
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$715785560, -64(%rbp)   # imm = 0x2AAA0558
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB253_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB253_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB253_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB253_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB253_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB253_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB253_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB253_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB253_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB253_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB253_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB253_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB253_13:                             # %if.end57
	jmp	.LBB253_27
.LBB253_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB253_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB253_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB253_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB253_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB253_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB253_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB253_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB253_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB253_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB253_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB253_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB253_26:                             # %if.end124
	jmp	.LBB253_27
.LBB253_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB253_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB253_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$715785560, -64(%rbp)   # imm = 0x2AAA0558
	jne	.LBB253_31
.LBB253_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB253_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB253_30
.Lfunc_end253:
	.size	predict_nnz_chroma.212, .Lfunc_end253-predict_nnz_chroma.212
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.213        # -- Begin function MBType2Value.213
	.p2align	4, 0x90
	.type	MBType2Value.213,@function
MBType2Value.213:                       # @MBType2Value.213
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1163378191, -36(%rbp)  # imm = 0x4557BE0F
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB254_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB254_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB254_4
.LBB254_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB254_26
.LBB254_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB254_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB254_26
.LBB254_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB254_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB254_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB254_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB254_26
.LBB254_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB254_26
.LBB254_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB254_26
.LBB254_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB254_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB254_26
.LBB254_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB254_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB254_17
.LBB254_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB254_26
.LBB254_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB254_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB254_26
.LBB254_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB254_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB254_26
.LBB254_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB254_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB254_26
.LBB254_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB254_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB254_26
.LBB254_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB254_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1163378191, -36(%rbp)  # imm = 0x4557BE0F
	jne	.LBB254_28
.LBB254_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB254_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB254_27
.Lfunc_end254:
	.size	MBType2Value.213, .Lfunc_end254-MBType2Value.213
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.214 # -- Begin function writeCoeff4x4_CAVLC.214
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.214,@function
writeCoeff4x4_CAVLC.214:                # @writeCoeff4x4_CAVLC.214
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$2061931577, -172(%rbp) # imm = 0x7AE69439
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -36(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -160(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -128(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB255_22
# %bb.1:                                # %entry
	movq	.LJTI255_0(,%rax,8), %rax
	jmpq	*%rax
.LBB255_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB255_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB255_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB255_6
.LBB255_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB255_7
.LBB255_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB255_7:                              # %if.end
	jmp	.LBB255_23
.LBB255_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB255_23
.LBB255_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB255_23
.LBB255_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -80(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB255_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB255_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB255_14
.LBB255_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB255_15
.LBB255_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB255_15:                             # %if.end67
	jmp	.LBB255_23
.LBB255_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -160(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB255_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB255_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB255_20
.LBB255_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB255_21
.LBB255_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB255_21:                             # %if.end93
	jmp	.LBB255_23
.LBB255_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB255_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB255_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -80(%rbp)
	je	.LBB255_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB255_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB255_27
.LBB255_26:                             # %cond.false
                                        #   in Loop: Header=BB255_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB255_27
.LBB255_27:                             # %cond.end
                                        #   in Loop: Header=BB255_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB255_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB255_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB255_29:                             # %land.end
                                        #   in Loop: Header=BB255_24 Depth=1
	testb	$1, %dl
	jne	.LBB255_30
	jmp	.LBB255_41
.LBB255_30:                             # %for.body
                                        #   in Loop: Header=BB255_24 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB255_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB255_24 Depth=1
	cmpl	$0, -92(%rbp)
	je	.LBB255_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB255_24 Depth=1
	movl	-92(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB255_33:                             # %if.end110
                                        #   in Loop: Header=BB255_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB255_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB255_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB255_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB255_24 Depth=1
	movl	$3, -32(%rbp)
.LBB255_36:                             # %if.end117
                                        #   in Loop: Header=BB255_24 Depth=1
	jmp	.LBB255_38
.LBB255_37:                             # %if.else118
                                        #   in Loop: Header=BB255_24 Depth=1
	movl	$0, -32(%rbp)
.LBB255_38:                             # %if.end119
                                        #   in Loop: Header=BB255_24 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB255_39:                             # %if.end121
                                        #   in Loop: Header=BB255_24 Depth=1
	jmp	.LBB255_40
.LBB255_40:                             # %for.inc
                                        #   in Loop: Header=BB255_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB255_24
.LBB255_41:                             # %for.end
	cmpl	$0, -80(%rbp)
	jne	.LBB255_61
# %bb.42:                               # %if.then124
	cmpl	$0, -160(%rbp)
	jne	.LBB255_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB255_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB255_46
.LBB255_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB255_46:                             # %cond.end136
	movl	%eax, -104(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB255_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB255_49
.LBB255_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB255_49:                             # %cond.end145
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB255_51
.LBB255_50:                             # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -104(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB255_51:                             # %if.end151
	movl	-40(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-104(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB255_53
# %bb.52:                               # %if.then160
	movl	$0, -84(%rbp)
	jmp	.LBB255_60
.LBB255_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB255_55
# %bb.54:                               # %if.then163
	movl	$1, -84(%rbp)
	jmp	.LBB255_59
.LBB255_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB255_57
# %bb.56:                               # %if.then166
	movl	$2, -84(%rbp)
	jmp	.LBB255_58
.LBB255_57:                             # %if.else167
	movl	$3, -84(%rbp)
.LBB255_58:                             # %if.end168
	jmp	.LBB255_59
.LBB255_59:                             # %if.end169
	jmp	.LBB255_60
.LBB255_60:                             # %if.end170
	jmp	.LBB255_62
.LBB255_61:                             # %if.else171
	movl	$0, -84(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB255_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-40(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB255_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB255_65
.LBB255_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB255_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -40(%rbp)
	jne	.LBB255_67
# %bb.66:                               # %if.then189
	movl	-36(%rbp), %eax
	movl	%eax, -156(%rbp)
	jmp	.LBB255_122
.LBB255_67:                             # %if.end190
	cmpl	$0, -40(%rbp)
	je	.LBB255_121
# %bb.68:                               # %if.then192
	movl	$0, -96(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB255_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB255_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB255_69 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB255_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB255_72:                             # %if.end202
                                        #   in Loop: Header=BB255_69 Depth=1
	movl	-96(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB255_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB255_69 Depth=1
	movl	-96(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -96(%rbp)
.LBB255_74:                             # %if.end205
                                        #   in Loop: Header=BB255_69 Depth=1
	jmp	.LBB255_75
.LBB255_75:                             # %for.inc206
                                        #   in Loop: Header=BB255_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB255_69
.LBB255_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB255_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB255_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -40(%rbp)
	jle	.LBB255_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB255_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB255_81:                             # %if.end227
	cmpl	$10, -40(%rbp)
	jle	.LBB255_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB255_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB255_85
.LBB255_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB255_85:                             # %if.end233
	movl	-72(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB255_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB255_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB255_86 Depth=1
	movq	-128(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB255_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB255_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB255_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB255_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB255_91
.LBB255_90:                             # %if.else249
                                        #   in Loop: Header=BB255_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB255_91:                             # %if.end252
                                        #   in Loop: Header=BB255_86 Depth=1
	movl	$0, -144(%rbp)
.LBB255_92:                             # %if.end253
                                        #   in Loop: Header=BB255_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB255_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB255_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB255_95
.LBB255_94:                             # %if.else257
                                        #   in Loop: Header=BB255_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-120(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB255_95:                             # %if.end259
                                        #   in Loop: Header=BB255_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB255_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB255_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB255_97:                             # %if.end266
                                        #   in Loop: Header=BB255_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB255_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB255_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB255_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB255_86 Depth=1
	movl	$2, -28(%rbp)
.LBB255_100:                            # %if.end273
                                        #   in Loop: Header=BB255_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB255_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB255_86
.LBB255_102:                            # %for.end285
	movl	-40(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB255_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-40(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB255_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB255_106
.LBB255_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB255_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB255_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-40(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB255_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB255_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB255_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -92(%rbp)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -40(%rbp)
	jle	.LBB255_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB255_108 Depth=1
	cmpl	$0, -88(%rbp)
	jne	.LBB255_112
.LBB255_111:                            # %if.then318
	jmp	.LBB255_120
.LBB255_112:                            # %if.end319
                                        #   in Loop: Header=BB255_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB255_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB255_108 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB255_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB255_108 Depth=1
	movl	-88(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB255_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB255_108 Depth=1
	movl	$6, -28(%rbp)
.LBB255_116:                            # %if.end327
                                        #   in Loop: Header=BB255_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-92(%rbp), %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB255_117:                            # %if.end341
                                        #   in Loop: Header=BB255_108 Depth=1
	jmp	.LBB255_118
.LBB255_118:                            # %for.inc342
                                        #   in Loop: Header=BB255_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB255_108
.LBB255_119:                            # %for.end344.loopexit
	jmp	.LBB255_120
.LBB255_120:                            # %for.end344
	jmp	.LBB255_121
.LBB255_121:                            # %if.end345
	movl	-36(%rbp), %eax
	movl	%eax, -156(%rbp)
.LBB255_122:                            # %return
	movl	-156(%rbp), %ebx
	cmpl	$2061931577, -172(%rbp) # imm = 0x7AE69439
	jne	.LBB255_124
.LBB255_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB255_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB255_123
.Lfunc_end255:
	.size	writeCoeff4x4_CAVLC.214, .Lfunc_end255-writeCoeff4x4_CAVLC.214
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI255_0:
	.quad	.LBB255_2
	.quad	.LBB255_8
	.quad	.LBB255_9
	.quad	.LBB255_22
	.quad	.LBB255_22
	.quad	.LBB255_22
	.quad	.LBB255_10
	.quad	.LBB255_16
                                        # -- End function
	.text
	.globl	IntraChromaPrediction.215 # -- Begin function IntraChromaPrediction.215
	.p2align	4, 0x90
	.type	IntraChromaPrediction.215,@function
IntraChromaPrediction.215:              # @IntraChromaPrediction.215
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1008, %rsp             # imm = 0x3F0
	movabsq	$.L__const.IntraChromaPrediction.block_pos, %rax
	movl	$1903106899, -164(%rbp) # imm = 0x716F1B53
	movq	%rdi, -192(%rbp)
	movq	%rsi, -184(%rbp)
	movq	%rdx, -176(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -200(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -116(%rbp)
	movl	$0, -132(%rbp)
	movq	img, %rcx
	movl	72708(%rcx), %ecx
	movl	%ecx, -16(%rbp)
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	movl	%ecx, -12(%rbp)
	movq	img, %rcx
	movl	72700(%rcx), %ecx
	subl	$1, %ecx
	movl	%ecx, -120(%rbp)
	leaq	-1008(%rbp), %rdi
	movq	%rax, %rsi
	movl	$192, %edx
	callq	memcpy
	movl	$0, -4(%rbp)
.LBB256_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB256_1 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	subl	$1, %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB256_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_1
.LBB256_4:                              # %for.end
	movl	-116(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	xorl	%ecx, %ecx
	leaq	-160(%rbp), %r8
	callq	getNeighbour
	movl	-160(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-752(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-728(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	%eax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB256_26
# %bb.5:                                # %if.then
	cmpl	$0, -160(%rbp)
	je	.LBB256_7
# %bb.6:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-156(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB256_8
.LBB256_7:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB256_8
.LBB256_8:                              # %cond.end
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
	movl	$1, -32(%rbp)
.LBB256_9:                              # %for.cond16
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_15
# %bb.10:                               # %for.body18
                                        #   in Loop: Header=BB256_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB256_12
# %bb.11:                               # %cond.true24
                                        #   in Loop: Header=BB256_9 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB256_13
.LBB256_12:                             # %cond.false32
                                        #   in Loop: Header=BB256_9 Depth=1
	xorl	%eax, %eax
	jmp	.LBB256_13
.LBB256_13:                             # %cond.end33
                                        #   in Loop: Header=BB256_9 Depth=1
	andl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.14:                               # %for.inc36
                                        #   in Loop: Header=BB256_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_9
.LBB256_15:                             # %for.end38
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	$1, -28(%rbp)
.LBB256_16:                             # %for.cond41
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB256_22
# %bb.17:                               # %for.body43
                                        #   in Loop: Header=BB256_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	cltq
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB256_19
# %bb.18:                               # %cond.true49
                                        #   in Loop: Header=BB256_16 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB256_20
.LBB256_19:                             # %cond.false57
                                        #   in Loop: Header=BB256_16 Depth=1
	xorl	%eax, %eax
	jmp	.LBB256_20
.LBB256_20:                             # %cond.end58
                                        #   in Loop: Header=BB256_16 Depth=1
	andl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
# %bb.21:                               # %for.inc62
                                        #   in Loop: Header=BB256_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_16
.LBB256_22:                             # %for.end64
	cmpl	$0, -752(%rbp)
	je	.LBB256_24
# %bb.23:                               # %cond.true68
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-748(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB256_25
.LBB256_24:                             # %cond.false74
	xorl	%eax, %eax
	jmp	.LBB256_25
.LBB256_25:                             # %cond.end75
	movl	%eax, -104(%rbp)
.LBB256_26:                             # %if.end
	cmpq	$0, -192(%rbp)
	je	.LBB256_28
# %bb.27:                               # %if.then78
	movl	-20(%rbp), %eax
	movq	-192(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB256_28:                             # %if.end79
	cmpq	$0, -184(%rbp)
	je	.LBB256_32
# %bb.29:                               # %if.then81
	xorl	%eax, %eax
	cmpl	$0, -32(%rbp)
	je	.LBB256_31
# %bb.30:                               # %land.rhs
	cmpl	$0, -28(%rbp)
	setne	%al
.LBB256_31:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-184(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB256_32:                             # %if.end86
	cmpq	$0, -176(%rbp)
	je	.LBB256_34
# %bb.33:                               # %if.then88
	movl	-104(%rbp), %eax
	movq	-176(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB256_34:                             # %if.end89
	movl	$0, -24(%rbp)
.LBB256_35:                             # %for.cond90
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_37 Depth 2
                                        #       Child Loop BB256_39 Depth 3
                                        #         Child Loop BB256_104 Depth 4
                                        #         Child Loop BB256_110 Depth 4
                                        #         Child Loop BB256_85 Depth 4
                                        #         Child Loop BB256_91 Depth 4
                                        #         Child Loop BB256_66 Depth 4
                                        #         Child Loop BB256_72 Depth 4
                                        #         Child Loop BB256_44 Depth 4
                                        #         Child Loop BB256_50 Depth 4
                                        #         Child Loop BB256_125 Depth 4
                                        #           Child Loop BB256_127 Depth 5
                                        #     Child Loop BB256_138 Depth 2
                                        #     Child Loop BB256_142 Depth 2
                                        #       Child Loop BB256_144 Depth 3
                                        #     Child Loop BB256_153 Depth 2
                                        #     Child Loop BB256_157 Depth 2
                                        #       Child Loop BB256_159 Depth 3
                                        #     Child Loop BB256_170 Depth 2
                                        #     Child Loop BB256_174 Depth 2
                                        #     Child Loop BB256_178 Depth 2
                                        #       Child Loop BB256_180 Depth 3
	cmpl	$2, -24(%rbp)
	jge	.LBB256_197
# %bb.36:                               # %for.body92
                                        #   in Loop: Header=BB256_35 Depth=1
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -84(%rbp)
.LBB256_37:                             # %for.cond95
                                        #   Parent Loop BB256_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB256_39 Depth 3
                                        #         Child Loop BB256_104 Depth 4
                                        #         Child Loop BB256_110 Depth 4
                                        #         Child Loop BB256_85 Depth 4
                                        #         Child Loop BB256_91 Depth 4
                                        #         Child Loop BB256_66 Depth 4
                                        #         Child Loop BB256_72 Depth 4
                                        #         Child Loop BB256_44 Depth 4
                                        #         Child Loop BB256_50 Depth 4
                                        #         Child Loop BB256_125 Depth 4
                                        #           Child Loop BB256_127 Depth 5
	movl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72692(%rax), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB256_136
# %bb.38:                               # %for.body98
                                        #   in Loop: Header=BB256_37 Depth=2
	movl	$0, -88(%rbp)
.LBB256_39:                             # %for.cond99
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_37 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB256_104 Depth 4
                                        #         Child Loop BB256_110 Depth 4
                                        #         Child Loop BB256_85 Depth 4
                                        #         Child Loop BB256_91 Depth 4
                                        #         Child Loop BB256_66 Depth 4
                                        #         Child Loop BB256_72 Depth 4
                                        #         Child Loop BB256_44 Depth 4
                                        #         Child Loop BB256_50 Depth 4
                                        #         Child Loop BB256_125 Depth 4
                                        #           Child Loop BB256_127 Depth 5
	cmpl	$4, -88(%rbp)
	jge	.LBB256_134
# %bb.40:                               # %for.body101
                                        #   in Loop: Header=BB256_39 Depth=3
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_y(%rcx,%rax), %eax
	movl	%eax, -48(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$5, %rax
	movslq	-84(%rbp), %rcx
	leaq	(%rax,%rcx,4), %rax
	movslq	-88(%rbp), %rcx
	movzbl	subblk_offset_x(%rcx,%rax), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -56(%rbp)
	movq	img(%rip), %rax
	movl	72680(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	$0, -60(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -64(%rbp)
	movl	$0, -72(%rbp)
	movslq	-120(%rbp), %rax
	shlq	$6, %rax
	leaq	-1008(%rbp,%rax), %rax
	movslq	-84(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-88(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB256_124
# %bb.41:                               # %for.body101
                                        #   in Loop: Header=BB256_39 Depth=3
	movq	.LJTI256_0(,%rax,8), %rax
	jmpq	*%rax
.LBB256_42:                             # %sw.bb
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB256_48
# %bb.43:                               # %if.then123
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_44:                             # %for.cond124
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_37 Depth=2
                                        #       Parent Loop BB256_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_47
# %bb.45:                               # %for.body128
                                        #   in Loop: Header=BB256_44 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.46:                               # %for.inc136
                                        #   in Loop: Header=BB256_44 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_44
.LBB256_47:                             # %for.end138
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_48
.LBB256_48:                             # %if.end139
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB256_54
# %bb.49:                               # %if.then142
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_50:                             # %for.cond143
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_37 Depth=2
                                        #       Parent Loop BB256_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_53
# %bb.51:                               # %for.body147
                                        #   in Loop: Header=BB256_50 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.52:                               # %for.inc160
                                        #   in Loop: Header=BB256_50 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_50
.LBB256_53:                             # %for.end162
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_54
.LBB256_54:                             # %if.end163
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB256_57
# %bb.55:                               # %land.lhs.true
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB256_57
# %bb.56:                               # %if.then167
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-72(%rbp), %eax
	addl	-68(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB256_63
.LBB256_57:                             # %if.else
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB256_59
# %bb.58:                               # %if.then171
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB256_62
.LBB256_59:                             # %if.else174
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB256_61
# %bb.60:                               # %if.then177
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB256_61:                             # %if.end180
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_62
.LBB256_62:                             # %if.end181
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_63
.LBB256_63:                             # %if.end182
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_124
.LBB256_64:                             # %sw.bb183
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB256_70
# %bb.65:                               # %if.then185
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_66:                             # %for.cond186
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_37 Depth=2
                                        #       Parent Loop BB256_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_69
# %bb.67:                               # %for.body190
                                        #   in Loop: Header=BB256_66 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.68:                               # %for.inc200
                                        #   in Loop: Header=BB256_66 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_66
.LBB256_69:                             # %for.end202
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_77
.LBB256_70:                             # %if.else203
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB256_76
# %bb.71:                               # %if.then206
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_72:                             # %for.cond207
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_37 Depth=2
                                        #       Parent Loop BB256_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_75
# %bb.73:                               # %for.body211
                                        #   in Loop: Header=BB256_72 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-68(%rbp), %eax
	movl	%eax, -68(%rbp)
# %bb.74:                               # %for.inc224
                                        #   in Loop: Header=BB256_72 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_72
.LBB256_75:                             # %for.end226
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_76
.LBB256_76:                             # %if.end227
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_77
.LBB256_77:                             # %if.end228
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB256_79
# %bb.78:                               # %if.then230
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB256_82
.LBB256_79:                             # %if.else233
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -32(%rbp)
	je	.LBB256_81
# %bb.80:                               # %if.then236
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-68(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB256_81:                             # %if.end239
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_82
.LBB256_82:                             # %if.end240
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_124
.LBB256_83:                             # %sw.bb241
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB256_89
# %bb.84:                               # %if.then244
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_85:                             # %for.cond245
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_37 Depth=2
                                        #       Parent Loop BB256_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_88
# %bb.86:                               # %for.body249
                                        #   in Loop: Header=BB256_85 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.87:                               # %for.inc262
                                        #   in Loop: Header=BB256_85 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_85
.LBB256_88:                             # %for.end264
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_96
.LBB256_89:                             # %if.else265
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB256_95
# %bb.90:                               # %if.then267
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_91:                             # %for.cond268
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_37 Depth=2
                                        #       Parent Loop BB256_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_94
# %bb.92:                               # %for.body272
                                        #   in Loop: Header=BB256_91 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-72(%rbp), %eax
	movl	%eax, -72(%rbp)
# %bb.93:                               # %for.inc282
                                        #   in Loop: Header=BB256_91 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_91
.LBB256_94:                             # %for.end284
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_95
.LBB256_95:                             # %if.end285
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_96
.LBB256_96:                             # %if.end286
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB256_98
# %bb.97:                               # %if.then289
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB256_101
.LBB256_98:                             # %if.else292
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB256_100
# %bb.99:                               # %if.then294
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-72(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB256_100:                            # %if.end297
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_101
.LBB256_101:                            # %if.end298
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_124
.LBB256_102:                            # %sw.bb299
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB256_108
# %bb.103:                              # %if.then301
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-52(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_104:                            # %for.cond302
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_37 Depth=2
                                        #       Parent Loop BB256_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-52(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_107
# %bb.105:                              # %for.body306
                                        #   in Loop: Header=BB256_104 Depth=4
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.106:                              # %for.inc316
                                        #   in Loop: Header=BB256_104 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_104
.LBB256_107:                            # %for.end318
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_108
.LBB256_108:                            # %if.end319
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB256_114
# %bb.109:                              # %if.then322
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-56(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_110:                            # %for.cond323
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_37 Depth=2
                                        #       Parent Loop BB256_39 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movl	-56(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_113
# %bb.111:                              # %for.body327
                                        #   in Loop: Header=BB256_110 Depth=4
	movq	-80(%rbp), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -60(%rbp)
# %bb.112:                              # %for.inc340
                                        #   in Loop: Header=BB256_110 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_110
.LBB256_113:                            # %for.end342
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_114
.LBB256_114:                            # %if.end343
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB256_117
# %bb.115:                              # %land.lhs.true345
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB256_117
# %bb.116:                              # %if.then348
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-64(%rbp), %eax
	addl	-60(%rbp), %eax
	addl	$4, %eax
	sarl	$3, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB256_123
.LBB256_117:                            # %if.else352
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -20(%rbp)
	je	.LBB256_119
# %bb.118:                              # %if.then354
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-64(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB256_122
.LBB256_119:                            # %if.else357
                                        #   in Loop: Header=BB256_39 Depth=3
	cmpl	$0, -28(%rbp)
	je	.LBB256_121
# %bb.120:                              # %if.then360
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-60(%rbp), %eax
	addl	$2, %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
.LBB256_121:                            # %if.end363
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_122
.LBB256_122:                            # %if.end364
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_123
.LBB256_123:                            # %if.end365
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_124
.LBB256_124:                            # %sw.epilog
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB256_125:                            # %for.cond366
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_37 Depth=2
                                        #       Parent Loop BB256_39 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB256_127 Depth 5
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_132
# %bb.126:                              # %for.body370
                                        #   in Loop: Header=BB256_125 Depth=4
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_127:                            # %for.cond371
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_37 Depth=2
                                        #       Parent Loop BB256_39 Depth=3
                                        #         Parent Loop BB256_125 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_130
# %bb.128:                              # %for.body375
                                        #   in Loop: Header=BB256_127 Depth=5
	movl	-36(%rbp), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.129:                              # %for.inc384
                                        #   in Loop: Header=BB256_127 Depth=5
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_127
.LBB256_130:                            # %for.end386
                                        #   in Loop: Header=BB256_125 Depth=4
	jmp	.LBB256_131
.LBB256_131:                            # %for.inc387
                                        #   in Loop: Header=BB256_125 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_125
.LBB256_132:                            # %for.end389
                                        #   in Loop: Header=BB256_39 Depth=3
	jmp	.LBB256_133
.LBB256_133:                            # %for.inc390
                                        #   in Loop: Header=BB256_39 Depth=3
	movl	-88(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -88(%rbp)
	jmp	.LBB256_39
.LBB256_134:                            # %for.end392
                                        #   in Loop: Header=BB256_37 Depth=2
	jmp	.LBB256_135
.LBB256_135:                            # %for.inc393
                                        #   in Loop: Header=BB256_37 Depth=2
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB256_37
.LBB256_136:                            # %for.end395
                                        #   in Loop: Header=BB256_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB256_150
# %bb.137:                              # %if.then397
                                        #   in Loop: Header=BB256_35 Depth=1
	movl	$0, -4(%rbp)
.LBB256_138:                            # %for.cond398
                                        #   Parent Loop BB256_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB256_141
# %bb.139:                              # %for.body401
                                        #   in Loop: Header=BB256_138 Depth=2
	movq	-80(%rbp), %rax
	movslq	-140(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-144(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -272(%rbp,%rcx,4)
# %bb.140:                              # %for.inc412
                                        #   in Loop: Header=BB256_138 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_138
.LBB256_141:                            # %for.end414
                                        #   in Loop: Header=BB256_35 Depth=1
	movl	$0, -4(%rbp)
.LBB256_142:                            # %for.cond415
                                        #   Parent Loop BB256_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB256_144 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB256_149
# %bb.143:                              # %for.body418
                                        #   in Loop: Header=BB256_142 Depth=2
	movl	$0, -8(%rbp)
.LBB256_144:                            # %for.cond419
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_142 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB256_147
# %bb.145:                              # %for.body422
                                        #   in Loop: Header=BB256_144 Depth=3
	movslq	-4(%rbp), %rax
	movl	-272(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.146:                              # %for.inc434
                                        #   in Loop: Header=BB256_144 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_144
.LBB256_147:                            # %for.end436
                                        #   in Loop: Header=BB256_142 Depth=2
	jmp	.LBB256_148
.LBB256_148:                            # %for.inc437
                                        #   in Loop: Header=BB256_142 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_142
.LBB256_149:                            # %for.end439
                                        #   in Loop: Header=BB256_35 Depth=1
	jmp	.LBB256_150
.LBB256_150:                            # %if.end440
                                        #   in Loop: Header=BB256_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB256_165
# %bb.151:                              # %land.lhs.true443
                                        #   in Loop: Header=BB256_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB256_165
# %bb.152:                              # %if.then446
                                        #   in Loop: Header=BB256_35 Depth=1
	movl	$0, -4(%rbp)
.LBB256_153:                            # %for.cond447
                                        #   Parent Loop BB256_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB256_156
# %bb.154:                              # %for.body450
                                        #   in Loop: Header=BB256_153 Depth=2
	movq	-80(%rbp), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movslq	16(%rdx), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	movl	%eax, -336(%rbp,%rcx,4)
# %bb.155:                              # %for.inc466
                                        #   in Loop: Header=BB256_153 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_153
.LBB256_156:                            # %for.end468
                                        #   in Loop: Header=BB256_35 Depth=1
	movl	$0, -4(%rbp)
.LBB256_157:                            # %for.cond469
                                        #   Parent Loop BB256_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB256_159 Depth 3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB256_164
# %bb.158:                              # %for.body472
                                        #   in Loop: Header=BB256_157 Depth=2
	movl	$0, -8(%rbp)
.LBB256_159:                            # %for.cond473
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_157 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB256_162
# %bb.160:                              # %for.body476
                                        #   in Loop: Header=BB256_159 Depth=3
	movslq	-8(%rbp), %rax
	movl	-336(%rbp,%rax,4), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	addq	$512, %rcx              # imm = 0x200
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.161:                              # %for.inc488
                                        #   in Loop: Header=BB256_159 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_159
.LBB256_162:                            # %for.end490
                                        #   in Loop: Header=BB256_157 Depth=2
	jmp	.LBB256_163
.LBB256_163:                            # %for.inc491
                                        #   in Loop: Header=BB256_157 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_157
.LBB256_164:                            # %for.end493
                                        #   in Loop: Header=BB256_35 Depth=1
	jmp	.LBB256_165
.LBB256_165:                            # %if.end494
                                        #   in Loop: Header=BB256_35 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB256_195
# %bb.166:                              # %land.lhs.true497
                                        #   in Loop: Header=BB256_35 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB256_195
# %bb.167:                              # %land.lhs.true500
                                        #   in Loop: Header=BB256_35 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB256_195
# %bb.168:                              # %land.lhs.true502
                                        #   in Loop: Header=BB256_35 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB256_195
# %bb.169:                              # %if.then504
                                        #   in Loop: Header=BB256_35 Depth=1
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-16(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-272(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -124(%rbp)
	movl	$0, -4(%rbp)
.LBB256_170:                            # %for.cond519
                                        #   Parent Loop BB256_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB256_173
# %bb.171:                              # %for.body524
                                        #   in Loop: Header=BB256_170 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-272(%rbp,%rax,4), %edi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-272(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-124(%rbp), %ecx
	movl	%ecx, -124(%rbp)
# %bb.172:                              # %for.inc538
                                        #   in Loop: Header=BB256_170 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_170
.LBB256_173:                            # %for.end540
                                        #   in Loop: Header=BB256_35 Depth=1
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	-336(%rbp,%rcx,4), %ecx
	movq	-80(%rbp), %rdx
	movslq	-732(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-736(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	imull	%ecx, %eax
	movl	%eax, -128(%rbp)
	movl	$0, -4(%rbp)
.LBB256_174:                            # %for.cond556
                                        #   Parent Loop BB256_35 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	subl	$1, %eax
	cmpl	%eax, %ecx
	jge	.LBB256_177
# %bb.175:                              # %for.body561
                                        #   in Loop: Header=BB256_174 Depth=2
	movl	-4(%rbp), %ecx
	addl	$1, %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	addl	-4(%rbp), %eax
	cltq
	movl	-336(%rbp,%rax,4), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	subl	$2, %eax
	subl	-4(%rbp), %eax
	cltq
	subl	-336(%rbp,%rax,4), %edi
	imull	%edi, %ecx
	addl	-128(%rbp), %ecx
	movl	%ecx, -128(%rbp)
# %bb.176:                              # %for.inc575
                                        #   in Loop: Header=BB256_174 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_174
.LBB256_177:                            # %for.end577
                                        #   in Loop: Header=BB256_35 Depth=1
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$17, %esi
	movl	$5, %edx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-124(%rbp), %edi
	movl	-16(%rbp), %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	-16(%rbp), %eax
	cmpl	$8, %eax
	movl	$6, %eax
	movl	$6, %ecx
	cmovel	%edx, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -108(%rbp)
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	movl	$5, %edi
	cmovel	%esi, %edi
	imull	-128(%rbp), %edi
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %edi
	movl	-12(%rbp), %ecx
	cmpl	$8, %ecx
	cmovel	%edx, %eax
	movl	%eax, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movl	%edi, -92(%rbp)
	movl	-16(%rbp), %eax
	subl	$1, %eax
	cltq
	movl	-272(%rbp,%rax,4), %eax
	movl	-12(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	addl	-336(%rbp,%rcx,4), %eax
	shll	$4, %eax
	movl	%eax, -96(%rbp)
	movl	$0, -8(%rbp)
.LBB256_178:                            # %for.cond606
                                        #   Parent Loop BB256_35 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB256_180 Depth 3
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB256_194
# %bb.179:                              # %for.body609
                                        #   in Loop: Header=BB256_178 Depth=2
	movl	$0, -4(%rbp)
.LBB256_180:                            # %for.cond610
                                        #   Parent Loop BB256_35 Depth=1
                                        #     Parent Loop BB256_178 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB256_192
# %bb.181:                              # %for.body613
                                        #   in Loop: Header=BB256_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB256_183
# %bb.182:                              # %cond.true628
                                        #   in Loop: Header=BB256_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB256_184
.LBB256_183:                            # %cond.false630
                                        #   in Loop: Header=BB256_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB256_184:                            # %cond.end643
                                        #   in Loop: Header=BB256_180 Depth=3
	xorl	%eax, %eax
	cmpl	%ecx, %eax
	jle	.LBB256_186
# %bb.185:                              # %cond.true647
                                        #   in Loop: Header=BB256_180 Depth=3
	xorl	%ecx, %ecx
	jmp	.LBB256_190
.LBB256_186:                            # %cond.false648
                                        #   in Loop: Header=BB256_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %r8d
	movl	-96(%rbp), %esi
	movl	-4(%rbp), %edi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-108(%rbp), %edi
	addl	%edi, %esi
	movl	-8(%rbp), %edi
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	subl	%eax, %edi
	addl	$1, %edi
	imull	-92(%rbp), %edi
	addl	%edi, %esi
	addl	$16, %esi
	sarl	$5, %esi
	cmpl	%esi, %r8d
	jge	.LBB256_188
# %bb.187:                              # %cond.true664
                                        #   in Loop: Header=BB256_180 Depth=3
	movq	img, %rax
	movl	72688(%rax), %ecx
	jmp	.LBB256_189
.LBB256_188:                            # %cond.false666
                                        #   in Loop: Header=BB256_180 Depth=3
	movl	-96(%rbp), %ecx
	movl	-4(%rbp), %esi
	movl	-16(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-108(%rbp), %esi
	addl	%esi, %ecx
	movl	-8(%rbp), %esi
	movl	-12(%rbp), %eax
	cltd
	idivl	%edi
	subl	%eax, %esi
	addl	$1, %esi
	imull	-92(%rbp), %esi
	addl	%esi, %ecx
	addl	$16, %ecx
	sarl	$5, %ecx
.LBB256_189:                            # %cond.end679
                                        #   in Loop: Header=BB256_180 Depth=3
.LBB256_190:                            # %cond.end681
                                        #   in Loop: Header=BB256_180 Depth=3
	movq	img, %rax
	addq	$8504, %rax             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rax
	addq	$1536, %rax             # imm = 0x600
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movw	%cx, (%rax,%rdx,2)
# %bb.191:                              # %for.inc692
                                        #   in Loop: Header=BB256_180 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_180
.LBB256_192:                            # %for.end694
                                        #   in Loop: Header=BB256_178 Depth=2
	jmp	.LBB256_193
.LBB256_193:                            # %for.inc695
                                        #   in Loop: Header=BB256_178 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_178
.LBB256_194:                            # %for.end697
                                        #   in Loop: Header=BB256_35 Depth=1
	jmp	.LBB256_195
.LBB256_195:                            # %if.end698
                                        #   in Loop: Header=BB256_35 Depth=1
	jmp	.LBB256_196
.LBB256_196:                            # %for.inc699
                                        #   in Loop: Header=BB256_35 Depth=1
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB256_35
.LBB256_197:                            # %for.end701
	movq	input, %rax
	cmpl	$0, 2464(%rax)
	jne	.LBB256_243
# %bb.198:                              # %if.then703
	movl	$2147483647, -136(%rbp) # imm = 0x7FFFFFFF
	movl	$0, -4(%rbp)
.LBB256_199:                            # %for.cond704
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB256_202
# %bb.200:                              # %for.body707
                                        #   in Loop: Header=BB256_199 Depth=1
	movl	-116(%rbp), %edi
	movl	-4(%rbp), %edx
	movslq	-4(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-752(%rbp), %r8
	addq	%rax, %r8
	xorl	%esi, %esi
	xorl	%ecx, %ecx
	callq	getNeighbour
# %bb.201:                              # %for.inc710
                                        #   in Loop: Header=BB256_199 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB256_199
.LBB256_202:                            # %for.end712
	movl	$0, -40(%rbp)
.LBB256_203:                            # %for.cond713
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB256_219 Depth 2
                                        #       Child Loop BB256_221 Depth 3
                                        #         Child Loop BB256_223 Depth 4
                                        #           Child Loop BB256_225 Depth 5
                                        #             Child Loop BB256_227 Depth 6
	cmpl	$3, -40(%rbp)
	jg	.LBB256_242
# %bb.204:                              # %for.body716
                                        #   in Loop: Header=BB256_203 Depth=1
	movq	input, %rax
	cmpl	$1, 2420(%rax)
	jne	.LBB256_207
# %bb.205:                              # %land.lhs.true719
                                        #   in Loop: Header=BB256_203 Depth=1
	cmpl	$0, -40(%rbp)
	je	.LBB256_207
# %bb.206:                              # %if.then722
                                        #   in Loop: Header=BB256_203 Depth=1
	jmp	.LBB256_241
.LBB256_207:                            # %if.end723
                                        #   in Loop: Header=BB256_203 Depth=1
	cmpl	$2, -40(%rbp)
	jne	.LBB256_209
# %bb.208:                              # %land.lhs.true726
                                        #   in Loop: Header=BB256_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB256_217
.LBB256_209:                            # %lor.lhs.false
                                        #   in Loop: Header=BB256_203 Depth=1
	cmpl	$1, -40(%rbp)
	jne	.LBB256_212
# %bb.210:                              # %land.lhs.true730
                                        #   in Loop: Header=BB256_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB256_217
# %bb.211:                              # %lor.lhs.false733
                                        #   in Loop: Header=BB256_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB256_217
.LBB256_212:                            # %lor.lhs.false736
                                        #   in Loop: Header=BB256_203 Depth=1
	cmpl	$3, -40(%rbp)
	jne	.LBB256_218
# %bb.213:                              # %land.lhs.true739
                                        #   in Loop: Header=BB256_203 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB256_217
# %bb.214:                              # %lor.lhs.false742
                                        #   in Loop: Header=BB256_203 Depth=1
	cmpl	$0, -28(%rbp)
	je	.LBB256_217
# %bb.215:                              # %lor.lhs.false745
                                        #   in Loop: Header=BB256_203 Depth=1
	cmpl	$0, -20(%rbp)
	je	.LBB256_217
# %bb.216:                              # %lor.lhs.false747
                                        #   in Loop: Header=BB256_203 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB256_218
.LBB256_217:                            # %if.then749
                                        #   in Loop: Header=BB256_203 Depth=1
	jmp	.LBB256_241
.LBB256_218:                            # %if.end750
                                        #   in Loop: Header=BB256_203 Depth=1
	movl	$0, -100(%rbp)
	movl	$0, -24(%rbp)
.LBB256_219:                            # %for.cond751
                                        #   Parent Loop BB256_203 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB256_221 Depth 3
                                        #         Child Loop BB256_223 Depth 4
                                        #           Child Loop BB256_225 Depth 5
                                        #             Child Loop BB256_227 Depth 6
	cmpl	$2, -24(%rbp)
	jge	.LBB256_238
# %bb.220:                              # %for.body754
                                        #   in Loop: Header=BB256_219 Depth=2
	movq	imgUV_org, %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -80(%rbp)
	movl	$0, -48(%rbp)
.LBB256_221:                            # %for.cond757
                                        #   Parent Loop BB256_203 Depth=1
                                        #     Parent Loop BB256_219 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB256_223 Depth 4
                                        #           Child Loop BB256_225 Depth 5
                                        #             Child Loop BB256_227 Depth 6
	movl	-48(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB256_236
# %bb.222:                              # %for.body760
                                        #   in Loop: Header=BB256_221 Depth=3
	movl	$0, -44(%rbp)
.LBB256_223:                            # %for.cond761
                                        #   Parent Loop BB256_203 Depth=1
                                        #     Parent Loop BB256_219 Depth=2
                                        #       Parent Loop BB256_221 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB256_225 Depth 5
                                        #             Child Loop BB256_227 Depth 6
	movl	-44(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB256_234
# %bb.224:                              # %for.body764
                                        #   in Loop: Header=BB256_223 Depth=4
	movl	$0, -112(%rbp)
	movl	-48(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB256_225:                            # %for.cond765
                                        #   Parent Loop BB256_203 Depth=1
                                        #     Parent Loop BB256_219 Depth=2
                                        #       Parent Loop BB256_221 Depth=3
                                        #         Parent Loop BB256_223 Depth=4
                                        # =>        This Loop Header: Depth=5
                                        #             Child Loop BB256_227 Depth 6
	movl	-8(%rbp), %eax
	movl	-48(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_232
# %bb.226:                              # %for.body769
                                        #   in Loop: Header=BB256_225 Depth=5
	movl	-44(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB256_227:                            # %for.cond770
                                        #   Parent Loop BB256_203 Depth=1
                                        #     Parent Loop BB256_219 Depth=2
                                        #       Parent Loop BB256_221 Depth=3
                                        #         Parent Loop BB256_223 Depth=4
                                        #           Parent Loop BB256_225 Depth=5
                                        # =>          This Inner Loop Header: Depth=6
	movl	-4(%rbp), %eax
	movl	-44(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB256_230
# %bb.228:                              # %for.body774
                                        #   in Loop: Header=BB256_227 Depth=6
	movq	-80(%rbp), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-752(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	20(%rsi), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rdx
	movl	16(%rdx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$8504, %rcx             # imm = 0x2138
	movslq	-24(%rbp), %rdx
	shlq	$11, %rdx
	addq	%rdx, %rcx
	movslq	-40(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-112(%rbp), %rcx
	movl	%eax, -816(%rbp,%rcx,4)
# %bb.229:                              # %for.inc800
                                        #   in Loop: Header=BB256_227 Depth=6
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-112(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -112(%rbp)
	jmp	.LBB256_227
.LBB256_230:                            # %for.end803
                                        #   in Loop: Header=BB256_225 Depth=5
	jmp	.LBB256_231
.LBB256_231:                            # %for.inc804
                                        #   in Loop: Header=BB256_225 Depth=5
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB256_225
.LBB256_232:                            # %for.end806
                                        #   in Loop: Header=BB256_223 Depth=4
	leaq	-816(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-100(%rbp), %eax
	movl	%eax, -100(%rbp)
# %bb.233:                              # %for.inc808
                                        #   in Loop: Header=BB256_223 Depth=4
	movl	-44(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB256_223
.LBB256_234:                            # %for.end810
                                        #   in Loop: Header=BB256_221 Depth=3
	jmp	.LBB256_235
.LBB256_235:                            # %for.inc811
                                        #   in Loop: Header=BB256_221 Depth=3
	movl	-48(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB256_221
.LBB256_236:                            # %for.end813
                                        #   in Loop: Header=BB256_219 Depth=2
	jmp	.LBB256_237
.LBB256_237:                            # %for.inc814
                                        #   in Loop: Header=BB256_219 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB256_219
.LBB256_238:                            # %for.end816
                                        #   in Loop: Header=BB256_203 Depth=1
	movl	-100(%rbp), %eax
	cmpl	-136(%rbp), %eax
	jge	.LBB256_240
# %bb.239:                              # %if.then819
                                        #   in Loop: Header=BB256_203 Depth=1
	movl	-40(%rbp), %eax
	movl	%eax, -132(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -136(%rbp)
.LBB256_240:                            # %if.end820
                                        #   in Loop: Header=BB256_203 Depth=1
	jmp	.LBB256_241
.LBB256_241:                            # %for.inc821
                                        #   in Loop: Header=BB256_203 Depth=1
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB256_203
.LBB256_242:                            # %for.end823
	movl	-132(%rbp), %eax
	movq	-200(%rbp), %rcx
	movl	%eax, 524(%rcx)
.LBB256_243:                            # %if.end824
	cmpl	$1903106899, -164(%rbp) # imm = 0x716F1B53
	jne	.LBB256_245
.LBB256_244:
	addq	$1008, %rsp             # imm = 0x3F0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB256_245:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB256_244
.Lfunc_end256:
	.size	IntraChromaPrediction.215, .Lfunc_end256-IntraChromaPrediction.215
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI256_0:
	.quad	.LBB256_42
	.quad	.LBB256_64
	.quad	.LBB256_83
	.quad	.LBB256_102
                                        # -- End function
	.text
	.globl	slice_too_big.216       # -- Begin function slice_too_big.216
	.p2align	4, 0x90
	.type	slice_too_big.216,@function
slice_too_big.216:                      # @slice_too_big.216
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1301873608, -52(%rbp)  # imm = 0x4D9903C8
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB257_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB257_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB257_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB257_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB257_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB257_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB257_5:                              # %if.end
                                        #   in Loop: Header=BB257_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB257_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB257_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB257_7:                              # %if.end8
                                        #   in Loop: Header=BB257_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB257_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB257_21
.LBB257_9:                              # %if.end11
                                        #   in Loop: Header=BB257_2 Depth=1
	jmp	.LBB257_10
.LBB257_10:                             # %for.inc
                                        #   in Loop: Header=BB257_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB257_2
.LBB257_11:                             # %for.end
	jmp	.LBB257_12
.LBB257_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB257_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB257_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB257_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB257_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB257_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB257_21
.LBB257_17:                             # %if.end27
                                        #   in Loop: Header=BB257_14 Depth=1
	jmp	.LBB257_18
.LBB257_18:                             # %for.inc28
                                        #   in Loop: Header=BB257_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB257_14
.LBB257_19:                             # %for.end30
	jmp	.LBB257_20
.LBB257_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB257_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1301873608, -52(%rbp)  # imm = 0x4D9903C8
	jne	.LBB257_23
.LBB257_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB257_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB257_22
.Lfunc_end257:
	.size	slice_too_big.216, .Lfunc_end257-slice_too_big.216
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.217 # -- Begin function writeReferenceFrame.217
	.p2align	4, 0x90
	.type	writeReferenceFrame.217,@function
writeReferenceFrame.217:                # @writeReferenceFrame.217
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$605518176, -72(%rbp)   # imm = 0x24177960
	movl	%edi, -76(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -68(%rbp)
	movl	%ecx, -48(%rbp)
	movl	%r8d, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB258_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB258_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB258_4
.LBB258_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB258_4
.LBB258_4:                              # %cond.end
	movl	%ecx, -52(%rbp)
	cmpl	$0, -48(%rbp)
	je	.LBB258_6
# %bb.5:                                # %cond.true10
	movl	-52(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB258_7
.LBB258_6:                              # %cond.false13
	movl	-52(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB258_7:                              # %cond.end17
	movl	%eax, -44(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$1, -44(%rbp)
	jne	.LBB258_9
# %bb.8:                                # %if.then
	movl	$0, -40(%rbp)
	jmp	.LBB258_18
.LBB258_9:                              # %if.end
	cmpl	$2, -44(%rbp)
	jne	.LBB258_11
# %bb.10:                               # %if.then20
	movl	$1, -36(%rbp)
.LBB258_11:                             # %if.end21
	movl	-84(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB258_16
# %bb.12:                               # %if.then28
	cmpl	$0, -36(%rbp)
	je	.LBB258_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB258_15
.LBB258_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB258_15:                             # %if.end33
	jmp	.LBB258_17
.LBB258_16:                             # %if.else34
	movl	-76(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB258_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -40(%rbp)
.LBB258_18:                             # %return
	movl	-40(%rbp), %ebx
	cmpl	$605518176, -72(%rbp)   # imm = 0x24177960
	jne	.LBB258_20
.LBB258_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB258_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB258_19
.Lfunc_end258:
	.size	writeReferenceFrame.217, .Lfunc_end258-writeReferenceFrame.217
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.218 # -- Begin function writeLumaCoeff4x4_CABAC.218
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.218,@function
writeLumaCoeff4x4_CABAC.218:            # @writeLumaCoeff4x4_CABAC.218
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1257609354, -52(%rbp)  # imm = 0x4AF5988A
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -80(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -104(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB259_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB259_3
.LBB259_2:                              # %cond.false
	movl	-16(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB259_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB259_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB259_6
.LBB259_5:                              # %cond.false26
	movl	-16(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB259_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB259_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -12(%rbp)
	jg	.LBB259_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB259_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB259_9:                              # %land.end
                                        #   in Loop: Header=BB259_7 Depth=1
	testb	$1, %al
	jne	.LBB259_10
	jmp	.LBB259_15
.LBB259_10:                             # %for.body
                                        #   in Loop: Header=BB259_7 Depth=1
	movq	-96(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB259_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB259_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB259_13
.LBB259_12:                             # %cond.false40
                                        #   in Loop: Header=BB259_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB259_13:                             # %cond.end43
                                        #   in Loop: Header=BB259_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-88(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB259_7 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB259_7
.LBB259_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1257609354, -52(%rbp)  # imm = 0x4AF5988A
	jne	.LBB259_17
.LBB259_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB259_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB259_16
.Lfunc_end259:
	.size	writeLumaCoeff4x4_CABAC.218, .Lfunc_end259-writeLumaCoeff4x4_CABAC.218
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.219             # -- Begin function ZeroRef.219
	.p2align	4, 0x90
	.type	ZeroRef.219,@function
ZeroRef.219:                            # @ZeroRef.219
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1006279210, -24(%rbp)  # imm = 0x3BFA9A2A
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB260_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB260_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB260_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB260_1 Depth=1
	movl	$0, -12(%rbp)
.LBB260_3:                              # %for.cond1
                                        #   Parent Loop BB260_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB260_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB260_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB260_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB260_11
.LBB260_6:                              # %if.end
                                        #   in Loop: Header=BB260_3 Depth=2
	jmp	.LBB260_7
.LBB260_7:                              # %for.inc
                                        #   in Loop: Header=BB260_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB260_3
.LBB260_8:                              # %for.end
                                        #   in Loop: Header=BB260_1 Depth=1
	jmp	.LBB260_9
.LBB260_9:                              # %for.inc10
                                        #   in Loop: Header=BB260_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB260_1
.LBB260_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB260_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1006279210, -24(%rbp)  # imm = 0x3BFA9A2A
	jne	.LBB260_13
.LBB260_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB260_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB260_12
.Lfunc_end260:
	.size	ZeroRef.219, .Lfunc_end260-ZeroRef.219
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.220 # -- Begin function ChromaResidualCoding.220
	.p2align	4, 0x90
	.type	ChromaResidualCoding.220,@function
ChromaResidualCoding.220:               # @ChromaResidualCoding.220
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$92350156, -72(%rbp)    # imm = 0x58126CC
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB261_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB261_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB261_3:                              # %lor.end
.LBB261_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB261_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB261_7 Depth 2
                                        #       Child Loop BB261_9 Depth 3
                                        #     Child Loop BB261_16 Depth 2
                                        #       Child Loop BB261_18 Depth 3
                                        #     Child Loop BB261_33 Depth 2
                                        #       Child Loop BB261_35 Depth 3
                                        #     Child Loop BB261_43 Depth 2
                                        #       Child Loop BB261_45 Depth 3
                                        #     Child Loop BB261_58 Depth 2
                                        #       Child Loop BB261_60 Depth 3
                                        #     Child Loop BB261_87 Depth 2
                                        #       Child Loop BB261_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB261_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB261_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -20(%rbp)
.LBB261_7:                              # %for.cond5
                                        #   Parent Loop BB261_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB261_9 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB261_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB261_7 Depth=2
	movl	$0, -24(%rbp)
.LBB261_9:                              # %for.cond8
                                        #   Parent Loop BB261_5 Depth=1
                                        #     Parent Loop BB261_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB261_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB261_9 Depth=3
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-68(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-24(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-50(%rbp), %ecx
	movl	-68(%rbp), %r8d
	movl	-80(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-52(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB261_9 Depth=3
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB261_9
.LBB261_12:                             # %for.end
                                        #   in Loop: Header=BB261_7 Depth=2
	jmp	.LBB261_13
.LBB261_13:                             # %for.inc18
                                        #   in Loop: Header=BB261_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB261_7
.LBB261_14:                             # %for.end20
                                        #   in Loop: Header=BB261_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB261_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB261_5 Depth=1
	movl	$0, -8(%rbp)
.LBB261_16:                             # %for.cond21
                                        #   Parent Loop BB261_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB261_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB261_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB261_16 Depth=2
	movl	$0, -4(%rbp)
.LBB261_18:                             # %for.cond26
                                        #   Parent Loop BB261_5 Depth=1
                                        #     Parent Loop BB261_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB261_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB261_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB261_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB261_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB261_25
.LBB261_21:                             # %if.else
                                        #   in Loop: Header=BB261_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB261_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB261_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB261_24
.LBB261_23:                             # %if.else52
                                        #   in Loop: Header=BB261_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB261_24:                             # %if.end
                                        #   in Loop: Header=BB261_18 Depth=3
	jmp	.LBB261_25
.LBB261_25:                             # %if.end57
                                        #   in Loop: Header=BB261_18 Depth=3
	jmp	.LBB261_26
.LBB261_26:                             # %for.inc58
                                        #   in Loop: Header=BB261_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_18
.LBB261_27:                             # %for.end59
                                        #   in Loop: Header=BB261_16 Depth=2
	jmp	.LBB261_28
.LBB261_28:                             # %for.inc60
                                        #   in Loop: Header=BB261_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB261_16
.LBB261_29:                             # %for.end62
                                        #   in Loop: Header=BB261_5 Depth=1
	jmp	.LBB261_74
.LBB261_30:                             # %if.else63
                                        #   in Loop: Header=BB261_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB261_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB261_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB261_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB261_5 Depth=1
	movl	$0, -8(%rbp)
.LBB261_33:                             # %for.cond69
                                        #   Parent Loop BB261_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB261_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB261_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB261_33 Depth=2
	movl	$0, -4(%rbp)
.LBB261_35:                             # %for.cond73
                                        #   Parent Loop BB261_5 Depth=1
                                        #     Parent Loop BB261_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB261_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB261_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB261_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_35
.LBB261_38:                             # %for.end83
                                        #   in Loop: Header=BB261_33 Depth=2
	jmp	.LBB261_39
.LBB261_39:                             # %for.inc84
                                        #   in Loop: Header=BB261_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB261_33
.LBB261_40:                             # %for.end86
                                        #   in Loop: Header=BB261_5 Depth=1
	jmp	.LBB261_73
.LBB261_41:                             # %if.else87
                                        #   in Loop: Header=BB261_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB261_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB261_5 Depth=1
	movl	$0, -8(%rbp)
.LBB261_43:                             # %for.cond90
                                        #   Parent Loop BB261_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB261_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB261_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB261_43 Depth=2
	movl	$0, -4(%rbp)
.LBB261_45:                             # %for.cond95
                                        #   Parent Loop BB261_5 Depth=1
                                        #     Parent Loop BB261_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB261_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB261_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB261_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB261_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB261_52
.LBB261_48:                             # %if.else119
                                        #   in Loop: Header=BB261_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB261_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB261_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB261_51
.LBB261_50:                             # %if.else127
                                        #   in Loop: Header=BB261_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB261_51:                             # %if.end132
                                        #   in Loop: Header=BB261_45 Depth=3
	jmp	.LBB261_52
.LBB261_52:                             # %if.end133
                                        #   in Loop: Header=BB261_45 Depth=3
	jmp	.LBB261_53
.LBB261_53:                             # %for.inc134
                                        #   in Loop: Header=BB261_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_45
.LBB261_54:                             # %for.end136
                                        #   in Loop: Header=BB261_43 Depth=2
	jmp	.LBB261_55
.LBB261_55:                             # %for.inc137
                                        #   in Loop: Header=BB261_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB261_43
.LBB261_56:                             # %for.end139
                                        #   in Loop: Header=BB261_5 Depth=1
	jmp	.LBB261_72
.LBB261_57:                             # %if.else140
                                        #   in Loop: Header=BB261_5 Depth=1
	movl	$0, -8(%rbp)
.LBB261_58:                             # %for.cond141
                                        #   Parent Loop BB261_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB261_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB261_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB261_58 Depth=2
	movl	$0, -4(%rbp)
.LBB261_60:                             # %for.cond146
                                        #   Parent Loop BB261_5 Depth=1
                                        #     Parent Loop BB261_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB261_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB261_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB261_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB261_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB261_67
.LBB261_63:                             # %if.else175
                                        #   in Loop: Header=BB261_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB261_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB261_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB261_66
.LBB261_65:                             # %if.else188
                                        #   in Loop: Header=BB261_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB261_66:                             # %if.end198
                                        #   in Loop: Header=BB261_60 Depth=3
	jmp	.LBB261_67
.LBB261_67:                             # %if.end199
                                        #   in Loop: Header=BB261_60 Depth=3
	jmp	.LBB261_68
.LBB261_68:                             # %for.inc200
                                        #   in Loop: Header=BB261_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_60
.LBB261_69:                             # %for.end202
                                        #   in Loop: Header=BB261_58 Depth=2
	jmp	.LBB261_70
.LBB261_70:                             # %for.inc203
                                        #   in Loop: Header=BB261_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB261_58
.LBB261_71:                             # %for.end205
                                        #   in Loop: Header=BB261_5 Depth=1
	jmp	.LBB261_72
.LBB261_72:                             # %if.end206
                                        #   in Loop: Header=BB261_5 Depth=1
	jmp	.LBB261_73
.LBB261_73:                             # %if.end207
                                        #   in Loop: Header=BB261_5 Depth=1
	jmp	.LBB261_74
.LBB261_74:                             # %if.end208
                                        #   in Loop: Header=BB261_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB261_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB261_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB261_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB261_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB261_100
.LBB261_77:                             # %if.else215
                                        #   in Loop: Header=BB261_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB261_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB261_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB261_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB261_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB261_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB261_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB261_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB261_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB261_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB261_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB261_84
.LBB261_83:                             # %if.then247
                                        #   in Loop: Header=BB261_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB261_85
.LBB261_84:                             # %if.else249
                                        #   in Loop: Header=BB261_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB261_85:                             # %if.end251
                                        #   in Loop: Header=BB261_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB261_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB261_5 Depth=1
	movl	$0, -8(%rbp)
.LBB261_87:                             # %for.cond255
                                        #   Parent Loop BB261_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB261_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB261_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB261_87 Depth=2
	movl	$0, -4(%rbp)
.LBB261_89:                             # %for.cond260
                                        #   Parent Loop BB261_5 Depth=1
                                        #     Parent Loop BB261_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB261_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB261_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB261_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB261_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB261_93
.LBB261_92:                             # %if.else277
                                        #   in Loop: Header=BB261_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB261_93:                             # %if.end287
                                        #   in Loop: Header=BB261_89 Depth=3
	jmp	.LBB261_94
.LBB261_94:                             # %for.inc288
                                        #   in Loop: Header=BB261_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_89
.LBB261_95:                             # %for.end290
                                        #   in Loop: Header=BB261_87 Depth=2
	jmp	.LBB261_96
.LBB261_96:                             # %for.inc291
                                        #   in Loop: Header=BB261_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB261_87
.LBB261_97:                             # %for.end293
                                        #   in Loop: Header=BB261_5 Depth=1
	jmp	.LBB261_98
.LBB261_98:                             # %if.end294
                                        #   in Loop: Header=BB261_5 Depth=1
	jmp	.LBB261_99
.LBB261_99:                             # %if.end295
                                        #   in Loop: Header=BB261_5 Depth=1
	jmp	.LBB261_100
.LBB261_100:                            # %if.end296
                                        #   in Loop: Header=BB261_5 Depth=1
	jmp	.LBB261_101
.LBB261_101:                            # %for.inc297
                                        #   in Loop: Header=BB261_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB261_5
.LBB261_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB261_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB261_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB261_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB261_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB261_104 Depth=1
	movl	$0, -4(%rbp)
.LBB261_106:                            # %for.cond312
                                        #   Parent Loop BB261_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB261_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB261_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB261_110
.LBB261_109:                            # %cond.false
                                        #   in Loop: Header=BB261_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB261_110:                            # %cond.end
                                        #   in Loop: Header=BB261_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB261_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB261_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB261_116
.LBB261_112:                            # %cond.false358
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB261_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB261_115
.LBB261_114:                            # %cond.false367
                                        #   in Loop: Header=BB261_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB261_115:                            # %cond.end373
                                        #   in Loop: Header=BB261_106 Depth=2
.LBB261_116:                            # %cond.end375
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB261_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB261_119
.LBB261_118:                            # %cond.false394
                                        #   in Loop: Header=BB261_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB261_119:                            # %cond.end400
                                        #   in Loop: Header=BB261_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB261_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB261_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB261_125
.LBB261_121:                            # %cond.false406
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB261_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB261_124
.LBB261_123:                            # %cond.false415
                                        #   in Loop: Header=BB261_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB261_124:                            # %cond.end421
                                        #   in Loop: Header=BB261_106 Depth=2
.LBB261_125:                            # %cond.end423
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB261_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB261_128
.LBB261_127:                            # %cond.false443
                                        #   in Loop: Header=BB261_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB261_128:                            # %cond.end449
                                        #   in Loop: Header=BB261_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB261_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB261_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB261_134
.LBB261_130:                            # %cond.false455
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB261_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB261_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB261_133
.LBB261_132:                            # %cond.false464
                                        #   in Loop: Header=BB261_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB261_133:                            # %cond.end470
                                        #   in Loop: Header=BB261_106 Depth=2
.LBB261_134:                            # %cond.end472
                                        #   in Loop: Header=BB261_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB261_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB261_106
.LBB261_136:                            # %for.end487
                                        #   in Loop: Header=BB261_104 Depth=1
	jmp	.LBB261_137
.LBB261_137:                            # %for.inc488
                                        #   in Loop: Header=BB261_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB261_104
.LBB261_138:                            # %for.end490
	jmp	.LBB261_139
.LBB261_139:                            # %if.end491
	cmpl	$92350156, -72(%rbp)    # imm = 0x58126CC
	jne	.LBB261_141
.LBB261_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB261_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB261_140
.Lfunc_end261:
	.size	ChromaResidualCoding.220, .Lfunc_end261-ChromaResidualCoding.220
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.221  # -- Begin function predict_nnz_chroma.221
	.p2align	4, 0x90
	.type	predict_nnz_chroma.221,@function
predict_nnz_chroma.221:                 # @predict_nnz_chroma.221
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$1101281378, -64(%rbp)  # imm = 0x41A43862
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -56(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB262_14
# %bb.1:                                # %if.then
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB262_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB262_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB262_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB262_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB262_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB262_7:                              # %if.end19
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB262_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB262_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB262_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB262_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB262_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB262_13:                             # %if.end57
	jmp	.LBB262_27
.LBB262_14:                             # %if.else
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB262_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB262_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB262_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB262_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB262_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB262_20:                             # %if.end90
	movl	-56(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-60(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB262_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB262_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB262_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB262_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB262_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-60(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB262_26:                             # %if.end124
	jmp	.LBB262_27
.LBB262_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB262_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB262_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$1101281378, -64(%rbp)  # imm = 0x41A43862
	jne	.LBB262_31
.LBB262_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB262_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB262_30
.Lfunc_end262:
	.size	predict_nnz_chroma.221, .Lfunc_end262-predict_nnz_chroma.221
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.222   # -- Begin function LumaPrediction4x4.222
	.p2align	4, 0x90
	.type	LumaPrediction4x4.222,@function
LumaPrediction4x4.222:                  # @LumaPrediction4x4.222
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1782912604, -104(%rbp) # imm = 0x6A45165C
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -60(%rbp)
	movl	%r8d, -68(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB263_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB263_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB263_6
.LBB263_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB263_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB263_5:                              # %land.end
.LBB263_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB263_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB263_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB263_10
.LBB263_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB263_10
.LBB263_10:                             # %cond.end
	movl	%ecx, -72(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB263_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB263_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB263_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB263_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -60(%rbp)
	jne	.LBB263_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -68(%rbp)
	jne	.LBB263_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB263_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB263_19
.LBB263_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB263_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB263_20:                             # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB263_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB263_23
.LBB263_22:                             # %if.then45
	movl	-52(%rbp), %esi
	movl	-76(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB263_23:                             # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB263_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB263_26
.LBB263_25:                             # %if.then64
	movl	-52(%rbp), %esi
	movl	-76(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB263_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB263_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB263_37
# %bb.28:                               # %if.then82
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB263_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB263_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB263_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB263_31:                             # %for.cond85
                                        #   Parent Loop BB263_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB263_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB263_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB263_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB263_31
.LBB263_34:                             # %for.end
                                        #   in Loop: Header=BB263_29 Depth=1
	jmp	.LBB263_35
.LBB263_35:                             # %for.inc125
                                        #   in Loop: Header=BB263_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_29
.LBB263_36:                             # %for.end127
	jmp	.LBB263_57
.LBB263_37:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB263_47
# %bb.38:                               # %if.then130
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB263_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB263_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB263_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB263_41:                             # %for.cond135
                                        #   Parent Loop BB263_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB263_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB263_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB263_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB263_41
.LBB263_44:                             # %for.end161
                                        #   in Loop: Header=BB263_39 Depth=1
	jmp	.LBB263_45
.LBB263_45:                             # %for.inc162
                                        #   in Loop: Header=BB263_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_39
.LBB263_46:                             # %for.end164
	jmp	.LBB263_56
.LBB263_47:                             # %if.else165
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB263_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB263_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB263_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB263_50:                             # %for.cond170
                                        #   Parent Loop BB263_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB263_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB263_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB263_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB263_50
.LBB263_53:                             # %for.end196
                                        #   in Loop: Header=BB263_48 Depth=1
	jmp	.LBB263_54
.LBB263_54:                             # %for.inc197
                                        #   in Loop: Header=BB263_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_48
.LBB263_55:                             # %for.end199
	jmp	.LBB263_56
.LBB263_56:                             # %if.end200
	jmp	.LBB263_57
.LBB263_57:                             # %if.end201
	jmp	.LBB263_89
.LBB263_58:                             # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB263_68
# %bb.59:                               # %if.then205
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB263_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB263_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB263_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB263_62:                             # %for.cond210
                                        #   Parent Loop BB263_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB263_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB263_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB263_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB263_62
.LBB263_65:                             # %for.end226
                                        #   in Loop: Header=BB263_60 Depth=1
	jmp	.LBB263_66
.LBB263_66:                             # %for.inc227
                                        #   in Loop: Header=BB263_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_60
.LBB263_67:                             # %for.end229
	jmp	.LBB263_88
.LBB263_68:                             # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB263_78
# %bb.69:                               # %if.then233
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB263_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB263_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB263_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB263_72:                             # %for.cond238
                                        #   Parent Loop BB263_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB263_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB263_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB263_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB263_72
.LBB263_75:                             # %for.end251
                                        #   in Loop: Header=BB263_70 Depth=1
	jmp	.LBB263_76
.LBB263_76:                             # %for.inc252
                                        #   in Loop: Header=BB263_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_70
.LBB263_77:                             # %for.end254
	jmp	.LBB263_87
.LBB263_78:                             # %if.else255
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB263_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB263_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB263_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB263_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB263_81:                             # %for.cond260
                                        #   Parent Loop BB263_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB263_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB263_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB263_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB263_81
.LBB263_84:                             # %for.end273
                                        #   in Loop: Header=BB263_79 Depth=1
	jmp	.LBB263_85
.LBB263_85:                             # %for.inc274
                                        #   in Loop: Header=BB263_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB263_79
.LBB263_86:                             # %for.end276
	jmp	.LBB263_87
.LBB263_87:                             # %if.end277
	jmp	.LBB263_88
.LBB263_88:                             # %if.end278
	jmp	.LBB263_89
.LBB263_89:                             # %if.end279
	cmpl	$1782912604, -104(%rbp) # imm = 0x6A45165C
	jne	.LBB263_91
.LBB263_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB263_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB263_90
.Lfunc_end263:
	.size	LumaPrediction4x4.222, .Lfunc_end263-LumaPrediction4x4.222
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.223  # -- Begin function writeIntra4x4Modes.223
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.223,@function
writeIntra4x4Modes.223:                 # @writeIntra4x4Modes.223
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1786541298, -68(%rbp)  # imm = 0x6A7C74F2
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB264_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB264_9 Depth 2
                                        #       Child Loop BB264_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB264_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB264_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB264_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB264_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB264_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB264_8
.LBB264_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB264_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB264_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB264_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB264_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB264_17
.LBB264_8:                              # %if.then
                                        #   in Loop: Header=BB264_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	%ecx, -76(%rbp)
	movl	-76(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -80(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -32(%rbp)
.LBB264_9:                              # %for.cond24
                                        #   Parent Loop BB264_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB264_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB264_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB264_9 Depth=2
	movl	$0, -12(%rbp)
.LBB264_11:                             # %for.cond27
                                        #   Parent Loop BB264_1 Depth=1
                                        #     Parent Loop BB264_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB264_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB264_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB264_11 Depth=3
	movl	-80(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB264_11
.LBB264_14:                             # %for.end
                                        #   in Loop: Header=BB264_9 Depth=2
	jmp	.LBB264_15
.LBB264_15:                             # %for.inc42
                                        #   in Loop: Header=BB264_9 Depth=2
	movl	-72(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB264_9
.LBB264_16:                             # %for.end44
                                        #   in Loop: Header=BB264_1 Depth=1
	jmp	.LBB264_17
.LBB264_17:                             # %if.end
                                        #   in Loop: Header=BB264_1 Depth=1
	jmp	.LBB264_18
.LBB264_18:                             # %for.inc45
                                        #   in Loop: Header=BB264_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB264_1
.LBB264_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB264_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB264_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB264_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB264_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB264_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB264_23:                             # %if.end57
                                        #   in Loop: Header=BB264_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB264_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB264_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB264_26
.LBB264_25:                             # %if.else
                                        #   in Loop: Header=BB264_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB264_26:                             # %if.end65
                                        #   in Loop: Header=BB264_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB264_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB264_20
.LBB264_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1786541298, -68(%rbp)  # imm = 0x6A7C74F2
	jne	.LBB264_30
.LBB264_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB264_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB264_29
.Lfunc_end264:
	.size	writeIntra4x4Modes.223, .Lfunc_end264-writeIntra4x4Modes.223
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentLumaPrediction4x4.224 # -- Begin function OneComponentLumaPrediction4x4.224
	.p2align	4, 0x90
	.type	OneComponentLumaPrediction4x4.224,@function
OneComponentLumaPrediction4x4.224:      # @OneComponentLumaPrediction4x4.224
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$545450305, -92(%rbp)   # imm = 0x2082E941
	movq	%rdi, -16(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -104(%rbp)
	movw	%r8w, -34(%rbp)
	movq	%r9, -80(%rbp)
	movl	$4, -40(%rbp)
	movl	-88(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-84(%rbp), %eax
	shll	$2, %eax
	movq	-104(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -48(%rbp)
	movl	-48(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movabsq	$UMVPelY_14, %rax
	movq	%rax, -32(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6392(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6396(%rax), %eax
	movl	%eax, -4(%rbp)
	movq	-80(%rbp), %rax
	movswq	-34(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6448(%rax), %rax
	movq	%rax, -24(%rbp)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-44(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-60(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-52(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-48(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movq	-24(%rbp), %rdi
	movl	-68(%rbp), %esi
	movl	-72(%rbp), %edx
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	*%rax
	movzwl	%ax, %eax
	movq	-16(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -16(%rbp)
	movl	%eax, (%rcx)
	cmpl	$545450305, -92(%rbp)   # imm = 0x2082E941
	jne	.LBB265_2
.LBB265_1:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB265_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB265_1
.Lfunc_end265:
	.size	OneComponentLumaPrediction4x4.224, .Lfunc_end265-OneComponentLumaPrediction4x4.224
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.225    # -- Begin function writeChromaCoeff.225
	.p2align	4, 0x90
	.type	writeChromaCoeff.225,@function
writeChromaCoeff.225:                   # @writeChromaCoeff.225
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$938600191, -80(%rbp)   # imm = 0x37F1E6FF
	movl	$0, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB266_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB266_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB266_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB266_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB266_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB266_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB266_21
.LBB266_5:                              # %if.else
                                        #   in Loop: Header=BB266_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB266_6:                              # %for.cond18
                                        #   Parent Loop BB266_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB266_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB266_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB266_8:                              # %land.end
                                        #   in Loop: Header=BB266_6 Depth=2
	testb	$1, %al
	jne	.LBB266_9
	jmp	.LBB266_20
.LBB266_9:                              # %for.body21
                                        #   in Loop: Header=BB266_6 Depth=2
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB266_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB266_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB266_12
.LBB266_11:                             # %if.else29
                                        #   in Loop: Header=BB266_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB266_12:                             # %if.end
                                        #   in Loop: Header=BB266_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB266_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB266_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB266_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB266_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB266_15:                             # %lor.end
                                        #   in Loop: Header=BB266_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB266_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB266_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB266_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB266_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB266_18:                             # %lor.end45
                                        #   in Loop: Header=BB266_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB266_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB266_6
.LBB266_20:                             # %for.end
                                        #   in Loop: Header=BB266_2 Depth=1
	jmp	.LBB266_21
.LBB266_21:                             # %if.end58
                                        #   in Loop: Header=BB266_2 Depth=1
	jmp	.LBB266_22
.LBB266_22:                             # %for.inc59
                                        #   in Loop: Header=BB266_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB266_2
.LBB266_23:                             # %for.end61
	jmp	.LBB266_24
.LBB266_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB266_52
# %bb.25:                               # %if.then64
	movl	$4, -36(%rbp)
.LBB266_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB266_28 Depth 2
                                        #       Child Loop BB266_32 Depth 3
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB266_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB266_26 Depth=1
	movl	$0, -32(%rbp)
.LBB266_28:                             # %for.cond69
                                        #   Parent Loop BB266_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB266_32 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB266_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB266_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB266_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB266_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-36(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB266_47
.LBB266_31:                             # %if.else84
                                        #   in Loop: Header=BB266_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB266_32:                             # %for.cond115
                                        #   Parent Loop BB266_26 Depth=1
                                        #     Parent Loop BB266_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB266_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB266_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB266_34:                             # %land.end121
                                        #   in Loop: Header=BB266_32 Depth=3
	testb	$1, %al
	jne	.LBB266_35
	jmp	.LBB266_46
.LBB266_35:                             # %for.body122
                                        #   in Loop: Header=BB266_32 Depth=3
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB266_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB266_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB266_38
.LBB266_37:                             # %if.else134
                                        #   in Loop: Header=BB266_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB266_38:                             # %if.end136
                                        #   in Loop: Header=BB266_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB266_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB266_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB266_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB266_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB266_41:                             # %lor.end149
                                        #   in Loop: Header=BB266_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB266_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB266_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB266_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB266_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB266_44:                             # %lor.end164
                                        #   in Loop: Header=BB266_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB266_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB266_32
.LBB266_46:                             # %for.end189
                                        #   in Loop: Header=BB266_28 Depth=2
	jmp	.LBB266_47
.LBB266_47:                             # %if.end190
                                        #   in Loop: Header=BB266_28 Depth=2
	jmp	.LBB266_48
.LBB266_48:                             # %for.inc191
                                        #   in Loop: Header=BB266_28 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB266_28
.LBB266_49:                             # %for.end193
                                        #   in Loop: Header=BB266_26 Depth=1
	jmp	.LBB266_50
.LBB266_50:                             # %for.inc194
                                        #   in Loop: Header=BB266_26 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB266_26
.LBB266_51:                             # %for.end196
	jmp	.LBB266_52
.LBB266_52:                             # %if.end197
	movl	-28(%rbp), %ebx
	cmpl	$938600191, -80(%rbp)   # imm = 0x37F1E6FF
	jne	.LBB266_54
.LBB266_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB266_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB266_53
.Lfunc_end266:
	.size	writeChromaCoeff.225, .Lfunc_end266-writeChromaCoeff.225
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.226   # -- Begin function TransformDecision.226
	.p2align	4, 0x90
	.type	TransformDecision.226,@function
TransformDecision.226:                  # @TransformDecision.226
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1338667731, -80(%rbp)  # imm = 0x4FCA72D3
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB267_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -68(%rbp)
	jmp	.LBB267_3
.LBB267_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
.LBB267_3:                              # %if.end
	jmp	.LBB267_4
.LBB267_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB267_6 Depth 2
                                        #       Child Loop BB267_8 Depth 3
                                        #         Child Loop BB267_10 Depth 4
                                        #           Child Loop BB267_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB267_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB267_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-76(%rbp), %rdx
	leaq	-84(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -64(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB267_6:                              # %for.cond3
                                        #   Parent Loop BB267_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB267_8 Depth 3
                                        #         Child Loop BB267_10 Depth 4
                                        #           Child Loop BB267_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB267_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB267_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB267_8:                              # %for.cond8
                                        #   Parent Loop BB267_4 Depth=1
                                        #     Parent Loop BB267_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB267_10 Depth 4
                                        #           Child Loop BB267_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB267_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB267_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-50(%rbp), %edx
	movl	-76(%rbp), %ecx
	movl	-84(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-54(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB267_10:                             # %for.cond13
                                        #   Parent Loop BB267_4 Depth=1
                                        #     Parent Loop BB267_6 Depth=2
                                        #       Parent Loop BB267_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB267_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB267_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB267_10 Depth=4
	movl	$0, -24(%rbp)
.LBB267_12:                             # %for.cond17
                                        #   Parent Loop BB267_4 Depth=1
                                        #     Parent Loop BB267_6 Depth=2
                                        #       Parent Loop BB267_8 Depth=3
                                        #         Parent Loop BB267_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB267_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB267_12 Depth=5
	movq	imgY_org, %rax
	movl	-88(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB267_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB267_12
.LBB267_15:                             # %for.end
                                        #   in Loop: Header=BB267_10 Depth=4
	jmp	.LBB267_16
.LBB267_16:                             # %for.inc38
                                        #   in Loop: Header=BB267_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB267_10
.LBB267_17:                             # %for.end40
                                        #   in Loop: Header=BB267_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB267_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB267_8
.LBB267_19:                             # %for.end44
                                        #   in Loop: Header=BB267_6 Depth=2
	jmp	.LBB267_20
.LBB267_20:                             # %for.inc45
                                        #   in Loop: Header=BB267_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB267_6
.LBB267_21:                             # %for.end47
                                        #   in Loop: Header=BB267_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB267_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB267_4
.LBB267_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB267_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB267_28
.LBB267_25:                             # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB267_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB267_28
.LBB267_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB267_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$1338667731, -80(%rbp)  # imm = 0x4FCA72D3
	jne	.LBB267_30
.LBB267_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB267_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB267_29
.Lfunc_end267:
	.size	TransformDecision.226, .Lfunc_end267-TransformDecision.226
	.cfi_endproc
                                        # -- End function
	.globl	terminate_macroblock.227 # -- Begin function terminate_macroblock.227
	.p2align	4, 0x90
	.type	terminate_macroblock.227,@function
terminate_macroblock.227:               # @terminate_macroblock.227
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1475066793, -108(%rbp) # imm = 0x57EBBBA9
	movq	%rdi, -64(%rbp)
	movq	%rsi, -80(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-96(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -36(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB268_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB268_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -112(%rbp)
	movl	$0, -68(%rbp)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	je	.LBB268_4
# %bb.3:                                # %lor.lhs.false
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cmpl	$0, %eax
	jge	.LBB268_5
.LBB268_4:                              # %if.then
	movl	$1, -68(%rbp)
	jmp	.LBB268_8
.LBB268_5:                              # %if.else
	movq	img, %rax
	movq	14168(%rax), %rbx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	cltq
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rbx
	movl	4(%rbx), %eax
	movq	img, %rcx
	cmpl	20(%rcx), %eax
	je	.LBB268_7
# %bb.6:                                # %if.then17
	movl	$1, -68(%rbp)
.LBB268_7:                              # %if.end
	jmp	.LBB268_8
.LBB268_8:                              # %if.end18
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	input(%rip), %rax
	movl	208(%rax), %eax
	movq	%rax, %rcx
	subq	$3, %rcx
	ja	.LBB268_45
# %bb.9:                                # %if.end18
	movq	.LJTI268_0(,%rax,8), %rax
	jmpq	*%rax
.LBB268_10:                             # %sw.bb
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB268_12
# %bb.11:                               # %if.then22
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB268_12:                             # %if.end23
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB268_46
.LBB268_13:                             # %sw.bb29
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	-80(%rbp), %rax
	movl	$0, (%rax)
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	20(%rax), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	-64(%rbp), %rcx
	orl	(%rcx), %eax
	movl	%eax, (%rcx)
	jmp	.LBB268_46
.LBB268_14:                             # %sw.bb42
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB268_16
# %bb.15:                               # %if.then43
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	4(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 28(%rcx)
	movq	-16(%rbp), %rax
	movl	(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movb	8(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 21(%rcx)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movl	$1, terminate_macroblock.skip
.LBB268_16:                             # %if.end54
	cmpl	$0, -68(%rbp)
	jne	.LBB268_23
# %bb.17:                               # %if.then56
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB268_19
# %bb.18:                               # %if.then59
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	jmp	.LBB268_22
.LBB268_19:                             # %if.else60
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB268_21
# %bb.20:                               # %if.then63
	movl	$0, terminate_macroblock.skip
.LBB268_21:                             # %if.end64
	jmp	.LBB268_22
.LBB268_22:                             # %if.end65
	jmp	.LBB268_23
.LBB268_23:                             # %if.end66
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB268_28
# %bb.24:                               # %land.lhs.true
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB268_28
# %bb.25:                               # %if.then75
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB268_27
# %bb.26:                               # %if.then78
	movl	$0, terminate_macroblock.skip
.LBB268_27:                             # %if.end79
	jmp	.LBB268_28
.LBB268_28:                             # %if.end80
	cmpl	$0, -68(%rbp)
	je	.LBB268_33
# %bb.29:                               # %land.lhs.true82
	movl	-36(%rbp), %edi
	callq	slice_too_big
	cmpl	$0, %eax
	je	.LBB268_33
# %bb.30:                               # %if.then85
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB268_32
# %bb.31:                               # %if.then88
	movl	$0, terminate_macroblock.skip
.LBB268_32:                             # %if.end89
	jmp	.LBB268_33
.LBB268_33:                             # %if.end90
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB268_35
# %bb.34:                               # %if.then92
	movq	-56(%rbp), %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
.LBB268_35:                             # %if.end95
	jmp	.LBB268_46
.LBB268_36:                             # %sw.bb96
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jle	.LBB268_41
# %bb.37:                               # %land.lhs.true100
	cmpl	$0, -68(%rbp)
	jne	.LBB268_41
# %bb.38:                               # %if.then102
	movq	-56(%rbp), %rax
	movq	120(%rax), %rax
	movl	-36(%rbp), %edi
	callq	*%rax
	cmpl	$0, %eax
	je	.LBB268_40
# %bb.39:                               # %if.then105
	movq	-80(%rbp), %rax
	movl	$1, (%rax)
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB268_40:                             # %if.end106
	jmp	.LBB268_41
.LBB268_41:                             # %if.end107
	movq	-80(%rbp), %rax
	cmpl	$0, (%rax)
	jne	.LBB268_44
# %bb.42:                               # %land.lhs.true110
	movq	img, %rax
	movl	12(%rax), %ebx
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoMB2SliceGroup
	movl	%eax, %edi
	callq	FmoGetLastCodedMBOfSliceGroup
	cmpl	%eax, %ebx
	jne	.LBB268_44
# %bb.43:                               # %if.then117
	movq	-64(%rbp), %rax
	movl	$1, (%rax)
.LBB268_44:                             # %if.end118
	jmp	.LBB268_46
.LBB268_45:                             # %sw.default
	movq	input, %rax
	movl	208(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB268_46:                             # %sw.epilog
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB268_54
# %bb.47:                               # %if.then123
	movl	$0, -84(%rbp)
.LBB268_48:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-84(%rbp), %eax
	movq	-56(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB268_53
# %bb.49:                               # %for.body
                                        #   in Loop: Header=BB268_48 Depth=1
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-84(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	16(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	20(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB268_51
# %bb.50:                               # %if.then138
                                        #   in Loop: Header=BB268_48 Depth=1
	movq	-48(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	40(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	44(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	48(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movl	52(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	56(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-32(%rbp), %rax
	movq	64(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	72(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 32(%rcx)
	movq	-32(%rbp), %rax
	movl	84(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 80(%rcx)
	movq	-32(%rbp), %rax
	movl	100(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 96(%rcx)
	movq	-32(%rbp), %rax
	movl	92(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 88(%rcx)
.LBB268_51:                             # %if.end139
                                        #   in Loop: Header=BB268_48 Depth=1
	jmp	.LBB268_52
.LBB268_52:                             # %for.inc
                                        #   in Loop: Header=BB268_48 Depth=1
	movl	-84(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -84(%rbp)
	jmp	.LBB268_48
.LBB268_53:                             # %for.end
	jmp	.LBB268_54
.LBB268_54:                             # %if.end141
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB268_63
# %bb.55:                               # %land.lhs.true144
	cmpl	$1, terminate_macroblock.skip
	jne	.LBB268_63
# %bb.56:                               # %if.then147
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB268_61
# %bb.57:                               # %land.lhs.true150
	movq	-80(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB268_61
# %bb.58:                               # %if.then153
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 120(%rax)
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB268_60
# %bb.59:                               # %if.then157
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB268_60:                             # %if.end174
	jmp	.LBB268_62
.LBB268_61:                             # %if.else175
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -16(%rbp)
	movq	-16(%rbp), %rax
	movl	28(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	24(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-16(%rbp), %rax
	movb	21(%rax), %al
	movq	-16(%rbp), %rcx
	movb	%al, 8(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
	movl	$0, terminate_macroblock.skip
.LBB268_62:                             # %if.end188
	jmp	.LBB268_63
.LBB268_63:                             # %if.end189
	movq	-64(%rbp), %rax
	cmpl	$1, (%rax)
	jne	.LBB268_67
# %bb.64:                               # %land.lhs.true192
	movq	img, %rax
	cmpl	$0, 120(%rax)
	je	.LBB268_67
# %bb.65:                               # %land.lhs.true195
	cmpl	$0, -112(%rbp)
	jne	.LBB268_67
# %bb.66:                               # %if.then197
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-24(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-24(%rbp), %rax
	movl	$2, (%rax)
	movq	-56(%rbp), %rax
	movq	24(%rax), %rax
	movq	-104(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-96(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB268_67:                             # %if.end218
	cmpl	$1475066793, -108(%rbp) # imm = 0x57EBBBA9
	jne	.LBB268_69
.LBB268_68:
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB268_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB268_68
.Lfunc_end268:
	.size	terminate_macroblock.227, .Lfunc_end268-terminate_macroblock.227
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI268_0:
	.quad	.LBB268_10
	.quad	.LBB268_13
	.quad	.LBB268_14
	.quad	.LBB268_36
                                        # -- End function
	.text
	.globl	start_macroblock.228    # -- Begin function start_macroblock.228
	.p2align	4, 0x90
	.type	start_macroblock.228,@function
start_macroblock.228:                   # @start_macroblock.228
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1399858338, -88(%rbp)  # imm = 0x537024A2
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB269_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB269_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB269_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB269_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB269_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB269_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB269_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB269_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB269_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB269_8:                              # %if.end
                                        #   in Loop: Header=BB269_5 Depth=1
	jmp	.LBB269_9
.LBB269_9:                              # %for.inc
                                        #   in Loop: Header=BB269_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB269_5
.LBB269_10:                             # %for.end
	jmp	.LBB269_11
.LBB269_11:                             # %if.end19
	jmp	.LBB269_12
.LBB269_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB269_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB269_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB269_16
.LBB269_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB269_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB269_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB269_97
.LBB269_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB269_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB269_21
.LBB269_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB269_96
.LBB269_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB269_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB269_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB269_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB269_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB269_34
.LBB269_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB269_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB269_32
.LBB269_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB269_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB269_31
.LBB269_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB269_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB269_33
.LBB269_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB269_33:                             # %if.end112
	jmp	.LBB269_34
.LBB269_34:                             # %if.end113
	jmp	.LBB269_39
.LBB269_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB269_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB269_38
.LBB269_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB269_38:                             # %if.end125
	jmp	.LBB269_39
.LBB269_39:                             # %if.end126
	jmp	.LBB269_47
.LBB269_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB269_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB269_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB269_44
.LBB269_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB269_44:                             # %if.end140
	jmp	.LBB269_46
.LBB269_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB269_46:                             # %if.end145
	jmp	.LBB269_47
.LBB269_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB269_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB269_93
.LBB269_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB269_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB269_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB269_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB269_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB269_74
.LBB269_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB269_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB269_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB269_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB269_73
.LBB269_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB269_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB269_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB269_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB269_72
.LBB269_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB269_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB269_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB269_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB269_71
.LBB269_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB269_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB269_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB269_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB269_70:                             # %if.end223
	jmp	.LBB269_71
.LBB269_71:                             # %if.end224
	jmp	.LBB269_72
.LBB269_72:                             # %if.end225
	jmp	.LBB269_73
.LBB269_73:                             # %if.end226
	jmp	.LBB269_74
.LBB269_74:                             # %if.end227
	jmp	.LBB269_75
.LBB269_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB269_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB269_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB269_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB269_82
.LBB269_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB269_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB269_81:                             # %if.end256
	jmp	.LBB269_82
.LBB269_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB269_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB269_88
.LBB269_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB269_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB269_87
.LBB269_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB269_87:                             # %if.end292
	jmp	.LBB269_88
.LBB269_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB269_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB269_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB269_92
.LBB269_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB269_92:                             # %if.end305
	jmp	.LBB269_94
.LBB269_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB269_94:                             # %if.end309
	jmp	.LBB269_95
.LBB269_95:                             # %if.end310
	jmp	.LBB269_96
.LBB269_96:                             # %if.end311
	jmp	.LBB269_97
.LBB269_97:                             # %if.end312
	jmp	.LBB269_102
.LBB269_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB269_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB269_101
.LBB269_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB269_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB269_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB269_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB269_105
.LBB269_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB269_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB269_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB269_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB269_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_110 Depth 2
                                        #       Child Loop BB269_112 Depth 3
                                        #         Child Loop BB269_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB269_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB269_108 Depth=1
	movl	$0, -16(%rbp)
.LBB269_110:                            # %for.cond364
                                        #   Parent Loop BB269_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB269_112 Depth 3
                                        #         Child Loop BB269_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB269_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB269_110 Depth=2
	movl	$0, -12(%rbp)
.LBB269_112:                            # %for.cond368
                                        #   Parent Loop BB269_108 Depth=1
                                        #     Parent Loop BB269_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB269_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB269_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB269_112 Depth=3
	movl	$0, -36(%rbp)
.LBB269_114:                            # %for.cond372
                                        #   Parent Loop BB269_108 Depth=1
                                        #     Parent Loop BB269_110 Depth=2
                                        #       Parent Loop BB269_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB269_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB269_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB269_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB269_114
.LBB269_117:                            # %for.end388
                                        #   in Loop: Header=BB269_112 Depth=3
	jmp	.LBB269_118
.LBB269_118:                            # %for.inc389
                                        #   in Loop: Header=BB269_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB269_112
.LBB269_119:                            # %for.end391
                                        #   in Loop: Header=BB269_110 Depth=2
	jmp	.LBB269_120
.LBB269_120:                            # %for.inc392
                                        #   in Loop: Header=BB269_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB269_110
.LBB269_121:                            # %for.end394
                                        #   in Loop: Header=BB269_108 Depth=1
	jmp	.LBB269_122
.LBB269_122:                            # %for.inc395
                                        #   in Loop: Header=BB269_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB269_108
.LBB269_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB269_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_126 Depth 2
                                        #       Child Loop BB269_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB269_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB269_124 Depth=1
	movl	$0, -12(%rbp)
.LBB269_126:                            # %for.cond402
                                        #   Parent Loop BB269_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB269_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB269_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB269_126 Depth=2
	movl	$0, -20(%rbp)
.LBB269_128:                            # %for.cond406
                                        #   Parent Loop BB269_124 Depth=1
                                        #     Parent Loop BB269_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB269_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB269_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB269_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB269_128
.LBB269_131:                            # %for.end432
                                        #   in Loop: Header=BB269_126 Depth=2
	jmp	.LBB269_132
.LBB269_132:                            # %for.inc433
                                        #   in Loop: Header=BB269_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB269_126
.LBB269_133:                            # %for.end435
                                        #   in Loop: Header=BB269_124 Depth=1
	jmp	.LBB269_134
.LBB269_134:                            # %for.inc436
                                        #   in Loop: Header=BB269_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB269_124
.LBB269_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB269_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB269_138 Depth 2
                                        #       Child Loop BB269_140 Depth 3
                                        #         Child Loop BB269_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB269_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB269_136 Depth=1
	movl	$0, -16(%rbp)
.LBB269_138:                            # %for.cond443
                                        #   Parent Loop BB269_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB269_140 Depth 3
                                        #         Child Loop BB269_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB269_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB269_138 Depth=2
	movl	$0, -12(%rbp)
.LBB269_140:                            # %for.cond447
                                        #   Parent Loop BB269_136 Depth=1
                                        #     Parent Loop BB269_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB269_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB269_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB269_140 Depth=3
	movl	$0, -36(%rbp)
.LBB269_142:                            # %for.cond451
                                        #   Parent Loop BB269_136 Depth=1
                                        #     Parent Loop BB269_138 Depth=2
                                        #       Parent Loop BB269_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB269_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB269_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB269_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB269_142
.LBB269_145:                            # %for.end465
                                        #   in Loop: Header=BB269_140 Depth=3
	jmp	.LBB269_146
.LBB269_146:                            # %for.inc466
                                        #   in Loop: Header=BB269_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB269_140
.LBB269_147:                            # %for.end468
                                        #   in Loop: Header=BB269_138 Depth=2
	jmp	.LBB269_148
.LBB269_148:                            # %for.inc469
                                        #   in Loop: Header=BB269_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB269_138
.LBB269_149:                            # %for.end471
                                        #   in Loop: Header=BB269_136 Depth=1
	jmp	.LBB269_150
.LBB269_150:                            # %for.inc472
                                        #   in Loop: Header=BB269_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB269_136
.LBB269_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB269_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB269_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB269_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB269_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB269_152
.LBB269_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB269_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB269_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB269_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB269_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB269_156
.LBB269_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB269_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB269_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB269_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB269_166
.LBB269_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB269_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB269_165:                            # %if.end520
	jmp	.LBB269_166
.LBB269_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB269_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB269_168:                            # %if.end536
	cmpl	$1399858338, -88(%rbp)  # imm = 0x537024A2
	jne	.LBB269_170
.LBB269_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB269_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB269_169
.Lfunc_end269:
	.size	start_macroblock.228, .Lfunc_end269-start_macroblock.228
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.229 # -- Begin function OneComponentChromaPrediction4x4.229
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.229,@function
OneComponentChromaPrediction4x4.229:    # @OneComponentChromaPrediction4x4.229
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$184181963, -112(%rbp)  # imm = 0xAFA64CB
	movq	%rdi, -144(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -92(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-84(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -116(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB270_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB270_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -108(%rbp)
	cmpl	$0, -108(%rbp)
	je	.LBB270_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB270_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB270_6
.LBB270_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB270_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB270_8
.LBB270_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB270_8:                              # %if.end13
	movl	-92(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -136(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB270_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB270_11 Depth 2
	cmpl	$4, -28(%rbp)
	jge	.LBB270_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB270_9 Depth=1
	movl	$0, -40(%rbp)
.LBB270_11:                             # %for.cond20
                                        #   Parent Loop BB270_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -40(%rbp)
	jge	.LBB270_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB270_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-40(%rbp), %ecx
	addl	-76(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-28(%rbp), %ecx
	addl	-80(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-92(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-40(%rbp), %eax
	addl	-76(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	addl	-80(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-136(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB270_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB270_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB270_15
.LBB270_14:                             # %cond.false
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB270_15:                             # %cond.end
                                        #   in Loop: Header=BB270_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB270_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB270_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB270_21
.LBB270_17:                             # %cond.false65
                                        #   in Loop: Header=BB270_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB270_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB270_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB270_20
.LBB270_19:                             # %cond.false74
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-20(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB270_20:                             # %cond.end76
                                        #   in Loop: Header=BB270_11 Depth=2
.LBB270_21:                             # %cond.end78
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	%eax, -60(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB270_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB270_24
.LBB270_23:                             # %cond.false84
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB270_24:                             # %cond.end86
                                        #   in Loop: Header=BB270_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB270_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB270_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB270_30
.LBB270_26:                             # %cond.false91
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB270_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB270_29
.LBB270_28:                             # %cond.false96
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB270_29:                             # %cond.end98
                                        #   in Loop: Header=BB270_11 Depth=2
.LBB270_30:                             # %cond.end100
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB270_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB270_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB270_33
.LBB270_32:                             # %cond.false111
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB270_33:                             # %cond.end114
                                        #   in Loop: Header=BB270_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB270_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB270_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB270_39
.LBB270_35:                             # %cond.false119
                                        #   in Loop: Header=BB270_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB270_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB270_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB270_38
.LBB270_37:                             # %cond.false129
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-20(%rbp), %eax
	addl	-32(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB270_38:                             # %cond.end132
                                        #   in Loop: Header=BB270_11 Depth=2
.LBB270_39:                             # %cond.end134
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB270_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB270_42
.LBB270_41:                             # %cond.false141
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB270_42:                             # %cond.end144
                                        #   in Loop: Header=BB270_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB270_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB270_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB270_48
.LBB270_44:                             # %cond.false149
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB270_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-16(%rbp), %eax
	jmp	.LBB270_47
.LBB270_46:                             # %cond.false155
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB270_47:                             # %cond.end158
                                        #   in Loop: Header=BB270_11 Depth=2
.LBB270_48:                             # %cond.end160
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	andl	-32(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-68(%rbp), %eax
	imull	-64(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-64(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-56(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-68(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-60(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-72(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-88(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-116(%rbp), %eax
	cltd
	idivl	-84(%rbp)
	movq	-144(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -144(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB270_11 Depth=2
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB270_11
.LBB270_50:                             # %for.end
                                        #   in Loop: Header=BB270_9 Depth=1
	jmp	.LBB270_51
.LBB270_51:                             # %for.inc198
                                        #   in Loop: Header=BB270_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB270_9
.LBB270_52:                             # %for.end200
	cmpl	$184181963, -112(%rbp)  # imm = 0xAFA64CB
	jne	.LBB270_54
.LBB270_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB270_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB270_53
.Lfunc_end270:
	.size	OneComponentChromaPrediction4x4.229, .Lfunc_end270-OneComponentChromaPrediction4x4.229
	.cfi_endproc
                                        # -- End function
	.globl	writeIntra4x4Modes.230  # -- Begin function writeIntra4x4Modes.230
	.p2align	4, 0x90
	.type	writeIntra4x4Modes.230,@function
writeIntra4x4Modes.230:                 # @writeIntra4x4Modes.230
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1596599348, -68(%rbp)  # imm = 0x5F2A2C34
	movl	%edi, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -16(%rbp)
.LBB271_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB271_9 Depth 2
                                        #       Child Loop BB271_11 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB271_19
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB271_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$11, 472(%rax,%rcx,4)
	jne	.LBB271_5
# %bb.3:                                # %land.lhs.true
                                        #   in Loop: Header=BB271_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB271_8
# %bb.4:                                # %lor.lhs.false
                                        #   in Loop: Header=BB271_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB271_8
.LBB271_5:                              # %lor.lhs.false10
                                        #   in Loop: Header=BB271_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	cmpl	$13, 472(%rax,%rcx,4)
	jne	.LBB271_17
# %bb.6:                                # %land.lhs.true15
                                        #   in Loop: Header=BB271_1 Depth=1
	cmpl	$0, -36(%rbp)
	jl	.LBB271_8
# %bb.7:                                # %lor.lhs.false17
                                        #   in Loop: Header=BB271_1 Depth=1
	movl	-36(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jne	.LBB271_17
.LBB271_8:                              # %if.then
                                        #   in Loop: Header=BB271_1 Depth=1
	movq	-48(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	cmpl	$13, %eax
	movl	$8, %eax
	movl	$4, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	%ecx, -80(%rbp)
	movl	-80(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-84(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movl	$0, -32(%rbp)
.LBB271_9:                              # %for.cond24
                                        #   Parent Loop BB271_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB271_11 Depth 3
	cmpl	$2, -32(%rbp)
	jge	.LBB271_16
# %bb.10:                               # %for.body26
                                        #   in Loop: Header=BB271_9 Depth=2
	movl	$0, -12(%rbp)
.LBB271_11:                             # %for.cond27
                                        #   Parent Loop BB271_1 Depth=1
                                        #     Parent Loop BB271_9 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -12(%rbp)
	jge	.LBB271_14
# %bb.12:                               # %for.body29
                                        #   in Loop: Header=BB271_11 Depth=3
	movq	-48(%rbp), %rax
	movl	-16(%rbp), %ecx
	shll	$2, %ecx
	movl	-32(%rbp), %edx
	shll	$1, %edx
	orl	%edx, %ecx
	orl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	332(%rax,%rcx,4), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -240(%rbp,%rcx,4)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	movl	-32(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	addl	-12(%rbp), %eax
	movslq	-28(%rbp), %rcx
	movl	%eax, -176(%rbp,%rcx,4)
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB271_11 Depth=3
	movl	-72(%rbp), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB271_11
.LBB271_14:                             # %for.end
                                        #   in Loop: Header=BB271_9 Depth=2
	jmp	.LBB271_15
.LBB271_15:                             # %for.inc42
                                        #   in Loop: Header=BB271_9 Depth=2
	movl	-76(%rbp), %eax
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB271_9
.LBB271_16:                             # %for.end44
                                        #   in Loop: Header=BB271_1 Depth=1
	jmp	.LBB271_17
.LBB271_17:                             # %if.end
                                        #   in Loop: Header=BB271_1 Depth=1
	jmp	.LBB271_18
.LBB271_18:                             # %for.inc45
                                        #   in Loop: Header=BB271_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB271_1
.LBB271_19:                             # %for.end47
	movl	$0, -52(%rbp)
	movl	$0, -12(%rbp)
.LBB271_20:                             # %for.cond48
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB271_28
# %bb.21:                               # %for.body50
                                        #   in Loop: Header=BB271_20 Depth=1
	movq	-48(%rbp), %rax
	movl	$1, 528(%rax)
	movslq	-12(%rbp), %rax
	movl	-176(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movslq	-12(%rbp), %rax
	movl	-240(%rbp,%rax,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, 8(%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	je	.LBB271_23
# %bb.22:                               # %if.then56
                                        #   in Loop: Header=BB271_20 Depth=1
	movq	-24(%rbp), %rax
	movabsq	$writeIntraPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB271_23:                             # %if.end57
                                        #   in Loop: Header=BB271_20 Depth=1
	movq	-24(%rbp), %rax
	movl	$4, (%rax)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB271_25
# %bb.24:                               # %if.then63
                                        #   in Loop: Header=BB271_20 Depth=1
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	writeSyntaxElement_Intra4x4PredictionMode
	jmp	.LBB271_26
.LBB271_25:                             # %if.else
                                        #   in Loop: Header=BB271_20 Depth=1
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
.LBB271_26:                             # %if.end65
                                        #   in Loop: Header=BB271_20 Depth=1
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-52(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.27:                               # %for.inc72
                                        #   in Loop: Header=BB271_20 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB271_20
.LBB271_28:                             # %for.end74
	movl	-52(%rbp), %ebx
	cmpl	$1596599348, -68(%rbp)  # imm = 0x5F2A2C34
	jne	.LBB271_30
.LBB271_29:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB271_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB271_29
.Lfunc_end271:
	.size	writeIntra4x4Modes.230, .Lfunc_end271-writeIntra4x4Modes.230
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.231      # -- Begin function find_sad_16x16.231
	.p2align	4, 0x90
	.type	find_sad_16x16.231,@function
find_sad_16x16.231:                     # @find_sad_16x16.231
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$150438641, -80(%rbp)   # imm = 0x8F782F1
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$0, -12(%rbp)
.LBB272_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB272_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB272_1 Depth=1
	movl	-76(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB272_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB272_1
.LBB272_4:                              # %for.end
	movl	-76(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB272_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB272_20
.LBB272_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB272_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB272_9
.LBB272_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB272_9
.LBB272_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB272_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB272_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB272_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB272_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB272_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB272_14
.LBB272_13:                             # %cond.false23
                                        #   in Loop: Header=BB272_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB272_14
.LBB272_14:                             # %cond.end24
                                        #   in Loop: Header=BB272_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB272_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB272_10
.LBB272_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB272_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB272_19
.LBB272_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB272_19
.LBB272_19:                             # %cond.end39
	movl	%eax, -72(%rbp)
.LBB272_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB272_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB272_42 Depth 2
                                        #       Child Loop BB272_44 Depth 3
                                        #     Child Loop BB272_50 Depth 2
                                        #       Child Loop BB272_52 Depth 3
                                        #         Child Loop BB272_54 Depth 4
                                        #         Child Loop BB272_58 Depth 4
                                        #           Child Loop BB272_60 Depth 5
                                        #     Child Loop BB272_72 Depth 2
                                        #       Child Loop BB272_74 Depth 3
                                        #     Child Loop BB272_80 Depth 2
                                        #     Child Loop BB272_84 Depth 2
                                        #       Child Loop BB272_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB272_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB272_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB272_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB272_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB272_32
.LBB272_24:                             # %if.then46
                                        #   in Loop: Header=BB272_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB272_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB272_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB272_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB272_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB272_28
.LBB272_27:                             # %if.then51
                                        #   in Loop: Header=BB272_21 Depth=1
	jmp	.LBB272_95
.LBB272_28:                             # %if.end52
                                        #   in Loop: Header=BB272_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB272_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB272_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB272_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB272_21 Depth=1
	jmp	.LBB272_95
.LBB272_31:                             # %if.end57
                                        #   in Loop: Header=BB272_21 Depth=1
	jmp	.LBB272_32
.LBB272_32:                             # %if.end58
                                        #   in Loop: Header=BB272_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB272_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB272_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB272_40
.LBB272_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB272_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB272_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB272_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB272_40
.LBB272_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB272_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB272_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB272_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB272_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB272_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB272_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB272_21 Depth=1
	cmpl	$0, -72(%rbp)
	jne	.LBB272_41
.LBB272_40:                             # %if.then74
                                        #   in Loop: Header=BB272_21 Depth=1
	jmp	.LBB272_94
.LBB272_41:                             # %if.else75
                                        #   in Loop: Header=BB272_21 Depth=1
	movl	$0, -16(%rbp)
.LBB272_42:                             # %for.cond76
                                        #   Parent Loop BB272_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB272_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB272_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB272_42 Depth=2
	movl	$0, -12(%rbp)
.LBB272_44:                             # %for.cond79
                                        #   Parent Loop BB272_21 Depth=1
                                        #     Parent Loop BB272_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB272_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB272_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB272_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB272_44
.LBB272_47:                             # %for.end115
                                        #   in Loop: Header=BB272_42 Depth=2
	jmp	.LBB272_48
.LBB272_48:                             # %for.inc116
                                        #   in Loop: Header=BB272_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB272_42
.LBB272_49:                             # %for.end118
                                        #   in Loop: Header=BB272_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB272_50:                             # %for.cond119
                                        #   Parent Loop BB272_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB272_52 Depth 3
                                        #         Child Loop BB272_54 Depth 4
                                        #         Child Loop BB272_58 Depth 4
                                        #           Child Loop BB272_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB272_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB272_50 Depth=2
	movl	$0, -24(%rbp)
.LBB272_52:                             # %for.cond123
                                        #   Parent Loop BB272_21 Depth=1
                                        #     Parent Loop BB272_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB272_54 Depth 4
                                        #         Child Loop BB272_58 Depth 4
                                        #           Child Loop BB272_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB272_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB272_52 Depth=3
	movl	$0, -16(%rbp)
.LBB272_54:                             # %for.cond127
                                        #   Parent Loop BB272_21 Depth=1
                                        #     Parent Loop BB272_50 Depth=2
                                        #       Parent Loop BB272_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB272_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB272_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB272_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB272_54
.LBB272_57:                             # %for.end237
                                        #   in Loop: Header=BB272_52 Depth=3
	movl	$0, -12(%rbp)
.LBB272_58:                             # %for.cond238
                                        #   Parent Loop BB272_21 Depth=1
                                        #     Parent Loop BB272_50 Depth=2
                                        #       Parent Loop BB272_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB272_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB272_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB272_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB272_60:                             # %for.cond346
                                        #   Parent Loop BB272_21 Depth=1
                                        #     Parent Loop BB272_50 Depth=2
                                        #       Parent Loop BB272_52 Depth=3
                                        #         Parent Loop BB272_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB272_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB272_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB272_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB272_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB272_63:                             # %if.end363
                                        #   in Loop: Header=BB272_60 Depth=5
	jmp	.LBB272_64
.LBB272_64:                             # %for.inc364
                                        #   in Loop: Header=BB272_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB272_60
.LBB272_65:                             # %for.end366
                                        #   in Loop: Header=BB272_58 Depth=4
	jmp	.LBB272_66
.LBB272_66:                             # %for.inc367
                                        #   in Loop: Header=BB272_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB272_58
.LBB272_67:                             # %for.end369
                                        #   in Loop: Header=BB272_52 Depth=3
	jmp	.LBB272_68
.LBB272_68:                             # %for.inc370
                                        #   in Loop: Header=BB272_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB272_52
.LBB272_69:                             # %for.end372
                                        #   in Loop: Header=BB272_50 Depth=2
	jmp	.LBB272_70
.LBB272_70:                             # %for.inc373
                                        #   in Loop: Header=BB272_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB272_50
.LBB272_71:                             # %for.end375
                                        #   in Loop: Header=BB272_21 Depth=1
	movl	$0, -16(%rbp)
.LBB272_72:                             # %for.cond376
                                        #   Parent Loop BB272_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB272_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB272_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB272_72 Depth=2
	movl	$0, -12(%rbp)
.LBB272_74:                             # %for.cond380
                                        #   Parent Loop BB272_21 Depth=1
                                        #     Parent Loop BB272_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB272_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB272_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB272_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB272_74
.LBB272_77:                             # %for.end397
                                        #   in Loop: Header=BB272_72 Depth=2
	jmp	.LBB272_78
.LBB272_78:                             # %for.inc398
                                        #   in Loop: Header=BB272_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB272_72
.LBB272_79:                             # %for.end400
                                        #   in Loop: Header=BB272_21 Depth=1
	movl	$0, -16(%rbp)
.LBB272_80:                             # %for.cond401
                                        #   Parent Loop BB272_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB272_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB272_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB272_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB272_80
.LBB272_83:                             # %for.end463
                                        #   in Loop: Header=BB272_21 Depth=1
	movl	$0, -12(%rbp)
.LBB272_84:                             # %for.cond464
                                        #   Parent Loop BB272_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB272_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB272_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB272_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB272_86:                             # %for.cond524
                                        #   Parent Loop BB272_21 Depth=1
                                        #     Parent Loop BB272_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB272_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB272_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB272_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB272_86
.LBB272_89:                             # %for.end536
                                        #   in Loop: Header=BB272_84 Depth=2
	jmp	.LBB272_90
.LBB272_90:                             # %for.inc537
                                        #   in Loop: Header=BB272_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB272_84
.LBB272_91:                             # %for.end539
                                        #   in Loop: Header=BB272_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB272_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB272_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB272_93:                             # %if.end543
                                        #   in Loop: Header=BB272_21 Depth=1
	jmp	.LBB272_94
.LBB272_94:                             # %if.end544
                                        #   in Loop: Header=BB272_21 Depth=1
	jmp	.LBB272_95
.LBB272_95:                             # %for.inc545
                                        #   in Loop: Header=BB272_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB272_21
.LBB272_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$150438641, -80(%rbp)   # imm = 0x8F782F1
	jne	.LBB272_98
.LBB272_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB272_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB272_97
.Lfunc_end272:
	.size	find_sad_16x16.231, .Lfunc_end272-find_sad_16x16.231
	.cfi_endproc
                                        # -- End function
	.globl	writeReferenceFrame.232 # -- Begin function writeReferenceFrame.232
	.p2align	4, 0x90
	.type	writeReferenceFrame.232,@function
writeReferenceFrame.232:                # @writeReferenceFrame.232
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$889352314, -76(%rbp)   # imm = 0x3502707A
	movl	%edi, -84(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movl	$0, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB273_3
# %bb.1:                                # %land.lhs.true
	movq	-64(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB273_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB273_4
.LBB273_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB273_4
.LBB273_4:                              # %cond.end
	movl	%ecx, -36(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB273_6
# %bb.5:                                # %cond.true10
	movl	-36(%rbp), %eax
	addl	$0, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
	jmp	.LBB273_7
.LBB273_6:                              # %cond.false13
	movl	-36(%rbp), %eax
	addl	$1, %eax
	cltq
	movl	listXsize(,%rax,4), %eax
.LBB273_7:                              # %cond.end17
	movl	%eax, -40(%rbp)
	movl	$0, -48(%rbp)
	cmpl	$1, -40(%rbp)
	jne	.LBB273_9
# %bb.8:                                # %if.then
	movl	$0, -52(%rbp)
	jmp	.LBB273_18
.LBB273_9:                              # %if.end
	cmpl	$2, -40(%rbp)
	jne	.LBB273_11
# %bb.10:                               # %if.then20
	movl	$1, -48(%rbp)
.LBB273_11:                             # %if.end21
	movl	-72(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$3, (%rax)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB273_16
# %bb.12:                               # %if.then28
	cmpl	$0, -48(%rbp)
	je	.LBB273_14
# %bb.13:                               # %if.then30
	movq	-16(%rbp), %rax
	movl	$1, %ecx
	subl	4(%rax), %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, 20(%rax)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB273_15
.LBB273_14:                             # %if.else
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB273_15:                             # %if.end33
	jmp	.LBB273_17
.LBB273_16:                             # %if.else34
	movl	-84(%rbp), %edi
	callq	BType2CtxRef
	xorl	%ecx, %ecx
	movq	-16(%rbp), %rdx
	movl	%eax, 24(%rdx)
	movl	-68(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 72(%rdx)
	movl	-80(%rbp), %eax
	movq	img, %rdx
	movl	%eax, 76(%rdx)
	movq	-16(%rbp), %rax
	movabsq	$writeRefFrame_CABAC, %rdx
	movq	%rdx, 40(%rax)
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-32(%rbp), %rsi
	callq	*%rax
.LBB273_17:                             # %if.end41
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %eax
	movl	%eax, -52(%rbp)
.LBB273_18:                             # %return
	movl	-52(%rbp), %ebx
	cmpl	$889352314, -76(%rbp)   # imm = 0x3502707A
	jne	.LBB273_20
.LBB273_19:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB273_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB273_19
.Lfunc_end273:
	.size	writeReferenceFrame.232, .Lfunc_end273-writeReferenceFrame.232
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.233       # -- Begin function slice_too_big.233
	.p2align	4, 0x90
	.type	slice_too_big.233,@function
slice_too_big.233:                      # @slice_too_big.233
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1311556059, -52(%rbp)  # imm = 0x4E2CC1DB
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB274_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB274_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB274_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB274_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB274_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB274_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB274_5:                              # %if.end
                                        #   in Loop: Header=BB274_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB274_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB274_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB274_7:                              # %if.end8
                                        #   in Loop: Header=BB274_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB274_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB274_21
.LBB274_9:                              # %if.end11
                                        #   in Loop: Header=BB274_2 Depth=1
	jmp	.LBB274_10
.LBB274_10:                             # %for.inc
                                        #   in Loop: Header=BB274_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB274_2
.LBB274_11:                             # %for.end
	jmp	.LBB274_12
.LBB274_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB274_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB274_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB274_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB274_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB274_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB274_21
.LBB274_17:                             # %if.end27
                                        #   in Loop: Header=BB274_14 Depth=1
	jmp	.LBB274_18
.LBB274_18:                             # %for.inc28
                                        #   in Loop: Header=BB274_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB274_14
.LBB274_19:                             # %for.end30
	jmp	.LBB274_20
.LBB274_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB274_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1311556059, -52(%rbp)  # imm = 0x4E2CC1DB
	jne	.LBB274_23
.LBB274_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB274_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB274_22
.Lfunc_end274:
	.size	slice_too_big.233, .Lfunc_end274-slice_too_big.233
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.234             # -- Begin function ZeroRef.234
	.p2align	4, 0x90
	.type	ZeroRef.234,@function
ZeroRef.234:                            # @ZeroRef.234
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1831045871, -24(%rbp)  # imm = 0x6D238AEF
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB275_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB275_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB275_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB275_1 Depth=1
	movl	$0, -16(%rbp)
.LBB275_3:                              # %for.cond1
                                        #   Parent Loop BB275_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB275_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB275_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB275_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB275_11
.LBB275_6:                              # %if.end
                                        #   in Loop: Header=BB275_3 Depth=2
	jmp	.LBB275_7
.LBB275_7:                              # %for.inc
                                        #   in Loop: Header=BB275_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB275_3
.LBB275_8:                              # %for.end
                                        #   in Loop: Header=BB275_1 Depth=1
	jmp	.LBB275_9
.LBB275_9:                              # %for.inc10
                                        #   in Loop: Header=BB275_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB275_1
.LBB275_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB275_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1831045871, -24(%rbp)  # imm = 0x6D238AEF
	jne	.LBB275_13
.LBB275_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB275_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB275_12
.Lfunc_end275:
	.size	ZeroRef.234, .Lfunc_end275-ZeroRef.234
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.235 # -- Begin function writeChromaIntraPredMode.235
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.235,@function
writeChromaIntraPredMode.235:           # @writeChromaIntraPredMode.235
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$928126272, -36(%rbp)   # imm = 0x37521540
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -72(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -64(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB276_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB276_3
.LBB276_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB276_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$928126272, -36(%rbp)   # imm = 0x37521540
	jne	.LBB276_5
.LBB276_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB276_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB276_4
.Lfunc_end276:
	.size	writeChromaIntraPredMode.235, .Lfunc_end276-writeChromaIntraPredMode.235
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.236             # -- Begin function ZeroRef.236
	.p2align	4, 0x90
	.type	ZeroRef.236,@function
ZeroRef.236:                            # @ZeroRef.236
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$539176144, -24(%rbp)   # imm = 0x20232CD0
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB277_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB277_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB277_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB277_1 Depth=1
	movl	$0, -12(%rbp)
.LBB277_3:                              # %for.cond1
                                        #   Parent Loop BB277_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB277_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB277_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB277_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB277_11
.LBB277_6:                              # %if.end
                                        #   in Loop: Header=BB277_3 Depth=2
	jmp	.LBB277_7
.LBB277_7:                              # %for.inc
                                        #   in Loop: Header=BB277_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB277_3
.LBB277_8:                              # %for.end
                                        #   in Loop: Header=BB277_1 Depth=1
	jmp	.LBB277_9
.LBB277_9:                              # %for.inc10
                                        #   in Loop: Header=BB277_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB277_1
.LBB277_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB277_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$539176144, -24(%rbp)   # imm = 0x20232CD0
	jne	.LBB277_13
.LBB277_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB277_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB277_12
.Lfunc_end277:
	.size	ZeroRef.236, .Lfunc_end277-ZeroRef.236
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.237        # -- Begin function writeMBLayer.237
	.p2align	4, 0x90
	.type	writeMBLayer.237,@function
writeMBLayer.237:                       # @writeMBLayer.237
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$2099346440, -100(%rbp) # imm = 0x7D217C08
	movl	%edi, -92(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB278_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB278_3
.LBB278_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB278_3
.LBB278_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB278_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB278_9
.LBB278_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB278_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB278_8
.LBB278_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB278_8
.LBB278_8:                              # %cond.end14
.LBB278_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -68(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB278_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB278_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -68(%rbp)
	jmp	.LBB278_24
.LBB278_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB278_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB278_17
	jmp	.LBB278_18
.LBB278_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB278_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB278_18
	jmp	.LBB278_17
.LBB278_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB278_17
	jmp	.LBB278_18
.LBB278_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB278_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB278_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB278_23
.LBB278_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB278_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB278_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -68(%rbp)
.LBB278_23:                             # %if.end50
	jmp	.LBB278_24
.LBB278_24:                             # %if.end51
	jmp	.LBB278_25
.LBB278_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB278_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB278_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB278_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB278_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB278_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB278_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB278_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB278_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB278_35
.LBB278_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB278_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB278_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB278_38
.LBB278_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB278_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB278_39:                             # %if.end96
	jmp	.LBB278_40
.LBB278_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB278_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB278_43
.LBB278_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB278_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB278_89
.LBB278_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB278_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB278_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB278_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -68(%rbp)
	je	.LBB278_49
.LBB278_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -96(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-96(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB278_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB278_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB278_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB278_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB278_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB278_55
.LBB278_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB278_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB278_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB278_58
.LBB278_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB278_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB278_59:                             # %if.end198
	jmp	.LBB278_60
.LBB278_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB278_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB278_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB278_64
.LBB278_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB278_64:                             # %if.end226
	jmp	.LBB278_88
.LBB278_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB278_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB278_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB278_76
.LBB278_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB278_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB278_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB278_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB278_72:                             # %if.end281
	jmp	.LBB278_73
.LBB278_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB278_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB278_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB278_87
.LBB278_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -64(%rbp)
.LBB278_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB278_79 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB278_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB278_77 Depth=1
	movl	$0, -44(%rbp)
.LBB278_79:                             # %for.cond310
                                        #   Parent Loop BB278_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB278_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB278_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB278_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB278_79
.LBB278_82:                             # %for.end
                                        #   in Loop: Header=BB278_77 Depth=1
	jmp	.LBB278_83
.LBB278_83:                             # %for.inc322
                                        #   in Loop: Header=BB278_77 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB278_77
.LBB278_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB278_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB278_86:                             # %if.end345
	jmp	.LBB278_87
.LBB278_87:                             # %if.end346
	jmp	.LBB278_88
.LBB278_88:                             # %if.end347
	jmp	.LBB278_89
.LBB278_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB278_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB278_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB278_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB278_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB278_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB278_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB278_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB278_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB278_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB278_98
.LBB278_97:                             # %if.else380
                                        #   in Loop: Header=BB278_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB278_98:                             # %if.end382
                                        #   in Loop: Header=BB278_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB278_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB278_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB278_101
.LBB278_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB278_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB278_101:                            # %lor.end415
                                        #   in Loop: Header=BB278_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB278_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB278_94
.LBB278_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB278_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB278_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB278_114
.LBB278_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB278_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB278_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB278_110
.LBB278_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB278_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB278_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB278_113
.LBB278_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB278_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB278_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB278_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB278_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB278_120
.LBB278_117:                            # %if.else480
	cmpl	$0, -92(%rbp)
	jne	.LBB278_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB278_119:                            # %if.end483
	jmp	.LBB278_120
.LBB278_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB278_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB278_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB278_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB278_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB278_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB278_129
.LBB278_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB278_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB278_128:                            # %if.end516
	jmp	.LBB278_129
.LBB278_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$2099346440, -100(%rbp) # imm = 0x7D217C08
	jne	.LBB278_131
.LBB278_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB278_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB278_130
.Lfunc_end278:
	.size	writeMBLayer.237, .Lfunc_end278-writeMBLayer.237
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.238 # -- Begin function writeLumaCoeff4x4_CABAC.238
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.238,@function
writeLumaCoeff4x4_CABAC.238:            # @writeLumaCoeff4x4_CABAC.238
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1737016184, -52(%rbp)  # imm = 0x6788C378
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -96(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB279_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB279_3
.LBB279_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB279_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB279_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB279_6
.LBB279_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB279_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB279_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB279_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB279_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB279_9:                              # %land.end
                                        #   in Loop: Header=BB279_7 Depth=1
	testb	$1, %al
	jne	.LBB279_10
	jmp	.LBB279_15
.LBB279_10:                             # %for.body
                                        #   in Loop: Header=BB279_7 Depth=1
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-96(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB279_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB279_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB279_13
.LBB279_12:                             # %cond.false40
                                        #   in Loop: Header=BB279_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB279_13:                             # %cond.end43
                                        #   in Loop: Header=BB279_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB279_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB279_7
.LBB279_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1737016184, -52(%rbp)  # imm = 0x6788C378
	jne	.LBB279_17
.LBB279_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB279_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB279_16
.Lfunc_end279:
	.size	writeLumaCoeff4x4_CABAC.238, .Lfunc_end279-writeLumaCoeff4x4_CABAC.238
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.239 # -- Begin function writeCoeff4x4_CAVLC.239
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.239,@function
writeCoeff4x4_CAVLC.239:                # @writeCoeff4x4_CAVLC.239
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$787315035, -168(%rbp)  # imm = 0x2EED795B
	movl	%edi, -172(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -208(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -200(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-172(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB280_22
# %bb.1:                                # %entry
	movq	.LJTI280_0(,%rax,8), %rax
	jmpq	*%rax
.LBB280_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB280_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB280_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB280_6
.LBB280_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB280_7
.LBB280_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB280_7:                              # %if.end
	jmp	.LBB280_23
.LBB280_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB280_23
.LBB280_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB280_23
.LBB280_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -80(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB280_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB280_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB280_14
.LBB280_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB280_15
.LBB280_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB280_15:                             # %if.end67
	jmp	.LBB280_23
.LBB280_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB280_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB280_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB280_20
.LBB280_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB280_21
.LBB280_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB280_21:                             # %if.end93
	jmp	.LBB280_23
.LBB280_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB280_23:                             # %sw.epilog
	movq	-208(%rbp), %rax
	movq	24(%rax), %rax
	movq	-200(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -160(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB280_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -80(%rbp)
	je	.LBB280_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB280_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB280_27
.LBB280_26:                             # %cond.false
                                        #   in Loop: Header=BB280_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB280_27
.LBB280_27:                             # %cond.end
                                        #   in Loop: Header=BB280_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB280_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB280_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB280_29:                             # %land.end
                                        #   in Loop: Header=BB280_24 Depth=1
	testb	$1, %dl
	jne	.LBB280_30
	jmp	.LBB280_41
.LBB280_30:                             # %for.body
                                        #   in Loop: Header=BB280_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB280_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB280_24 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB280_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB280_24 Depth=1
	movl	-88(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB280_33:                             # %if.end110
                                        #   in Loop: Header=BB280_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB280_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB280_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-160(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -160(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB280_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB280_24 Depth=1
	movl	$3, -32(%rbp)
.LBB280_36:                             # %if.end117
                                        #   in Loop: Header=BB280_24 Depth=1
	jmp	.LBB280_38
.LBB280_37:                             # %if.else118
                                        #   in Loop: Header=BB280_24 Depth=1
	movl	$0, -32(%rbp)
.LBB280_38:                             # %if.end119
                                        #   in Loop: Header=BB280_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB280_39:                             # %if.end121
                                        #   in Loop: Header=BB280_24 Depth=1
	jmp	.LBB280_40
.LBB280_40:                             # %for.inc
                                        #   in Loop: Header=BB280_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB280_24
.LBB280_41:                             # %for.end
	cmpl	$0, -80(%rbp)
	jne	.LBB280_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB280_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB280_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB280_46
.LBB280_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB280_46:                             # %cond.end136
	movl	%eax, -84(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB280_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB280_49
.LBB280_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB280_49:                             # %cond.end145
	movl	%eax, -100(%rbp)
	movl	-84(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB280_51
.LBB280_50:                             # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -100(%rbp)
	movl	-84(%rbp), %edi
	movl	-100(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB280_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB280_53
# %bb.52:                               # %if.then160
	movl	$0, -92(%rbp)
	jmp	.LBB280_60
.LBB280_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB280_55
# %bb.54:                               # %if.then163
	movl	$1, -92(%rbp)
	jmp	.LBB280_59
.LBB280_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB280_57
# %bb.56:                               # %if.then166
	movl	$2, -92(%rbp)
	jmp	.LBB280_58
.LBB280_57:                             # %if.else167
	movl	$3, -92(%rbp)
.LBB280_58:                             # %if.end168
	jmp	.LBB280_59
.LBB280_59:                             # %if.end169
	jmp	.LBB280_60
.LBB280_60:                             # %if.end170
	jmp	.LBB280_62
.LBB280_61:                             # %if.else171
	movl	$0, -92(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -100(%rbp)
.LBB280_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB280_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB280_65
.LBB280_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB280_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB280_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
	jmp	.LBB280_122
.LBB280_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB280_121
# %bb.68:                               # %if.then192
	movl	$0, -96(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB280_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB280_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB280_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB280_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB280_72:                             # %if.end202
                                        #   in Loop: Header=BB280_69 Depth=1
	movl	-96(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB280_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB280_69 Depth=1
	movl	-96(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -96(%rbp)
.LBB280_74:                             # %if.end205
                                        #   in Loop: Header=BB280_69 Depth=1
	jmp	.LBB280_75
.LBB280_75:                             # %for.inc206
                                        #   in Loop: Header=BB280_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB280_69
.LBB280_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB280_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB280_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB280_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB280_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB280_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB280_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB280_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB280_85
.LBB280_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB280_85:                             # %if.end233
	movl	-72(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB280_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB280_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB280_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB280_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB280_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB280_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB280_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB280_91
.LBB280_90:                             # %if.else249
                                        #   in Loop: Header=BB280_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB280_91:                             # %if.end252
                                        #   in Loop: Header=BB280_86 Depth=1
	movl	$0, -144(%rbp)
.LBB280_92:                             # %if.end253
                                        #   in Loop: Header=BB280_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB280_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB280_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB280_95
.LBB280_94:                             # %if.else257
                                        #   in Loop: Header=BB280_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB280_95:                             # %if.end259
                                        #   in Loop: Header=BB280_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB280_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB280_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB280_97:                             # %if.end266
                                        #   in Loop: Header=BB280_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB280_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB280_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB280_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB280_86 Depth=1
	movl	$2, -28(%rbp)
.LBB280_100:                            # %if.end273
                                        #   in Loop: Header=BB280_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB280_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB280_86
.LBB280_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB280_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB280_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB280_106
.LBB280_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB280_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB280_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -104(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB280_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB280_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB280_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -88(%rbp)
	movl	-88(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB280_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB280_108 Depth=1
	cmpl	$0, -104(%rbp)
	jne	.LBB280_112
.LBB280_111:                            # %if.then318
	jmp	.LBB280_120
.LBB280_112:                            # %if.end319
                                        #   in Loop: Header=BB280_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB280_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB280_108 Depth=1
	cmpl	$0, -104(%rbp)
	je	.LBB280_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB280_108 Depth=1
	movl	-104(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB280_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB280_108 Depth=1
	movl	$6, -28(%rbp)
.LBB280_116:                            # %if.end327
                                        #   in Loop: Header=BB280_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-88(%rbp), %eax
	movl	-104(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -104(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB280_117:                            # %if.end341
                                        #   in Loop: Header=BB280_108 Depth=1
	jmp	.LBB280_118
.LBB280_118:                            # %for.inc342
                                        #   in Loop: Header=BB280_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB280_108
.LBB280_119:                            # %for.end344.loopexit
	jmp	.LBB280_120
.LBB280_120:                            # %for.end344
	jmp	.LBB280_121
.LBB280_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -164(%rbp)
.LBB280_122:                            # %return
	movl	-164(%rbp), %ebx
	cmpl	$787315035, -168(%rbp)  # imm = 0x2EED795B
	jne	.LBB280_124
.LBB280_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB280_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB280_123
.Lfunc_end280:
	.size	writeCoeff4x4_CAVLC.239, .Lfunc_end280-writeCoeff4x4_CAVLC.239
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI280_0:
	.quad	.LBB280_2
	.quad	.LBB280_8
	.quad	.LBB280_9
	.quad	.LBB280_22
	.quad	.LBB280_22
	.quad	.LBB280_22
	.quad	.LBB280_10
	.quad	.LBB280_16
                                        # -- End function
	.text
	.globl	SetModesAndRefframe.240 # -- Begin function SetModesAndRefframe.240
	.p2align	4, 0x90
	.type	SetModesAndRefframe.240,@function
SetModesAndRefframe.240:                # @SetModesAndRefframe.240
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1979366763, -60(%rbp)  # imm = 0x75FABD6B
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -32(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB281_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB281_12
.LBB281_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB281_4
# %bb.3:                                # %if.then18
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB281_11
.LBB281_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB281_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB281_10
.LBB281_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB281_8
# %bb.7:                                # %if.then45
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB281_9
.LBB281_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB281_9:                              # %if.end
	jmp	.LBB281_10
.LBB281_10:                             # %if.end86
	jmp	.LBB281_11
.LBB281_11:                             # %if.end87
	jmp	.LBB281_12
.LBB281_12:                             # %if.end88
	cmpl	$1979366763, -60(%rbp)  # imm = 0x75FABD6B
	jne	.LBB281_14
.LBB281_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB281_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB281_13
.Lfunc_end281:
	.size	SetModesAndRefframe.240, .Lfunc_end281-SetModesAndRefframe.240
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.241             # -- Begin function ZeroRef.241
	.p2align	4, 0x90
	.type	ZeroRef.241,@function
ZeroRef.241:                            # @ZeroRef.241
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$1392585397, -24(%rbp)  # imm = 0x53012AB5
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB282_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB282_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB282_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB282_1 Depth=1
	movl	$0, -12(%rbp)
.LBB282_3:                              # %for.cond1
                                        #   Parent Loop BB282_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB282_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB282_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB282_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB282_11
.LBB282_6:                              # %if.end
                                        #   in Loop: Header=BB282_3 Depth=2
	jmp	.LBB282_7
.LBB282_7:                              # %for.inc
                                        #   in Loop: Header=BB282_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB282_3
.LBB282_8:                              # %for.end
                                        #   in Loop: Header=BB282_1 Depth=1
	jmp	.LBB282_9
.LBB282_9:                              # %for.inc10
                                        #   in Loop: Header=BB282_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB282_1
.LBB282_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB282_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1392585397, -24(%rbp)  # imm = 0x53012AB5
	jne	.LBB282_13
.LBB282_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB282_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB282_12
.Lfunc_end282:
	.size	ZeroRef.241, .Lfunc_end282-ZeroRef.241
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.242    # -- Begin function start_macroblock.242
	.p2align	4, 0x90
	.type	start_macroblock.242,@function
start_macroblock.242:                   # @start_macroblock.242
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1094668054, -84(%rbp)  # imm = 0x413F4F16
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB283_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB283_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -44(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB283_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB283_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB283_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB283_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB283_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB283_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB283_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB283_8:                              # %if.end
                                        #   in Loop: Header=BB283_5 Depth=1
	jmp	.LBB283_9
.LBB283_9:                              # %for.inc
                                        #   in Loop: Header=BB283_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB283_5
.LBB283_10:                             # %for.end
	jmp	.LBB283_11
.LBB283_11:                             # %if.end19
	jmp	.LBB283_12
.LBB283_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB283_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB283_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB283_16
.LBB283_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB283_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB283_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB283_97
.LBB283_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB283_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB283_21
.LBB283_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB283_96
.LBB283_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB283_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB283_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB283_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB283_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB283_34
.LBB283_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB283_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB283_32
.LBB283_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB283_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB283_31
.LBB283_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB283_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB283_33
.LBB283_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB283_33:                             # %if.end112
	jmp	.LBB283_34
.LBB283_34:                             # %if.end113
	jmp	.LBB283_39
.LBB283_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB283_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB283_38
.LBB283_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB283_38:                             # %if.end125
	jmp	.LBB283_39
.LBB283_39:                             # %if.end126
	jmp	.LBB283_47
.LBB283_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB283_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB283_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB283_44
.LBB283_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB283_44:                             # %if.end140
	jmp	.LBB283_46
.LBB283_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB283_46:                             # %if.end145
	jmp	.LBB283_47
.LBB283_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB283_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB283_93
.LBB283_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB283_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB283_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB283_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB283_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB283_74
.LBB283_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB283_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB283_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB283_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB283_73
.LBB283_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB283_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB283_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB283_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB283_72
.LBB283_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB283_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB283_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB283_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB283_71
.LBB283_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB283_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB283_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB283_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB283_70:                             # %if.end223
	jmp	.LBB283_71
.LBB283_71:                             # %if.end224
	jmp	.LBB283_72
.LBB283_72:                             # %if.end225
	jmp	.LBB283_73
.LBB283_73:                             # %if.end226
	jmp	.LBB283_74
.LBB283_74:                             # %if.end227
	jmp	.LBB283_75
.LBB283_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB283_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB283_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB283_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB283_82
.LBB283_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB283_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB283_81:                             # %if.end256
	jmp	.LBB283_82
.LBB283_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-44(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB283_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-44(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB283_88
.LBB283_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-40(%rbp), %eax
	jle	.LBB283_86
# %bb.85:                               # %if.then278
	movl	-40(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB283_87
.LBB283_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB283_87:                             # %if.end292
	jmp	.LBB283_88
.LBB283_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB283_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB283_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB283_92
.LBB283_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB283_92:                             # %if.end305
	jmp	.LBB283_94
.LBB283_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB283_94:                             # %if.end309
	jmp	.LBB283_95
.LBB283_95:                             # %if.end310
	jmp	.LBB283_96
.LBB283_96:                             # %if.end311
	jmp	.LBB283_97
.LBB283_97:                             # %if.end312
	jmp	.LBB283_102
.LBB283_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB283_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB283_101
.LBB283_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB283_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB283_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB283_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB283_105
.LBB283_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB283_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB283_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB283_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB283_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_110 Depth 2
                                        #       Child Loop BB283_112 Depth 3
                                        #         Child Loop BB283_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB283_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB283_108 Depth=1
	movl	$0, -16(%rbp)
.LBB283_110:                            # %for.cond364
                                        #   Parent Loop BB283_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB283_112 Depth 3
                                        #         Child Loop BB283_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB283_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB283_110 Depth=2
	movl	$0, -12(%rbp)
.LBB283_112:                            # %for.cond368
                                        #   Parent Loop BB283_108 Depth=1
                                        #     Parent Loop BB283_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB283_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB283_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB283_112 Depth=3
	movl	$0, -36(%rbp)
.LBB283_114:                            # %for.cond372
                                        #   Parent Loop BB283_108 Depth=1
                                        #     Parent Loop BB283_110 Depth=2
                                        #       Parent Loop BB283_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB283_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB283_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB283_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB283_114
.LBB283_117:                            # %for.end388
                                        #   in Loop: Header=BB283_112 Depth=3
	jmp	.LBB283_118
.LBB283_118:                            # %for.inc389
                                        #   in Loop: Header=BB283_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB283_112
.LBB283_119:                            # %for.end391
                                        #   in Loop: Header=BB283_110 Depth=2
	jmp	.LBB283_120
.LBB283_120:                            # %for.inc392
                                        #   in Loop: Header=BB283_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB283_110
.LBB283_121:                            # %for.end394
                                        #   in Loop: Header=BB283_108 Depth=1
	jmp	.LBB283_122
.LBB283_122:                            # %for.inc395
                                        #   in Loop: Header=BB283_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB283_108
.LBB283_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB283_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_126 Depth 2
                                        #       Child Loop BB283_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB283_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB283_124 Depth=1
	movl	$0, -12(%rbp)
.LBB283_126:                            # %for.cond402
                                        #   Parent Loop BB283_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB283_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB283_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB283_126 Depth=2
	movl	$0, -20(%rbp)
.LBB283_128:                            # %for.cond406
                                        #   Parent Loop BB283_124 Depth=1
                                        #     Parent Loop BB283_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB283_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB283_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB283_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB283_128
.LBB283_131:                            # %for.end432
                                        #   in Loop: Header=BB283_126 Depth=2
	jmp	.LBB283_132
.LBB283_132:                            # %for.inc433
                                        #   in Loop: Header=BB283_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB283_126
.LBB283_133:                            # %for.end435
                                        #   in Loop: Header=BB283_124 Depth=1
	jmp	.LBB283_134
.LBB283_134:                            # %for.inc436
                                        #   in Loop: Header=BB283_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB283_124
.LBB283_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB283_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB283_138 Depth 2
                                        #       Child Loop BB283_140 Depth 3
                                        #         Child Loop BB283_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB283_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB283_136 Depth=1
	movl	$0, -16(%rbp)
.LBB283_138:                            # %for.cond443
                                        #   Parent Loop BB283_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB283_140 Depth 3
                                        #         Child Loop BB283_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB283_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB283_138 Depth=2
	movl	$0, -12(%rbp)
.LBB283_140:                            # %for.cond447
                                        #   Parent Loop BB283_136 Depth=1
                                        #     Parent Loop BB283_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB283_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB283_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB283_140 Depth=3
	movl	$0, -36(%rbp)
.LBB283_142:                            # %for.cond451
                                        #   Parent Loop BB283_136 Depth=1
                                        #     Parent Loop BB283_138 Depth=2
                                        #       Parent Loop BB283_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB283_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB283_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB283_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB283_142
.LBB283_145:                            # %for.end465
                                        #   in Loop: Header=BB283_140 Depth=3
	jmp	.LBB283_146
.LBB283_146:                            # %for.inc466
                                        #   in Loop: Header=BB283_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB283_140
.LBB283_147:                            # %for.end468
                                        #   in Loop: Header=BB283_138 Depth=2
	jmp	.LBB283_148
.LBB283_148:                            # %for.inc469
                                        #   in Loop: Header=BB283_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB283_138
.LBB283_149:                            # %for.end471
                                        #   in Loop: Header=BB283_136 Depth=1
	jmp	.LBB283_150
.LBB283_150:                            # %for.inc472
                                        #   in Loop: Header=BB283_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB283_136
.LBB283_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB283_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB283_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB283_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB283_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB283_152
.LBB283_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB283_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB283_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB283_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB283_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB283_156
.LBB283_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB283_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB283_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB283_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB283_166
.LBB283_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB283_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB283_165:                            # %if.end520
	jmp	.LBB283_166
.LBB283_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB283_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB283_168:                            # %if.end536
	cmpl	$1094668054, -84(%rbp)  # imm = 0x413F4F16
	jne	.LBB283_170
.LBB283_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB283_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB283_169
.Lfunc_end283:
	.size	start_macroblock.242, .Lfunc_end283-start_macroblock.242
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.243        # -- Begin function writeMBLayer.243
	.p2align	4, 0x90
	.type	writeMBLayer.243,@function
writeMBLayer.243:                       # @writeMBLayer.243
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$1858906619, -96(%rbp)  # imm = 0x6ECCA9FB
	movl	%edi, -100(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-72(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -72(%rbp)
	je	.LBB284_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-72(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB284_3
.LBB284_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB284_3
.LBB284_3:                              # %cond.end
	movq	%rax, -112(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB284_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB284_9
.LBB284_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB284_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB284_8
.LBB284_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB284_8
.LBB284_8:                              # %cond.end14
.LBB284_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -64(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB284_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB284_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -64(%rbp)
	jmp	.LBB284_24
.LBB284_12:                             # %if.else
	movq	-112(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB284_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB284_17
	jmp	.LBB284_18
.LBB284_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB284_16
# %bb.15:                               # %cond.true28
	movq	-112(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB284_18
	jmp	.LBB284_17
.LBB284_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB284_17
	jmp	.LBB284_18
.LBB284_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB284_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB284_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB284_23
.LBB284_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB284_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB284_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -64(%rbp)
.LBB284_23:                             # %if.end50
	jmp	.LBB284_24
.LBB284_24:                             # %if.end51
	jmp	.LBB284_25
.LBB284_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB284_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB284_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB284_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB284_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB284_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB284_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB284_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB284_35
.LBB284_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB284_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB284_38
.LBB284_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB284_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB284_39:                             # %if.end96
	jmp	.LBB284_40
.LBB284_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB284_43
.LBB284_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB284_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB284_89
.LBB284_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB284_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB284_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB284_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -64(%rbp)
	je	.LBB284_49
.LBB284_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB284_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB284_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB284_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB284_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB284_55
.LBB284_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB284_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB284_58
.LBB284_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB284_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB284_59:                             # %if.end198
	jmp	.LBB284_60
.LBB284_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB284_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB284_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB284_64
.LBB284_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB284_64:                             # %if.end226
	jmp	.LBB284_88
.LBB284_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB284_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB284_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB284_76
.LBB284_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB284_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB284_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB284_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB284_72:                             # %if.end281
	jmp	.LBB284_73
.LBB284_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB284_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB284_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB284_87
.LBB284_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -68(%rbp)
.LBB284_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB284_79 Depth 2
	movl	-68(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB284_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB284_77 Depth=1
	movl	$0, -44(%rbp)
.LBB284_79:                             # %for.cond310
                                        #   Parent Loop BB284_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB284_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB284_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB284_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB284_79
.LBB284_82:                             # %for.end
                                        #   in Loop: Header=BB284_77 Depth=1
	jmp	.LBB284_83
.LBB284_83:                             # %for.inc322
                                        #   in Loop: Header=BB284_77 Depth=1
	movl	-68(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
	jmp	.LBB284_77
.LBB284_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB284_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB284_86:                             # %if.end345
	jmp	.LBB284_87
.LBB284_87:                             # %if.end346
	jmp	.LBB284_88
.LBB284_88:                             # %if.end347
	jmp	.LBB284_89
.LBB284_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB284_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB284_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB284_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB284_104
# %bb.93:                               # %if.then366
	movq	-120(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB284_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB284_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB284_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB284_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB284_98
.LBB284_97:                             # %if.else380
                                        #   in Loop: Header=BB284_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB284_98:                             # %if.end382
                                        #   in Loop: Header=BB284_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB284_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB284_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB284_101
.LBB284_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB284_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB284_101:                            # %lor.end415
                                        #   in Loop: Header=BB284_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB284_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB284_94
.LBB284_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB284_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB284_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB284_114
.LBB284_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB284_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB284_110
.LBB284_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB284_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB284_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB284_113
.LBB284_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB284_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB284_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB284_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB284_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB284_120
.LBB284_117:                            # %if.else480
	cmpl	$0, -100(%rbp)
	jne	.LBB284_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB284_119:                            # %if.end483
	jmp	.LBB284_120
.LBB284_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB284_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB284_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB284_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB284_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB284_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB284_129
.LBB284_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB284_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB284_128:                            # %if.end516
	jmp	.LBB284_129
.LBB284_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$1858906619, -96(%rbp)  # imm = 0x6ECCA9FB
	jne	.LBB284_131
.LBB284_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB284_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB284_130
.Lfunc_end284:
	.size	writeMBLayer.243, .Lfunc_end284-writeMBLayer.243
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.244   # -- Begin function TransformDecision.244
	.p2align	4, 0x90
	.type	TransformDecision.244,@function
TransformDecision.244:                  # @TransformDecision.244
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$409271376, -84(%rbp)   # imm = 0x1864FC50
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB285_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -68(%rbp)
	jmp	.LBB285_3
.LBB285_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
.LBB285_3:                              # %if.end
	jmp	.LBB285_4
.LBB285_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB285_6 Depth 2
                                        #       Child Loop BB285_8 Depth 3
                                        #         Child Loop BB285_10 Depth 4
                                        #           Child Loop BB285_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB285_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB285_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-52(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-50(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -40(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB285_6:                              # %for.cond3
                                        #   Parent Loop BB285_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB285_8 Depth 3
                                        #         Child Loop BB285_10 Depth 4
                                        #           Child Loop BB285_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB285_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB285_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB285_8:                              # %for.cond8
                                        #   Parent Loop BB285_4 Depth=1
                                        #     Parent Loop BB285_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB285_10 Depth 4
                                        #           Child Loop BB285_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB285_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB285_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-52(%rbp), %edx
	movl	-80(%rbp), %ecx
	movl	-76(%rbp), %r8d
	movw	-50(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-54(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-40(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB285_10:                             # %for.cond13
                                        #   Parent Loop BB285_4 Depth=1
                                        #     Parent Loop BB285_6 Depth=2
                                        #       Parent Loop BB285_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB285_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB285_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB285_10 Depth=4
	movl	$0, -24(%rbp)
.LBB285_12:                             # %for.cond17
                                        #   Parent Loop BB285_4 Depth=1
                                        #     Parent Loop BB285_6 Depth=2
                                        #       Parent Loop BB285_8 Depth=3
                                        #         Parent Loop BB285_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB285_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB285_12 Depth=5
	movq	imgY_org, %rax
	movl	-72(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-88(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB285_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB285_12
.LBB285_15:                             # %for.end
                                        #   in Loop: Header=BB285_10 Depth=4
	jmp	.LBB285_16
.LBB285_16:                             # %for.inc38
                                        #   in Loop: Header=BB285_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB285_10
.LBB285_17:                             # %for.end40
                                        #   in Loop: Header=BB285_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB285_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB285_8
.LBB285_19:                             # %for.end44
                                        #   in Loop: Header=BB285_6 Depth=2
	jmp	.LBB285_20
.LBB285_20:                             # %for.inc45
                                        #   in Loop: Header=BB285_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB285_6
.LBB285_21:                             # %for.end47
                                        #   in Loop: Header=BB285_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB285_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB285_4
.LBB285_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB285_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB285_28
.LBB285_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB285_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB285_28
.LBB285_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB285_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$409271376, -84(%rbp)   # imm = 0x1864FC50
	jne	.LBB285_30
.LBB285_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB285_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB285_29
.Lfunc_end285:
	.size	TransformDecision.244, .Lfunc_end285-TransformDecision.244
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaIntraPredMode.245 # -- Begin function writeChromaIntraPredMode.245
	.p2align	4, 0x90
	.type	writeChromaIntraPredMode.245,@function
writeChromaIntraPredMode.245:           # @writeChromaIntraPredMode.245
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$72, %rsp
	.cfi_offset %rbx, -24
	movl	$1061548708, -36(%rbp)  # imm = 0x3F45F2A4
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -72(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -56(%rbp)
	movl	$0, -20(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB286_2
# %bb.1:                                # %if.then
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB286_3
.LBB286_2:                              # %if.else
	movq	-16(%rbp), %rax
	movabsq	$writeCIPredMode_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB286_3:                              # %if.end
	movq	-32(%rbp), %rax
	movl	524(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$4, (%rax)
	movq	-64(%rbp), %rax
	movq	24(%rax), %rax
	movq	-56(%rbp), %rcx
	movslq	16(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-72(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movl	-20(%rbp), %ebx
	cmpl	$1061548708, -36(%rbp)  # imm = 0x3F45F2A4
	jne	.LBB286_5
.LBB286_4:
	movl	%ebx, %eax
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB286_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB286_4
.Lfunc_end286:
	.size	writeChromaIntraPredMode.245, .Lfunc_end286-writeChromaIntraPredMode.245
	.cfi_endproc
                                        # -- End function
	.globl	predict_nnz_chroma.246  # -- Begin function predict_nnz_chroma.246
	.p2align	4, 0x90
	.type	predict_nnz_chroma.246,@function
predict_nnz_chroma.246:                 # @predict_nnz_chroma.246
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movabsq	$.L__const.predict_nnz_chroma.j_off_tab, %rax
	movl	$855272468, -64(%rbp)   # imm = 0x32FA6C14
	movl	%edi, -20(%rbp)
	movl	%esi, -52(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -16(%rbp)
	movq	img, %rcx
	movl	12(%rcx), %ecx
	movl	%ecx, -60(%rbp)
	leaq	-112(%rbp), %rdi
	movq	%rax, %rsi
	movl	$48, %edx
	callq	memcpy
	movslq	-52(%rbp), %rax
	movl	-112(%rbp,%rax,4), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$3, 72700(%rax)
	je	.LBB287_14
# %bb.1:                                # %if.then
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB287_5
# %bb.2:                                # %land.lhs.true
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB287_5
# %bb.3:                                # %land.lhs.true2
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB287_5
# %bb.4:                                # %if.then4
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB287_5:                              # %if.end
	cmpl	$0, -48(%rbp)
	je	.LBB287_7
# %bb.6:                                # %if.then10
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB287_7:                              # %if.end19
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	-52(%rbp), %eax
	subl	$4, %eax
	movl	%edx, %esi
	movl	%eax, %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB287_11
# %bb.8:                                # %land.lhs.true24
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB287_11
# %bb.9:                                # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB287_11
# %bb.10:                               # %if.then30
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB287_11:                             # %if.end37
	cmpl	$0, -48(%rbp)
	je	.LBB287_13
# %bb.12:                               # %if.then40
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	shll	$1, %eax
	addl	-40(%rbp), %eax
	cltq
	movq	(%rcx,%rax,8), %rax
	movl	-36(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB287_13:                             # %if.end57
	jmp	.LBB287_27
.LBB287_14:                             # %if.else
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	xorl	%r8d, %r8d
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB287_18
# %bb.15:                               # %land.lhs.true61
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB287_18
# %bb.16:                               # %land.lhs.true64
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB287_18
# %bb.17:                               # %if.then67
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB287_18:                             # %if.end74
	cmpl	$0, -48(%rbp)
	je	.LBB287_20
# %bb.19:                               # %if.then77
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB287_20:                             # %if.end90
	movl	-60(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-52(%rbp), %edx
	subl	-56(%rbp), %edx
	movl	$0, %ecx
	movl	$4294967295, %r8d       # imm = 0xFFFFFFFF
	leaq	-48(%rbp), %r9
	callq	getChroma4x4Neighbour
	cmpl	$0, -48(%rbp)
	je	.LBB287_24
# %bb.21:                               # %land.lhs.true94
	movq	active_pps, %rax
	cmpl	$0, 224(%rax)
	je	.LBB287_24
# %bb.22:                               # %land.lhs.true97
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	je	.LBB287_24
# %bb.23:                               # %if.then100
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	andl	-48(%rbp), %eax
	movl	%eax, -48(%rbp)
.LBB287_24:                             # %if.end107
	cmpl	$0, -48(%rbp)
	je	.LBB287_26
# %bb.25:                               # %if.then110
	movq	img, %rax
	movq	128(%rax), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-56(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB287_26:                             # %if.end124
	jmp	.LBB287_27
.LBB287_27:                             # %if.end125
	cmpl	$2, -16(%rbp)
	jne	.LBB287_29
# %bb.28:                               # %if.then127
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB287_29:                             # %if.end130
	movl	-12(%rbp), %ebx
	cmpl	$855272468, -64(%rbp)   # imm = 0x32FA6C14
	jne	.LBB287_31
.LBB287_30:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB287_31:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB287_30
.Lfunc_end287:
	.size	predict_nnz_chroma.246, .Lfunc_end287-predict_nnz_chroma.246
	.cfi_endproc
                                        # -- End function
	.globl	OneComponentChromaPrediction4x4.247 # -- Begin function OneComponentChromaPrediction4x4.247
	.p2align	4, 0x90
	.type	OneComponentChromaPrediction4x4.247,@function
OneComponentChromaPrediction4x4.247:    # @OneComponentChromaPrediction4x4.247
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$160, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	xorl	%r10d, %r10d
	movl	$1486481481, -112(%rbp) # imm = 0x5899E849
	movq	%rdi, -136(%rbp)
	movl	%esi, -84(%rbp)
	movl	%edx, -88(%rbp)
	movq	%rcx, -152(%rbp)
	movl	%r8d, -60(%rbp)
	movw	%r9w, -22(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72708(%rcx)
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rcx
	movl	$64, %eax
	cltd
	idivl	72712(%rcx)
	movl	%eax, -4(%rbp)
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -40(%rbp)
	movl	-8(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-72(%rbp), %eax
	sarl	$1, %eax
	movl	%eax, -108(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB288_2
# %bb.1:                                # %land.rhs
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$0, 532(%rax)
	setne	%r10b
.LBB288_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -116(%rbp)
	cmpl	$0, -116(%rbp)
	je	.LBB288_7
# %bb.3:                                # %if.then
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB288_5
# %bb.4:                                # %if.then7
	movl	$4, -52(%rbp)
	jmp	.LBB288_6
.LBB288_5:                              # %if.else
	movl	$2, -52(%rbp)
.LBB288_6:                              # %if.end
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	subl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB288_8
.LBB288_7:                              # %if.else10
	movl	$0, -52(%rbp)
	movq	img, %rax
	movl	64(%rax), %eax
	subl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB288_8:                              # %if.end13
	movl	-60(%rbp), %eax
	addl	-52(%rbp), %eax
	cltq
	movq	listX(,%rax,8), %rax
	movq	%rax, -144(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	6464(%rax), %rax
	movslq	24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB288_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB288_11 Depth 2
	cmpl	$4, -28(%rbp)
	jge	.LBB288_52
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB288_9 Depth=1
	movl	$0, -32(%rbp)
.LBB288_11:                             # %for.cond20
                                        #   Parent Loop BB288_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -32(%rbp)
	jge	.LBB288_50
# %bb.12:                               # %for.body22
                                        #   in Loop: Header=BB288_11 Depth=2
	movq	-152(%rbp), %rdi
	movl	-32(%rbp), %ecx
	addl	-84(%rbp), %ecx
	movq	img, %rax
	movl	72708(%rax), %eax
	cltd
	movl	$4, %r8d
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rdi
	movl	-28(%rbp), %ecx
	addl	-88(%rbp), %ecx
	movq	img, %rax
	movl	72712(%rax), %eax
	cltd
	idivl	%r8d
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	cltq
	movq	(%rdi,%rax,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	%rax, -128(%rbp)
	movl	-32(%rbp), %eax
	addl	-84(%rbp), %eax
	movq	img, %rcx
	addl	176(%rcx), %eax
	imull	-8(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -16(%rbp)
	movl	-28(%rbp), %eax
	addl	-88(%rbp), %eax
	movq	img, %rcx
	addl	180(%rcx), %eax
	imull	-4(%rbp), %eax
	movq	-128(%rbp), %rcx
	movswl	2(%rcx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movq	-144(%rbp), %rax
	movswq	-22(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	6408(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB288_14
# %bb.13:                               # %cond.true
                                        #   in Loop: Header=BB288_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB288_15
.LBB288_14:                             # %cond.false
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB288_15:                             # %cond.end
                                        #   in Loop: Header=BB288_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB288_17
# %bb.16:                               # %cond.true64
                                        #   in Loop: Header=BB288_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB288_21
.LBB288_17:                             # %cond.false65
                                        #   in Loop: Header=BB288_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB288_19
# %bb.18:                               # %cond.true71
                                        #   in Loop: Header=BB288_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB288_20
.LBB288_19:                             # %cond.false74
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-16(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB288_20:                             # %cond.end76
                                        #   in Loop: Header=BB288_11 Depth=2
.LBB288_21:                             # %cond.end78
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	%eax, -68(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB288_23
# %bb.22:                               # %cond.true83
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB288_24
.LBB288_23:                             # %cond.false84
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB288_24:                             # %cond.end86
                                        #   in Loop: Header=BB288_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB288_26
# %bb.25:                               # %cond.true90
                                        #   in Loop: Header=BB288_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB288_30
.LBB288_26:                             # %cond.false91
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB288_28
# %bb.27:                               # %cond.true95
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB288_29
.LBB288_28:                             # %cond.false96
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-12(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB288_29:                             # %cond.end98
                                        #   in Loop: Header=BB288_11 Depth=2
.LBB288_30:                             # %cond.end100
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB288_32
# %bb.31:                               # %cond.true108
                                        #   in Loop: Header=BB288_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB288_33
.LBB288_32:                             # %cond.false111
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB288_33:                             # %cond.end114
                                        #   in Loop: Header=BB288_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB288_35
# %bb.34:                               # %cond.true118
                                        #   in Loop: Header=BB288_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB288_39
.LBB288_35:                             # %cond.false119
                                        #   in Loop: Header=BB288_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %ecx
	subl	$1, %ecx
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB288_37
# %bb.36:                               # %cond.true126
                                        #   in Loop: Header=BB288_11 Depth=2
	movq	img, %rax
	movl	56(%rax), %eax
	subl	$1, %eax
	jmp	.LBB288_38
.LBB288_37:                             # %cond.false129
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-16(%rbp), %eax
	addl	-36(%rbp), %eax
	cltd
	idivl	-8(%rbp)
.LBB288_38:                             # %cond.end132
                                        #   in Loop: Header=BB288_11 Depth=2
.LBB288_39:                             # %cond.end134
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB288_41
# %bb.40:                               # %cond.true140
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB288_42
.LBB288_41:                             # %cond.false141
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB288_42:                             # %cond.end144
                                        #   in Loop: Header=BB288_11 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB288_44
# %bb.43:                               # %cond.true148
                                        #   in Loop: Header=BB288_11 Depth=2
	xorl	%eax, %eax
	jmp	.LBB288_48
.LBB288_44:                             # %cond.false149
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-20(%rbp), %ecx
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
	cmpl	%eax, %ecx
	jge	.LBB288_46
# %bb.45:                               # %cond.true154
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-20(%rbp), %eax
	jmp	.LBB288_47
.LBB288_46:                             # %cond.false155
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-12(%rbp), %eax
	addl	-40(%rbp), %eax
	cltd
	idivl	-4(%rbp)
.LBB288_47:                             # %cond.end158
                                        #   in Loop: Header=BB288_11 Depth=2
.LBB288_48:                             # %cond.end160
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %eax
	andl	-36(%rbp), %eax
	movl	%eax, -48(%rbp)
	movl	-8(%rbp), %eax
	subl	-48(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-12(%rbp), %eax
	andl	-40(%rbp), %eax
	movl	%eax, -44(%rbp)
	movl	-4(%rbp), %eax
	subl	-44(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-92(%rbp), %eax
	imull	-56(%rbp), %eax
	movq	-104(%rbp), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	imull	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-56(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-80(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-92(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-68(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	-48(%rbp), %ecx
	imull	-44(%rbp), %ecx
	movq	-104(%rbp), %rdx
	movslq	-76(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-64(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	addl	-108(%rbp), %eax
	cltd
	idivl	-72(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -136(%rbp)
	movl	%eax, (%rcx)
# %bb.49:                               # %for.inc
                                        #   in Loop: Header=BB288_11 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB288_11
.LBB288_50:                             # %for.end
                                        #   in Loop: Header=BB288_9 Depth=1
	jmp	.LBB288_51
.LBB288_51:                             # %for.inc198
                                        #   in Loop: Header=BB288_9 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB288_9
.LBB288_52:                             # %for.end200
	cmpl	$1486481481, -112(%rbp) # imm = 0x5899E849
	jne	.LBB288_54
.LBB288_53:
	addq	$160, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB288_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB288_53
.Lfunc_end288:
	.size	OneComponentChromaPrediction4x4.247, .Lfunc_end288-OneComponentChromaPrediction4x4.247
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.248 # -- Begin function ChromaResidualCoding.248
	.p2align	4, 0x90
	.type	ChromaResidualCoding.248,@function
ChromaResidualCoding.248:               # @ChromaResidualCoding.248
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$152961992, -76(%rbp)   # imm = 0x91E03C8
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB289_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB289_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB289_3:                              # %lor.end
.LBB289_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -80(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB289_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_7 Depth 2
                                        #       Child Loop BB289_9 Depth 3
                                        #     Child Loop BB289_16 Depth 2
                                        #       Child Loop BB289_18 Depth 3
                                        #     Child Loop BB289_33 Depth 2
                                        #       Child Loop BB289_35 Depth 3
                                        #     Child Loop BB289_43 Depth 2
                                        #       Child Loop BB289_45 Depth 3
                                        #     Child Loop BB289_58 Depth 2
                                        #       Child Loop BB289_60 Depth 3
                                        #     Child Loop BB289_87 Depth 2
                                        #       Child Loop BB289_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB289_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -24(%rbp)
.LBB289_7:                              # %for.cond5
                                        #   Parent Loop BB289_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB289_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB289_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB289_7 Depth=2
	movl	$0, -20(%rbp)
.LBB289_9:                              # %for.cond8
                                        #   Parent Loop BB289_5 Depth=1
                                        #     Parent Loop BB289_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB289_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB289_9 Depth=3
	movslq	-80(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-68(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB289_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB289_9
.LBB289_12:                             # %for.end
                                        #   in Loop: Header=BB289_7 Depth=2
	jmp	.LBB289_13
.LBB289_13:                             # %for.inc18
                                        #   in Loop: Header=BB289_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB289_7
.LBB289_14:                             # %for.end20
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB289_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	$0, -4(%rbp)
.LBB289_16:                             # %for.cond21
                                        #   Parent Loop BB289_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB289_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB289_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB289_16 Depth=2
	movl	$0, -8(%rbp)
.LBB289_18:                             # %for.cond26
                                        #   Parent Loop BB289_5 Depth=1
                                        #     Parent Loop BB289_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB289_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB289_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB289_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB289_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB289_25
.LBB289_21:                             # %if.else
                                        #   in Loop: Header=BB289_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB289_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB289_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB289_24
.LBB289_23:                             # %if.else52
                                        #   in Loop: Header=BB289_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB289_24:                             # %if.end
                                        #   in Loop: Header=BB289_18 Depth=3
	jmp	.LBB289_25
.LBB289_25:                             # %if.end57
                                        #   in Loop: Header=BB289_18 Depth=3
	jmp	.LBB289_26
.LBB289_26:                             # %for.inc58
                                        #   in Loop: Header=BB289_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_18
.LBB289_27:                             # %for.end59
                                        #   in Loop: Header=BB289_16 Depth=2
	jmp	.LBB289_28
.LBB289_28:                             # %for.inc60
                                        #   in Loop: Header=BB289_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_16
.LBB289_29:                             # %for.end62
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_74
.LBB289_30:                             # %if.else63
                                        #   in Loop: Header=BB289_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB289_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB289_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	$0, -4(%rbp)
.LBB289_33:                             # %for.cond69
                                        #   Parent Loop BB289_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB289_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB289_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB289_33 Depth=2
	movl	$0, -8(%rbp)
.LBB289_35:                             # %for.cond73
                                        #   Parent Loop BB289_5 Depth=1
                                        #     Parent Loop BB289_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB289_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB289_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB289_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_35
.LBB289_38:                             # %for.end83
                                        #   in Loop: Header=BB289_33 Depth=2
	jmp	.LBB289_39
.LBB289_39:                             # %for.inc84
                                        #   in Loop: Header=BB289_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_33
.LBB289_40:                             # %for.end86
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_73
.LBB289_41:                             # %if.else87
                                        #   in Loop: Header=BB289_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB289_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	$0, -4(%rbp)
.LBB289_43:                             # %for.cond90
                                        #   Parent Loop BB289_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB289_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB289_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB289_43 Depth=2
	movl	$0, -8(%rbp)
.LBB289_45:                             # %for.cond95
                                        #   Parent Loop BB289_5 Depth=1
                                        #     Parent Loop BB289_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB289_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB289_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB289_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB289_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB289_52
.LBB289_48:                             # %if.else119
                                        #   in Loop: Header=BB289_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB289_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB289_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB289_51
.LBB289_50:                             # %if.else127
                                        #   in Loop: Header=BB289_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB289_51:                             # %if.end132
                                        #   in Loop: Header=BB289_45 Depth=3
	jmp	.LBB289_52
.LBB289_52:                             # %if.end133
                                        #   in Loop: Header=BB289_45 Depth=3
	jmp	.LBB289_53
.LBB289_53:                             # %for.inc134
                                        #   in Loop: Header=BB289_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_45
.LBB289_54:                             # %for.end136
                                        #   in Loop: Header=BB289_43 Depth=2
	jmp	.LBB289_55
.LBB289_55:                             # %for.inc137
                                        #   in Loop: Header=BB289_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_43
.LBB289_56:                             # %for.end139
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_72
.LBB289_57:                             # %if.else140
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	$0, -4(%rbp)
.LBB289_58:                             # %for.cond141
                                        #   Parent Loop BB289_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB289_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB289_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB289_58 Depth=2
	movl	$0, -8(%rbp)
.LBB289_60:                             # %for.cond146
                                        #   Parent Loop BB289_5 Depth=1
                                        #     Parent Loop BB289_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB289_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB289_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB289_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB289_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB289_67
.LBB289_63:                             # %if.else175
                                        #   in Loop: Header=BB289_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB289_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB289_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB289_66
.LBB289_65:                             # %if.else188
                                        #   in Loop: Header=BB289_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB289_66:                             # %if.end198
                                        #   in Loop: Header=BB289_60 Depth=3
	jmp	.LBB289_67
.LBB289_67:                             # %if.end199
                                        #   in Loop: Header=BB289_60 Depth=3
	jmp	.LBB289_68
.LBB289_68:                             # %for.inc200
                                        #   in Loop: Header=BB289_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_60
.LBB289_69:                             # %for.end202
                                        #   in Loop: Header=BB289_58 Depth=2
	jmp	.LBB289_70
.LBB289_70:                             # %for.inc203
                                        #   in Loop: Header=BB289_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_58
.LBB289_71:                             # %for.end205
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_72
.LBB289_72:                             # %if.end206
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_73
.LBB289_73:                             # %if.end207
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_74
.LBB289_74:                             # %if.end208
                                        #   in Loop: Header=BB289_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB289_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB289_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB289_100
.LBB289_77:                             # %if.else215
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB289_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB289_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB289_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB289_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB289_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB289_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB289_84
.LBB289_83:                             # %if.then247
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB289_85
.LBB289_84:                             # %if.else249
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB289_85:                             # %if.end251
                                        #   in Loop: Header=BB289_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB289_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	$0, -4(%rbp)
.LBB289_87:                             # %for.cond255
                                        #   Parent Loop BB289_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB289_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB289_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB289_87 Depth=2
	movl	$0, -8(%rbp)
.LBB289_89:                             # %for.cond260
                                        #   Parent Loop BB289_5 Depth=1
                                        #     Parent Loop BB289_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB289_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB289_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB289_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB289_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB289_93
.LBB289_92:                             # %if.else277
                                        #   in Loop: Header=BB289_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB289_93:                             # %if.end287
                                        #   in Loop: Header=BB289_89 Depth=3
	jmp	.LBB289_94
.LBB289_94:                             # %for.inc288
                                        #   in Loop: Header=BB289_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_89
.LBB289_95:                             # %for.end290
                                        #   in Loop: Header=BB289_87 Depth=2
	jmp	.LBB289_96
.LBB289_96:                             # %for.inc291
                                        #   in Loop: Header=BB289_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_87
.LBB289_97:                             # %for.end293
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_98
.LBB289_98:                             # %if.end294
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_99
.LBB289_99:                             # %if.end295
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_100
.LBB289_100:                            # %if.end296
                                        #   in Loop: Header=BB289_5 Depth=1
	jmp	.LBB289_101
.LBB289_101:                            # %for.inc297
                                        #   in Loop: Header=BB289_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB289_5
.LBB289_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB289_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB289_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB289_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB289_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB289_104 Depth=1
	movl	$0, -8(%rbp)
.LBB289_106:                            # %for.cond312
                                        #   Parent Loop BB289_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB289_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-64(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB289_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB289_110
.LBB289_109:                            # %cond.false
                                        #   in Loop: Header=BB289_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB289_110:                            # %cond.end
                                        #   in Loop: Header=BB289_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB289_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB289_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB289_116
.LBB289_112:                            # %cond.false358
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB289_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB289_115
.LBB289_114:                            # %cond.false367
                                        #   in Loop: Header=BB289_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB289_115:                            # %cond.end373
                                        #   in Loop: Header=BB289_106 Depth=2
.LBB289_116:                            # %cond.end375
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB289_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB289_119
.LBB289_118:                            # %cond.false394
                                        #   in Loop: Header=BB289_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB289_119:                            # %cond.end400
                                        #   in Loop: Header=BB289_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB289_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB289_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB289_125
.LBB289_121:                            # %cond.false406
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB289_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB289_124
.LBB289_123:                            # %cond.false415
                                        #   in Loop: Header=BB289_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB289_124:                            # %cond.end421
                                        #   in Loop: Header=BB289_106 Depth=2
.LBB289_125:                            # %cond.end423
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB289_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB289_128
.LBB289_127:                            # %cond.false443
                                        #   in Loop: Header=BB289_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB289_128:                            # %cond.end449
                                        #   in Loop: Header=BB289_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB289_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB289_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB289_134
.LBB289_130:                            # %cond.false455
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB289_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB289_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB289_133
.LBB289_132:                            # %cond.false464
                                        #   in Loop: Header=BB289_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB289_133:                            # %cond.end470
                                        #   in Loop: Header=BB289_106 Depth=2
.LBB289_134:                            # %cond.end472
                                        #   in Loop: Header=BB289_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB289_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB289_106
.LBB289_136:                            # %for.end487
                                        #   in Loop: Header=BB289_104 Depth=1
	jmp	.LBB289_137
.LBB289_137:                            # %for.inc488
                                        #   in Loop: Header=BB289_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB289_104
.LBB289_138:                            # %for.end490
	jmp	.LBB289_139
.LBB289_139:                            # %if.end491
	cmpl	$152961992, -76(%rbp)   # imm = 0x91E03C8
	jne	.LBB289_141
.LBB289_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB289_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB289_140
.Lfunc_end289:
	.size	ChromaResidualCoding.248, .Lfunc_end289-ChromaResidualCoding.248
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.249             # -- Begin function ZeroRef.249
	.p2align	4, 0x90
	.type	ZeroRef.249,@function
ZeroRef.249:                            # @ZeroRef.249
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$741234582, -24(%rbp)   # imm = 0x2C2E5796
	movq	%rdi, -32(%rbp)
	movl	$0, -16(%rbp)
.LBB290_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB290_3 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB290_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB290_1 Depth=1
	movl	$0, -12(%rbp)
.LBB290_3:                              # %for.cond1
                                        #   Parent Loop BB290_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -12(%rbp)
	jge	.LBB290_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB290_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB290_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB290_11
.LBB290_6:                              # %if.end
                                        #   in Loop: Header=BB290_3 Depth=2
	jmp	.LBB290_7
.LBB290_7:                              # %for.inc
                                        #   in Loop: Header=BB290_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB290_3
.LBB290_8:                              # %for.end
                                        #   in Loop: Header=BB290_1 Depth=1
	jmp	.LBB290_9
.LBB290_9:                              # %for.inc10
                                        #   in Loop: Header=BB290_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB290_1
.LBB290_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB290_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$741234582, -24(%rbp)   # imm = 0x2C2E5796
	jne	.LBB290_13
.LBB290_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB290_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB290_12
.Lfunc_end290:
	.size	ZeroRef.249, .Lfunc_end290-ZeroRef.249
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.250   # -- Begin function TransformDecision.250
	.p2align	4, 0x90
	.type	TransformDecision.250,@function
TransformDecision.250:                  # @TransformDecision.250
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$717911836, -76(%rbp)   # imm = 0x2ACA771C
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB291_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -68(%rbp)
	jmp	.LBB291_3
.LBB291_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -68(%rbp)
.LBB291_3:                              # %if.end
	jmp	.LBB291_4
.LBB291_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB291_6 Depth 2
                                        #       Child Loop BB291_8 Depth 3
                                        #         Child Loop BB291_10 Depth 4
                                        #           Child Loop BB291_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB291_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB291_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-88(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -64(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -40(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB291_6:                              # %for.cond3
                                        #   Parent Loop BB291_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB291_8 Depth 3
                                        #         Child Loop BB291_10 Depth 4
                                        #           Child Loop BB291_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB291_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB291_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB291_8:                              # %for.cond8
                                        #   Parent Loop BB291_4 Depth=1
                                        #     Parent Loop BB291_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB291_10 Depth 4
                                        #           Child Loop BB291_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB291_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB291_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-50(%rbp), %edx
	movl	-88(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-54(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-40(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB291_10:                             # %for.cond13
                                        #   Parent Loop BB291_4 Depth=1
                                        #     Parent Loop BB291_6 Depth=2
                                        #       Parent Loop BB291_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB291_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB291_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB291_10 Depth=4
	movl	$0, -24(%rbp)
.LBB291_12:                             # %for.cond17
                                        #   Parent Loop BB291_4 Depth=1
                                        #     Parent Loop BB291_6 Depth=2
                                        #       Parent Loop BB291_8 Depth=3
                                        #         Parent Loop BB291_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB291_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB291_12 Depth=5
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-72(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB291_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB291_12
.LBB291_15:                             # %for.end
                                        #   in Loop: Header=BB291_10 Depth=4
	jmp	.LBB291_16
.LBB291_16:                             # %for.inc38
                                        #   in Loop: Header=BB291_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB291_10
.LBB291_17:                             # %for.end40
                                        #   in Loop: Header=BB291_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB291_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB291_8
.LBB291_19:                             # %for.end44
                                        #   in Loop: Header=BB291_6 Depth=2
	jmp	.LBB291_20
.LBB291_20:                             # %for.inc45
                                        #   in Loop: Header=BB291_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB291_6
.LBB291_21:                             # %for.end47
                                        #   in Loop: Header=BB291_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB291_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB291_4
.LBB291_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB291_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB291_28
.LBB291_25:                             # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB291_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB291_28
.LBB291_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-32(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB291_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$717911836, -76(%rbp)   # imm = 0x2ACA771C
	jne	.LBB291_30
.LBB291_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB291_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB291_29
.Lfunc_end291:
	.size	TransformDecision.250, .Lfunc_end291-TransformDecision.250
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.251   # -- Begin function TransformDecision.251
	.p2align	4, 0x90
	.type	TransformDecision.251,@function
TransformDecision.251:                  # @TransformDecision.251
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$868621358, -76(%rbp)   # imm = 0x33C61C2E
	movl	%edi, -48(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -40(%rbp)
	cmpl	$-1, -48(%rbp)
	jne	.LBB292_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB292_3
.LBB292_2:                              # %if.else
	movl	-48(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB292_3:                              # %if.end
	jmp	.LBB292_4
.LBB292_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB292_6 Depth 2
                                        #       Child Loop BB292_8 Depth 3
                                        #         Child Loop BB292_10 Depth 4
                                        #           Child Loop BB292_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB292_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB292_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-88(%rbp), %rdx
	leaq	-72(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -60(%rbp)
	movl	$0, -32(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB292_6:                              # %for.cond3
                                        #   Parent Loop BB292_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB292_8 Depth 3
                                        #         Child Loop BB292_10 Depth 4
                                        #           Child Loop BB292_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB292_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB292_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB292_8:                              # %for.cond8
                                        #   Parent Loop BB292_4 Depth=1
                                        #     Parent Loop BB292_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB292_10 Depth 4
                                        #           Child Loop BB292_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB292_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB292_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -80(%rbp)
	movl	-20(%rbp), %edi
	movl	-16(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-88(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB292_10:                             # %for.cond13
                                        #   Parent Loop BB292_4 Depth=1
                                        #     Parent Loop BB292_6 Depth=2
                                        #       Parent Loop BB292_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB292_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB292_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB292_10 Depth=4
	movl	$0, -28(%rbp)
.LBB292_12:                             # %for.cond17
                                        #   Parent Loop BB292_4 Depth=1
                                        #     Parent Loop BB292_6 Depth=2
                                        #       Parent Loop BB292_8 Depth=3
                                        #         Parent Loop BB292_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB292_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB292_12 Depth=5
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-80(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB292_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB292_12
.LBB292_15:                             # %for.end
                                        #   in Loop: Header=BB292_10 Depth=4
	jmp	.LBB292_16
.LBB292_16:                             # %for.inc38
                                        #   in Loop: Header=BB292_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB292_10
.LBB292_17:                             # %for.end40
                                        #   in Loop: Header=BB292_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB292_8 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB292_8
.LBB292_19:                             # %for.end44
                                        #   in Loop: Header=BB292_6 Depth=2
	jmp	.LBB292_20
.LBB292_20:                             # %for.inc45
                                        #   in Loop: Header=BB292_6 Depth=2
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB292_6
.LBB292_21:                             # %for.end47
                                        #   in Loop: Header=BB292_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB292_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB292_4
.LBB292_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB292_25
# %bb.24:                               # %if.then56
	movl	$1, -44(%rbp)
	jmp	.LBB292_28
.LBB292_25:                             # %if.else57
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB292_27
# %bb.26:                               # %if.then60
	movl	$1, -44(%rbp)
	jmp	.LBB292_28
.LBB292_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-36(%rbp), %eax
	addl	-40(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -44(%rbp)
.LBB292_28:                             # %return
	movl	-44(%rbp), %ebx
	cmpl	$868621358, -76(%rbp)   # imm = 0x33C61C2E
	jne	.LBB292_30
.LBB292_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB292_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB292_29
.Lfunc_end292:
	.size	TransformDecision.251, .Lfunc_end292-TransformDecision.251
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.252 # -- Begin function ChromaResidualCoding.252
	.p2align	4, 0x90
	.type	ChromaResidualCoding.252,@function
ChromaResidualCoding.252:               # @ChromaResidualCoding.252
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$147289328, -72(%rbp)   # imm = 0x8C774F0
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB293_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB293_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB293_3:                              # %lor.end
.LBB293_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -76(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB293_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_7 Depth 2
                                        #       Child Loop BB293_9 Depth 3
                                        #     Child Loop BB293_16 Depth 2
                                        #       Child Loop BB293_18 Depth 3
                                        #     Child Loop BB293_33 Depth 2
                                        #       Child Loop BB293_35 Depth 3
                                        #     Child Loop BB293_43 Depth 2
                                        #       Child Loop BB293_45 Depth 3
                                        #     Child Loop BB293_58 Depth 2
                                        #       Child Loop BB293_60 Depth 3
                                        #     Child Loop BB293_87 Depth 2
                                        #       Child Loop BB293_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB293_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB293_5 Depth=1
	movl	$0, -60(%rbp)
	movl	$0, -24(%rbp)
.LBB293_7:                              # %for.cond5
                                        #   Parent Loop BB293_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB293_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB293_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB293_7 Depth=2
	movl	$0, -20(%rbp)
.LBB293_9:                              # %for.cond8
                                        #   Parent Loop BB293_5 Depth=1
                                        #     Parent Loop BB293_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB293_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB293_9 Depth=3
	movslq	-76(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-68(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-20(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-50(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-68(%rbp), %r9d
	movw	-54(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-52(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB293_9 Depth=3
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB293_9
.LBB293_12:                             # %for.end
                                        #   in Loop: Header=BB293_7 Depth=2
	jmp	.LBB293_13
.LBB293_13:                             # %for.inc18
                                        #   in Loop: Header=BB293_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB293_7
.LBB293_14:                             # %for.end20
                                        #   in Loop: Header=BB293_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB293_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB293_5 Depth=1
	movl	$0, -8(%rbp)
.LBB293_16:                             # %for.cond21
                                        #   Parent Loop BB293_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB293_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB293_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB293_16 Depth=2
	movl	$0, -4(%rbp)
.LBB293_18:                             # %for.cond26
                                        #   Parent Loop BB293_5 Depth=1
                                        #     Parent Loop BB293_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB293_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB293_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB293_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB293_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB293_25
.LBB293_21:                             # %if.else
                                        #   in Loop: Header=BB293_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB293_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB293_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB293_24
.LBB293_23:                             # %if.else52
                                        #   in Loop: Header=BB293_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB293_24:                             # %if.end
                                        #   in Loop: Header=BB293_18 Depth=3
	jmp	.LBB293_25
.LBB293_25:                             # %if.end57
                                        #   in Loop: Header=BB293_18 Depth=3
	jmp	.LBB293_26
.LBB293_26:                             # %for.inc58
                                        #   in Loop: Header=BB293_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_18
.LBB293_27:                             # %for.end59
                                        #   in Loop: Header=BB293_16 Depth=2
	jmp	.LBB293_28
.LBB293_28:                             # %for.inc60
                                        #   in Loop: Header=BB293_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_16
.LBB293_29:                             # %for.end62
                                        #   in Loop: Header=BB293_5 Depth=1
	jmp	.LBB293_74
.LBB293_30:                             # %if.else63
                                        #   in Loop: Header=BB293_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB293_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB293_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB293_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB293_5 Depth=1
	movl	$0, -8(%rbp)
.LBB293_33:                             # %for.cond69
                                        #   Parent Loop BB293_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB293_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB293_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB293_33 Depth=2
	movl	$0, -4(%rbp)
.LBB293_35:                             # %for.cond73
                                        #   Parent Loop BB293_5 Depth=1
                                        #     Parent Loop BB293_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB293_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB293_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB293_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_35
.LBB293_38:                             # %for.end83
                                        #   in Loop: Header=BB293_33 Depth=2
	jmp	.LBB293_39
.LBB293_39:                             # %for.inc84
                                        #   in Loop: Header=BB293_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_33
.LBB293_40:                             # %for.end86
                                        #   in Loop: Header=BB293_5 Depth=1
	jmp	.LBB293_73
.LBB293_41:                             # %if.else87
                                        #   in Loop: Header=BB293_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB293_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB293_5 Depth=1
	movl	$0, -8(%rbp)
.LBB293_43:                             # %for.cond90
                                        #   Parent Loop BB293_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB293_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB293_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB293_43 Depth=2
	movl	$0, -4(%rbp)
.LBB293_45:                             # %for.cond95
                                        #   Parent Loop BB293_5 Depth=1
                                        #     Parent Loop BB293_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB293_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB293_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB293_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB293_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB293_52
.LBB293_48:                             # %if.else119
                                        #   in Loop: Header=BB293_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB293_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB293_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB293_51
.LBB293_50:                             # %if.else127
                                        #   in Loop: Header=BB293_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB293_51:                             # %if.end132
                                        #   in Loop: Header=BB293_45 Depth=3
	jmp	.LBB293_52
.LBB293_52:                             # %if.end133
                                        #   in Loop: Header=BB293_45 Depth=3
	jmp	.LBB293_53
.LBB293_53:                             # %for.inc134
                                        #   in Loop: Header=BB293_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_45
.LBB293_54:                             # %for.end136
                                        #   in Loop: Header=BB293_43 Depth=2
	jmp	.LBB293_55
.LBB293_55:                             # %for.inc137
                                        #   in Loop: Header=BB293_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_43
.LBB293_56:                             # %for.end139
                                        #   in Loop: Header=BB293_5 Depth=1
	jmp	.LBB293_72
.LBB293_57:                             # %if.else140
                                        #   in Loop: Header=BB293_5 Depth=1
	movl	$0, -8(%rbp)
.LBB293_58:                             # %for.cond141
                                        #   Parent Loop BB293_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB293_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB293_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB293_58 Depth=2
	movl	$0, -4(%rbp)
.LBB293_60:                             # %for.cond146
                                        #   Parent Loop BB293_5 Depth=1
                                        #     Parent Loop BB293_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB293_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB293_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB293_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB293_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB293_67
.LBB293_63:                             # %if.else175
                                        #   in Loop: Header=BB293_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB293_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB293_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB293_66
.LBB293_65:                             # %if.else188
                                        #   in Loop: Header=BB293_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB293_66:                             # %if.end198
                                        #   in Loop: Header=BB293_60 Depth=3
	jmp	.LBB293_67
.LBB293_67:                             # %if.end199
                                        #   in Loop: Header=BB293_60 Depth=3
	jmp	.LBB293_68
.LBB293_68:                             # %for.inc200
                                        #   in Loop: Header=BB293_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_60
.LBB293_69:                             # %for.end202
                                        #   in Loop: Header=BB293_58 Depth=2
	jmp	.LBB293_70
.LBB293_70:                             # %for.inc203
                                        #   in Loop: Header=BB293_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_58
.LBB293_71:                             # %for.end205
                                        #   in Loop: Header=BB293_5 Depth=1
	jmp	.LBB293_72
.LBB293_72:                             # %if.end206
                                        #   in Loop: Header=BB293_5 Depth=1
	jmp	.LBB293_73
.LBB293_73:                             # %if.end207
                                        #   in Loop: Header=BB293_5 Depth=1
	jmp	.LBB293_74
.LBB293_74:                             # %if.end208
                                        #   in Loop: Header=BB293_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB293_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB293_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB293_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB293_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB293_100
.LBB293_77:                             # %if.else215
                                        #   in Loop: Header=BB293_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB293_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB293_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB293_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB293_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB293_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB293_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB293_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB293_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB293_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB293_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB293_84
.LBB293_83:                             # %if.then247
                                        #   in Loop: Header=BB293_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB293_85
.LBB293_84:                             # %if.else249
                                        #   in Loop: Header=BB293_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB293_85:                             # %if.end251
                                        #   in Loop: Header=BB293_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB293_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB293_5 Depth=1
	movl	$0, -8(%rbp)
.LBB293_87:                             # %for.cond255
                                        #   Parent Loop BB293_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB293_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB293_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB293_87 Depth=2
	movl	$0, -4(%rbp)
.LBB293_89:                             # %for.cond260
                                        #   Parent Loop BB293_5 Depth=1
                                        #     Parent Loop BB293_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB293_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB293_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB293_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB293_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB293_93
.LBB293_92:                             # %if.else277
                                        #   in Loop: Header=BB293_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB293_93:                             # %if.end287
                                        #   in Loop: Header=BB293_89 Depth=3
	jmp	.LBB293_94
.LBB293_94:                             # %for.inc288
                                        #   in Loop: Header=BB293_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_89
.LBB293_95:                             # %for.end290
                                        #   in Loop: Header=BB293_87 Depth=2
	jmp	.LBB293_96
.LBB293_96:                             # %for.inc291
                                        #   in Loop: Header=BB293_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_87
.LBB293_97:                             # %for.end293
                                        #   in Loop: Header=BB293_5 Depth=1
	jmp	.LBB293_98
.LBB293_98:                             # %if.end294
                                        #   in Loop: Header=BB293_5 Depth=1
	jmp	.LBB293_99
.LBB293_99:                             # %if.end295
                                        #   in Loop: Header=BB293_5 Depth=1
	jmp	.LBB293_100
.LBB293_100:                            # %if.end296
                                        #   in Loop: Header=BB293_5 Depth=1
	jmp	.LBB293_101
.LBB293_101:                            # %for.inc297
                                        #   in Loop: Header=BB293_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB293_5
.LBB293_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB293_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB293_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB293_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB293_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB293_104 Depth=1
	movl	$0, -4(%rbp)
.LBB293_106:                            # %for.cond312
                                        #   Parent Loop BB293_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB293_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -64(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	-64(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB293_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_110
.LBB293_109:                            # %cond.false
                                        #   in Loop: Header=BB293_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB293_110:                            # %cond.end
                                        #   in Loop: Header=BB293_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB293_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB293_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB293_116
.LBB293_112:                            # %cond.false358
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB293_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_115
.LBB293_114:                            # %cond.false367
                                        #   in Loop: Header=BB293_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-16(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB293_115:                            # %cond.end373
                                        #   in Loop: Header=BB293_106 Depth=2
.LBB293_116:                            # %cond.end375
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB293_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB293_119
.LBB293_118:                            # %cond.false394
                                        #   in Loop: Header=BB293_106 Depth=2
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB293_119:                            # %cond.end400
                                        #   in Loop: Header=BB293_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB293_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB293_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB293_125
.LBB293_121:                            # %cond.false406
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%eax, %eax
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB293_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_124
.LBB293_123:                            # %cond.false415
                                        #   in Loop: Header=BB293_106 Depth=2
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB293_124:                            # %cond.end421
                                        #   in Loop: Header=BB293_106 Depth=2
.LBB293_125:                            # %cond.end423
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB293_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB293_128
.LBB293_127:                            # %cond.false443
                                        #   in Loop: Header=BB293_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB293_128:                            # %cond.end449
                                        #   in Loop: Header=BB293_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB293_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB293_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB293_134
.LBB293_130:                            # %cond.false455
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB293_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB293_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB293_133
.LBB293_132:                            # %cond.false464
                                        #   in Loop: Header=BB293_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB293_133:                            # %cond.end470
                                        #   in Loop: Header=BB293_106 Depth=2
.LBB293_134:                            # %cond.end472
                                        #   in Loop: Header=BB293_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB293_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB293_106
.LBB293_136:                            # %for.end487
                                        #   in Loop: Header=BB293_104 Depth=1
	jmp	.LBB293_137
.LBB293_137:                            # %for.inc488
                                        #   in Loop: Header=BB293_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB293_104
.LBB293_138:                            # %for.end490
	jmp	.LBB293_139
.LBB293_139:                            # %if.end491
	cmpl	$147289328, -72(%rbp)   # imm = 0x8C774F0
	jne	.LBB293_141
.LBB293_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB293_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB293_140
.Lfunc_end293:
	.size	ChromaResidualCoding.252, .Lfunc_end293-ChromaResidualCoding.252
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff8x8_CABAC.253 # -- Begin function writeLumaCoeff8x8_CABAC.253
	.p2align	4, 0x90
	.type	writeLumaCoeff8x8_CABAC.253,@function
writeLumaCoeff8x8_CABAC.253:            # @writeLumaCoeff8x8_CABAC.253
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	xorl	%eax, %eax
	movl	$283294139, -60(%rbp)   # imm = 0x10E2B9BB
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	movq	%rcx, -56(%rbp)
	movq	img, %rcx
	addq	$14176, %rcx            # imm = 0x3760
	movq	-56(%rbp), %rdx
	movslq	(%rdx), %rdx
	imulq	$48, %rdx, %rdx
	addq	%rdx, %rcx
	movq	%rcx, -24(%rbp)
	movq	img, %rcx
	movq	14160(%rcx), %rcx
	movq	%rcx, -72(%rbp)
	movq	input, %rcx
	movslq	2364(%rcx), %rcx
	movq	assignSE2partition(,%rcx,8), %rcx
	movq	%rcx, -80(%rbp)
	movq	-56(%rbp), %rcx
	addq	$20, %rcx
	movq	%rcx, -96(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	%rcx, -88(%rbp)
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	%rcx, -104(%rbp)
	movl	-28(%rbp), %ecx
	andl	$1, %ecx
	cmpl	$0, %ecx
	movl	$2, %ecx
	movl	$2, %edx
	cmovel	%eax, %edx
	movq	img, %rsi
	movl	%edx, 72(%rsi)
	movl	-28(%rbp), %edx
	cmpl	$2, %edx
	cmovll	%eax, %ecx
	movq	img, %rax
	movl	%ecx, 76(%rax)
	movl	$1, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB294_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$64, -12(%rbp)
	jg	.LBB294_3
# %bb.2:                                # %land.rhs
                                        #   in Loop: Header=BB294_1 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB294_3:                              # %land.end
                                        #   in Loop: Header=BB294_1 Depth=1
	testb	$1, %al
	jne	.LBB294_4
	jmp	.LBB294_12
.LBB294_4:                              # %for.body
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	-88(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-104(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$2, 24(%rax)
	cmpl	$0, -12(%rbp)
	jne	.LBB294_6
# %bb.5:                                # %cond.true
                                        #   in Loop: Header=BB294_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB294_7
.LBB294_6:                              # %cond.false
                                        #   in Loop: Header=BB294_1 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB294_7:                              # %cond.end
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB294_9
# %bb.8:                                # %if.then
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	jmp	.LBB294_10
.LBB294_9:                              # %if.else
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	-72(%rbp), %rax
	movq	24(%rax), %rax
	movq	-80(%rbp), %rcx
	movslq	72(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
.LBB294_10:                             # %if.end
                                        #   in Loop: Header=BB294_1 Depth=1
	movq	-48(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-48(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB294_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB294_1
.LBB294_12:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$283294139, -60(%rbp)   # imm = 0x10E2B9BB
	jne	.LBB294_14
.LBB294_13:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB294_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB294_13
.Lfunc_end294:
	.size	writeLumaCoeff8x8_CABAC.253, .Lfunc_end294-writeLumaCoeff8x8_CABAC.253
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.254    # -- Begin function start_macroblock.254
	.p2align	4, 0x90
	.type	start_macroblock.254,@function
start_macroblock.254:                   # @start_macroblock.254
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$1842485193, -88(%rbp)  # imm = 0x6DD217C9
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB295_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB295_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB295_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB295_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB295_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB295_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB295_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB295_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB295_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB295_8:                              # %if.end
                                        #   in Loop: Header=BB295_5 Depth=1
	jmp	.LBB295_9
.LBB295_9:                              # %for.inc
                                        #   in Loop: Header=BB295_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_5
.LBB295_10:                             # %for.end
	jmp	.LBB295_11
.LBB295_11:                             # %if.end19
	jmp	.LBB295_12
.LBB295_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB295_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB295_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB295_16
.LBB295_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB295_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB295_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB295_97
.LBB295_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB295_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB295_21
.LBB295_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB295_96
.LBB295_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB295_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB295_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB295_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB295_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB295_34
.LBB295_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB295_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB295_32
.LBB295_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB295_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB295_31
.LBB295_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB295_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB295_33
.LBB295_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB295_33:                             # %if.end112
	jmp	.LBB295_34
.LBB295_34:                             # %if.end113
	jmp	.LBB295_39
.LBB295_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB295_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB295_38
.LBB295_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB295_38:                             # %if.end125
	jmp	.LBB295_39
.LBB295_39:                             # %if.end126
	jmp	.LBB295_47
.LBB295_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB295_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB295_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB295_44
.LBB295_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB295_44:                             # %if.end140
	jmp	.LBB295_46
.LBB295_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB295_46:                             # %if.end145
	jmp	.LBB295_47
.LBB295_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB295_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB295_93
.LBB295_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB295_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB295_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB295_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB295_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB295_74
.LBB295_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB295_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB295_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB295_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB295_73
.LBB295_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB295_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB295_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB295_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB295_72
.LBB295_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB295_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB295_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB295_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB295_71
.LBB295_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB295_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB295_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB295_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB295_70:                             # %if.end223
	jmp	.LBB295_71
.LBB295_71:                             # %if.end224
	jmp	.LBB295_72
.LBB295_72:                             # %if.end225
	jmp	.LBB295_73
.LBB295_73:                             # %if.end226
	jmp	.LBB295_74
.LBB295_74:                             # %if.end227
	jmp	.LBB295_75
.LBB295_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB295_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB295_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB295_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB295_82
.LBB295_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB295_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB295_81:                             # %if.end256
	jmp	.LBB295_82
.LBB295_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB295_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB295_88
.LBB295_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB295_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB295_87
.LBB295_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB295_87:                             # %if.end292
	jmp	.LBB295_88
.LBB295_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB295_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB295_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB295_92
.LBB295_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB295_92:                             # %if.end305
	jmp	.LBB295_94
.LBB295_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB295_94:                             # %if.end309
	jmp	.LBB295_95
.LBB295_95:                             # %if.end310
	jmp	.LBB295_96
.LBB295_96:                             # %if.end311
	jmp	.LBB295_97
.LBB295_97:                             # %if.end312
	jmp	.LBB295_102
.LBB295_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB295_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB295_101
.LBB295_100:                            # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB295_101:                            # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB295_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB295_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB295_105
.LBB295_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB295_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB295_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB295_107:                            # %if.end359
	movl	$0, -20(%rbp)
.LBB295_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_110 Depth 2
                                        #       Child Loop BB295_112 Depth 3
                                        #         Child Loop BB295_114 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB295_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB295_108 Depth=1
	movl	$0, -16(%rbp)
.LBB295_110:                            # %for.cond364
                                        #   Parent Loop BB295_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB295_112 Depth 3
                                        #         Child Loop BB295_114 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB295_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB295_110 Depth=2
	movl	$0, -12(%rbp)
.LBB295_112:                            # %for.cond368
                                        #   Parent Loop BB295_108 Depth=1
                                        #     Parent Loop BB295_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB295_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB295_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB295_112 Depth=3
	movl	$0, -36(%rbp)
.LBB295_114:                            # %for.cond372
                                        #   Parent Loop BB295_108 Depth=1
                                        #     Parent Loop BB295_110 Depth=2
                                        #       Parent Loop BB295_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB295_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB295_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB295_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB295_114
.LBB295_117:                            # %for.end388
                                        #   in Loop: Header=BB295_112 Depth=3
	jmp	.LBB295_118
.LBB295_118:                            # %for.inc389
                                        #   in Loop: Header=BB295_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_112
.LBB295_119:                            # %for.end391
                                        #   in Loop: Header=BB295_110 Depth=2
	jmp	.LBB295_120
.LBB295_120:                            # %for.inc392
                                        #   in Loop: Header=BB295_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB295_110
.LBB295_121:                            # %for.end394
                                        #   in Loop: Header=BB295_108 Depth=1
	jmp	.LBB295_122
.LBB295_122:                            # %for.inc395
                                        #   in Loop: Header=BB295_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB295_108
.LBB295_123:                            # %for.end397
	movl	$0, -16(%rbp)
.LBB295_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_126 Depth 2
                                        #       Child Loop BB295_128 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB295_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB295_124 Depth=1
	movl	$0, -12(%rbp)
.LBB295_126:                            # %for.cond402
                                        #   Parent Loop BB295_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB295_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB295_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB295_126 Depth=2
	movl	$0, -20(%rbp)
.LBB295_128:                            # %for.cond406
                                        #   Parent Loop BB295_124 Depth=1
                                        #     Parent Loop BB295_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -20(%rbp)
	jge	.LBB295_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB295_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB295_128 Depth=3
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB295_128
.LBB295_131:                            # %for.end432
                                        #   in Loop: Header=BB295_126 Depth=2
	jmp	.LBB295_132
.LBB295_132:                            # %for.inc433
                                        #   in Loop: Header=BB295_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_126
.LBB295_133:                            # %for.end435
                                        #   in Loop: Header=BB295_124 Depth=1
	jmp	.LBB295_134
.LBB295_134:                            # %for.inc436
                                        #   in Loop: Header=BB295_124 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB295_124
.LBB295_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -20(%rbp)
.LBB295_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB295_138 Depth 2
                                        #       Child Loop BB295_140 Depth 3
                                        #         Child Loop BB295_142 Depth 4
	cmpl	$2, -20(%rbp)
	jge	.LBB295_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB295_136 Depth=1
	movl	$0, -16(%rbp)
.LBB295_138:                            # %for.cond443
                                        #   Parent Loop BB295_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB295_140 Depth 3
                                        #         Child Loop BB295_142 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB295_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB295_138 Depth=2
	movl	$0, -12(%rbp)
.LBB295_140:                            # %for.cond447
                                        #   Parent Loop BB295_136 Depth=1
                                        #     Parent Loop BB295_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB295_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB295_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB295_140 Depth=3
	movl	$0, -36(%rbp)
.LBB295_142:                            # %for.cond451
                                        #   Parent Loop BB295_136 Depth=1
                                        #     Parent Loop BB295_138 Depth=2
                                        #       Parent Loop BB295_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB295_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB295_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-20(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB295_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB295_142
.LBB295_145:                            # %for.end465
                                        #   in Loop: Header=BB295_140 Depth=3
	jmp	.LBB295_146
.LBB295_146:                            # %for.inc466
                                        #   in Loop: Header=BB295_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_140
.LBB295_147:                            # %for.end468
                                        #   in Loop: Header=BB295_138 Depth=2
	jmp	.LBB295_148
.LBB295_148:                            # %for.inc469
                                        #   in Loop: Header=BB295_138 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB295_138
.LBB295_149:                            # %for.end471
                                        #   in Loop: Header=BB295_136 Depth=1
	jmp	.LBB295_150
.LBB295_150:                            # %for.inc472
                                        #   in Loop: Header=BB295_136 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB295_136
.LBB295_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB295_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB295_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB295_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB295_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_152
.LBB295_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB295_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB295_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB295_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB295_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB295_156
.LBB295_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB295_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB295_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB295_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB295_166
.LBB295_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB295_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB295_165:                            # %if.end520
	jmp	.LBB295_166
.LBB295_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB295_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB295_168:                            # %if.end536
	cmpl	$1842485193, -88(%rbp)  # imm = 0x6DD217C9
	jne	.LBB295_170
.LBB295_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB295_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB295_169
.Lfunc_end295:
	.size	start_macroblock.254, .Lfunc_end295-start_macroblock.254
	.cfi_endproc
                                        # -- End function
	.globl	writeMBLayer.255        # -- Begin function writeMBLayer.255
	.p2align	4, 0x90
	.type	writeMBLayer.255,@function
writeMBLayer.255:                       # @writeMBLayer.255
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$120, %rsp
	.cfi_offset %rbx, -24
	movl	$668904503, -100(%rbp)  # imm = 0x27DEAC37
	movl	%edi, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-68(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	cmpl	$0, -68(%rbp)
	je	.LBB296_2
# %bb.1:                                # %cond.true
	movq	img, %rax
	movq	14168(%rax), %rax
	movl	-68(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	jmp	.LBB296_3
.LBB296_2:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB296_3
.LBB296_3:                              # %cond.end
	movq	%rax, -120(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movl	$0, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB296_5
# %bb.4:                                # %cond.true9
	xorl	%eax, %eax
	jmp	.LBB296_9
.LBB296_5:                              # %cond.false10
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB296_7
# %bb.6:                                # %cond.true11
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	setne	%al
	xorb	$-1, %al
	andb	$1, %al
	movzbl	%al, %eax
	jmp	.LBB296_8
.LBB296_7:                              # %cond.false13
	movl	$1, %eax
	jmp	.LBB296_8
.LBB296_8:                              # %cond.end14
.LBB296_9:                              # %cond.end16
	movl	%eax, -76(%rbp)
	movl	$0, -72(%rbp)
	movq	$0, -88(%rbp)
	movl	$0, -60(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB296_25
# %bb.10:                               # %if.then
	xorl	%ecx, %ecx
	movl	-68(%rbp), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	cmpl	%edx, %ecx
	jne	.LBB296_12
# %bb.11:                               # %if.then21
	movl	$1, -60(%rbp)
	movl	$0, -72(%rbp)
	jmp	.LBB296_24
.LBB296_12:                             # %if.else
	movq	-120(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB296_14
# %bb.13:                               # %cond.true24
	xorl	%eax, %eax
	testb	$1, %al
	jne	.LBB296_17
	jmp	.LBB296_18
.LBB296_14:                             # %cond.false25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB296_16
# %bb.15:                               # %cond.true28
	movq	-120(%rbp), %rax
	cmpl	$0, 460(%rax)
	jne	.LBB296_18
	jmp	.LBB296_17
.LBB296_16:                             # %cond.false31
	movb	$1, %al
	testb	$1, %al
	jne	.LBB296_17
	jmp	.LBB296_18
.LBB296_17:                             # %if.then32
	movl	$1, -60(%rbp)
.LBB296_18:                             # %if.end
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB296_20
# %bb.19:                               # %if.then40
	movq	-88(%rbp), %rax
	cmpl	$0, 72(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
	jmp	.LBB296_23
.LBB296_20:                             # %if.else43
	xorl	%eax, %eax
	movq	-88(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB296_22
# %bb.21:                               # %land.rhs
	movq	-88(%rbp), %rax
	cmpl	$0, 460(%rax)
	sete	%al
.LBB296_22:                             # %land.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -72(%rbp)
.LBB296_23:                             # %if.end50
	jmp	.LBB296_24
.LBB296_24:                             # %if.end51
	jmp	.LBB296_25
.LBB296_25:                             # %if.end52
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB296_28
# %bb.26:                               # %lor.lhs.false
	movq	-32(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB296_28
# %bb.27:                               # %lor.rhs
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB296_28:                             # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 528(%rcx)
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB296_44
# %bb.29:                               # %if.then68
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB296_40
# %bb.30:                               # %land.lhs.true
	cmpl	$0, -76(%rbp)
	jne	.LBB296_40
# %bb.31:                               # %if.then72
	cmpl	$0, -60(%rbp)
	je	.LBB296_39
# %bb.32:                               # %if.then74
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB296_34
# %bb.33:                               # %if.then78
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB296_35
.LBB296_34:                             # %if.else79
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB296_35:                             # %if.end80
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB296_37
# %bb.36:                               # %if.then84
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB296_38
.LBB296_37:                             # %if.else88
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB296_38:                             # %if.end90
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB296_39:                             # %if.end96
	jmp	.LBB296_40
.LBB296_40:                             # %if.end97
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB296_42
# %bb.41:                               # %if.then105
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB296_43
.LBB296_42:                             # %if.else107
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB296_43:                             # %if.end109
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB296_89
.LBB296_44:                             # %if.else120
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB296_65
# %bb.45:                               # %if.then124
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB296_49
# %bb.46:                               # %land.lhs.true127
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	je	.LBB296_48
# %bb.47:                               # %lor.lhs.false132
	cmpl	$0, -72(%rbp)
	je	.LBB296_49
.LBB296_48:                             # %if.then134
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movl	%eax, -92(%rbp)
	movb	$0, %al
	callq	field_flag_inference
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movl	-92(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 532(%rcx)
.LBB296_49:                             # %if.end139
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	460(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_skip_flagInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB296_60
# %bb.50:                               # %land.lhs.true158
	cmpl	$0, -76(%rbp)
	jne	.LBB296_60
# %bb.51:                               # %if.then160
	cmpl	$0, -60(%rbp)
	je	.LBB296_59
# %bb.52:                               # %if.then162
	movq	-32(%rbp), %rax
	movl	532(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB296_54
# %bb.53:                               # %if.then170
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB296_55
.LBB296_54:                             # %if.else172
	movq	-16(%rbp), %rax
	movabsq	$writeFieldModeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB296_55:                             # %if.end174
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB296_57
# %bb.56:                               # %if.then178
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB296_58
.LBB296_57:                             # %if.else186
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB296_58:                             # %if.end189
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB296_59:                             # %if.end198
	jmp	.LBB296_60
.LBB296_60:                             # %if.end199
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB296_63
# %bb.61:                               # %lor.lhs.false203
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB296_64
# %bb.62:                               # %land.lhs.true207
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB296_64
.LBB296_63:                             # %if.then211
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movabsq	$writeMB_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB296_64:                             # %if.end226
	jmp	.LBB296_88
.LBB296_65:                             # %if.else227
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB296_68
# %bb.66:                               # %lor.lhs.false231
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB296_76
# %bb.67:                               # %land.lhs.true235
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB296_76
.LBB296_68:                             # %if.then239
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB296_73
# %bb.69:                               # %land.lhs.true257
	cmpl	$0, -76(%rbp)
	jne	.LBB296_73
# %bb.70:                               # %if.then259
	cmpl	$0, -60(%rbp)
	je	.LBB296_72
# %bb.71:                               # %if.then261
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	movq	-16(%rbp), %rdx
	movl	%ecx, 4(%rdx)
	movq	-16(%rbp), %rcx
	movl	$2, (%rcx)
	movq	-16(%rbp), %rcx
	movabsq	$ue_linfo, %rdx
	movq	%rdx, 32(%rcx)
	movq	-32(%rbp), %rcx
	movl	532(%rcx), %ecx
	cmpl	$0, %ecx
	movl	$1, %ecx
	cmovnel	%ecx, %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB296_72:                             # %if.end281
	jmp	.LBB296_73
.LBB296_73:                             # %if.end282
	movq	-32(%rbp), %rdi
	callq	MBType2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB296_75
# %bb.74:                               # %if.then288
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
.LBB296_75:                             # %if.end290
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	jmp	.LBB296_87
.LBB296_76:                             # %if.else304
	movq	img, %rax
	movl	120(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 120(%rax)
	movl	$0, -64(%rbp)
.LBB296_77:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB296_79 Depth 2
	movl	-64(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB296_84
# %bb.78:                               # %for.body
                                        #   in Loop: Header=BB296_77 Depth=1
	movl	$0, -44(%rbp)
.LBB296_79:                             # %for.cond310
                                        #   Parent Loop BB296_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -44(%rbp)
	jge	.LBB296_82
# %bb.80:                               # %for.body313
                                        #   in Loop: Header=BB296_79 Depth=2
	movq	img, %rax
	movq	128(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.81:                               # %for.inc
                                        #   in Loop: Header=BB296_79 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB296_79
.LBB296_82:                             # %for.end
                                        #   in Loop: Header=BB296_77 Depth=1
	jmp	.LBB296_83
.LBB296_83:                             # %for.inc322
                                        #   in Loop: Header=BB296_77 Depth=1
	movl	-64(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
	jmp	.LBB296_77
.LBB296_84:                             # %for.end324
	movq	img, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jne	.LBB296_86
# %bb.85:                               # %if.then328
	movq	img, %rax
	movl	120(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	$0, 120(%rax)
.LBB296_86:                             # %if.end345
	jmp	.LBB296_87
.LBB296_87:                             # %if.end346
	jmp	.LBB296_88
.LBB296_88:                             # %if.end347
	jmp	.LBB296_89
.LBB296_89:                             # %if.end348
	xorl	%eax, %eax
	movq	-32(%rbp), %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB296_92
# %bb.90:                               # %land.lhs.true352
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB296_92
# %bb.91:                               # %land.rhs356
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	setne	%al
	xorb	$-1, %al
.LBB296_92:                             # %land.end360
	xorl	%ecx, %ecx
	testb	$1, %al
	movl	$1, %eax
	cmovnel	%ecx, %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 576(%rcx)
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB296_104
# %bb.93:                               # %if.then366
	movq	-128(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movslq	8(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movl	$0, -44(%rbp)
.LBB296_94:                             # %for.cond371
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -44(%rbp)
	jge	.LBB296_103
# %bb.95:                               # %for.body374
                                        #   in Loop: Header=BB296_94 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB296_97
# %bb.96:                               # %if.then378
                                        #   in Loop: Header=BB296_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB296_98
.LBB296_97:                             # %if.else380
                                        #   in Loop: Header=BB296_94 Depth=1
	movq	-16(%rbp), %rax
	movabsq	$writeB8_typeInfo_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB296_98:                             # %if.end382
                                        #   in Loop: Header=BB296_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	472(%rax,%rcx,4), %edi
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movl	488(%rax,%rcx,4), %esi
	callq	B8Mode2Value
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-16(%rbp), %rax
	movl	$2, (%rax)
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jne	.LBB296_100
# %bb.99:                               # %land.lhs.true406
                                        #   in Loop: Header=BB296_94 Depth=1
	movq	active_sps, %rax
	cmpl	$0, 1156(%rax)
	movb	$1, %al
	jne	.LBB296_101
.LBB296_100:                            # %lor.rhs409
                                        #   in Loop: Header=BB296_94 Depth=1
	movq	-32(%rbp), %rax
	movslq	-44(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	sete	%al
.LBB296_101:                            # %lor.end415
                                        #   in Loop: Header=BB296_94 Depth=1
	andb	$1, %al
	movzbl	%al, %eax
	movq	-32(%rbp), %rcx
	andl	576(%rcx), %eax
	movl	%eax, 576(%rcx)
# %bb.102:                              # %for.inc418
                                        #   in Loop: Header=BB296_94 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB296_94
.LBB296_103:                            # %for.end420
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-32(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
.LBB296_104:                            # %if.end427
	movq	-32(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB296_106
# %bb.105:                              # %lor.lhs.false431
	movq	-32(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB296_114
.LBB296_106:                            # %land.lhs.true435
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB296_114
# %bb.107:                              # %if.then437
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rax
	movl	$20, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB296_109
# %bb.108:                              # %if.then443
	movq	-16(%rbp), %rax
	movabsq	$ue_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB296_110
.LBB296_109:                            # %if.else445
	movq	-16(%rbp), %rax
	movabsq	$writeMB_transform_size_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB296_110:                            # %if.end447
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB296_112
# %bb.111:                              # %if.then451
	movq	-32(%rbp), %rax
	movl	572(%rax), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 20(%rcx)
	movq	-16(%rbp), %rax
	movl	$1, 12(%rax)
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rax
	movq	(%rax), %rsi
	callq	writeSyntaxElement2Buf_Fixed
	jmp	.LBB296_113
.LBB296_112:                            # %if.else457
	movq	-40(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-40(%rbp), %rsi
	callq	*%rax
.LBB296_113:                            # %if.end460
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	8(%rcx), %eax
	movl	%eax, 8(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB296_114:                            # %if.end469
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	writeIntra4x4Modes
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	-32(%rbp), %rax
	cmpl	$0, 528(%rax)
	je	.LBB296_117
# %bb.115:                              # %land.lhs.true474
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB296_117
# %bb.116:                              # %if.then477
	callq	writeChromaIntraPredMode
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB296_120
.LBB296_117:                            # %if.else480
	cmpl	$0, -96(%rbp)
	jne	.LBB296_119
# %bb.118:                              # %if.then482
	movq	-32(%rbp), %rax
	movl	$0, 524(%rax)
.LBB296_119:                            # %if.end483
	jmp	.LBB296_120
.LBB296_120:                            # %if.end484
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	je	.LBB296_123
# %bb.121:                              # %land.lhs.true488
	movq	-32(%rbp), %rax
	cmpl	$8, 72(%rax)
	je	.LBB296_123
# %bb.122:                              # %if.then492
	callq	writeMotionInfo2NAL
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB296_123:                            # %if.end495
	movq	-32(%rbp), %rax
	cmpl	$0, 72(%rax)
	jne	.LBB296_126
# %bb.124:                              # %lor.lhs.false499
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB296_129
# %bb.125:                              # %land.lhs.true503
	movq	-32(%rbp), %rax
	cmpl	$0, 460(%rax)
	je	.LBB296_129
.LBB296_126:                            # %if.then507
	callq	writeCBPandLumaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB296_128
# %bb.127:                              # %if.then513
	callq	writeChromaCoeff
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB296_128:                            # %if.end516
	jmp	.LBB296_129
.LBB296_129:                            # %if.end517
	movl	-20(%rbp), %ebx
	cmpl	$668904503, -100(%rbp)  # imm = 0x27DEAC37
	jne	.LBB296_131
.LBB296_130:
	movl	%ebx, %eax
	addq	$120, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB296_131:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB296_130
.Lfunc_end296:
	.size	writeMBLayer.255, .Lfunc_end296-writeMBLayer.255
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.256 # -- Begin function proceed2nextMacroblock.256
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.256,@function
proceed2nextMacroblock.256:             # @proceed2nextMacroblock.256
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$545589293, -28(%rbp)   # imm = 0x2085082D
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB297_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB297_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB297_9
.LBB297_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB297_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB297_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB297_7
.LBB297_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB297_7:                              # %if.end
	jmp	.LBB297_8
.LBB297_8:                              # %if.end48
	jmp	.LBB297_9
.LBB297_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB297_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB297_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB297_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB297_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB297_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB297_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB297_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB297_16
.LBB297_15:                             # %if.else86
                                        #   in Loop: Header=BB297_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB297_16:                             # %if.end94
                                        #   in Loop: Header=BB297_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB297_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB297_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB297_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB297_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB297_20
.LBB297_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB297_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB297_21
.LBB297_20:                             # %if.then107
                                        #   in Loop: Header=BB297_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB297_22
.LBB297_21:                             # %if.else114
                                        #   in Loop: Header=BB297_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB297_22:                             # %if.end121
                                        #   in Loop: Header=BB297_12 Depth=1
	jmp	.LBB297_23
.LBB297_23:                             # %if.end122
                                        #   in Loop: Header=BB297_12 Depth=1
	jmp	.LBB297_24
.LBB297_24:                             # %for.inc
                                        #   in Loop: Header=BB297_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB297_12
.LBB297_25:                             # %for.end
	jmp	.LBB297_34
.LBB297_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB297_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB297_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB297_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB297_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB297_32
.LBB297_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB297_32:                             # %if.end155
	jmp	.LBB297_33
.LBB297_33:                             # %if.end156
	jmp	.LBB297_34
.LBB297_34:                             # %if.end157
	jmp	.LBB297_35
.LBB297_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB297_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB297_38
.LBB297_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB297_38:                             # %if.end167
	cmpl	$545589293, -28(%rbp)   # imm = 0x2085082D
	jne	.LBB297_40
.LBB297_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB297_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB297_39
.Lfunc_end297:
	.size	proceed2nextMacroblock.256, .Lfunc_end297-proceed2nextMacroblock.256
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.257        # -- Begin function MBType2Value.257
	.p2align	4, 0x90
	.type	MBType2Value.257,@function
MBType2Value.257:                       # @MBType2Value.257
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1140196914, -36(%rbp)  # imm = 0x43F60632
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB298_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB298_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB298_4
.LBB298_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB298_26
.LBB298_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB298_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB298_26
.LBB298_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB298_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB298_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB298_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB298_26
.LBB298_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB298_26
.LBB298_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_26
.LBB298_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB298_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB298_26
.LBB298_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB298_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB298_17
.LBB298_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB298_26
.LBB298_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB298_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_26
.LBB298_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB298_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB298_26
.LBB298_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB298_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_26
.LBB298_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB298_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB298_26
.LBB298_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB298_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$1140196914, -36(%rbp)  # imm = 0x43F60632
	jne	.LBB298_28
.LBB298_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB298_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB298_27
.Lfunc_end298:
	.size	MBType2Value.257, .Lfunc_end298-MBType2Value.257
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.258 # -- Begin function SetModesAndRefframe.258
	.p2align	4, 0x90
	.type	SetModesAndRefframe.258,@function
SetModesAndRefframe.258:                # @SetModesAndRefframe.258
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1417678488, -60(%rbp)  # imm = 0x54800E98
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -40(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB299_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB299_12
.LBB299_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB299_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB299_11
.LBB299_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB299_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB299_10
.LBB299_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB299_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB299_9
.LBB299_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-40(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB299_9:                              # %if.end
	jmp	.LBB299_10
.LBB299_10:                             # %if.end86
	jmp	.LBB299_11
.LBB299_11:                             # %if.end87
	jmp	.LBB299_12
.LBB299_12:                             # %if.end88
	cmpl	$1417678488, -60(%rbp)  # imm = 0x54800E98
	jne	.LBB299_14
.LBB299_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB299_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB299_13
.Lfunc_end299:
	.size	SetModesAndRefframe.258, .Lfunc_end299-SetModesAndRefframe.258
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.259 # -- Begin function LumaPrediction4x4Bi.259
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.259,@function
LumaPrediction4x4Bi.259:                # @LumaPrediction4x4Bi.259
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1838861366, -76(%rbp)  # imm = 0x6D9ACC36
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -84(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB300_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB300_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB300_6
.LBB300_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB300_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB300_5:                              # %land.end
.LBB300_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB300_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB300_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB300_10
.LBB300_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB300_10
.LBB300_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB300_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB300_13
.LBB300_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB300_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB300_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB300_16
.LBB300_15:                             # %if.then
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB300_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB300_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB300_19
.LBB300_18:                             # %if.then39
	movl	-56(%rbp), %esi
	movl	-64(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB300_19:                             # %if.end52
	cmpl	$0, -80(%rbp)
	je	.LBB300_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB300_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB300_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_24 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB300_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB300_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB300_24:                             # %for.cond58
                                        #   Parent Loop BB300_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB300_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB300_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB300_24 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_24
.LBB300_27:                             # %for.end
                                        #   in Loop: Header=BB300_22 Depth=1
	jmp	.LBB300_28
.LBB300_28:                             # %for.inc96
                                        #   in Loop: Header=BB300_22 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_22
.LBB300_29:                             # %for.end98
	jmp	.LBB300_50
.LBB300_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB300_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB300_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_34 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB300_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB300_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB300_34:                             # %for.cond106
                                        #   Parent Loop BB300_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB300_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB300_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB300_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_34
.LBB300_37:                             # %for.end132
                                        #   in Loop: Header=BB300_32 Depth=1
	jmp	.LBB300_38
.LBB300_38:                             # %for.inc133
                                        #   in Loop: Header=BB300_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_32
.LBB300_39:                             # %for.end135
	jmp	.LBB300_49
.LBB300_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB300_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_43 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB300_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB300_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB300_43:                             # %for.cond141
                                        #   Parent Loop BB300_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB300_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB300_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB300_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_43
.LBB300_46:                             # %for.end167
                                        #   in Loop: Header=BB300_41 Depth=1
	jmp	.LBB300_47
.LBB300_47:                             # %for.inc168
                                        #   in Loop: Header=BB300_41 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_41
.LBB300_48:                             # %for.end170
	jmp	.LBB300_49
.LBB300_49:                             # %if.end171
	jmp	.LBB300_50
.LBB300_50:                             # %if.end172
	jmp	.LBB300_82
.LBB300_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB300_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB300_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_55 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB300_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB300_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB300_55:                             # %for.cond181
                                        #   Parent Loop BB300_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB300_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB300_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB300_55 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_55
.LBB300_58:                             # %for.end197
                                        #   in Loop: Header=BB300_53 Depth=1
	jmp	.LBB300_59
.LBB300_59:                             # %for.inc198
                                        #   in Loop: Header=BB300_53 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_53
.LBB300_60:                             # %for.end200
	jmp	.LBB300_81
.LBB300_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB300_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB300_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_65 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB300_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB300_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB300_65:                             # %for.cond209
                                        #   Parent Loop BB300_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB300_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB300_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB300_65 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_65
.LBB300_68:                             # %for.end222
                                        #   in Loop: Header=BB300_63 Depth=1
	jmp	.LBB300_69
.LBB300_69:                             # %for.inc223
                                        #   in Loop: Header=BB300_63 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_63
.LBB300_70:                             # %for.end225
	jmp	.LBB300_80
.LBB300_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB300_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB300_74 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB300_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB300_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB300_74:                             # %for.cond231
                                        #   Parent Loop BB300_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB300_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB300_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB300_74 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB300_74
.LBB300_77:                             # %for.end244
                                        #   in Loop: Header=BB300_72 Depth=1
	jmp	.LBB300_78
.LBB300_78:                             # %for.inc245
                                        #   in Loop: Header=BB300_72 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB300_72
.LBB300_79:                             # %for.end247
	jmp	.LBB300_80
.LBB300_80:                             # %if.end248
	jmp	.LBB300_81
.LBB300_81:                             # %if.end249
	jmp	.LBB300_82
.LBB300_82:                             # %if.end250
	cmpl	$1838861366, -76(%rbp)  # imm = 0x6D9ACC36
	jne	.LBB300_84
.LBB300_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB300_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB300_83
.Lfunc_end300:
	.size	LumaPrediction4x4Bi.259, .Lfunc_end300-LumaPrediction4x4Bi.259
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.260 # -- Begin function proceed2nextMacroblock.260
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.260,@function
proceed2nextMacroblock.260:             # @proceed2nextMacroblock.260
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$885083266, -28(%rbp)   # imm = 0x34C14C82
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB301_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB301_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB301_9
.LBB301_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB301_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB301_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB301_7
.LBB301_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB301_7:                              # %if.end
	jmp	.LBB301_8
.LBB301_8:                              # %if.end48
	jmp	.LBB301_9
.LBB301_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB301_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB301_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB301_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB301_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB301_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB301_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB301_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB301_16
.LBB301_15:                             # %if.else86
                                        #   in Loop: Header=BB301_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB301_16:                             # %if.end94
                                        #   in Loop: Header=BB301_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB301_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB301_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB301_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB301_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB301_20
.LBB301_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB301_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB301_21
.LBB301_20:                             # %if.then107
                                        #   in Loop: Header=BB301_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB301_22
.LBB301_21:                             # %if.else114
                                        #   in Loop: Header=BB301_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB301_22:                             # %if.end121
                                        #   in Loop: Header=BB301_12 Depth=1
	jmp	.LBB301_23
.LBB301_23:                             # %if.end122
                                        #   in Loop: Header=BB301_12 Depth=1
	jmp	.LBB301_24
.LBB301_24:                             # %for.inc
                                        #   in Loop: Header=BB301_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB301_12
.LBB301_25:                             # %for.end
	jmp	.LBB301_34
.LBB301_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB301_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB301_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB301_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB301_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB301_32
.LBB301_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB301_32:                             # %if.end155
	jmp	.LBB301_33
.LBB301_33:                             # %if.end156
	jmp	.LBB301_34
.LBB301_34:                             # %if.end157
	jmp	.LBB301_35
.LBB301_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB301_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB301_38
.LBB301_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB301_38:                             # %if.end167
	cmpl	$885083266, -28(%rbp)   # imm = 0x34C14C82
	jne	.LBB301_40
.LBB301_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB301_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB301_39
.Lfunc_end301:
	.size	proceed2nextMacroblock.260, .Lfunc_end301-proceed2nextMacroblock.260
	.cfi_endproc
                                        # -- End function
	.globl	ChromaResidualCoding.261 # -- Begin function ChromaResidualCoding.261
	.p2align	4, 0x90
	.type	ChromaResidualCoding.261,@function
ChromaResidualCoding.261:               # @ChromaResidualCoding.261
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$2035960428, -72(%rbp)  # imm = 0x795A4A6C
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB302_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB302_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB302_3:                              # %lor.end
.LBB302_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB302_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB302_7 Depth 2
                                        #       Child Loop BB302_9 Depth 3
                                        #     Child Loop BB302_16 Depth 2
                                        #       Child Loop BB302_18 Depth 3
                                        #     Child Loop BB302_33 Depth 2
                                        #       Child Loop BB302_35 Depth 3
                                        #     Child Loop BB302_43 Depth 2
                                        #       Child Loop BB302_45 Depth 3
                                        #     Child Loop BB302_58 Depth 2
                                        #       Child Loop BB302_60 Depth 3
                                        #     Child Loop BB302_87 Depth 2
                                        #       Child Loop BB302_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB302_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -24(%rbp)
.LBB302_7:                              # %for.cond5
                                        #   Parent Loop BB302_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB302_9 Depth 3
	movl	-24(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB302_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB302_7 Depth=2
	movl	$0, -16(%rbp)
.LBB302_9:                              # %for.cond8
                                        #   Parent Loop BB302_5 Depth=1
                                        #     Parent Loop BB302_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB302_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB302_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-80(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-24(%rbp), %edx
	movswl	-54(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-50(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB302_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB302_9
.LBB302_12:                             # %for.end
                                        #   in Loop: Header=BB302_7 Depth=2
	jmp	.LBB302_13
.LBB302_13:                             # %for.inc18
                                        #   in Loop: Header=BB302_7 Depth=2
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB302_7
.LBB302_14:                             # %for.end20
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB302_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	$0, -8(%rbp)
.LBB302_16:                             # %for.cond21
                                        #   Parent Loop BB302_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB302_18 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB302_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB302_16 Depth=2
	movl	$0, -4(%rbp)
.LBB302_18:                             # %for.cond26
                                        #   Parent Loop BB302_5 Depth=1
                                        #     Parent Loop BB302_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB302_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB302_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB302_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB302_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB302_25
.LBB302_21:                             # %if.else
                                        #   in Loop: Header=BB302_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB302_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB302_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB302_24
.LBB302_23:                             # %if.else52
                                        #   in Loop: Header=BB302_18 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB302_24:                             # %if.end
                                        #   in Loop: Header=BB302_18 Depth=3
	jmp	.LBB302_25
.LBB302_25:                             # %if.end57
                                        #   in Loop: Header=BB302_18 Depth=3
	jmp	.LBB302_26
.LBB302_26:                             # %for.inc58
                                        #   in Loop: Header=BB302_18 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB302_18
.LBB302_27:                             # %for.end59
                                        #   in Loop: Header=BB302_16 Depth=2
	jmp	.LBB302_28
.LBB302_28:                             # %for.inc60
                                        #   in Loop: Header=BB302_16 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB302_16
.LBB302_29:                             # %for.end62
                                        #   in Loop: Header=BB302_5 Depth=1
	jmp	.LBB302_74
.LBB302_30:                             # %if.else63
                                        #   in Loop: Header=BB302_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB302_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB302_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	$0, -8(%rbp)
.LBB302_33:                             # %for.cond69
                                        #   Parent Loop BB302_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB302_35 Depth 3
	cmpl	$8, -8(%rbp)
	jge	.LBB302_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB302_33 Depth=2
	movl	$0, -4(%rbp)
.LBB302_35:                             # %for.cond73
                                        #   Parent Loop BB302_5 Depth=1
                                        #     Parent Loop BB302_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -4(%rbp)
	jge	.LBB302_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB302_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB302_35 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB302_35
.LBB302_38:                             # %for.end83
                                        #   in Loop: Header=BB302_33 Depth=2
	jmp	.LBB302_39
.LBB302_39:                             # %for.inc84
                                        #   in Loop: Header=BB302_33 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB302_33
.LBB302_40:                             # %for.end86
                                        #   in Loop: Header=BB302_5 Depth=1
	jmp	.LBB302_73
.LBB302_41:                             # %if.else87
                                        #   in Loop: Header=BB302_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB302_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	$0, -8(%rbp)
.LBB302_43:                             # %for.cond90
                                        #   Parent Loop BB302_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB302_45 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB302_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB302_43 Depth=2
	movl	$0, -4(%rbp)
.LBB302_45:                             # %for.cond95
                                        #   Parent Loop BB302_5 Depth=1
                                        #     Parent Loop BB302_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB302_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB302_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB302_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB302_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-4(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB302_52
.LBB302_48:                             # %if.else119
                                        #   in Loop: Header=BB302_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB302_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB302_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB302_51
.LBB302_50:                             # %if.else127
                                        #   in Loop: Header=BB302_45 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB302_51:                             # %if.end132
                                        #   in Loop: Header=BB302_45 Depth=3
	jmp	.LBB302_52
.LBB302_52:                             # %if.end133
                                        #   in Loop: Header=BB302_45 Depth=3
	jmp	.LBB302_53
.LBB302_53:                             # %for.inc134
                                        #   in Loop: Header=BB302_45 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB302_45
.LBB302_54:                             # %for.end136
                                        #   in Loop: Header=BB302_43 Depth=2
	jmp	.LBB302_55
.LBB302_55:                             # %for.inc137
                                        #   in Loop: Header=BB302_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB302_43
.LBB302_56:                             # %for.end139
                                        #   in Loop: Header=BB302_5 Depth=1
	jmp	.LBB302_72
.LBB302_57:                             # %if.else140
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	$0, -8(%rbp)
.LBB302_58:                             # %for.cond141
                                        #   Parent Loop BB302_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB302_60 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB302_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB302_58 Depth=2
	movl	$0, -4(%rbp)
.LBB302_60:                             # %for.cond146
                                        #   Parent Loop BB302_5 Depth=1
                                        #     Parent Loop BB302_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB302_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB302_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB302_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB302_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB302_67
.LBB302_63:                             # %if.else175
                                        #   in Loop: Header=BB302_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB302_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB302_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB302_66
.LBB302_65:                             # %if.else188
                                        #   in Loop: Header=BB302_60 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB302_66:                             # %if.end198
                                        #   in Loop: Header=BB302_60 Depth=3
	jmp	.LBB302_67
.LBB302_67:                             # %if.end199
                                        #   in Loop: Header=BB302_60 Depth=3
	jmp	.LBB302_68
.LBB302_68:                             # %for.inc200
                                        #   in Loop: Header=BB302_60 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB302_60
.LBB302_69:                             # %for.end202
                                        #   in Loop: Header=BB302_58 Depth=2
	jmp	.LBB302_70
.LBB302_70:                             # %for.inc203
                                        #   in Loop: Header=BB302_58 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB302_58
.LBB302_71:                             # %for.end205
                                        #   in Loop: Header=BB302_5 Depth=1
	jmp	.LBB302_72
.LBB302_72:                             # %if.end206
                                        #   in Loop: Header=BB302_5 Depth=1
	jmp	.LBB302_73
.LBB302_73:                             # %if.end207
                                        #   in Loop: Header=BB302_5 Depth=1
	jmp	.LBB302_74
.LBB302_74:                             # %if.end208
                                        #   in Loop: Header=BB302_5 Depth=1
	cmpl	$0, -36(%rbp)
	je	.LBB302_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB302_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB302_100
.LBB302_77:                             # %if.else215
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB302_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB302_5 Depth=1
	cmpl	$0, -36(%rbp)
	jne	.LBB302_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB302_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB302_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB302_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB302_84
.LBB302_83:                             # %if.then247
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB302_85
.LBB302_84:                             # %if.else249
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB302_85:                             # %if.end251
                                        #   in Loop: Header=BB302_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB302_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	$0, -8(%rbp)
.LBB302_87:                             # %for.cond255
                                        #   Parent Loop BB302_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB302_89 Depth 3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB302_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB302_87 Depth=2
	movl	$0, -4(%rbp)
.LBB302_89:                             # %for.cond260
                                        #   Parent Loop BB302_5 Depth=1
                                        #     Parent Loop BB302_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB302_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB302_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB302_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB302_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB302_93
.LBB302_92:                             # %if.else277
                                        #   in Loop: Header=BB302_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB302_93:                             # %if.end287
                                        #   in Loop: Header=BB302_89 Depth=3
	jmp	.LBB302_94
.LBB302_94:                             # %for.inc288
                                        #   in Loop: Header=BB302_89 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB302_89
.LBB302_95:                             # %for.end290
                                        #   in Loop: Header=BB302_87 Depth=2
	jmp	.LBB302_96
.LBB302_96:                             # %for.inc291
                                        #   in Loop: Header=BB302_87 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB302_87
.LBB302_97:                             # %for.end293
                                        #   in Loop: Header=BB302_5 Depth=1
	jmp	.LBB302_98
.LBB302_98:                             # %if.end294
                                        #   in Loop: Header=BB302_5 Depth=1
	jmp	.LBB302_99
.LBB302_99:                             # %if.end295
                                        #   in Loop: Header=BB302_5 Depth=1
	jmp	.LBB302_100
.LBB302_100:                            # %if.end296
                                        #   in Loop: Header=BB302_5 Depth=1
	jmp	.LBB302_101
.LBB302_101:                            # %for.inc297
                                        #   in Loop: Header=BB302_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB302_5
.LBB302_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB302_139
# %bb.103:                              # %if.then307
	movl	$0, -8(%rbp)
.LBB302_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB302_106 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB302_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB302_104 Depth=1
	movl	$0, -4(%rbp)
.LBB302_106:                            # %for.cond312
                                        #   Parent Loop BB302_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB302_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-8(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -28(%rbp)
	movl	-60(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-8(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB302_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB302_110
.LBB302_109:                            # %cond.false
                                        #   in Loop: Header=BB302_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB302_110:                            # %cond.end
                                        #   in Loop: Header=BB302_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB302_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB302_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB302_116
.LBB302_112:                            # %cond.false358
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB302_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB302_115
.LBB302_114:                            # %cond.false367
                                        #   in Loop: Header=BB302_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-20(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB302_115:                            # %cond.end373
                                        #   in Loop: Header=BB302_106 Depth=2
.LBB302_116:                            # %cond.end375
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-28(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-8(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB302_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB302_119
.LBB302_118:                            # %cond.false394
                                        #   in Loop: Header=BB302_106 Depth=2
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB302_119:                            # %cond.end400
                                        #   in Loop: Header=BB302_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB302_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB302_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB302_125
.LBB302_121:                            # %cond.false406
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%eax, %eax
	movl	-28(%rbp), %ecx
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-8(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB302_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB302_124
.LBB302_123:                            # %cond.false415
                                        #   in Loop: Header=BB302_106 Depth=2
	movl	-28(%rbp), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB302_124:                            # %cond.end421
                                        #   in Loop: Header=BB302_106 Depth=2
.LBB302_125:                            # %cond.end423
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-32(%rbp), %esi
	movslq	-4(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-8(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB302_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB302_128
.LBB302_127:                            # %cond.false443
                                        #   in Loop: Header=BB302_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-32(%rbp), %ecx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-8(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB302_128:                            # %cond.end449
                                        #   in Loop: Header=BB302_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB302_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB302_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB302_134
.LBB302_130:                            # %cond.false455
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %edx
	movslq	-4(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-8(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB302_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB302_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB302_133
.LBB302_132:                            # %cond.false464
                                        #   in Loop: Header=BB302_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-32(%rbp), %eax
	movslq	-4(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB302_133:                            # %cond.end470
                                        #   in Loop: Header=BB302_106 Depth=2
.LBB302_134:                            # %cond.end472
                                        #   in Loop: Header=BB302_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB302_106 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB302_106
.LBB302_136:                            # %for.end487
                                        #   in Loop: Header=BB302_104 Depth=1
	jmp	.LBB302_137
.LBB302_137:                            # %for.inc488
                                        #   in Loop: Header=BB302_104 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB302_104
.LBB302_138:                            # %for.end490
	jmp	.LBB302_139
.LBB302_139:                            # %if.end491
	cmpl	$2035960428, -72(%rbp)  # imm = 0x795A4A6C
	jne	.LBB302_141
.LBB302_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB302_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB302_140
.Lfunc_end302:
	.size	ChromaResidualCoding.261, .Lfunc_end302-ChromaResidualCoding.261
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.262       # -- Begin function slice_too_big.262
	.p2align	4, 0x90
	.type	slice_too_big.262,@function
slice_too_big.262:                      # @slice_too_big.262
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1606338485, -52(%rbp)  # imm = 0x5FBEC7B5
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB303_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB303_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB303_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB303_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB303_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB303_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB303_5:                              # %if.end
                                        #   in Loop: Header=BB303_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB303_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB303_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB303_7:                              # %if.end8
                                        #   in Loop: Header=BB303_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB303_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB303_21
.LBB303_9:                              # %if.end11
                                        #   in Loop: Header=BB303_2 Depth=1
	jmp	.LBB303_10
.LBB303_10:                             # %for.inc
                                        #   in Loop: Header=BB303_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB303_2
.LBB303_11:                             # %for.end
	jmp	.LBB303_12
.LBB303_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB303_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB303_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB303_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB303_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB303_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB303_21
.LBB303_17:                             # %if.end27
                                        #   in Loop: Header=BB303_14 Depth=1
	jmp	.LBB303_18
.LBB303_18:                             # %for.inc28
                                        #   in Loop: Header=BB303_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB303_14
.LBB303_19:                             # %for.end30
	jmp	.LBB303_20
.LBB303_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB303_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1606338485, -52(%rbp)  # imm = 0x5FBEC7B5
	jne	.LBB303_23
.LBB303_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB303_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB303_22
.Lfunc_end303:
	.size	slice_too_big.262, .Lfunc_end303-slice_too_big.262
	.cfi_endproc
                                        # -- End function
	.globl	writeMotionVector8x8.263 # -- Begin function writeMotionVector8x8.263
	.p2align	4, 0x90
	.type	writeMotionVector8x8.263,@function
writeMotionVector8x8.263:               # @writeMotionVector8x8.263
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	16(%rbp), %eax
	movl	$1323747381, -80(%rbp)  # imm = 0x4EE6C835
	movl	%edi, -88(%rbp)
	movl	%esi, -96(%rbp)
	movl	%edx, -84(%rbp)
	movl	%ecx, -92(%rbp)
	movl	%r8d, -100(%rbp)
	movl	%r9d, -36(%rbp)
	movl	$0, -64(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	144(%rax,%rcx,8), %eax
	movl	%eax, -76(%rbp)
	movq	input, %rax
	movslq	16(%rbp), %rcx
	movl	148(%rax,%rcx,8), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -56(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-56(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -136(%rbp)
	movq	-56(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -128(%rbp)
	movl	-100(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	71920(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	-56(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB304_8
# %bb.1:                                # %land.lhs.true
	movq	-56(%rbp), %rax
	cmpl	$2, 488(%rax)
	jne	.LBB304_8
# %bb.2:                                # %land.lhs.true15
	cmpl	$1, 16(%rbp)
	jne	.LBB304_8
# %bb.3:                                # %land.lhs.true17
	cmpl	$0, -60(%rbp)
	jne	.LBB304_8
# %bb.4:                                # %if.then
	movq	-56(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB304_6
# %bb.5:                                # %cond.true
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB304_7
.LBB304_6:                              # %cond.false
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB304_7:                              # %cond.end
	movq	%rax, -112(%rbp)
.LBB304_8:                              # %if.end
	movl	-96(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB304_9:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB304_11 Depth 2
                                        #       Child Loop BB304_13 Depth 3
                                        #         Child Loop BB304_15 Depth 4
                                        #           Child Loop BB304_17 Depth 5
	movl	-16(%rbp), %eax
	cmpl	-92(%rbp), %eax
	jge	.LBB304_31
# %bb.10:                               # %for.body
                                        #   in Loop: Header=BB304_9 Depth=1
	movl	-88(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB304_11:                             # %for.cond22
                                        #   Parent Loop BB304_9 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB304_13 Depth 3
                                        #         Child Loop BB304_15 Depth 4
                                        #           Child Loop BB304_17 Depth 5
	movl	-20(%rbp), %eax
	cmpl	-84(%rbp), %eax
	jge	.LBB304_29
# %bb.12:                               # %for.body24
                                        #   in Loop: Header=BB304_11 Depth=2
	movl	$0, -12(%rbp)
.LBB304_13:                             # %for.cond25
                                        #   Parent Loop BB304_9 Depth=1
                                        #     Parent Loop BB304_11 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB304_15 Depth 4
                                        #           Child Loop BB304_17 Depth 5
	cmpl	$2, -12(%rbp)
	jge	.LBB304_27
# %bb.14:                               # %for.body27
                                        #   in Loop: Header=BB304_13 Depth=3
	movq	-112(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movq	-144(%rbp), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movswl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -44(%rbp)
.LBB304_15:                             # %for.cond53
                                        #   Parent Loop BB304_9 Depth=1
                                        #     Parent Loop BB304_11 Depth=2
                                        #       Parent Loop BB304_13 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB304_17 Depth 5
	movl	-44(%rbp), %eax
	cmpl	-72(%rbp), %eax
	jge	.LBB304_22
# %bb.16:                               # %for.body56
                                        #   in Loop: Header=BB304_15 Depth=4
	movl	$0, -40(%rbp)
.LBB304_17:                             # %for.cond57
                                        #   Parent Loop BB304_9 Depth=1
                                        #     Parent Loop BB304_11 Depth=2
                                        #       Parent Loop BB304_13 Depth=3
                                        #         Parent Loop BB304_15 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	movl	-40(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB304_20
# %bb.18:                               # %for.body60
                                        #   in Loop: Header=BB304_17 Depth=5
	movl	-68(%rbp), %eax
	movq	-56(%rbp), %rcx
	addq	$76, %rcx
	movslq	-36(%rbp), %rdx
	shlq	$7, %rdx
	addq	%rdx, %rcx
	movl	-16(%rbp), %edx
	addl	-44(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-20(%rbp), %edx
	addl	-40(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB304_17 Depth=5
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB304_17
.LBB304_20:                             # %for.end
                                        #   in Loop: Header=BB304_15 Depth=4
	jmp	.LBB304_21
.LBB304_21:                             # %for.inc70
                                        #   in Loop: Header=BB304_15 Depth=4
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB304_15
.LBB304_22:                             # %for.end72
                                        #   in Loop: Header=BB304_13 Depth=3
	movl	-68(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-32(%rbp), %rax
	movl	$0, 8(%rax)
	movq	-32(%rbp), %rax
	movl	$5, (%rax)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB304_24
# %bb.23:                               # %if.then75
                                        #   in Loop: Header=BB304_13 Depth=3
	movq	-32(%rbp), %rax
	movabsq	$se_linfo, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB304_25
.LBB304_24:                             # %if.else
                                        #   in Loop: Header=BB304_13 Depth=3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	-12(%rbp), %eax
	shll	$1, %eax
	addl	-36(%rbp), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-32(%rbp), %rax
	movabsq	$writeMVD_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB304_25:                             # %if.end78
                                        #   in Loop: Header=BB304_13 Depth=3
	movq	-136(%rbp), %rax
	movq	24(%rax), %rax
	movq	-128(%rbp), %rcx
	movslq	20(%rcx), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rax
	movq	112(%rax), %rax
	movq	-32(%rbp), %rdi
	movq	-120(%rbp), %rsi
	callq	*%rax
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	addl	12(%rcx), %eax
	movl	%eax, 12(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	addl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	-32(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -32(%rbp)
	movq	-56(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.26:                               # %for.inc88
                                        #   in Loop: Header=BB304_13 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB304_13
.LBB304_27:                             # %for.end90
                                        #   in Loop: Header=BB304_11 Depth=2
	jmp	.LBB304_28
.LBB304_28:                             # %for.inc91
                                        #   in Loop: Header=BB304_11 Depth=2
	movl	-76(%rbp), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB304_11
.LBB304_29:                             # %for.end93
                                        #   in Loop: Header=BB304_9 Depth=1
	jmp	.LBB304_30
.LBB304_30:                             # %for.inc94
                                        #   in Loop: Header=BB304_9 Depth=1
	movl	-72(%rbp), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB304_9
.LBB304_31:                             # %for.end96
	movl	-64(%rbp), %ebx
	cmpl	$1323747381, -80(%rbp)  # imm = 0x4EE6C835
	jne	.LBB304_33
.LBB304_32:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB304_33:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB304_32
.Lfunc_end304:
	.size	writeMotionVector8x8.263, .Lfunc_end304-writeMotionVector8x8.263
	.cfi_endproc
                                        # -- End function
	.globl	ZeroRef.264             # -- Begin function ZeroRef.264
	.p2align	4, 0x90
	.type	ZeroRef.264,@function
ZeroRef.264:                            # @ZeroRef.264
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	movl	$817477373, -24(%rbp)   # imm = 0x30B9B6FD
	movq	%rdi, -32(%rbp)
	movl	$0, -12(%rbp)
.LBB305_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB305_3 Depth 2
	cmpl	$4, -12(%rbp)
	jge	.LBB305_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB305_1 Depth=1
	movl	$0, -16(%rbp)
.LBB305_3:                              # %for.cond1
                                        #   Parent Loop BB305_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB305_8
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB305_3 Depth=2
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movswl	(%rax,%rcx,2), %eax
	cmpl	$0, %eax
	je	.LBB305_6
# %bb.5:                                # %if.then
	movl	$0, -20(%rbp)
	jmp	.LBB305_11
.LBB305_6:                              # %if.end
                                        #   in Loop: Header=BB305_3 Depth=2
	jmp	.LBB305_7
.LBB305_7:                              # %for.inc
                                        #   in Loop: Header=BB305_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB305_3
.LBB305_8:                              # %for.end
                                        #   in Loop: Header=BB305_1 Depth=1
	jmp	.LBB305_9
.LBB305_9:                              # %for.inc10
                                        #   in Loop: Header=BB305_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB305_1
.LBB305_10:                             # %for.end12
	movl	$1, -20(%rbp)
.LBB305_11:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$817477373, -24(%rbp)   # imm = 0x30B9B6FD
	jne	.LBB305_13
.LBB305_12:
	movl	%ebx, %eax
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB305_13:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB305_12
.Lfunc_end305:
	.size	ZeroRef.264, .Lfunc_end305-ZeroRef.264
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.265   # -- Begin function TransformDecision.265
	.p2align	4, 0x90
	.type	TransformDecision.265,@function
TransformDecision.265:                  # @TransformDecision.265
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1525574574, -76(%rbp)  # imm = 0x5AEE6BAE
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -40(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB306_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -64(%rbp)
	jmp	.LBB306_3
.LBB306_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -64(%rbp)
.LBB306_3:                              # %if.end
	jmp	.LBB306_4
.LBB306_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB306_6 Depth 2
                                        #       Child Loop BB306_8 Depth 3
                                        #         Child Loop BB306_10 Depth 4
                                        #           Child Loop BB306_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-64(%rbp), %eax
	jge	.LBB306_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB306_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-54(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-50(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -60(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -68(%rbp)
	movl	$0, -32(%rbp)
	movl	-60(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB306_6:                              # %for.cond3
                                        #   Parent Loop BB306_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB306_8 Depth 3
                                        #         Child Loop BB306_10 Depth 4
                                        #           Child Loop BB306_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-60(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB306_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB306_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB306_8:                              # %for.cond8
                                        #   Parent Loop BB306_4 Depth=1
                                        #     Parent Loop BB306_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB306_10 Depth 4
                                        #           Child Loop BB306_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB306_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB306_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-54(%rbp), %edx
	movl	-72(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-52(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-50(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-32(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -28(%rbp)
.LBB306_10:                             # %for.cond13
                                        #   Parent Loop BB306_4 Depth=1
                                        #     Parent Loop BB306_6 Depth=2
                                        #       Parent Loop BB306_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB306_12 Depth 5
	cmpl	$4, -28(%rbp)
	jge	.LBB306_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB306_10 Depth=4
	movl	$0, -24(%rbp)
.LBB306_12:                             # %for.cond17
                                        #   Parent Loop BB306_4 Depth=1
                                        #     Parent Loop BB306_6 Depth=2
                                        #       Parent Loop BB306_8 Depth=3
                                        #         Parent Loop BB306_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -24(%rbp)
	jge	.LBB306_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB306_12 Depth=5
	movq	imgY_org, %rax
	movl	-84(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-88(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-24(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-28(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-32(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB306_12 Depth=5
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB306_12
.LBB306_15:                             # %for.end
                                        #   in Loop: Header=BB306_10 Depth=4
	jmp	.LBB306_16
.LBB306_16:                             # %for.inc38
                                        #   in Loop: Header=BB306_10 Depth=4
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB306_10
.LBB306_17:                             # %for.end40
                                        #   in Loop: Header=BB306_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB306_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB306_8
.LBB306_19:                             # %for.end44
                                        #   in Loop: Header=BB306_6 Depth=2
	jmp	.LBB306_20
.LBB306_20:                             # %for.inc45
                                        #   in Loop: Header=BB306_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB306_6
.LBB306_21:                             # %for.end47
                                        #   in Loop: Header=BB306_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB306_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB306_4
.LBB306_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB306_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB306_28
.LBB306_25:                             # %if.else57
	movl	-40(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB306_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB306_28
.LBB306_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB306_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$1525574574, -76(%rbp)  # imm = 0x5AEE6BAE
	jne	.LBB306_30
.LBB306_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB306_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB306_29
.Lfunc_end306:
	.size	TransformDecision.265, .Lfunc_end306-TransformDecision.265
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.266 # -- Begin function writeCoeff4x4_CAVLC.266
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.266,@function
writeCoeff4x4_CAVLC.266:                # @writeCoeff4x4_CAVLC.266
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$1314889168, -172(%rbp) # imm = 0x4E5F9DD0
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -48(%rbp)
	movl	%ecx, -76(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -52(%rbp)
	movl	$0, -68(%rbp)
	movl	$0, -80(%rbp)
	movl	$0, -156(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB307_22
# %bb.1:                                # %entry
	movq	.LJTI307_0(,%rax,8), %rax
	jmpq	*%rax
.LBB307_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB307_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB307_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB307_6
.LBB307_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB307_7
.LBB307_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB307_7:                              # %if.end
	jmp	.LBB307_23
.LBB307_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB307_23
.LBB307_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$5, -52(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB307_23
.LBB307_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -80(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-76(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB307_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB307_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB307_14
.LBB307_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB307_15
.LBB307_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB307_15:                             # %if.end67
	jmp	.LBB307_23
.LBB307_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -68(%rbp)
	movl	$6, -52(%rbp)
	movl	$1, -156(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB307_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB307_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB307_20
.LBB307_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB307_21
.LBB307_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB307_21:                             # %if.end93
	jmp	.LBB307_23
.LBB307_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB307_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -164(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -108(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB307_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -80(%rbp)
	je	.LBB307_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB307_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB307_27
.LBB307_26:                             # %cond.false
                                        #   in Loop: Header=BB307_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB307_27
.LBB307_27:                             # %cond.end
                                        #   in Loop: Header=BB307_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB307_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB307_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB307_29:                             # %land.end
                                        #   in Loop: Header=BB307_24 Depth=1
	testb	$1, %dl
	jne	.LBB307_30
	jmp	.LBB307_41
.LBB307_30:                             # %for.body
                                        #   in Loop: Header=BB307_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB307_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB307_24 Depth=1
	cmpl	$0, -96(%rbp)
	je	.LBB307_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB307_24 Depth=1
	movl	-96(%rbp), %eax
	addl	-108(%rbp), %eax
	movl	%eax, -108(%rbp)
.LBB307_33:                             # %if.end110
                                        #   in Loop: Header=BB307_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB307_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB307_24 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-164(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -164(%rbp)
	cmpl	$3, -32(%rbp)
	jle	.LBB307_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB307_24 Depth=1
	movl	$3, -32(%rbp)
.LBB307_36:                             # %if.end117
                                        #   in Loop: Header=BB307_24 Depth=1
	jmp	.LBB307_38
.LBB307_37:                             # %if.else118
                                        #   in Loop: Header=BB307_24 Depth=1
	movl	$0, -32(%rbp)
.LBB307_38:                             # %if.end119
                                        #   in Loop: Header=BB307_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB307_39:                             # %if.end121
                                        #   in Loop: Header=BB307_24 Depth=1
	jmp	.LBB307_40
.LBB307_40:                             # %for.inc
                                        #   in Loop: Header=BB307_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB307_24
.LBB307_41:                             # %for.end
	cmpl	$0, -80(%rbp)
	jne	.LBB307_61
# %bb.42:                               # %if.then124
	cmpl	$0, -156(%rbp)
	jne	.LBB307_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB307_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB307_46
.LBB307_45:                             # %cond.false132
	movl	-48(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB307_46:                             # %cond.end136
	movl	%eax, -92(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB307_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB307_49
.LBB307_48:                             # %cond.false142
	movl	-48(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB307_49:                             # %cond.end145
	movl	%eax, -88(%rbp)
	movl	-92(%rbp), %edi
	movl	-88(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -112(%rbp)
	jmp	.LBB307_51
.LBB307_50:                             # %if.else148
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -92(%rbp)
	movl	-76(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -88(%rbp)
	movl	-92(%rbp), %edi
	movl	-88(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -112(%rbp)
.LBB307_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-92(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-88(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -112(%rbp)
	jge	.LBB307_53
# %bb.52:                               # %if.then160
	movl	$0, -104(%rbp)
	jmp	.LBB307_60
.LBB307_53:                             # %if.else161
	cmpl	$4, -112(%rbp)
	jge	.LBB307_55
# %bb.54:                               # %if.then163
	movl	$1, -104(%rbp)
	jmp	.LBB307_59
.LBB307_55:                             # %if.else164
	cmpl	$8, -112(%rbp)
	jge	.LBB307_57
# %bb.56:                               # %if.then166
	movl	$2, -104(%rbp)
	jmp	.LBB307_58
.LBB307_57:                             # %if.else167
	movl	$3, -104(%rbp)
.LBB307_58:                             # %if.end168
	jmp	.LBB307_59
.LBB307_59:                             # %if.end169
	jmp	.LBB307_60
.LBB307_60:                             # %if.end170
	jmp	.LBB307_62
.LBB307_61:                             # %if.else171
	movl	$0, -104(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -92(%rbp)
	movl	-76(%rbp), %eax
	movl	%eax, -88(%rbp)
.LBB307_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB307_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB307_65
.LBB307_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB307_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB307_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB307_122
.LBB307_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB307_121
# %bb.68:                               # %if.then192
	movl	$0, -100(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB307_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB307_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB307_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB307_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB307_72:                             # %if.end202
                                        #   in Loop: Header=BB307_69 Depth=1
	movl	-100(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -100(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB307_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB307_69 Depth=1
	movl	-100(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -100(%rbp)
.LBB307_74:                             # %if.end205
                                        #   in Loop: Header=BB307_69 Depth=1
	jmp	.LBB307_75
.LBB307_75:                             # %for.inc206
                                        #   in Loop: Header=BB307_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB307_69
.LBB307_76:                             # %for.end207
	cmpl	$0, -32(%rbp)
	je	.LBB307_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-100(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB307_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB307_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -32(%rbp)
	jne	.LBB307_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB307_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB307_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -32(%rbp)
	jge	.LBB307_84
# %bb.83:                               # %if.then231
	movl	$1, -28(%rbp)
	jmp	.LBB307_85
.LBB307_84:                             # %if.else232
	movl	$0, -28(%rbp)
.LBB307_85:                             # %if.end233
	movl	-72(%rbp), %eax
	subl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB307_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB307_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB307_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB307_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB307_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB307_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB307_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB307_91
.LBB307_90:                             # %if.else249
                                        #   in Loop: Header=BB307_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB307_91:                             # %if.end252
                                        #   in Loop: Header=BB307_86 Depth=1
	movl	$0, -144(%rbp)
.LBB307_92:                             # %if.end253
                                        #   in Loop: Header=BB307_86 Depth=1
	cmpl	$0, -28(%rbp)
	jne	.LBB307_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB307_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB307_95
.LBB307_94:                             # %if.else257
                                        #   in Loop: Header=BB307_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-28(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB307_95:                             # %if.end259
                                        #   in Loop: Header=BB307_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-28(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB307_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB307_86 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
.LBB307_97:                             # %if.end266
                                        #   in Loop: Header=BB307_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-32(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB307_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB307_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB307_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB307_86 Depth=1
	movl	$2, -28(%rbp)
.LBB307_100:                            # %if.end273
                                        #   in Loop: Header=BB307_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB307_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB307_86
.LBB307_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-68(%rbp), %eax
	jge	.LBB307_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-108(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -80(%rbp)
	jne	.LBB307_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB307_106
.LBB307_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB307_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB307_107:                            # %if.end307
	movl	-108(%rbp), %eax
	movl	%eax, -84(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB307_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB307_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB307_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -96(%rbp)
	movl	-96(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB307_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB307_108 Depth=1
	cmpl	$0, -84(%rbp)
	jne	.LBB307_112
.LBB307_111:                            # %if.then318
	jmp	.LBB307_120
.LBB307_112:                            # %if.end319
                                        #   in Loop: Header=BB307_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB307_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB307_108 Depth=1
	cmpl	$0, -84(%rbp)
	je	.LBB307_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB307_108 Depth=1
	movl	-84(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -28(%rbp)
	cmpl	$6, -28(%rbp)
	jle	.LBB307_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB307_108 Depth=1
	movl	$6, -28(%rbp)
.LBB307_116:                            # %if.end327
                                        #   in Loop: Header=BB307_108 Depth=1
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-52(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-96(%rbp), %eax
	movl	-84(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -84(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB307_117:                            # %if.end341
                                        #   in Loop: Header=BB307_108 Depth=1
	jmp	.LBB307_118
.LBB307_118:                            # %for.inc342
                                        #   in Loop: Header=BB307_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB307_108
.LBB307_119:                            # %for.end344.loopexit
	jmp	.LBB307_120
.LBB307_120:                            # %for.end344
	jmp	.LBB307_121
.LBB307_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB307_122:                            # %return
	movl	-160(%rbp), %ebx
	cmpl	$1314889168, -172(%rbp) # imm = 0x4E5F9DD0
	jne	.LBB307_124
.LBB307_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB307_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB307_123
.Lfunc_end307:
	.size	writeCoeff4x4_CAVLC.266, .Lfunc_end307-writeCoeff4x4_CAVLC.266
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI307_0:
	.quad	.LBB307_2
	.quad	.LBB307_8
	.quad	.LBB307_9
	.quad	.LBB307_22
	.quad	.LBB307_22
	.quad	.LBB307_22
	.quad	.LBB307_10
	.quad	.LBB307_16
                                        # -- End function
	.text
	.globl	SetModesAndRefframe.267 # -- Begin function SetModesAndRefframe.267
	.p2align	4, 0x90
	.type	SetModesAndRefframe.267,@function
SetModesAndRefframe.267:                # @SetModesAndRefframe.267
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$771436252, -60(%rbp)   # imm = 0x2DFB2EDC
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -32(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -56(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB308_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB308_12
.LBB308_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB308_4
# %bb.3:                                # %if.then18
	movq	-56(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB308_11
.LBB308_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB308_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB308_10
.LBB308_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB308_8
# %bb.7:                                # %if.then45
	movq	-56(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB308_9
.LBB308_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-56(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB308_9:                              # %if.end
	jmp	.LBB308_10
.LBB308_10:                             # %if.end86
	jmp	.LBB308_11
.LBB308_11:                             # %if.end87
	jmp	.LBB308_12
.LBB308_12:                             # %if.end88
	cmpl	$771436252, -60(%rbp)   # imm = 0x2DFB2EDC
	jne	.LBB308_14
.LBB308_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB308_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB308_13
.Lfunc_end308:
	.size	SetModesAndRefframe.267, .Lfunc_end308-SetModesAndRefframe.267
	.cfi_endproc
                                        # -- End function
	.globl	slice_too_big.268       # -- Begin function slice_too_big.268
	.p2align	4, 0x90
	.type	slice_too_big.268,@function
slice_too_big.268:                      # @slice_too_big.268
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1978093209, -52(%rbp)  # imm = 0x75E74E99
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB309_12
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
.LBB309_2:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB309_11
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB309_2 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -48(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-48(%rbp), %rax
	cmpl	$8, 4(%rax)
	jge	.LBB309_5
# %bb.4:                                # %if.then3
                                        #   in Loop: Header=BB309_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB309_5:                              # %if.end
                                        #   in Loop: Header=BB309_2 Depth=1
	movq	-48(%rbp), %rax
	movl	4(%rax), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB309_7
# %bb.6:                                # %if.then6
                                        #   in Loop: Header=BB309_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB309_7:                              # %if.end8
                                        #   in Loop: Header=BB309_2 Depth=1
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	212(%rcx), %eax
	jle	.LBB309_9
# %bb.8:                                # %if.then10
	movl	$1, -20(%rbp)
	jmp	.LBB309_21
.LBB309_9:                              # %if.end11
                                        #   in Loop: Header=BB309_2 Depth=1
	jmp	.LBB309_10
.LBB309_10:                             # %for.inc
                                        #   in Loop: Header=BB309_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB309_2
.LBB309_11:                             # %for.end
	jmp	.LBB309_12
.LBB309_12:                             # %if.end13
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB309_20
# %bb.13:                               # %if.then16
	movl	$0, -12(%rbp)
.LBB309_14:                             # %for.cond17
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-32(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB309_19
# %bb.15:                               # %for.body20
                                        #   in Loop: Header=BB309_14 Depth=1
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rdi
	callq	arienco_bits_written
	movq	input, %rcx
	movl	212(%rcx), %ecx
	shll	$3, %ecx
	cmpl	%ecx, %eax
	jle	.LBB309_17
# %bb.16:                               # %if.then26
	movl	$1, -20(%rbp)
	jmp	.LBB309_21
.LBB309_17:                             # %if.end27
                                        #   in Loop: Header=BB309_14 Depth=1
	jmp	.LBB309_18
.LBB309_18:                             # %for.inc28
                                        #   in Loop: Header=BB309_14 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB309_14
.LBB309_19:                             # %for.end30
	jmp	.LBB309_20
.LBB309_20:                             # %if.end31
	movl	$0, -20(%rbp)
.LBB309_21:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1978093209, -52(%rbp)  # imm = 0x75E74E99
	jne	.LBB309_23
.LBB309_22:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB309_23:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB309_22
.Lfunc_end309:
	.size	slice_too_big.268, .Lfunc_end309-slice_too_big.268
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.269 # -- Begin function SetModesAndRefframe.269
	.p2align	4, 0x90
	.type	SetModesAndRefframe.269,@function
SetModesAndRefframe.269:                # @SetModesAndRefframe.269
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$804188402, -60(%rbp)   # imm = 0x2FEEF0F2
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -48(%rbp)
	movq	%r8, -32(%rbp)
	movq	%r9, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -8(%rbp)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movl	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB310_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB310_12
.LBB310_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB310_4
# %bb.3:                                # %if.then18
	movq	-32(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB310_11
.LBB310_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB310_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB310_10
.LBB310_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB310_8
# %bb.7:                                # %if.then45
	movq	-32(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB310_9
.LBB310_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-32(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB310_9:                              # %if.end
	jmp	.LBB310_10
.LBB310_10:                             # %if.end86
	jmp	.LBB310_11
.LBB310_11:                             # %if.end87
	jmp	.LBB310_12
.LBB310_12:                             # %if.end88
	cmpl	$804188402, -60(%rbp)   # imm = 0x2FEEF0F2
	jne	.LBB310_14
.LBB310_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB310_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB310_13
.Lfunc_end310:
	.size	SetModesAndRefframe.269, .Lfunc_end310-SetModesAndRefframe.269
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.270    # -- Begin function writeChromaCoeff.270
	.p2align	4, 0x90
	.type	writeChromaCoeff.270,@function
writeChromaCoeff.270:                   # @writeChromaCoeff.270
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1378921698, -80(%rbp)  # imm = 0x5230ACE2
	movl	$0, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -112(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB311_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB311_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB311_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB311_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB311_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB311_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB311_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB311_21
.LBB311_5:                              # %if.else
                                        #   in Loop: Header=BB311_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -144(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB311_6:                              # %for.cond18
                                        #   Parent Loop BB311_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB311_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB311_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB311_8:                              # %land.end
                                        #   in Loop: Header=BB311_6 Depth=2
	testb	$1, %al
	jne	.LBB311_9
	jmp	.LBB311_20
.LBB311_9:                              # %for.body21
                                        #   in Loop: Header=BB311_6 Depth=2
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB311_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB311_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB311_12
.LBB311_11:                             # %if.else29
                                        #   in Loop: Header=BB311_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB311_12:                             # %if.end
                                        #   in Loop: Header=BB311_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB311_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB311_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB311_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB311_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB311_15:                             # %lor.end
                                        #   in Loop: Header=BB311_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB311_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB311_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB311_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB311_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB311_18:                             # %lor.end45
                                        #   in Loop: Header=BB311_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB311_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB311_6
.LBB311_20:                             # %for.end
                                        #   in Loop: Header=BB311_2 Depth=1
	jmp	.LBB311_21
.LBB311_21:                             # %if.end58
                                        #   in Loop: Header=BB311_2 Depth=1
	jmp	.LBB311_22
.LBB311_22:                             # %for.inc59
                                        #   in Loop: Header=BB311_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB311_2
.LBB311_23:                             # %for.end61
	jmp	.LBB311_24
.LBB311_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB311_52
# %bb.25:                               # %if.then64
	movl	$4, -32(%rbp)
.LBB311_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB311_28 Depth 2
                                        #       Child Loop BB311_32 Depth 3
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB311_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB311_26 Depth=1
	movl	$0, -36(%rbp)
.LBB311_28:                             # %for.cond69
                                        #   Parent Loop BB311_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB311_32 Depth 3
	cmpl	$4, -36(%rbp)
	jge	.LBB311_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB311_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB311_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB311_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-32(%rbp), %esi
	movl	-36(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB311_47
.LBB311_31:                             # %if.else84
                                        #   in Loop: Header=BB311_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-32(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-36(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB311_32:                             # %for.cond115
                                        #   Parent Loop BB311_26 Depth=1
                                        #     Parent Loop BB311_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB311_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB311_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB311_34:                             # %land.end121
                                        #   in Loop: Header=BB311_32 Depth=3
	testb	$1, %al
	jne	.LBB311_35
	jmp	.LBB311_46
.LBB311_35:                             # %for.body122
                                        #   in Loop: Header=BB311_32 Depth=3
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB311_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB311_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB311_38
.LBB311_37:                             # %if.else134
                                        #   in Loop: Header=BB311_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB311_38:                             # %if.end136
                                        #   in Loop: Header=BB311_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB311_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB311_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB311_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB311_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB311_41:                             # %lor.end149
                                        #   in Loop: Header=BB311_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB311_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB311_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB311_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB311_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB311_44:                             # %lor.end164
                                        #   in Loop: Header=BB311_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-96(%rbp), %rax
	movq	24(%rax), %rax
	movq	-112(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-104(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB311_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB311_32
.LBB311_46:                             # %for.end189
                                        #   in Loop: Header=BB311_28 Depth=2
	jmp	.LBB311_47
.LBB311_47:                             # %if.end190
                                        #   in Loop: Header=BB311_28 Depth=2
	jmp	.LBB311_48
.LBB311_48:                             # %for.inc191
                                        #   in Loop: Header=BB311_28 Depth=2
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB311_28
.LBB311_49:                             # %for.end193
                                        #   in Loop: Header=BB311_26 Depth=1
	jmp	.LBB311_50
.LBB311_50:                             # %for.inc194
                                        #   in Loop: Header=BB311_26 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB311_26
.LBB311_51:                             # %for.end196
	jmp	.LBB311_52
.LBB311_52:                             # %if.end197
	movl	-28(%rbp), %ebx
	cmpl	$1378921698, -80(%rbp)  # imm = 0x5230ACE2
	jne	.LBB311_54
.LBB311_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB311_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB311_53
.Lfunc_end311:
	.size	writeChromaCoeff.270, .Lfunc_end311-writeChromaCoeff.270
	.cfi_endproc
                                        # -- End function
	.globl	TransformDecision.271   # -- Begin function TransformDecision.271
	.p2align	4, 0x90
	.type	TransformDecision.271,@function
TransformDecision.271:                  # @TransformDecision.271
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$376, %rsp              # imm = 0x178
	.cfi_offset %rbx, -24
	movl	$1405600416, -76(%rbp)  # imm = 0x53C7C2A0
	movl	%edi, -44(%rbp)
	movq	%rsi, -96(%rbp)
	movl	$0, -32(%rbp)
	movl	$0, -36(%rbp)
	cmpl	$-1, -44(%rbp)
	jne	.LBB312_2
# %bb.1:                                # %if.then
	movl	$0, -12(%rbp)
	movl	$4, -60(%rbp)
	jmp	.LBB312_3
.LBB312_2:                              # %if.else
	movl	-44(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -60(%rbp)
.LBB312_3:                              # %if.end
	jmp	.LBB312_4
.LBB312_4:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB312_6 Depth 2
                                        #       Child Loop BB312_8 Depth 3
                                        #         Child Loop BB312_10 Depth 4
                                        #           Child Loop BB312_12 Depth 5
	movl	-12(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB312_23
# %bb.5:                                # %for.body
                                        #   in Loop: Header=BB312_4 Depth=1
	movl	-12(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-84(%rbp), %rdx
	leaq	-80(%rbp), %rcx
	leaq	-54(%rbp), %r8
	leaq	-52(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -68(%rbp)
	movl	-12(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -64(%rbp)
	movl	$0, -40(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB312_6:                              # %for.cond3
                                        #   Parent Loop BB312_4 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB312_8 Depth 3
                                        #         Child Loop BB312_10 Depth 4
                                        #           Child Loop BB312_12 Depth 5
	movl	-20(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB312_21
# %bb.7:                                # %for.body6
                                        #   in Loop: Header=BB312_6 Depth=2
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-64(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB312_8:                              # %for.cond8
                                        #   Parent Loop BB312_4 Depth=1
                                        #     Parent Loop BB312_6 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB312_10 Depth 4
                                        #           Child Loop BB312_12 Depth 5
	movl	-16(%rbp), %eax
	movl	-64(%rbp), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB312_19
# %bb.9:                                # %for.body11
                                        #   in Loop: Header=BB312_8 Depth=3
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-16(%rbp), %edi
	movl	-20(%rbp), %esi
	movswl	-50(%rbp), %edx
	movl	-84(%rbp), %ecx
	movl	-80(%rbp), %r8d
	movw	-54(%rbp), %ax
	movswl	%ax, %r9d
	movswl	-52(%rbp), %eax
	movl	%eax, (%rsp)
	callq	LumaPrediction4x4
	movslq	-40(%rbp), %rax
	shlq	$2, %rax
	leaq	-368(%rbp), %rcx
	addq	%rax, %rcx
	movq	%rcx, -104(%rbp)
	movl	$0, -24(%rbp)
.LBB312_10:                             # %for.cond13
                                        #   Parent Loop BB312_4 Depth=1
                                        #     Parent Loop BB312_6 Depth=2
                                        #       Parent Loop BB312_8 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB312_12 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB312_17
# %bb.11:                               # %for.body16
                                        #   in Loop: Header=BB312_10 Depth=4
	movl	$0, -28(%rbp)
.LBB312_12:                             # %for.cond17
                                        #   Parent Loop BB312_4 Depth=1
                                        #     Parent Loop BB312_6 Depth=2
                                        #       Parent Loop BB312_8 Depth=3
                                        #         Parent Loop BB312_10 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -28(%rbp)
	jge	.LBB312_15
# %bb.13:                               # %for.body20
                                        #   in Loop: Header=BB312_12 Depth=5
	movq	imgY_org, %rax
	movl	-72(%rbp), %ecx
	addl	-24(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-88(%rbp), %ecx
	addl	-28(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movl	-28(%rbp), %edx
	addl	-16(%rbp), %edx
	movslq	%edx, %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movl	-24(%rbp), %edx
	addl	-20(%rbp), %edx
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-40(%rbp), %rcx
	movl	%eax, -368(%rbp,%rcx,4)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB312_12 Depth=5
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-40(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -40(%rbp)
	jmp	.LBB312_12
.LBB312_15:                             # %for.end
                                        #   in Loop: Header=BB312_10 Depth=4
	jmp	.LBB312_16
.LBB312_16:                             # %for.inc38
                                        #   in Loop: Header=BB312_10 Depth=4
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB312_10
.LBB312_17:                             # %for.end40
                                        #   in Loop: Header=BB312_8 Depth=3
	movq	-104(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
# %bb.18:                               # %for.inc42
                                        #   in Loop: Header=BB312_8 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB312_8
.LBB312_19:                             # %for.end44
                                        #   in Loop: Header=BB312_6 Depth=2
	jmp	.LBB312_20
.LBB312_20:                             # %for.inc45
                                        #   in Loop: Header=BB312_6 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB312_6
.LBB312_21:                             # %for.end47
                                        #   in Loop: Header=BB312_4 Depth=1
	leaq	-368(%rbp), %rdi
	movq	input, %rax
	movl	24(%rax), %esi
	callq	SATD8X8
	addl	-32(%rbp), %eax
	movl	%eax, -32(%rbp)
# %bb.22:                               # %for.inc51
                                        #   in Loop: Header=BB312_4 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB312_4
.LBB312_23:                             # %for.end53
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB312_25
# %bb.24:                               # %if.then56
	movl	$1, -48(%rbp)
	jmp	.LBB312_28
.LBB312_25:                             # %if.else57
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB312_27
# %bb.26:                               # %if.then60
	movl	$1, -48(%rbp)
	jmp	.LBB312_28
.LBB312_27:                             # %if.else61
	movq	-96(%rbp), %rax
	movl	(%rax), %eax
	subl	-32(%rbp), %eax
	addl	-36(%rbp), %eax
	movq	-96(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	$0, -48(%rbp)
.LBB312_28:                             # %return
	movl	-48(%rbp), %ebx
	cmpl	$1405600416, -76(%rbp)  # imm = 0x53C7C2A0
	jne	.LBB312_30
.LBB312_29:
	movl	%ebx, %eax
	addq	$376, %rsp              # imm = 0x178
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB312_30:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB312_29
.Lfunc_end312:
	.size	TransformDecision.271, .Lfunc_end312-TransformDecision.271
	.cfi_endproc
                                        # -- End function
	.globl	writeLumaCoeff4x4_CABAC.272 # -- Begin function writeLumaCoeff4x4_CABAC.272
	.p2align	4, 0x90
	.type	writeLumaCoeff4x4_CABAC.272,@function
writeLumaCoeff4x4_CABAC.272:            # @writeLumaCoeff4x4_CABAC.272
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1575752429, -52(%rbp)  # imm = 0x5DEC12ED
	movl	%edi, -28(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -32(%rbp)
	movl	$0, -36(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -72(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-28(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -88(%rbp)
	movl	-28(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB313_2
# %bb.1:                                # %cond.true
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB313_3
.LBB313_2:                              # %cond.false
	movl	-12(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB313_3:                              # %cond.end
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	cmpl	$2, -28(%rbp)
	jge	.LBB313_5
# %bb.4:                                # %cond.true23
	xorl	%ecx, %ecx
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB313_6
.LBB313_5:                              # %cond.false26
	movl	-12(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB313_6:                              # %cond.end29
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movl	$1, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB313_7:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	xorl	%eax, %eax
	cmpl	$16, -16(%rbp)
	jg	.LBB313_9
# %bb.8:                                # %land.rhs
                                        #   in Loop: Header=BB313_7 Depth=1
	cmpl	$0, -40(%rbp)
	setne	%al
.LBB313_9:                              # %land.end
                                        #   in Loop: Header=BB313_7 Depth=1
	testb	$1, %al
	jne	.LBB313_10
	jmp	.LBB313_15
.LBB313_10:                             # %for.body
                                        #   in Loop: Header=BB313_7 Depth=1
	movq	-80(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -40(%rbp)
	movq	-88(%rbp), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -108(%rbp)
	movq	-24(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
	movq	-24(%rbp), %rax
	movl	$5, 24(%rax)
	cmpl	$0, -16(%rbp)
	jne	.LBB313_12
# %bb.11:                               # %cond.true38
                                        #   in Loop: Header=BB313_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$7, %ecx
	movl	$12, %eax
	cmovnel	%ecx, %eax
	jmp	.LBB313_13
.LBB313_12:                             # %cond.false40
                                        #   in Loop: Header=BB313_7 Depth=1
	movl	-32(%rbp), %eax
	cmpl	$0, %eax
	movl	$9, %ecx
	movl	$14, %eax
	cmovnel	%ecx, %eax
.LBB313_13:                             # %cond.end43
                                        #   in Loop: Header=BB313_7 Depth=1
	movq	-24(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-32(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-72(%rbp), %rcx
	movq	-24(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	112(%rax), %rax
	movq	-24(%rbp), %rdi
	movq	-64(%rbp), %rsi
	callq	*%rax
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	-96(%rbp), %rcx
	addl	20(%rcx), %eax
	movl	%eax, 20(%rcx)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	addl	-36(%rbp), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -24(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.14:                               # %for.inc
                                        #   in Loop: Header=BB313_7 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB313_7
.LBB313_15:                             # %for.end
	movl	-36(%rbp), %ebx
	cmpl	$1575752429, -52(%rbp)  # imm = 0x5DEC12ED
	jne	.LBB313_17
.LBB313_16:
	movl	%ebx, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB313_17:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB313_16
.Lfunc_end313:
	.size	writeLumaCoeff4x4_CABAC.272, .Lfunc_end313-writeLumaCoeff4x4_CABAC.272
	.cfi_endproc
                                        # -- End function
	.globl	proceed2nextMacroblock.273 # -- Begin function proceed2nextMacroblock.273
	.p2align	4, 0x90
	.type	proceed2nextMacroblock.273,@function
proceed2nextMacroblock.273:             # @proceed2nextMacroblock.273
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1650601145, -28(%rbp)  # imm = 0x62622CB9
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	-8(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -24(%rbp)
	movq	-24(%rbp), %rax
	movl	8(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1348(%rcx,%rdx,4), %eax
	movl	%eax, 1348(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	20(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1408(%rcx,%rdx,4), %eax
	movl	%eax, 1408(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1388(%rcx,%rdx,4), %eax
	movl	%eax, 1388(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	24(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1428(%rcx,%rdx,4), %eax
	movl	%eax, 1428(%rcx,%rdx,4)
	movq	-24(%rbp), %rax
	movl	28(%rax), %eax
	movq	stats, %rcx
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	addl	1448(%rcx,%rdx,4), %eax
	movl	%eax, 1448(%rcx,%rdx,4)
	movq	-8(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB314_3
# %bb.1:                                # %lor.lhs.false
	movq	-8(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB314_3
# %bb.2:                                # %lor.lhs.false26
	movq	-8(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB314_9
.LBB314_3:                              # %if.then
	movq	stats, %rax
	movq	-8(%rbp), %rcx
	movslq	524(%rcx), %rcx
	movl	672(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, 672(%rax,%rcx,4)
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB314_8
# %bb.4:                                # %if.then32
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB314_6
# %bb.5:                                # %if.then33
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB314_7
.LBB314_6:                              # %if.else
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB314_7:                              # %if.end
	jmp	.LBB314_8
.LBB314_8:                              # %if.end48
	jmp	.LBB314_9
.LBB314_9:                              # %if.end49
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addq	$1028, %rcx             # imm = 0x404
	movq	img, %rdx
	movslq	24(%rdx), %rdx
	imulq	$60, %rdx, %rdx
	addq	%rdx, %rcx
	movq	-8(%rbp), %rdx
	movslq	72(%rdx), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB314_35
# %bb.10:                               # %if.then67
	movq	-8(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB314_26
# %bb.11:                               # %if.then70
	movl	$0, -12(%rbp)
.LBB314_12:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -12(%rbp)
	jge	.LBB314_25
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB314_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$0, 472(%rax,%rcx,4)
	jle	.LBB314_15
# %bb.14:                               # %if.then75
                                        #   in Loop: Header=BB314_12 Depth=1
	movq	stats, %rax
	addq	$728, %rax              # imm = 0x2D8
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movslq	472(%rcx,%rdx,4), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB314_16
.LBB314_15:                             # %if.else86
                                        #   in Loop: Header=BB314_12 Depth=1
	movq	stats, %rax
	addq	$32, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	572(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB314_16:                             # %if.end94
                                        #   in Loop: Header=BB314_12 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	cmpl	$4, 472(%rax,%rcx,4)
	jne	.LBB314_23
# %bb.17:                               # %if.then99
                                        #   in Loop: Header=BB314_12 Depth=1
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB314_19
# %bb.18:                               # %land.lhs.true
                                        #   in Loop: Header=BB314_12 Depth=1
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	jne	.LBB314_20
.LBB314_19:                             # %lor.lhs.false105
                                        #   in Loop: Header=BB314_12 Depth=1
	movq	input, %rax
	cmpl	$2, 3220(%rax)
	jne	.LBB314_21
.LBB314_20:                             # %if.then107
                                        #   in Loop: Header=BB314_12 Depth=1
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
	jmp	.LBB314_22
.LBB314_21:                             # %if.else114
                                        #   in Loop: Header=BB314_12 Depth=1
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movl	16(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 16(%rax)
.LBB314_22:                             # %if.end121
                                        #   in Loop: Header=BB314_12 Depth=1
	jmp	.LBB314_23
.LBB314_23:                             # %if.end122
                                        #   in Loop: Header=BB314_12 Depth=1
	jmp	.LBB314_24
.LBB314_24:                             # %for.inc
                                        #   in Loop: Header=BB314_12 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB314_12
.LBB314_25:                             # %for.end
	jmp	.LBB314_34
.LBB314_26:                             # %if.else124
	movq	-8(%rbp), %rax
	cmpl	$0, 72(%rax)
	jl	.LBB314_33
# %bb.27:                               # %land.lhs.true127
	movq	-8(%rbp), %rax
	cmpl	$3, 72(%rax)
	jg	.LBB314_33
# %bb.28:                               # %land.lhs.true130
	movq	-8(%rbp), %rax
	movl	460(%rax), %eax
	andl	$15, %eax
	cmpl	$0, %eax
	je	.LBB314_33
# %bb.29:                               # %if.then134
	movq	-8(%rbp), %rax
	cmpl	$0, 572(%rax)
	je	.LBB314_31
# %bb.30:                               # %if.then137
	movq	stats, %rax
	addq	$72, %rax
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
	jmp	.LBB314_32
.LBB314_31:                             # %if.else146
	movq	stats, %rax
	addq	$372, %rax              # imm = 0x174
	movq	img, %rcx
	movslq	24(%rcx), %rcx
	imulq	$60, %rcx, %rcx
	addq	%rcx, %rax
	movq	-8(%rbp), %rcx
	movslq	72(%rcx), %rcx
	movl	(%rax,%rcx,4), %edx
	addl	$1, %edx
	movl	%edx, (%rax,%rcx,4)
.LBB314_32:                             # %if.end155
	jmp	.LBB314_33
.LBB314_33:                             # %if.end156
	jmp	.LBB314_34
.LBB314_34:                             # %if.end157
	jmp	.LBB314_35
.LBB314_35:                             # %if.end158
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB314_37
# %bb.36:                               # %lor.lhs.false161
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB314_38
.LBB314_37:                             # %if.then164
	movq	stats, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	stats, %rcx
	addl	4(%rcx), %eax
	movl	%eax, 4(%rcx)
.LBB314_38:                             # %if.end167
	cmpl	$1650601145, -28(%rbp)  # imm = 0x62622CB9
	jne	.LBB314_40
.LBB314_39:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB314_40:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB314_39
.Lfunc_end314:
	.size	proceed2nextMacroblock.273, .Lfunc_end314-proceed2nextMacroblock.273
	.cfi_endproc
                                        # -- End function
	.globl	writeCoeff4x4_CAVLC.274 # -- Begin function writeCoeff4x4_CAVLC.274
	.p2align	4, 0x90
	.type	writeCoeff4x4_CAVLC.274,@function
writeCoeff4x4_CAVLC.274:                # @writeCoeff4x4_CAVLC.274
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$232, %rsp
	.cfi_offset %rbx, -24
	movl	$441138278, -172(%rbp)  # imm = 0x1A4B3C66
	movl	%edi, -168(%rbp)
	movl	%esi, -56(%rbp)
	movl	%edx, -52(%rbp)
	movl	%ecx, -68(%rbp)
	movl	$0, -40(%rbp)
	movq	img(%rip), %rax
	movq	14168(%rax), %rcx
	movslq	12(%rax), %rax
	imulq	$632, %rax, %rax        # imm = 0x278
	addq	%rax, %rcx
	movq	%rcx, -64(%rbp)
	movq	img(%rip), %rax
	movq	-64(%rbp), %rcx
	movslq	(%rcx), %rcx
	leaq	(%rcx,%rcx,2), %rcx
	shlq	$4, %rcx
	leaq	14176(%rax,%rcx), %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -152(%rbp)
	movq	img(%rip), %rax
	movq	14160(%rax), %rax
	movq	%rax, -200(%rbp)
	movq	input(%rip), %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -208(%rbp)
	movl	$0, -24(%rbp)
	movl	$0, -48(%rbp)
	movl	$0, -76(%rbp)
	movl	$0, -84(%rbp)
	movl	$0, -164(%rbp)
	vmovdqu	.L__const.writeCoeff4x4_CAVLC.incVlc+12(%rip), %xmm0
	vmovdqu	%xmm0, -228(%rbp)
	vmovdqa	.L__const.writeCoeff4x4_CAVLC.incVlc(%rip), %xmm0
	vmovdqa	%xmm0, -240(%rbp)
	movq	$0, -120(%rbp)
	movq	$0, -136(%rbp)
	movl	-168(%rbp), %eax
	movq	%rax, %rcx
	subq	$7, %rcx
	ja	.LBB315_22
# %bb.1:                                # %entry
	movq	.LJTI315_0(,%rax,8), %rax
	jmpq	*%rax
.LBB315_2:                              # %sw.bb
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.2, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB315_5
# %bb.3:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB315_5
# %bb.4:                                # %lor.lhs.false19
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB315_6
.LBB315_5:                              # %if.then
	movl	$9, -24(%rbp)
	jmp	.LBB315_7
.LBB315_6:                              # %if.else
	movl	$14, -24(%rbp)
.LBB315_7:                              # %if.end
	jmp	.LBB315_23
.LBB315_8:                              # %sw.bb22
	leaq	-187(%rbp), %rdi
	movl	$16, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movq	(%rax), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.3, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$7, -24(%rbp)
	jmp	.LBB315_23
.LBB315_9:                              # %sw.bb30
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$5, -48(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.4, %rdx
	movb	$0, %al
	callq	sprintf
	movl	$9, -24(%rbp)
	jmp	.LBB315_23
.LBB315_10:                             # %sw.bb45
	leaq	-187(%rbp), %rdi
	movq	img, %rax
	movl	72696(%rax), %eax
	movl	%eax, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -84(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-68(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.5, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB315_13
# %bb.11:                               # %lor.lhs.false59
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB315_13
# %bb.12:                               # %lor.lhs.false62
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB315_14
.LBB315_13:                             # %if.then65
	movl	$8, -24(%rbp)
	jmp	.LBB315_15
.LBB315_14:                             # %if.else66
	movl	$13, -24(%rbp)
.LBB315_15:                             # %if.end67
	jmp	.LBB315_23
.LBB315_16:                             # %sw.bb68
	leaq	-187(%rbp), %rdi
	movl	$15, -76(%rbp)
	movl	$6, -48(%rbp)
	movl	$1, -164(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movabsq	$.L.str.1, %rsi
	movabsq	$.L.str.6, %rdx
	movb	$0, %al
	callq	sprintf
	movq	-64(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB315_19
# %bb.17:                               # %lor.lhs.false85
	movq	-64(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB315_19
# %bb.18:                               # %lor.lhs.false88
	movq	-64(%rbp), %rax
	cmpl	$13, 72(%rax)
	jne	.LBB315_20
.LBB315_19:                             # %if.then91
	movl	$10, -24(%rbp)
	jmp	.LBB315_21
.LBB315_20:                             # %if.else92
	movl	$15, -24(%rbp)
.LBB315_21:                             # %if.end93
	jmp	.LBB315_23
.LBB315_22:                             # %sw.default
	movabsq	$.L.str.7, %rdi
	movl	$600, %esi              # imm = 0x258
	callq	error
.LBB315_23:                             # %sw.epilog
	movq	-200(%rbp), %rax
	movq	24(%rax), %rax
	movq	-208(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -128(%rbp)
	movl	$0, -36(%rbp)
	movl	$0, -28(%rbp)
	movl	$0, -156(%rbp)
	movl	$0, -72(%rbp)
	movl	$0, -112(%rbp)
	movl	$1, -44(%rbp)
	movl	$0, -20(%rbp)
.LBB315_24:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	cmpl	$0, -84(%rbp)
	je	.LBB315_26
# %bb.25:                               # %cond.true
                                        #   in Loop: Header=BB315_24 Depth=1
	movq	img, %rcx
	movl	72696(%rcx), %ecx
	jmp	.LBB315_27
.LBB315_26:                             # %cond.false
                                        #   in Loop: Header=BB315_24 Depth=1
	movl	$16, %ecx
	jmp	.LBB315_27
.LBB315_27:                             # %cond.end
                                        #   in Loop: Header=BB315_24 Depth=1
	xorl	%edx, %edx
	cmpl	%ecx, %eax
	jg	.LBB315_29
# %bb.28:                               # %land.rhs
                                        #   in Loop: Header=BB315_24 Depth=1
	cmpl	$0, -44(%rbp)
	setne	%dl
.LBB315_29:                             # %land.end
                                        #   in Loop: Header=BB315_24 Depth=1
	testb	$1, %dl
	jne	.LBB315_30
	jmp	.LBB315_41
.LBB315_30:                             # %for.body
                                        #   in Loop: Header=BB315_24 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	cmpl	$0, -44(%rbp)
	je	.LBB315_39
# %bb.31:                               # %if.then106
                                        #   in Loop: Header=BB315_24 Depth=1
	cmpl	$0, -80(%rbp)
	je	.LBB315_33
# %bb.32:                               # %if.then108
                                        #   in Loop: Header=BB315_24 Depth=1
	movl	-80(%rbp), %eax
	addl	-112(%rbp), %eax
	movl	%eax, -112(%rbp)
.LBB315_33:                             # %if.end110
                                        #   in Loop: Header=BB315_24 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jne	.LBB315_37
# %bb.34:                               # %if.then113
                                        #   in Loop: Header=BB315_24 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	movl	-156(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -156(%rbp)
	cmpl	$3, -28(%rbp)
	jle	.LBB315_36
# %bb.35:                               # %if.then116
                                        #   in Loop: Header=BB315_24 Depth=1
	movl	$3, -28(%rbp)
.LBB315_36:                             # %if.end117
                                        #   in Loop: Header=BB315_24 Depth=1
	jmp	.LBB315_38
.LBB315_37:                             # %if.else118
                                        #   in Loop: Header=BB315_24 Depth=1
	movl	$0, -28(%rbp)
.LBB315_38:                             # %if.end119
                                        #   in Loop: Header=BB315_24 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	movl	-20(%rbp), %eax
	movl	%eax, -72(%rbp)
.LBB315_39:                             # %if.end121
                                        #   in Loop: Header=BB315_24 Depth=1
	jmp	.LBB315_40
.LBB315_40:                             # %for.inc
                                        #   in Loop: Header=BB315_24 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB315_24
.LBB315_41:                             # %for.end
	cmpl	$0, -84(%rbp)
	jne	.LBB315_61
# %bb.42:                               # %if.then124
	cmpl	$0, -164(%rbp)
	jne	.LBB315_50
# %bb.43:                               # %if.then126
	movl	-56(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	jne	.LBB315_45
# %bb.44:                               # %cond.true128
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$1, %eax
	cmovel	%ecx, %eax
	jmp	.LBB315_46
.LBB315_45:                             # %cond.false132
	movl	-52(%rbp), %eax
	andl	$1, %eax
	cmpl	$0, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovel	%ecx, %eax
.LBB315_46:                             # %cond.end136
	movl	%eax, -100(%rbp)
	cmpl	$2, -56(%rbp)
	jge	.LBB315_48
# %bb.47:                               # %cond.true139
	xorl	%ecx, %ecx
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$1, %eax
	cmovll	%ecx, %eax
	jmp	.LBB315_49
.LBB315_48:                             # %cond.false142
	movl	-52(%rbp), %eax
	cmpl	$2, %eax
	movl	$2, %ecx
	movl	$3, %eax
	cmovll	%ecx, %eax
.LBB315_49:                             # %cond.end145
	movl	%eax, -96(%rbp)
	movl	-100(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz
	movl	%eax, -108(%rbp)
	jmp	.LBB315_51
.LBB315_50:                             # %if.else148
	movl	-68(%rbp), %eax
	sarl	$4, %eax
	movl	%eax, -100(%rbp)
	movl	-68(%rbp), %eax
	andl	$15, %eax
	movl	%eax, -96(%rbp)
	movl	-100(%rbp), %edi
	movl	-96(%rbp), %esi
	callq	predict_nnz_chroma
	movl	%eax, -108(%rbp)
.LBB315_51:                             # %if.end151
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movq	128(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-100(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-96(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	cmpl	$2, -108(%rbp)
	jge	.LBB315_53
# %bb.52:                               # %if.then160
	movl	$0, -104(%rbp)
	jmp	.LBB315_60
.LBB315_53:                             # %if.else161
	cmpl	$4, -108(%rbp)
	jge	.LBB315_55
# %bb.54:                               # %if.then163
	movl	$1, -104(%rbp)
	jmp	.LBB315_59
.LBB315_55:                             # %if.else164
	cmpl	$8, -108(%rbp)
	jge	.LBB315_57
# %bb.56:                               # %if.then166
	movl	$2, -104(%rbp)
	jmp	.LBB315_58
.LBB315_57:                             # %if.else167
	movl	$3, -104(%rbp)
.LBB315_58:                             # %if.end168
	jmp	.LBB315_59
.LBB315_59:                             # %if.end169
	jmp	.LBB315_60
.LBB315_60:                             # %if.end170
	jmp	.LBB315_62
.LBB315_61:                             # %if.else171
	movl	$0, -104(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -100(%rbp)
	movl	-68(%rbp), %eax
	movl	%eax, -96(%rbp)
.LBB315_62:                             # %if.end172
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-36(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-104(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB315_64
# %bb.63:                               # %if.then175
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnes
	jmp	.LBB315_65
.LBB315_64:                             # %if.else177
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_NumCoeffTrailingOnesChromaDC
.LBB315_65:                             # %if.end179
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	cmpl	$0, -36(%rbp)
	jne	.LBB315_67
# %bb.66:                               # %if.then189
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
	jmp	.LBB315_122
.LBB315_67:                             # %if.end190
	cmpl	$0, -36(%rbp)
	je	.LBB315_121
# %bb.68:                               # %if.then192
	movl	$0, -92(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB315_69:                             # %for.cond193
                                        # =>This Inner Loop Header: Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB315_76
# %bb.70:                               # %for.body195
                                        #   in Loop: Header=BB315_69 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$1, %eax
	jle	.LBB315_72
# %bb.71:                               # %if.then200
	movabsq	$.L.str.8, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB315_72:                             # %if.end202
                                        #   in Loop: Header=BB315_69 Depth=1
	movl	-92(%rbp), %eax
	shll	$1, %eax
	movl	%eax, -92(%rbp)
	cmpl	$0, -44(%rbp)
	jge	.LBB315_74
# %bb.73:                               # %if.then204
                                        #   in Loop: Header=BB315_69 Depth=1
	movl	-92(%rbp), %eax
	orl	$1, %eax
	movl	%eax, -92(%rbp)
.LBB315_74:                             # %if.end205
                                        #   in Loop: Header=BB315_69 Depth=1
	jmp	.LBB315_75
.LBB315_75:                             # %for.inc206
                                        #   in Loop: Header=BB315_69 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB315_69
.LBB315_76:                             # %for.end207
	cmpl	$0, -28(%rbp)
	je	.LBB315_78
# %bb.77:                               # %if.then209
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-28(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	-92(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_VLC
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB315_78:                             # %if.end223
	movl	$1, -144(%rbp)
	cmpl	$3, -36(%rbp)
	jle	.LBB315_81
# %bb.79:                               # %land.lhs.true
	cmpl	$3, -28(%rbp)
	jne	.LBB315_81
# %bb.80:                               # %if.then226
	movl	$0, -144(%rbp)
.LBB315_81:                             # %if.end227
	cmpl	$10, -36(%rbp)
	jle	.LBB315_84
# %bb.82:                               # %land.lhs.true229
	cmpl	$3, -28(%rbp)
	jge	.LBB315_84
# %bb.83:                               # %if.then231
	movl	$1, -32(%rbp)
	jmp	.LBB315_85
.LBB315_84:                             # %if.else232
	movl	$0, -32(%rbp)
.LBB315_85:                             # %if.end233
	movl	-72(%rbp), %eax
	subl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB315_86:                             # %for.cond235
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB315_102
# %bb.87:                               # %for.body237
                                        #   in Loop: Header=BB315_86 Depth=1
	movq	-120(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movl	-44(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$0, -144(%rbp)
	je	.LBB315_92
# %bb.88:                               # %if.then243
                                        #   in Loop: Header=BB315_86 Depth=1
	movq	-16(%rbp), %rax
	cmpl	$0, 4(%rax)
	jle	.LBB315_90
# %bb.89:                               # %if.then246
                                        #   in Loop: Header=BB315_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$-1, %ecx
	movl	%ecx, 4(%rax)
	jmp	.LBB315_91
.LBB315_90:                             # %if.else249
                                        #   in Loop: Header=BB315_86 Depth=1
	movq	-16(%rbp), %rax
	movl	4(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 4(%rax)
.LBB315_91:                             # %if.end252
                                        #   in Loop: Header=BB315_86 Depth=1
	movl	$0, -144(%rbp)
.LBB315_92:                             # %if.end253
                                        #   in Loop: Header=BB315_86 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB315_94
# %bb.93:                               # %if.then255
                                        #   in Loop: Header=BB315_86 Depth=1
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Level_VLC1
	jmp	.LBB315_95
.LBB315_94:                             # %if.else257
                                        #   in Loop: Header=BB315_86 Depth=1
	movq	-16(%rbp), %rdi
	movl	-32(%rbp), %esi
	movq	-128(%rbp), %rdx
	callq	writeSyntaxElement_Level_VLCN
.LBB315_95:                             # %if.end259
                                        #   in Loop: Header=BB315_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	movslq	-32(%rbp), %rcx
	cmpl	-240(%rbp,%rcx,4), %eax
	jle	.LBB315_97
# %bb.96:                               # %if.then264
                                        #   in Loop: Header=BB315_86 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
.LBB315_97:                             # %if.end266
                                        #   in Loop: Header=BB315_86 Depth=1
	movl	-20(%rbp), %eax
	movl	-72(%rbp), %ecx
	subl	-28(%rbp), %ecx
	cmpl	%ecx, %eax
	jne	.LBB315_100
# %bb.98:                               # %land.lhs.true269
                                        #   in Loop: Header=BB315_86 Depth=1
	movl	-44(%rbp), %edi
	callq	abs
	cmpl	$3, %eax
	jle	.LBB315_100
# %bb.99:                               # %if.then272
                                        #   in Loop: Header=BB315_86 Depth=1
	movl	$2, -32(%rbp)
.LBB315_100:                            # %if.end273
                                        #   in Loop: Header=BB315_86 Depth=1
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.101:                              # %for.inc283
                                        #   in Loop: Header=BB315_86 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB315_86
.LBB315_102:                            # %for.end285
	movl	-36(%rbp), %eax
	cmpl	-76(%rbp), %eax
	jge	.LBB315_107
# %bb.103:                              # %if.then287
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	movl	-112(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-36(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	cmpl	$0, -84(%rbp)
	jne	.LBB315_105
# %bb.104:                              # %if.then293
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZeros
	jmp	.LBB315_106
.LBB315_105:                            # %if.else295
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_TotalZerosChromaDC
.LBB315_106:                            # %if.end297
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB315_107:                            # %if.end307
	movl	-112(%rbp), %eax
	movl	%eax, -88(%rbp)
	movl	-36(%rbp), %eax
	movl	%eax, -140(%rbp)
	movl	-72(%rbp), %eax
	movl	%eax, -20(%rbp)
.LBB315_108:                            # %for.cond308
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$0, -20(%rbp)
	jl	.LBB315_119
# %bb.109:                              # %for.body310
                                        #   in Loop: Header=BB315_108 Depth=1
	movq	-136(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movl	%eax, -80(%rbp)
	movl	-80(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	-24(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, (%rcx)
	cmpl	$1, -36(%rbp)
	jle	.LBB315_111
# %bb.110:                              # %lor.lhs.false316
                                        #   in Loop: Header=BB315_108 Depth=1
	cmpl	$0, -88(%rbp)
	jne	.LBB315_112
.LBB315_111:                            # %if.then318
	jmp	.LBB315_120
.LBB315_112:                            # %if.end319
                                        #   in Loop: Header=BB315_108 Depth=1
	cmpl	$1, -140(%rbp)
	jle	.LBB315_117
# %bb.113:                              # %land.lhs.true321
                                        #   in Loop: Header=BB315_108 Depth=1
	cmpl	$0, -88(%rbp)
	je	.LBB315_117
# %bb.114:                              # %if.then323
                                        #   in Loop: Header=BB315_108 Depth=1
	movl	-88(%rbp), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$6, -32(%rbp)
	jle	.LBB315_116
# %bb.115:                              # %if.then326
                                        #   in Loop: Header=BB315_108 Depth=1
	movl	$6, -32(%rbp)
.LBB315_116:                            # %if.end327
                                        #   in Loop: Header=BB315_108 Depth=1
	movl	-32(%rbp), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-16(%rbp), %rdi
	movq	-128(%rbp), %rsi
	callq	writeSyntaxElement_Run
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-152(%rbp), %rcx
	movslq	-48(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
	movl	%eax, (%rcx,%rdx,4)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-40(%rbp), %eax
	movl	%eax, -40(%rbp)
	movl	-80(%rbp), %eax
	movl	-88(%rbp), %ecx
	subl	%eax, %ecx
	movl	%ecx, -88(%rbp)
	movl	-140(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -140(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-64(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
.LBB315_117:                            # %if.end341
                                        #   in Loop: Header=BB315_108 Depth=1
	jmp	.LBB315_118
.LBB315_118:                            # %for.inc342
                                        #   in Loop: Header=BB315_108 Depth=1
	movl	-20(%rbp), %eax
	addl	$-1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB315_108
.LBB315_119:                            # %for.end344.loopexit
	jmp	.LBB315_120
.LBB315_120:                            # %for.end344
	jmp	.LBB315_121
.LBB315_121:                            # %if.end345
	movl	-40(%rbp), %eax
	movl	%eax, -160(%rbp)
.LBB315_122:                            # %return
	movl	-160(%rbp), %ebx
	cmpl	$441138278, -172(%rbp)  # imm = 0x1A4B3C66
	jne	.LBB315_124
.LBB315_123:
	movl	%ebx, %eax
	addq	$232, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB315_124:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB315_123
.Lfunc_end315:
	.size	writeCoeff4x4_CAVLC.274, .Lfunc_end315-writeCoeff4x4_CAVLC.274
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI315_0:
	.quad	.LBB315_2
	.quad	.LBB315_8
	.quad	.LBB315_9
	.quad	.LBB315_22
	.quad	.LBB315_22
	.quad	.LBB315_22
	.quad	.LBB315_10
	.quad	.LBB315_16
                                        # -- End function
	.text
	.globl	ChromaResidualCoding.275 # -- Begin function ChromaResidualCoding.275
	.p2align	4, 0x90
	.type	ChromaResidualCoding.275,@function
ChromaResidualCoding.275:               # @ChromaResidualCoding.275
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$288, %rsp              # imm = 0x120
	xorl	%eax, %eax
	movl	$184211705, -80(%rbp)   # imm = 0xAFAD8F9
	movq	%rdi, -48(%rbp)
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	$0, 72(%rcx)
	jne	.LBB316_4
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB316_3
# %bb.2:                                # %lor.rhs
	movq	img, %rax
	cmpl	$3, 24(%rax)
	sete	%al
.LBB316_3:                              # %lor.end
.LBB316_4:                              # %land.end
	movabsq	$.L__const.ChromaResidualCoding.block8x8_idx, %rsi
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -68(%rbp)
	leaq	-272(%rbp), %rdi
	movl	$192, %edx
	callq	memcpy
	movq	-48(%rbp), %rax
	movl	$0, (%rax)
	movl	$0, -12(%rbp)
.LBB316_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB316_7 Depth 2
                                        #       Child Loop BB316_9 Depth 3
                                        #     Child Loop BB316_16 Depth 2
                                        #       Child Loop BB316_18 Depth 3
                                        #     Child Loop BB316_33 Depth 2
                                        #       Child Loop BB316_35 Depth 3
                                        #     Child Loop BB316_43 Depth 2
                                        #       Child Loop BB316_45 Depth 3
                                        #     Child Loop BB316_58 Depth 2
                                        #       Child Loop BB316_60 Depth 3
                                        #     Child Loop BB316_87 Depth 2
                                        #       Child Loop BB316_89 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB316_102
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	$0, -64(%rbp)
	movl	$0, -20(%rbp)
.LBB316_7:                              # %for.cond5
                                        #   Parent Loop BB316_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB316_9 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB316_14
# %bb.8:                                # %for.body7
                                        #   in Loop: Header=BB316_7 Depth=2
	movl	$0, -16(%rbp)
.LBB316_9:                              # %for.cond8
                                        #   Parent Loop BB316_5 Depth=1
                                        #     Parent Loop BB316_7 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-16(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB316_12
# %bb.10:                               # %for.body10
                                        #   in Loop: Header=BB316_9 Depth=3
	movslq	-68(%rbp), %rax
	shlq	$6, %rax
	leaq	-272(%rbp), %rcx
	addq	%rax, %rcx
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	cltq
	shlq	$4, %rax
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movl	%eax, -64(%rbp)
	movl	-64(%rbp), %edi
	leaq	-50(%rbp), %rsi
	leaq	-72(%rbp), %rdx
	leaq	-76(%rbp), %rcx
	leaq	-52(%rbp), %r8
	leaq	-54(%rbp), %r9
	callq	SetModesAndRefframe
	movl	-12(%rbp), %edi
	movl	-16(%rbp), %esi
	movl	-20(%rbp), %edx
	movswl	-50(%rbp), %ecx
	movl	-72(%rbp), %r8d
	movl	-76(%rbp), %r9d
	movw	-52(%rbp), %ax
	cwtl
	movl	%eax, (%rsp)
	movswl	-54(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	ChromaPrediction4x4
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB316_9 Depth=3
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB316_9
.LBB316_12:                             # %for.end
                                        #   in Loop: Header=BB316_7 Depth=2
	jmp	.LBB316_13
.LBB316_13:                             # %for.inc18
                                        #   in Loop: Header=BB316_7 Depth=2
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB316_7
.LBB316_14:                             # %for.end20
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	je	.LBB316_30
# %bb.15:                               # %if.then
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	$0, -4(%rbp)
.LBB316_16:                             # %for.cond21
                                        #   Parent Loop BB316_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB316_18 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB316_29
# %bb.17:                               # %for.body25
                                        #   in Loop: Header=BB316_16 Depth=2
	movl	$0, -8(%rbp)
.LBB316_18:                             # %for.cond26
                                        #   Parent Loop BB316_5 Depth=1
                                        #     Parent Loop BB316_16 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB316_27
# %bb.19:                               # %for.body30
                                        #   in Loop: Header=BB316_18 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB316_21
# %bb.20:                               # %if.then32
                                        #   in Loop: Header=BB316_18 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB316_25
.LBB316_21:                             # %if.else
                                        #   in Loop: Header=BB316_18 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB316_23
# %bb.22:                               # %if.then47
                                        #   in Loop: Header=BB316_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB316_24
.LBB316_23:                             # %if.else52
                                        #   in Loop: Header=BB316_18 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB316_24:                             # %if.end
                                        #   in Loop: Header=BB316_18 Depth=3
	jmp	.LBB316_25
.LBB316_25:                             # %if.end57
                                        #   in Loop: Header=BB316_18 Depth=3
	jmp	.LBB316_26
.LBB316_26:                             # %for.inc58
                                        #   in Loop: Header=BB316_18 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB316_18
.LBB316_27:                             # %for.end59
                                        #   in Loop: Header=BB316_16 Depth=2
	jmp	.LBB316_28
.LBB316_28:                             # %for.inc60
                                        #   in Loop: Header=BB316_16 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB316_16
.LBB316_29:                             # %for.end62
                                        #   in Loop: Header=BB316_5 Depth=1
	jmp	.LBB316_74
.LBB316_30:                             # %if.else63
                                        #   in Loop: Header=BB316_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB316_41
# %bb.31:                               # %land.lhs.true
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB316_41
# %bb.32:                               # %if.then68
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	$0, -4(%rbp)
.LBB316_33:                             # %for.cond69
                                        #   Parent Loop BB316_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB316_35 Depth 3
	cmpl	$8, -4(%rbp)
	jge	.LBB316_40
# %bb.34:                               # %for.body72
                                        #   in Loop: Header=BB316_33 Depth=2
	movl	$0, -8(%rbp)
.LBB316_35:                             # %for.cond73
                                        #   Parent Loop BB316_5 Depth=1
                                        #     Parent Loop BB316_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$8, -8(%rbp)
	jge	.LBB316_38
# %bb.36:                               # %for.body76
                                        #   in Loop: Header=BB316_35 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.37:                               # %for.inc81
                                        #   in Loop: Header=BB316_35 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB316_35
.LBB316_38:                             # %for.end83
                                        #   in Loop: Header=BB316_33 Depth=2
	jmp	.LBB316_39
.LBB316_39:                             # %for.inc84
                                        #   in Loop: Header=BB316_33 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB316_33
.LBB316_40:                             # %for.end86
                                        #   in Loop: Header=BB316_5 Depth=1
	jmp	.LBB316_73
.LBB316_41:                             # %if.else87
                                        #   in Loop: Header=BB316_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB316_57
# %bb.42:                               # %if.then89
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	$0, -4(%rbp)
.LBB316_43:                             # %for.cond90
                                        #   Parent Loop BB316_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB316_45 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB316_56
# %bb.44:                               # %for.body94
                                        #   in Loop: Header=BB316_43 Depth=2
	movl	$0, -8(%rbp)
.LBB316_45:                             # %for.cond95
                                        #   Parent Loop BB316_5 Depth=1
                                        #     Parent Loop BB316_43 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB316_54
# %bb.46:                               # %for.body99
                                        #   in Loop: Header=BB316_45 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB316_48
# %bb.47:                               # %if.then102
                                        #   in Loop: Header=BB316_45 Depth=3
	movq	img, %rax
	addq	$12600, %rax            # imm = 0x3138
	movslq	-8(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	jmp	.LBB316_52
.LBB316_48:                             # %if.else119
                                        #   in Loop: Header=BB316_45 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB316_50
# %bb.49:                               # %if.then122
                                        #   in Loop: Header=BB316_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resR, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
	jmp	.LBB316_51
.LBB316_50:                             # %if.else127
                                        #   in Loop: Header=BB316_45 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$rec_resB, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
.LBB316_51:                             # %if.end132
                                        #   in Loop: Header=BB316_45 Depth=3
	jmp	.LBB316_52
.LBB316_52:                             # %if.end133
                                        #   in Loop: Header=BB316_45 Depth=3
	jmp	.LBB316_53
.LBB316_53:                             # %for.inc134
                                        #   in Loop: Header=BB316_45 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB316_45
.LBB316_54:                             # %for.end136
                                        #   in Loop: Header=BB316_43 Depth=2
	jmp	.LBB316_55
.LBB316_55:                             # %for.inc137
                                        #   in Loop: Header=BB316_43 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB316_43
.LBB316_56:                             # %for.end139
                                        #   in Loop: Header=BB316_5 Depth=1
	jmp	.LBB316_72
.LBB316_57:                             # %if.else140
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	$0, -4(%rbp)
.LBB316_58:                             # %for.cond141
                                        #   Parent Loop BB316_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB316_60 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB316_71
# %bb.59:                               # %for.body145
                                        #   in Loop: Header=BB316_58 Depth=2
	movl	$0, -8(%rbp)
.LBB316_60:                             # %for.cond146
                                        #   Parent Loop BB316_5 Depth=1
                                        #     Parent Loop BB316_58 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB316_69
# %bb.61:                               # %for.body150
                                        #   in Loop: Header=BB316_60 Depth=3
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	jne	.LBB316_63
# %bb.62:                               # %if.then153
                                        #   in Loop: Header=BB316_60 Depth=3
	movq	imgUV_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	180(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	176(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB316_67
.LBB316_63:                             # %if.else175
                                        #   in Loop: Header=BB316_60 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB316_65
# %bb.64:                               # %if.then178
                                        #   in Loop: Header=BB316_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_R, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	jmp	.LBB316_66
.LBB316_65:                             # %if.else188
                                        #   in Loop: Header=BB316_60 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	movabsq	$resTrans_B, %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	movq	img, %rcx
	addq	$13112, %rcx            # imm = 0x3338
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
.LBB316_66:                             # %if.end198
                                        #   in Loop: Header=BB316_60 Depth=3
	jmp	.LBB316_67
.LBB316_67:                             # %if.end199
                                        #   in Loop: Header=BB316_60 Depth=3
	jmp	.LBB316_68
.LBB316_68:                             # %for.inc200
                                        #   in Loop: Header=BB316_60 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB316_60
.LBB316_69:                             # %for.end202
                                        #   in Loop: Header=BB316_58 Depth=2
	jmp	.LBB316_70
.LBB316_70:                             # %for.inc203
                                        #   in Loop: Header=BB316_58 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB316_58
.LBB316_71:                             # %for.end205
                                        #   in Loop: Header=BB316_5 Depth=1
	jmp	.LBB316_72
.LBB316_72:                             # %if.end206
                                        #   in Loop: Header=BB316_5 Depth=1
	jmp	.LBB316_73
.LBB316_73:                             # %if.end207
                                        #   in Loop: Header=BB316_5 Depth=1
	jmp	.LBB316_74
.LBB316_74:                             # %if.end208
                                        #   in Loop: Header=BB316_5 Depth=1
	cmpl	$0, -32(%rbp)
	je	.LBB316_77
# %bb.75:                               # %land.lhs.true210
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB316_77
# %bb.76:                               # %if.then214
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB316_100
.LBB316_77:                             # %if.else215
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72392(%rax)
	jne	.LBB316_99
# %bb.78:                               # %land.lhs.true218
                                        #   in Loop: Header=BB316_5 Depth=1
	cmpl	$0, -32(%rbp)
	jne	.LBB316_99
# %bb.79:                               # %if.then220
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB316_83
# %bb.80:                               # %lor.lhs.false
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$9, 72(%rax)
	je	.LBB316_83
# %bb.81:                               # %lor.lhs.false231
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$10, 72(%rax)
	je	.LBB316_83
# %bb.82:                               # %lor.lhs.false239
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$13, 72(%rax)
	jne	.LBB316_84
.LBB316_83:                             # %if.then247
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB316_85
.LBB316_84:                             # %if.else249
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	-12(%rbp), %edi
	movq	-48(%rbp), %rax
	movl	(%rax), %esi
	callq	dct_chroma_sp
	movq	-48(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB316_85:                             # %if.end251
                                        #   in Loop: Header=BB316_5 Depth=1
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB316_98
# %bb.86:                               # %if.then254
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	$0, -4(%rbp)
.LBB316_87:                             # %for.cond255
                                        #   Parent Loop BB316_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB316_89 Depth 3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB316_97
# %bb.88:                               # %for.body259
                                        #   in Loop: Header=BB316_87 Depth=2
	movl	$0, -8(%rbp)
.LBB316_89:                             # %for.cond260
                                        #   Parent Loop BB316_5 Depth=1
                                        #     Parent Loop BB316_87 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB316_95
# %bb.90:                               # %for.body264
                                        #   in Loop: Header=BB316_89 Depth=3
	cmpl	$0, -12(%rbp)
	jne	.LBB316_92
# %bb.91:                               # %if.then267
                                        #   in Loop: Header=BB316_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resR, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
	jmp	.LBB316_93
.LBB316_92:                             # %if.else277
                                        #   in Loop: Header=BB316_89 Depth=3
	movq	img, %rax
	addq	$13112, %rax            # imm = 0x3338
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$rec_resB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
.LBB316_93:                             # %if.end287
                                        #   in Loop: Header=BB316_89 Depth=3
	jmp	.LBB316_94
.LBB316_94:                             # %for.inc288
                                        #   in Loop: Header=BB316_89 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB316_89
.LBB316_95:                             # %for.end290
                                        #   in Loop: Header=BB316_87 Depth=2
	jmp	.LBB316_96
.LBB316_96:                             # %for.inc291
                                        #   in Loop: Header=BB316_87 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB316_87
.LBB316_97:                             # %for.end293
                                        #   in Loop: Header=BB316_5 Depth=1
	jmp	.LBB316_98
.LBB316_98:                             # %if.end294
                                        #   in Loop: Header=BB316_5 Depth=1
	jmp	.LBB316_99
.LBB316_99:                             # %if.end295
                                        #   in Loop: Header=BB316_5 Depth=1
	jmp	.LBB316_100
.LBB316_100:                            # %if.end296
                                        #   in Loop: Header=BB316_5 Depth=1
	jmp	.LBB316_101
.LBB316_101:                            # %for.inc297
                                        #   in Loop: Header=BB316_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB316_5
.LBB316_102:                            # %for.end299
	movq	-48(%rbp), %rax
	movl	(%rax), %eax
	shll	$4, %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movslq	12(%rdx), %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	addl	460(%rcx), %eax
	movl	%eax, 460(%rcx)
	movq	img, %rax
	cmpl	$0, 72724(%rax)
	je	.LBB316_139
# %bb.103:                              # %if.then307
	movl	$0, -4(%rbp)
.LBB316_104:                            # %for.cond308
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB316_106 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB316_138
# %bb.105:                              # %for.body311
                                        #   in Loop: Header=BB316_104 Depth=1
	movl	$0, -8(%rbp)
.LBB316_106:                            # %for.cond312
                                        #   Parent Loop BB316_104 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB316_136
# %bb.107:                              # %for.body315
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%r8d, %r8d
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resG, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	movl	(%rsi,%rdx,4), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$rec_resB, %rax
	movq	%rax, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	movl	(%rdi,%rsi,4), %esi
	sarl	$1, %esi
	subl	%esi, %edx
	movl	%edx, -60(%rbp)
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-4(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	-60(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-60(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$rec_resR, %rsi
	movq	%rsi, %rdi
	addq	%rdx, %rdi
	movslq	-4(%rbp), %rdx
	movl	(%rdi,%rdx,4), %edx
	sarl	$1, %edx
	subl	%edx, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	72688(%rax), %edx
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
	cmpl	%eax, %r8d
	jle	.LBB316_109
# %bb.108:                              # %cond.true
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB316_110
.LBB316_109:                            # %cond.false
                                        #   in Loop: Header=BB316_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %eax
.LBB316_110:                            # %cond.end
                                        #   in Loop: Header=BB316_106 Depth=2
	cmpl	%eax, %edx
	jge	.LBB316_112
# %bb.111:                              # %cond.true356
                                        #   in Loop: Header=BB316_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB316_116
.LBB316_112:                            # %cond.false358
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB316_114
# %bb.113:                              # %cond.true366
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB316_115
.LBB316_114:                            # %cond.false367
                                        #   in Loop: Header=BB316_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$1024, %rcx             # imm = 0x400
	movl	-24(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB316_115:                            # %cond.end373
                                        #   in Loop: Header=BB316_106 Depth=2
.LBB316_116:                            # %cond.end375
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%ecx, %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movq	img, %rsi
	movl	156(%rsi), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	img, %rsi
	movl	152(%rsi), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movq	img, %rax
	movl	72684(%rax), %eax
	movl	-36(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	movabsq	$mprRGB, %rdi
	addq	%rsi, %rdi
	movslq	-4(%rbp), %rsi
	addl	(%rdi,%rsi,4), %edx
	cmpl	%edx, %ecx
	jle	.LBB316_118
# %bb.117:                              # %cond.true393
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB316_119
.LBB316_118:                            # %cond.false394
                                        #   in Loop: Header=BB316_106 Depth=2
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
.LBB316_119:                            # %cond.end400
                                        #   in Loop: Header=BB316_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB316_121
# %bb.120:                              # %cond.true404
                                        #   in Loop: Header=BB316_106 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB316_125
.LBB316_121:                            # %cond.false406
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%eax, %eax
	movl	-36(%rbp), %ecx
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	movabsq	$mprRGB, %rsi
	addq	%rdx, %rsi
	movslq	-4(%rbp), %rdx
	addl	(%rsi,%rdx,4), %ecx
	cmpl	%ecx, %eax
	jle	.LBB316_123
# %bb.122:                              # %cond.true414
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB316_124
.LBB316_123:                            # %cond.false415
                                        #   in Loop: Header=BB316_106 Depth=2
	movl	-36(%rbp), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	movabsq	$mprRGB, %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	addl	(%rdx,%rcx,4), %eax
.LBB316_124:                            # %cond.end421
                                        #   in Loop: Header=BB316_106 Depth=2
.LBB316_125:                            # %cond.end423
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%ecx, %ecx
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movq	enc_picture, %rsi
	movq	6424(%rsi), %rsi
	movq	img, %rdi
	movl	156(%rdi), %edi
	addl	-4(%rbp), %edi
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	img, %rdi
	movl	152(%rdi), %edi
	addl	-8(%rbp), %edi
	movslq	%edi, %rdi
	movw	%ax, (%rsi,%rdi,2)
	movq	img, %rax
	movl	72688(%rax), %eax
	movl	-28(%rbp), %esi
	movslq	-8(%rbp), %rdi
	shlq	$6, %rdi
	addq	%rdi, %rdx
	movslq	-4(%rbp), %rdi
	addl	(%rdx,%rdi,4), %esi
	cmpl	%esi, %ecx
	jle	.LBB316_127
# %bb.126:                              # %cond.true442
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB316_128
.LBB316_127:                            # %cond.false443
                                        #   in Loop: Header=BB316_106 Depth=2
	movabsq	$mprRGB, %rdx
	addq	$2048, %rdx             # imm = 0x800
	movl	-28(%rbp), %ecx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-4(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
.LBB316_128:                            # %cond.end449
                                        #   in Loop: Header=BB316_106 Depth=2
	cmpl	%ecx, %eax
	jge	.LBB316_130
# %bb.129:                              # %cond.true453
                                        #   in Loop: Header=BB316_106 Depth=2
	movq	img, %rax
	movl	72688(%rax), %eax
	jmp	.LBB316_134
.LBB316_130:                            # %cond.false455
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%eax, %eax
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %edx
	movslq	-8(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rcx
	movslq	-4(%rbp), %rsi
	addl	(%rcx,%rsi,4), %edx
	cmpl	%edx, %eax
	jle	.LBB316_132
# %bb.131:                              # %cond.true463
                                        #   in Loop: Header=BB316_106 Depth=2
	xorl	%eax, %eax
	jmp	.LBB316_133
.LBB316_132:                            # %cond.false464
                                        #   in Loop: Header=BB316_106 Depth=2
	movabsq	$mprRGB, %rcx
	addq	$2048, %rcx             # imm = 0x800
	movl	-28(%rbp), %eax
	movslq	-8(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	addl	(%rcx,%rdx,4), %eax
.LBB316_133:                            # %cond.end470
                                        #   in Loop: Header=BB316_106 Depth=2
.LBB316_134:                            # %cond.end472
                                        #   in Loop: Header=BB316_106 Depth=2
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.135:                              # %for.inc485
                                        #   in Loop: Header=BB316_106 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB316_106
.LBB316_136:                            # %for.end487
                                        #   in Loop: Header=BB316_104 Depth=1
	jmp	.LBB316_137
.LBB316_137:                            # %for.inc488
                                        #   in Loop: Header=BB316_104 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB316_104
.LBB316_138:                            # %for.end490
	jmp	.LBB316_139
.LBB316_139:                            # %if.end491
	cmpl	$184211705, -80(%rbp)   # imm = 0xAFAD8F9
	jne	.LBB316_141
.LBB316_140:
	addq	$288, %rsp              # imm = 0x120
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB316_141:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB316_140
.Lfunc_end316:
	.size	ChromaResidualCoding.275, .Lfunc_end316-ChromaResidualCoding.275
	.cfi_endproc
                                        # -- End function
	.globl	writeChromaCoeff.276    # -- Begin function writeChromaCoeff.276
	.p2align	4, 0x90
	.type	writeChromaCoeff.276,@function
writeChromaCoeff.276:                   # @writeChromaCoeff.276
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$152, %rsp
	.cfi_offset %rbx, -24
	movl	$1954244379, -80(%rbp)  # imm = 0x747B671B
	movl	$0, -28(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	addq	$14176, %rax            # imm = 0x3760
	movq	-48(%rbp), %rcx
	movslq	(%rcx), %rcx
	imulq	$48, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	addq	$20, %rax
	movq	%rax, -112(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	input, %rax
	movslq	2364(%rax), %rax
	movq	assignSE2partition(,%rax,8), %rax
	movq	%rax, -96(%rbp)
	movq	-48(%rbp), %rax
	movl	460(%rax), %eax
	movl	%eax, -76(%rbp)
	movq	.L__const.writeChromaCoeff.chroma_dc_context, %rax
	movq	%rax, -156(%rbp)
	movl	.L__const.writeChromaCoeff.chroma_dc_context+8, %eax
	movl	%eax, -148(%rbp)
	movq	img, %rax
	movl	72700(%rax), %eax
	subl	$1, %eax
	movl	%eax, -56(%rbp)
	cmpl	$15, -76(%rbp)
	jle	.LBB317_24
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB317_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB317_6 Depth 2
	cmpl	$2, -20(%rbp)
	jge	.LBB317_23
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB317_2 Depth=1
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB317_5
# %bb.4:                                # %if.then8
                                        #   in Loop: Header=BB317_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ecx
	movl	$6, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB317_21
.LBB317_5:                              # %if.else
                                        #   in Loop: Header=BB317_2 Depth=1
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -128(%rbp)
	movq	img, %rax
	movq	14144(%rax), %rax
	movl	-20(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -136(%rbp)
	movl	$1, -52(%rbp)
	movl	$0, -24(%rbp)
.LBB317_6:                              # %for.cond18
                                        #   Parent Loop BB317_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	xorl	%eax, %eax
	movl	-24(%rbp), %ecx
	movq	img, %rdx
	cmpl	72696(%rdx), %ecx
	jg	.LBB317_8
# %bb.7:                                # %land.rhs
                                        #   in Loop: Header=BB317_6 Depth=2
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB317_8:                              # %land.end
                                        #   in Loop: Header=BB317_6 Depth=2
	testb	$1, %al
	jne	.LBB317_9
	jmp	.LBB317_20
.LBB317_9:                              # %for.body21
                                        #   in Loop: Header=BB317_6 Depth=2
	movq	-128(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-136(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB317_11
# %bb.10:                               # %if.then28
                                        #   in Loop: Header=BB317_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_c2x2, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB317_12
.LBB317_11:                             # %if.else29
                                        #   in Loop: Header=BB317_6 Depth=2
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB317_12:                             # %if.end
                                        #   in Loop: Header=BB317_6 Depth=2
	movslq	-56(%rbp), %rax
	movl	-156(%rbp,%rax,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 24(%rcx)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB317_15
# %bb.13:                               # %lor.lhs.false
                                        #   in Loop: Header=BB317_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB317_15
# %bb.14:                               # %lor.rhs
                                        #   in Loop: Header=BB317_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB317_15:                             # %lor.end
                                        #   in Loop: Header=BB317_6 Depth=2
	testb	$1, %al
	movl	$8, %eax
	movl	$13, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB317_18
# %bb.16:                               # %lor.lhs.false39
                                        #   in Loop: Header=BB317_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB317_18
# %bb.17:                               # %lor.rhs42
                                        #   in Loop: Header=BB317_6 Depth=2
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB317_18:                             # %lor.end45
                                        #   in Loop: Header=BB317_6 Depth=2
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB317_6 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB317_6
.LBB317_20:                             # %for.end
                                        #   in Loop: Header=BB317_2 Depth=1
	jmp	.LBB317_21
.LBB317_21:                             # %if.end58
                                        #   in Loop: Header=BB317_2 Depth=1
	jmp	.LBB317_22
.LBB317_22:                             # %for.inc59
                                        #   in Loop: Header=BB317_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB317_2
.LBB317_23:                             # %for.end61
	jmp	.LBB317_24
.LBB317_24:                             # %if.end62
	movl	$-1, -20(%rbp)
	movl	-76(%rbp), %eax
	sarl	$4, %eax
	cmpl	$2, %eax
	jne	.LBB317_52
# %bb.25:                               # %if.then64
	movl	$4, -36(%rbp)
.LBB317_26:                             # %for.cond65
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB317_28 Depth 2
                                        #       Child Loop BB317_32 Depth 3
	movl	-36(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB317_51
# %bb.27:                               # %for.body68
                                        #   in Loop: Header=BB317_26 Depth=1
	movl	$0, -32(%rbp)
.LBB317_28:                             # %for.cond69
                                        #   Parent Loop BB317_26 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB317_32 Depth 3
	cmpl	$4, -32(%rbp)
	jge	.LBB317_49
# %bb.29:                               # %for.body71
                                        #   in Loop: Header=BB317_28 Depth=2
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB317_31
# %bb.30:                               # %if.then74
                                        #   in Loop: Header=BB317_28 Depth=2
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$writeChromaCoeff.chroma_ac_param, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	movl	%eax, -60(%rbp)
	movl	-36(%rbp), %esi
	movl	-32(%rbp), %edx
	movl	-60(%rbp), %ecx
	movl	$7, %edi
	callq	writeCoeff4x4_CAVLC
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB317_47
.LBB317_31:                             # %if.else84
                                        #   in Loop: Header=BB317_28 Depth=2
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	%rax, -120(%rbp)
	movq	img, %rax
	movq	14136(%rax), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	%rax, -144(%rbp)
	movl	$1, -52(%rbp)
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_y, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 76(%rcx)
	movslq	-56(%rbp), %rax
	shlq	$5, %rax
	movabsq	$subblk_offset_x, %rcx
	addq	%rax, %rcx
	movl	-36(%rbp), %eax
	subl	$4, %eax
	cltq
	shlq	$2, %rax
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movzbl	(%rcx,%rax), %eax
	sarl	$2, %eax
	movq	img, %rcx
	movl	%eax, 72(%rcx)
	movl	$0, -24(%rbp)
.LBB317_32:                             # %for.cond115
                                        #   Parent Loop BB317_26 Depth=1
                                        #     Parent Loop BB317_28 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	xorl	%eax, %eax
	cmpl	$16, -24(%rbp)
	jge	.LBB317_34
# %bb.33:                               # %land.rhs118
                                        #   in Loop: Header=BB317_32 Depth=3
	cmpl	$0, -52(%rbp)
	setne	%al
.LBB317_34:                             # %land.end121
                                        #   in Loop: Header=BB317_32 Depth=3
	testb	$1, %al
	jne	.LBB317_35
	jmp	.LBB317_46
.LBB317_35:                             # %for.body122
                                        #   in Loop: Header=BB317_32 Depth=3
	movq	-120(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movl	%eax, -52(%rbp)
	movq	-144(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	-16(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	%eax, -84(%rbp)
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB317_37
# %bb.36:                               # %if.then132
                                        #   in Loop: Header=BB317_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$levrun_linfo_inter, %rcx
	movq	%rcx, 32(%rax)
	jmp	.LBB317_38
.LBB317_37:                             # %if.else134
                                        #   in Loop: Header=BB317_32 Depth=3
	movq	-16(%rbp), %rax
	movabsq	$writeRunLevel_CABAC, %rcx
	movq	%rcx, 40(%rax)
.LBB317_38:                             # %if.end136
                                        #   in Loop: Header=BB317_32 Depth=3
	movq	-16(%rbp), %rax
	movl	$7, 24(%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB317_41
# %bb.39:                               # %lor.lhs.false141
                                        #   in Loop: Header=BB317_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB317_41
# %bb.40:                               # %lor.rhs145
                                        #   in Loop: Header=BB317_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB317_41:                             # %lor.end149
                                        #   in Loop: Header=BB317_32 Depth=3
	testb	$1, %al
	movl	$10, %eax
	movl	$15, %ecx
	cmovnel	%eax, %ecx
	movq	-16(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-48(%rbp), %rax
	cmpl	$9, 72(%rax)
	movb	$1, %al
	je	.LBB317_44
# %bb.42:                               # %lor.lhs.false156
                                        #   in Loop: Header=BB317_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$10, 72(%rax)
	movb	$1, %al
	je	.LBB317_44
# %bb.43:                               # %lor.rhs160
                                        #   in Loop: Header=BB317_32 Depth=3
	movq	-48(%rbp), %rax
	cmpl	$13, 72(%rax)
	sete	%al
.LBB317_44:                             # %lor.end164
                                        #   in Loop: Header=BB317_32 Depth=3
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 80(%rcx)
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	setge	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 84(%rcx)
	movq	-104(%rbp), %rax
	movq	24(%rax), %rax
	movq	-96(%rbp), %rcx
	movq	-16(%rbp), %rdx
	movslq	(%rdx), %rdx
	movslq	(%rcx,%rdx,4), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	112(%rax), %rax
	movq	-16(%rbp), %rdi
	movq	-72(%rbp), %rsi
	callq	*%rax
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	movq	-112(%rbp), %rcx
	addl	24(%rcx), %eax
	movl	%eax, 24(%rcx)
	movq	-16(%rbp), %rax
	movl	12(%rax), %eax
	addl	-28(%rbp), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	addq	$48, %rax
	movq	%rax, -16(%rbp)
	movq	-48(%rbp), %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
# %bb.45:                               # %for.inc187
                                        #   in Loop: Header=BB317_32 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB317_32
.LBB317_46:                             # %for.end189
                                        #   in Loop: Header=BB317_28 Depth=2
	jmp	.LBB317_47
.LBB317_47:                             # %if.end190
                                        #   in Loop: Header=BB317_28 Depth=2
	jmp	.LBB317_48
.LBB317_48:                             # %for.inc191
                                        #   in Loop: Header=BB317_28 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB317_28
.LBB317_49:                             # %for.end193
                                        #   in Loop: Header=BB317_26 Depth=1
	jmp	.LBB317_50
.LBB317_50:                             # %for.inc194
                                        #   in Loop: Header=BB317_26 Depth=1
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB317_26
.LBB317_51:                             # %for.end196
	jmp	.LBB317_52
.LBB317_52:                             # %if.end197
	movl	-28(%rbp), %ebx
	cmpl	$1954244379, -80(%rbp)  # imm = 0x747B671B
	jne	.LBB317_54
.LBB317_53:
	movl	%ebx, %eax
	addq	$152, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB317_54:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB317_53
.Lfunc_end317:
	.size	writeChromaCoeff.276, .Lfunc_end317-writeChromaCoeff.276
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.277    # -- Begin function start_macroblock.277
	.p2align	4, 0x90
	.type	start_macroblock.277,@function
start_macroblock.277:                   # @start_macroblock.277
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$500952776, -88(%rbp)   # imm = 0x1DDBEEC8
	movl	%edi, -52(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB318_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB318_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -84(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-52(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-52(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -84(%rbp)
	je	.LBB318_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB318_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB318_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB318_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB318_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB318_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB318_5 Depth=1
	movq	-96(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB318_8:                              # %if.end
                                        #   in Loop: Header=BB318_5 Depth=1
	jmp	.LBB318_9
.LBB318_9:                              # %for.inc
                                        #   in Loop: Header=BB318_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_5
.LBB318_10:                             # %for.end
	jmp	.LBB318_11
.LBB318_11:                             # %if.end19
	jmp	.LBB318_12
.LBB318_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB318_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -56(%rbp)
	cmpl	$-1, -56(%rbp)
	jle	.LBB318_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB318_16
.LBB318_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB318_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB318_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB318_97
.LBB318_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB318_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB318_21
.LBB318_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB318_96
.LBB318_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB318_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB318_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB318_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB318_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB318_34
.LBB318_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB318_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB318_32
.LBB318_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB318_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB318_31
.LBB318_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB318_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB318_33
.LBB318_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB318_33:                             # %if.end112
	jmp	.LBB318_34
.LBB318_34:                             # %if.end113
	jmp	.LBB318_39
.LBB318_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB318_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB318_38
.LBB318_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB318_38:                             # %if.end125
	jmp	.LBB318_39
.LBB318_39:                             # %if.end126
	jmp	.LBB318_47
.LBB318_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB318_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB318_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB318_44
.LBB318_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB318_44:                             # %if.end140
	jmp	.LBB318_46
.LBB318_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB318_46:                             # %if.end145
	jmp	.LBB318_47
.LBB318_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB318_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB318_93
.LBB318_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB318_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB318_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB318_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB318_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB318_74
.LBB318_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB318_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB318_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB318_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB318_73
.LBB318_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB318_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB318_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB318_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB318_72
.LBB318_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB318_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB318_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB318_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB318_71
.LBB318_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB318_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB318_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB318_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB318_70:                             # %if.end223
	jmp	.LBB318_71
.LBB318_71:                             # %if.end224
	jmp	.LBB318_72
.LBB318_72:                             # %if.end225
	jmp	.LBB318_73
.LBB318_73:                             # %if.end226
	jmp	.LBB318_74
.LBB318_74:                             # %if.end227
	jmp	.LBB318_75
.LBB318_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB318_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB318_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB318_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB318_82
.LBB318_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB318_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB318_81:                             # %if.end256
	jmp	.LBB318_82
.LBB318_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB318_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB318_88
.LBB318_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB318_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB318_87
.LBB318_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB318_87:                             # %if.end292
	jmp	.LBB318_88
.LBB318_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB318_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB318_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB318_92
.LBB318_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB318_92:                             # %if.end305
	jmp	.LBB318_94
.LBB318_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB318_94:                             # %if.end309
	jmp	.LBB318_95
.LBB318_95:                             # %if.end310
	jmp	.LBB318_96
.LBB318_96:                             # %if.end311
	jmp	.LBB318_97
.LBB318_97:                             # %if.end312
	jmp	.LBB318_102
.LBB318_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB318_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB318_101
.LBB318_100:                            # %if.else331
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB318_101:                            # %if.end335
	movq	-104(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB318_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB318_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB318_105
.LBB318_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB318_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB318_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB318_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB318_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_110 Depth 2
                                        #       Child Loop BB318_112 Depth 3
                                        #         Child Loop BB318_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB318_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB318_108 Depth=1
	movl	$0, -20(%rbp)
.LBB318_110:                            # %for.cond364
                                        #   Parent Loop BB318_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB318_112 Depth 3
                                        #         Child Loop BB318_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB318_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB318_110 Depth=2
	movl	$0, -12(%rbp)
.LBB318_112:                            # %for.cond368
                                        #   Parent Loop BB318_108 Depth=1
                                        #     Parent Loop BB318_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB318_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB318_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB318_112 Depth=3
	movl	$0, -36(%rbp)
.LBB318_114:                            # %for.cond372
                                        #   Parent Loop BB318_108 Depth=1
                                        #     Parent Loop BB318_110 Depth=2
                                        #       Parent Loop BB318_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB318_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB318_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB318_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB318_114
.LBB318_117:                            # %for.end388
                                        #   in Loop: Header=BB318_112 Depth=3
	jmp	.LBB318_118
.LBB318_118:                            # %for.inc389
                                        #   in Loop: Header=BB318_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_112
.LBB318_119:                            # %for.end391
                                        #   in Loop: Header=BB318_110 Depth=2
	jmp	.LBB318_120
.LBB318_120:                            # %for.inc392
                                        #   in Loop: Header=BB318_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB318_110
.LBB318_121:                            # %for.end394
                                        #   in Loop: Header=BB318_108 Depth=1
	jmp	.LBB318_122
.LBB318_122:                            # %for.inc395
                                        #   in Loop: Header=BB318_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_108
.LBB318_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB318_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_126 Depth 2
                                        #       Child Loop BB318_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB318_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB318_124 Depth=1
	movl	$0, -12(%rbp)
.LBB318_126:                            # %for.cond402
                                        #   Parent Loop BB318_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB318_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB318_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB318_126 Depth=2
	movl	$0, -16(%rbp)
.LBB318_128:                            # %for.cond406
                                        #   Parent Loop BB318_124 Depth=1
                                        #     Parent Loop BB318_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB318_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB318_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB318_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_128
.LBB318_131:                            # %for.end432
                                        #   in Loop: Header=BB318_126 Depth=2
	jmp	.LBB318_132
.LBB318_132:                            # %for.inc433
                                        #   in Loop: Header=BB318_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_126
.LBB318_133:                            # %for.end435
                                        #   in Loop: Header=BB318_124 Depth=1
	jmp	.LBB318_134
.LBB318_134:                            # %for.inc436
                                        #   in Loop: Header=BB318_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB318_124
.LBB318_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB318_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB318_138 Depth 2
                                        #       Child Loop BB318_140 Depth 3
                                        #         Child Loop BB318_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB318_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB318_136 Depth=1
	movl	$0, -20(%rbp)
.LBB318_138:                            # %for.cond443
                                        #   Parent Loop BB318_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB318_140 Depth 3
                                        #         Child Loop BB318_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB318_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB318_138 Depth=2
	movl	$0, -12(%rbp)
.LBB318_140:                            # %for.cond447
                                        #   Parent Loop BB318_136 Depth=1
                                        #     Parent Loop BB318_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB318_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB318_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB318_140 Depth=3
	movl	$0, -36(%rbp)
.LBB318_142:                            # %for.cond451
                                        #   Parent Loop BB318_136 Depth=1
                                        #     Parent Loop BB318_138 Depth=2
                                        #       Parent Loop BB318_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB318_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB318_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB318_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB318_142
.LBB318_145:                            # %for.end465
                                        #   in Loop: Header=BB318_140 Depth=3
	jmp	.LBB318_146
.LBB318_146:                            # %for.inc466
                                        #   in Loop: Header=BB318_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_140
.LBB318_147:                            # %for.end468
                                        #   in Loop: Header=BB318_138 Depth=2
	jmp	.LBB318_148
.LBB318_148:                            # %for.inc469
                                        #   in Loop: Header=BB318_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB318_138
.LBB318_149:                            # %for.end471
                                        #   in Loop: Header=BB318_136 Depth=1
	jmp	.LBB318_150
.LBB318_150:                            # %for.inc472
                                        #   in Loop: Header=BB318_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB318_136
.LBB318_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB318_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB318_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB318_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB318_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_152
.LBB318_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB318_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB318_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB318_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB318_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB318_156
.LBB318_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB318_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB318_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB318_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB318_166
.LBB318_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB318_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB318_165:                            # %if.end520
	jmp	.LBB318_166
.LBB318_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB318_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB318_168:                            # %if.end536
	cmpl	$500952776, -88(%rbp)   # imm = 0x1DDBEEC8
	jne	.LBB318_170
.LBB318_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB318_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB318_169
.Lfunc_end318:
	.size	start_macroblock.277, .Lfunc_end318-start_macroblock.277
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4Bi.278 # -- Begin function LumaPrediction4x4Bi.278
	.p2align	4, 0x90
	.type	LumaPrediction4x4Bi.278,@function
LumaPrediction4x4Bi.278:                # @LumaPrediction4x4Bi.278
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	24(%rbp), %eax
	movw	16(%rbp), %ax
	movl	$1546421298, -84(%rbp)  # imm = 0x5C2C8432
	movl	%edi, -20(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -72(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB319_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB319_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB319_6
.LBB319_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB319_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB319_5:                              # %land.end
.LBB319_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB319_9
# %bb.7:                                # %land.lhs.true11
	movq	-104(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB319_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB319_10
.LBB319_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB319_10
.LBB319_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	cmpl	$0, 24(%rbp)
	je	.LBB319_12
# %bb.11:                               # %cond.true17
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB319_13
.LBB319_12:                             # %cond.false18
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB319_13:                             # %cond.end19
	movq	%rax, -96(%rbp)
	cmpl	$0, -24(%rbp)
	je	.LBB319_15
# %bb.14:                               # %lor.lhs.false22
	cmpl	$2, -24(%rbp)
	jne	.LBB319_16
.LBB319_15:                             # %if.then
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB319_16:                             # %if.end
	cmpl	$1, -24(%rbp)
	je	.LBB319_18
# %bb.17:                               # %lor.lhs.false37
	cmpl	$2, -24(%rbp)
	jne	.LBB319_19
.LBB319_18:                             # %if.then39
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4Bi.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB319_19:                             # %if.end52
	cmpl	$0, -80(%rbp)
	je	.LBB319_51
# %bb.20:                               # %if.then54
	cmpl	$2, -24(%rbp)
	jne	.LBB319_30
# %bb.21:                               # %if.then56
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB319_22:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB319_24 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB319_29
# %bb.23:                               # %for.body
                                        #   in Loop: Header=BB319_22 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB319_24:                             # %for.cond58
                                        #   Parent Loop BB319_22 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB319_27
# %bb.25:                               # %for.body60
                                        #   in Loop: Header=BB319_24 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.26:                               # %for.inc
                                        #   in Loop: Header=BB319_24 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB319_24
.LBB319_27:                             # %for.end
                                        #   in Loop: Header=BB319_22 Depth=1
	jmp	.LBB319_28
.LBB319_28:                             # %for.inc96
                                        #   in Loop: Header=BB319_22 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_22
.LBB319_29:                             # %for.end98
	jmp	.LBB319_50
.LBB319_30:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB319_40
# %bb.31:                               # %if.then101
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB319_32:                             # %for.cond102
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB319_34 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB319_39
# %bb.33:                               # %for.body105
                                        #   in Loop: Header=BB319_32 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB319_34:                             # %for.cond106
                                        #   Parent Loop BB319_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB319_37
# %bb.35:                               # %for.body109
                                        #   in Loop: Header=BB319_34 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.36:                               # %for.inc130
                                        #   in Loop: Header=BB319_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB319_34
.LBB319_37:                             # %for.end132
                                        #   in Loop: Header=BB319_32 Depth=1
	jmp	.LBB319_38
.LBB319_38:                             # %for.inc133
                                        #   in Loop: Header=BB319_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_32
.LBB319_39:                             # %for.end135
	jmp	.LBB319_49
.LBB319_40:                             # %if.else136
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB319_41:                             # %for.cond137
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB319_43 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB319_48
# %bb.42:                               # %for.body140
                                        #   in Loop: Header=BB319_41 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB319_43:                             # %for.cond141
                                        #   Parent Loop BB319_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB319_46
# %bb.44:                               # %for.body144
                                        #   in Loop: Header=BB319_43 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.45:                               # %for.inc165
                                        #   in Loop: Header=BB319_43 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB319_43
.LBB319_46:                             # %for.end167
                                        #   in Loop: Header=BB319_41 Depth=1
	jmp	.LBB319_47
.LBB319_47:                             # %for.inc168
                                        #   in Loop: Header=BB319_41 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_41
.LBB319_48:                             # %for.end170
	jmp	.LBB319_49
.LBB319_49:                             # %if.end171
	jmp	.LBB319_50
.LBB319_50:                             # %if.end172
	jmp	.LBB319_82
.LBB319_51:                             # %if.else173
	cmpl	$2, -24(%rbp)
	jne	.LBB319_61
# %bb.52:                               # %if.then176
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB319_53:                             # %for.cond177
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB319_55 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB319_60
# %bb.54:                               # %for.body180
                                        #   in Loop: Header=BB319_53 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB319_55:                             # %for.cond181
                                        #   Parent Loop BB319_53 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB319_58
# %bb.56:                               # %for.body184
                                        #   in Loop: Header=BB319_55 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.57:                               # %for.inc195
                                        #   in Loop: Header=BB319_55 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB319_55
.LBB319_58:                             # %for.end197
                                        #   in Loop: Header=BB319_53 Depth=1
	jmp	.LBB319_59
.LBB319_59:                             # %for.inc198
                                        #   in Loop: Header=BB319_53 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_53
.LBB319_60:                             # %for.end200
	jmp	.LBB319_81
.LBB319_61:                             # %if.else201
	cmpl	$0, -24(%rbp)
	jne	.LBB319_71
# %bb.62:                               # %if.then204
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB319_63:                             # %for.cond205
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB319_65 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB319_70
# %bb.64:                               # %for.body208
                                        #   in Loop: Header=BB319_63 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB319_65:                             # %for.cond209
                                        #   Parent Loop BB319_63 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB319_68
# %bb.66:                               # %for.body212
                                        #   in Loop: Header=BB319_65 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.67:                               # %for.inc220
                                        #   in Loop: Header=BB319_65 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB319_65
.LBB319_68:                             # %for.end222
                                        #   in Loop: Header=BB319_63 Depth=1
	jmp	.LBB319_69
.LBB319_69:                             # %for.inc223
                                        #   in Loop: Header=BB319_63 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_63
.LBB319_70:                             # %for.end225
	jmp	.LBB319_80
.LBB319_71:                             # %if.else226
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB319_72:                             # %for.cond227
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB319_74 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB319_79
# %bb.73:                               # %for.body230
                                        #   in Loop: Header=BB319_72 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB319_74:                             # %for.cond231
                                        #   Parent Loop BB319_72 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB319_77
# %bb.75:                               # %for.body234
                                        #   in Loop: Header=BB319_74 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.76:                               # %for.inc242
                                        #   in Loop: Header=BB319_74 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB319_74
.LBB319_77:                             # %for.end244
                                        #   in Loop: Header=BB319_72 Depth=1
	jmp	.LBB319_78
.LBB319_78:                             # %for.inc245
                                        #   in Loop: Header=BB319_72 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB319_72
.LBB319_79:                             # %for.end247
	jmp	.LBB319_80
.LBB319_80:                             # %if.end248
	jmp	.LBB319_81
.LBB319_81:                             # %if.end249
	jmp	.LBB319_82
.LBB319_82:                             # %if.end250
	cmpl	$1546421298, -84(%rbp)  # imm = 0x5C2C8432
	jne	.LBB319_84
.LBB319_83:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB319_84:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB319_83
.Lfunc_end319:
	.size	LumaPrediction4x4Bi.278, .Lfunc_end319-LumaPrediction4x4Bi.278
	.cfi_endproc
                                        # -- End function
	.globl	start_macroblock.279    # -- Begin function start_macroblock.279
	.p2align	4, 0x90
	.type	start_macroblock.279,@function
start_macroblock.279:                   # @start_macroblock.279
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movl	$699992012, -84(%rbp)   # imm = 0x29B907CC
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movq	input, %rax
	cmpl	$2, 208(%rax)
	movb	$1, %al
	je	.LBB320_2
# %bb.1:                                # %lor.rhs
	movq	input, %rax
	cmpl	$3, 208(%rax)
	sete	%al
.LBB320_2:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -88(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-56(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	addl	$25, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72668(%rax), %eax
	cltd
	idivl	%ecx
	addl	$26, %eax
	movl	%eax, -40(%rbp)
	movl	-68(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 532(%rcx)
	movl	-68(%rbp), %eax
	movq	enc_picture, %rcx
	movq	6472(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movl	-56(%rbp), %edi
	callq	set_MB_parameters
	cmpl	$0, -88(%rbp)
	je	.LBB320_12
# %bb.3:                                # %if.then
	movq	img, %rax
	cmpl	$0, 120(%rax)
	jne	.LBB320_11
# %bb.4:                                # %if.then11
	movl	$0, -12(%rbp)
.LBB320_5:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-12(%rbp), %eax
	movq	-80(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB320_10
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB320_5 Depth=1
	movq	-80(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rax
	movq	(%rax), %rax
	movq	%rax, -64(%rbp)
	movq	-64(%rbp), %rax
	movl	4(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	-64(%rbp), %rax
	movl	(%rax), %eax
	movq	-64(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-64(%rbp), %rax
	movb	8(%rax), %al
	movq	-64(%rbp), %rcx
	movb	%al, 20(%rcx)
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB320_8
# %bb.7:                                # %if.then18
                                        #   in Loop: Header=BB320_5 Depth=1
	movq	-104(%rbp), %rax
	addq	$8, %rax
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rax
	movl	(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 40(%rcx)
	movq	-32(%rbp), %rax
	movl	4(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 44(%rcx)
	movq	-32(%rbp), %rax
	movl	8(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 48(%rcx)
	movq	-32(%rbp), %rax
	movl	12(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 52(%rcx)
	movq	-32(%rbp), %rax
	movl	16(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 56(%rcx)
	movq	-32(%rbp), %rax
	movq	24(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 64(%rcx)
	movq	-32(%rbp), %rax
	movq	32(%rax), %rax
	movq	-32(%rbp), %rcx
	movq	%rax, 72(%rcx)
	movq	-32(%rbp), %rax
	movl	80(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 84(%rcx)
	movq	-32(%rbp), %rax
	movl	96(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 100(%rcx)
	movq	-32(%rbp), %rax
	movl	88(%rax), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, 92(%rcx)
.LBB320_8:                              # %if.end
                                        #   in Loop: Header=BB320_5 Depth=1
	jmp	.LBB320_9
.LBB320_9:                              # %for.inc
                                        #   in Loop: Header=BB320_5 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_5
.LBB320_10:                             # %for.end
	jmp	.LBB320_11
.LBB320_11:                             # %if.end19
	jmp	.LBB320_12
.LBB320_12:                             # %if.end20
	movq	img, %rax
	movl	20(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	44(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 16(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB320_98
# %bb.13:                               # %if.then23
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -52(%rbp)
	cmpl	$-1, -52(%rbp)
	jle	.LBB320_15
# %bb.14:                               # %if.then26
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB320_16
.LBB320_15:                             # %if.else
	movq	-80(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB320_16:                             # %if.end36
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jne	.LBB320_18
# %bb.17:                               # %if.then39
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB320_97
.LBB320_18:                             # %if.else43
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB320_20
# %bb.19:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB320_21
.LBB320_20:                             # %if.then49
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB320_96
.LBB320_21:                             # %if.else53
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB320_95
# %bb.22:                               # %if.then57
	movq	img, %rax
	cmpl	$0, 72624(%rax)
	jne	.LBB320_40
# %bb.23:                               # %if.then59
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB320_35
# %bb.24:                               # %if.then62
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB320_26
# %bb.25:                               # %if.then66
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB320_34
.LBB320_26:                             # %if.else72
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB320_28
# %bb.27:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB320_32
.LBB320_28:                             # %if.then75
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	cmpl	$1, 600(%rax)
	jne	.LBB320_30
# %bb.29:                               # %if.then82
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB320_31
.LBB320_30:                             # %if.else86
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movl	12(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	subl	12(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB320_31:                             # %if.end105
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	jmp	.LBB320_33
.LBB320_32:                             # %if.else108
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB320_33:                             # %if.end112
	jmp	.LBB320_34
.LBB320_34:                             # %if.end113
	jmp	.LBB320_39
.LBB320_35:                             # %if.else114
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB320_37
# %bb.36:                               # %if.then117
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	jmp	.LBB320_38
.LBB320_37:                             # %if.else121
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
.LBB320_38:                             # %if.end125
	jmp	.LBB320_39
.LBB320_39:                             # %if.end126
	jmp	.LBB320_47
.LBB320_40:                             # %if.else127
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB320_45
# %bb.41:                               # %if.then130
	movq	img, %rax
	cmpl	$0, 72632(%rax)
	je	.LBB320_43
# %bb.42:                               # %if.then132
	movl	DELTA_QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB320_44
.LBB320_43:                             # %if.else136
	movl	DELTA_QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movl	QP2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB320_44:                             # %if.end140
	jmp	.LBB320_46
.LBB320_45:                             # %if.else141
	movq	-8(%rbp), %rax
	movl	$0, 8(%rax)
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB320_46:                             # %if.end145
	jmp	.LBB320_47
.LBB320_47:                             # %if.end146
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB320_49
# %bb.48:                               # %land.lhs.true149
	movq	img, %rax
	cmpl	$0, 72628(%rax)
	jne	.LBB320_93
.LBB320_49:                             # %if.then152
	movq	-8(%rbp), %rax
	cmpl	$0, 532(%rax)
	jne	.LBB320_91
# %bb.50:                               # %if.then155
	movq	img, %rax
	cmpl	$0, 72616(%rax)
	jle	.LBB320_75
# %bb.51:                               # %land.lhs.true158
	movq	img, %rax
	movl	72616(%rax), %eax
	movq	img, %rcx
	cltd
	idivl	72620(%rcx)
	cmpl	$0, %edx
	jne	.LBB320_75
# %bb.52:                               # %if.then162
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB320_54
# %bb.53:                               # %if.then164
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB320_74
.LBB320_54:                             # %if.else166
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB320_58
# %bb.55:                               # %land.lhs.true169
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB320_58
# %bb.56:                               # %land.lhs.true172
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB320_58
# %bb.57:                               # %if.then175
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB320_73
.LBB320_58:                             # %if.else179
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB320_62
# %bb.59:                               # %land.lhs.true183
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB320_62
# %bb.60:                               # %land.lhs.true186
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB320_62
# %bb.61:                               # %if.then190
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB320_72
.LBB320_62:                             # %if.else194
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB320_66
# %bb.63:                               # %land.lhs.true197
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB320_66
# %bb.64:                               # %land.lhs.true201
	movq	img, %rax
	cmpl	$1, 72600(%rax)
	jne	.LBB320_66
# %bb.65:                               # %if.then204
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
	jmp	.LBB320_71
.LBB320_66:                             # %if.else208
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB320_70
# %bb.67:                               # %land.lhs.true211
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB320_70
# %bb.68:                               # %land.lhs.true215
	movq	img, %rax
	cmpl	$0, 72600(%rax)
	jne	.LBB320_70
# %bb.69:                               # %if.then219
	movb	$0, %al
	callq	updateRCModel
	movq	img, %rax
	movl	72596(%rax), %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB320_70:                             # %if.end223
	jmp	.LBB320_71
.LBB320_71:                             # %if.end224
	jmp	.LBB320_72
.LBB320_72:                             # %if.end225
	jmp	.LBB320_73
.LBB320_73:                             # %if.end226
	jmp	.LBB320_74
.LBB320_74:                             # %if.end227
	jmp	.LBB320_75
.LBB320_75:                             # %if.end228
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB320_77
# %bb.76:                               # %if.then232
	movq	img, %rax
	movl	40(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72592(%rcx)
.LBB320_77:                             # %if.end235
	movq	img, %rax
	movl	72592(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	addl	-44(%rbp), %ecx
	cmpl	%ecx, %eax
	jle	.LBB320_79
# %bb.78:                               # %if.then242
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	addl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
	jmp	.LBB320_82
.LBB320_79:                             # %if.else246
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	12(%rcx), %ecx
	subl	-40(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB320_81
# %bb.80:                               # %if.then252
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 604(%rcx)
.LBB320_81:                             # %if.end256
	jmp	.LBB320_82
.LBB320_82:                             # %if.end257
	xorl	%eax, %eax
	movq	-8(%rbp), %rcx
	movl	8(%rcx), %ecx
	movq	-8(%rbp), %rdx
	addl	604(%rdx), %ecx
	movq	-8(%rbp), %rdx
	subl	12(%rdx), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	subl	-40(%rbp), %eax
	cmpl	%eax, %ecx
	jge	.LBB320_84
# %bb.83:                               # %if.then266
	xorl	%eax, %eax
	xorl	%ecx, %ecx
	subl	-40(%rbp), %ecx
	movl	%ecx, dq
	movl	dq, %ecx
	movq	-8(%rbp), %rdx
	subl	8(%rdx), %ecx
	movl	%ecx, predict_error
	movq	img, %rcx
	movl	40(%rcx), %ecx
	addl	predict_error, %ecx
	movq	img, %rdx
	movl	%ecx, 40(%rdx)
	subl	-40(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB320_88
.LBB320_84:                             # %if.else275
	movl	dq, %eax
	cmpl	-44(%rbp), %eax
	jle	.LBB320_86
# %bb.85:                               # %if.then278
	movl	-44(%rbp), %eax
	movl	%eax, dq
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	subl	8(%rcx), %eax
	movl	%eax, predict_error
	movq	img, %rax
	movl	40(%rax), %eax
	addl	predict_error, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-44(%rbp), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	jmp	.LBB320_87
.LBB320_86:                             # %if.else285
	movl	dq, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	12(%rcx), %eax
	movl	%eax, predict_error
	movq	-8(%rbp), %rax
	movl	604(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB320_87:                             # %if.end292
	jmp	.LBB320_88
.LBB320_88:                             # %if.end293
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB320_90
# %bb.89:                               # %if.then298
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
.LBB320_90:                             # %if.end302
	movl	predict_error, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 608(%rcx)
	jmp	.LBB320_92
.LBB320_91:                             # %if.else303
	movq	-8(%rbp), %rax
	movl	608(%rax), %eax
	movl	%eax, predict_error
.LBB320_92:                             # %if.end305
	jmp	.LBB320_94
.LBB320_93:                             # %if.else306
	movq	img, %rax
	movl	40(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
.LBB320_94:                             # %if.end309
	jmp	.LBB320_95
.LBB320_95:                             # %if.end310
	jmp	.LBB320_96
.LBB320_96:                             # %if.end311
	jmp	.LBB320_97
.LBB320_97:                             # %if.end312
	jmp	.LBB320_102
.LBB320_98:                             # %if.else313
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoGetPreviousMBNr
	movl	%eax, -48(%rbp)
	cmpl	$-1, -48(%rbp)
	jle	.LBB320_100
# %bb.99:                               # %if.then320
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	8(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 596(%rcx)
	jmp	.LBB320_101
.LBB320_100:                            # %if.else331
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	-8(%rbp), %rax
	movl	$0, 596(%rax)
.LBB320_101:                            # %if.end335
	movq	-96(%rbp), %rax
	movl	4(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movq	-8(%rbp), %rcx
	subl	592(%rcx), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 8(%rcx)
	movq	-8(%rbp), %rax
	movl	8(%rax), %eax
	movl	%eax, DELTA_QP2
	movl	%eax, DELTA_QP
	movq	-8(%rbp), %rax
	movl	12(%rax), %eax
	movl	%eax, QP2
	movl	%eax, QP
.LBB320_102:                            # %if.end344
	movq	-8(%rbp), %rax
	movl	$0, (%rax)
	movq	active_pps, %rax
	cmpl	$0, 220(%rax)
	je	.LBB320_104
# %bb.103:                              # %if.then346
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 612(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 616(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 620(%rcx)
	jmp	.LBB320_105
.LBB320_104:                            # %if.else350
	movq	-8(%rbp), %rax
	movl	$0, 612(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 616(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 620(%rax)
.LBB320_105:                            # %if.end354
	movb	$0, %al
	callq	CheckAvailabilityOfNeighbors
	movq	input, %rax
	cmpl	$1, 2356(%rax)
	jne	.LBB320_107
# %bb.106:                              # %if.then358
	movb	$0, %al
	callq	CheckAvailabilityOfNeighborsCABAC
.LBB320_107:                            # %if.end359
	movl	$0, -16(%rbp)
.LBB320_108:                            # %for.cond360
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_110 Depth 2
                                        #       Child Loop BB320_112 Depth 3
                                        #         Child Loop BB320_114 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB320_123
# %bb.109:                              # %for.body363
                                        #   in Loop: Header=BB320_108 Depth=1
	movl	$0, -20(%rbp)
.LBB320_110:                            # %for.cond364
                                        #   Parent Loop BB320_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB320_112 Depth 3
                                        #         Child Loop BB320_114 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB320_121
# %bb.111:                              # %for.body367
                                        #   in Loop: Header=BB320_110 Depth=2
	movl	$0, -12(%rbp)
.LBB320_112:                            # %for.cond368
                                        #   Parent Loop BB320_108 Depth=1
                                        #     Parent Loop BB320_110 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB320_114 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB320_119
# %bb.113:                              # %for.body371
                                        #   in Loop: Header=BB320_112 Depth=3
	movl	$0, -36(%rbp)
.LBB320_114:                            # %for.cond372
                                        #   Parent Loop BB320_108 Depth=1
                                        #     Parent Loop BB320_110 Depth=2
                                        #       Parent Loop BB320_112 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB320_117
# %bb.115:                              # %for.body375
                                        #   in Loop: Header=BB320_114 Depth=4
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-36(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
# %bb.116:                              # %for.inc386
                                        #   in Loop: Header=BB320_114 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB320_114
.LBB320_117:                            # %for.end388
                                        #   in Loop: Header=BB320_112 Depth=3
	jmp	.LBB320_118
.LBB320_118:                            # %for.inc389
                                        #   in Loop: Header=BB320_112 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_112
.LBB320_119:                            # %for.end391
                                        #   in Loop: Header=BB320_110 Depth=2
	jmp	.LBB320_120
.LBB320_120:                            # %for.inc392
                                        #   in Loop: Header=BB320_110 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB320_110
.LBB320_121:                            # %for.end394
                                        #   in Loop: Header=BB320_108 Depth=1
	jmp	.LBB320_122
.LBB320_122:                            # %for.inc395
                                        #   in Loop: Header=BB320_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB320_108
.LBB320_123:                            # %for.end397
	movl	$0, -20(%rbp)
.LBB320_124:                            # %for.cond398
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_126 Depth 2
                                        #       Child Loop BB320_128 Depth 3
	cmpl	$4, -20(%rbp)
	jge	.LBB320_135
# %bb.125:                              # %for.body401
                                        #   in Loop: Header=BB320_124 Depth=1
	movl	$0, -12(%rbp)
.LBB320_126:                            # %for.cond402
                                        #   Parent Loop BB320_124 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB320_128 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB320_133
# %bb.127:                              # %for.body405
                                        #   in Loop: Header=BB320_126 Depth=2
	movl	$0, -16(%rbp)
.LBB320_128:                            # %for.cond406
                                        #   Parent Loop BB320_124 Depth=1
                                        #     Parent Loop BB320_126 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -16(%rbp)
	jge	.LBB320_131
# %bb.129:                              # %for.body409
                                        #   in Loop: Header=BB320_128 Depth=3
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$-1, (%rax,%rcx,2)
	movq	enc_picture, %rax
	movq	6488(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-20(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	$-1, (%rax,%rcx,8)
# %bb.130:                              # %for.inc430
                                        #   in Loop: Header=BB320_128 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB320_128
.LBB320_131:                            # %for.end432
                                        #   in Loop: Header=BB320_126 Depth=2
	jmp	.LBB320_132
.LBB320_132:                            # %for.inc433
                                        #   in Loop: Header=BB320_126 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_126
.LBB320_133:                            # %for.end435
                                        #   in Loop: Header=BB320_124 Depth=1
	jmp	.LBB320_134
.LBB320_134:                            # %for.inc436
                                        #   in Loop: Header=BB320_124 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB320_124
.LBB320_135:                            # %for.end438
	movq	-8(%rbp), %rax
	movl	$0, 72(%rax)
	movq	-8(%rbp), %rax
	movq	$0, 464(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 460(%rax)
	movl	$0, -16(%rbp)
.LBB320_136:                            # %for.cond439
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB320_138 Depth 2
                                        #       Child Loop BB320_140 Depth 3
                                        #         Child Loop BB320_142 Depth 4
	cmpl	$2, -16(%rbp)
	jge	.LBB320_151
# %bb.137:                              # %for.body442
                                        #   in Loop: Header=BB320_136 Depth=1
	movl	$0, -20(%rbp)
.LBB320_138:                            # %for.cond443
                                        #   Parent Loop BB320_136 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB320_140 Depth 3
                                        #         Child Loop BB320_142 Depth 4
	cmpl	$4, -20(%rbp)
	jge	.LBB320_149
# %bb.139:                              # %for.body446
                                        #   in Loop: Header=BB320_138 Depth=2
	movl	$0, -12(%rbp)
.LBB320_140:                            # %for.cond447
                                        #   Parent Loop BB320_136 Depth=1
                                        #     Parent Loop BB320_138 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB320_142 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB320_147
# %bb.141:                              # %for.body450
                                        #   in Loop: Header=BB320_140 Depth=3
	movl	$0, -36(%rbp)
.LBB320_142:                            # %for.cond451
                                        #   Parent Loop BB320_136 Depth=1
                                        #     Parent Loop BB320_138 Depth=2
                                        #       Parent Loop BB320_140 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$2, -36(%rbp)
	jge	.LBB320_145
# %bb.143:                              # %for.body454
                                        #   in Loop: Header=BB320_142 Depth=4
	movq	-8(%rbp), %rax
	addq	$76, %rax
	movslq	-16(%rbp), %rcx
	shlq	$7, %rcx
	addq	%rcx, %rax
	movslq	-20(%rbp), %rcx
	shlq	$5, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-36(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.144:                              # %for.inc463
                                        #   in Loop: Header=BB320_142 Depth=4
	movl	-36(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -36(%rbp)
	jmp	.LBB320_142
.LBB320_145:                            # %for.end465
                                        #   in Loop: Header=BB320_140 Depth=3
	jmp	.LBB320_146
.LBB320_146:                            # %for.inc466
                                        #   in Loop: Header=BB320_140 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_140
.LBB320_147:                            # %for.end468
                                        #   in Loop: Header=BB320_138 Depth=2
	jmp	.LBB320_148
.LBB320_148:                            # %for.inc469
                                        #   in Loop: Header=BB320_138 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB320_138
.LBB320_149:                            # %for.end471
                                        #   in Loop: Header=BB320_136 Depth=1
	jmp	.LBB320_150
.LBB320_150:                            # %for.inc472
                                        #   in Loop: Header=BB320_136 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB320_136
.LBB320_151:                            # %for.end474
	movq	-8(%rbp), %rax
	movq	$0, 504(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 524(%rax)
	movl	$0, -12(%rbp)
.LBB320_152:                            # %for.cond475
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB320_155
# %bb.153:                              # %for.body478
                                        #   in Loop: Header=BB320_152 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.154:                              # %for.inc481
                                        #   in Loop: Header=BB320_152 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_152
.LBB320_155:                            # %for.end483
	movl	$0, -12(%rbp)
.LBB320_156:                            # %for.cond484
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$16, -12(%rbp)
	jge	.LBB320_159
# %bb.157:                              # %for.body487
                                        #   in Loop: Header=BB320_156 Depth=1
	movq	-8(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 396(%rax,%rcx,4)
# %bb.158:                              # %for.inc490
                                        #   in Loop: Header=BB320_156 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB320_156
.LBB320_159:                            # %for.end492
	movq	input, %rax
	cmpl	$0, 216(%rax)
	je	.LBB320_161
# %bb.160:                              # %if.then494
	movq	img, %rax
	movq	71784(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	movl	$1, (%rax,%rcx,4)
.LBB320_161:                            # %if.end498
	movq	img, %rax
	movl	71984(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 512(%rcx)
	movq	img, %rax
	movl	71988(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 516(%rcx)
	movq	img, %rax
	movl	71992(%rax), %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 520(%rcx)
	movq	img, %rax
	cmpl	$0, 12(%rax)
	jne	.LBB320_163
# %bb.162:                              # %if.then505
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	jmp	.LBB320_166
.LBB320_163:                            # %if.else507
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	movq	img, %rcx
	movq	14168(%rcx), %rcx
	movq	img, %rdx
	movl	12(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$632, %rdx, %rdx        # imm = 0x278
	addq	%rdx, %rcx
	cmpl	4(%rcx), %eax
	jne	.LBB320_165
# %bb.164:                              # %if.then517
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
.LBB320_165:                            # %if.end520
	jmp	.LBB320_166
.LBB320_166:                            # %if.end521
	movq	-8(%rbp), %rax
	movl	$0, 28(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 40(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 32(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 36(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 48(%rax)
	movq	-8(%rbp), %rax
	movl	$0, 44(%rax)
	movq	input, %rax
	cmpl	$0, 3292(%rax)
	jne	.LBB320_168
# %bb.167:                              # %if.then535
	movb	$0, %al
	callq	ResetFastFullIntegerSearch
.LBB320_168:                            # %if.end536
	cmpl	$699992012, -84(%rbp)   # imm = 0x29B907CC
	jne	.LBB320_170
.LBB320_169:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB320_170:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB320_169
.Lfunc_end320:
	.size	start_macroblock.279, .Lfunc_end320-start_macroblock.279
	.cfi_endproc
                                        # -- End function
	.globl	SetModesAndRefframe.280 # -- Begin function SetModesAndRefframe.280
	.p2align	4, 0x90
	.type	SetModesAndRefframe.280,@function
SetModesAndRefframe.280:                # @SetModesAndRefframe.280
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1763016973, -60(%rbp)  # imm = 0x6915810D
	movl	%edi, -4(%rbp)
	movq	%rsi, -72(%rbp)
	movq	%rdx, -56(%rbp)
	movq	%rcx, -32(%rbp)
	movq	%r8, -40(%rbp)
	movq	%r9, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$1, %eax
	movl	%eax, -8(%rbp)
	movl	-4(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$1, %edx
	movl	%edx, -12(%rbp)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-32(%rbp), %rax
	movl	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$-1, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	488(%rax,%rcx,4), %eax
	movq	-72(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB321_2
# %bb.1:                                # %if.then
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB321_12
.LBB321_2:                              # %if.else
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$-1, 488(%rax,%rcx,4)
	jne	.LBB321_4
# %bb.3:                                # %if.then18
	movq	-40(%rbp), %rax
	movw	$-1, (%rax)
	movq	-48(%rbp), %rax
	movw	$-1, (%rax)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB321_11
.LBB321_4:                              # %if.else19
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$0, 488(%rax,%rcx,4)
	jne	.LBB321_6
# %bb.5:                                # %if.then25
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-48(%rbp), %rax
	movw	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-32(%rbp), %rax
	movl	$0, (%rax)
	jmp	.LBB321_10
.LBB321_6:                              # %if.else39
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	cmpl	$1, 488(%rax,%rcx,4)
	jne	.LBB321_8
# %bb.7:                                # %if.then45
	movq	-40(%rbp), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-56(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
	jmp	.LBB321_9
.LBB321_8:                              # %if.else59
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-40(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	enc_picture, %rax
	movq	6480(%rax), %rax
	movq	8(%rax), %rax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movw	%ax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-56(%rbp), %rcx
	movl	%eax, (%rcx)
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movl	472(%rax,%rcx,4), %eax
	movq	-32(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB321_9:                              # %if.end
	jmp	.LBB321_10
.LBB321_10:                             # %if.end86
	jmp	.LBB321_11
.LBB321_11:                             # %if.end87
	jmp	.LBB321_12
.LBB321_12:                             # %if.end88
	cmpl	$1763016973, -60(%rbp)  # imm = 0x6915810D
	jne	.LBB321_14
.LBB321_13:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB321_14:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB321_13
.Lfunc_end321:
	.size	SetModesAndRefframe.280, .Lfunc_end321-SetModesAndRefframe.280
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.281        # -- Begin function MBType2Value.281
	.p2align	4, 0x90
	.type	MBType2Value.281,@function
MBType2Value.281:                       # @MBType2Value.281
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2125506957, -36(%rbp)  # imm = 0x7EB0A98D
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB322_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB322_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB322_4
.LBB322_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB322_26
.LBB322_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB322_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB322_26
.LBB322_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB322_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB322_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB322_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB322_26
.LBB322_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB322_26
.LBB322_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB322_26
.LBB322_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB322_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB322_26
.LBB322_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB322_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB322_17
.LBB322_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB322_26
.LBB322_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB322_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB322_26
.LBB322_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB322_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB322_26
.LBB322_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB322_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB322_26
.LBB322_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB322_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB322_26
.LBB322_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB322_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$2125506957, -36(%rbp)  # imm = 0x7EB0A98D
	jne	.LBB322_28
.LBB322_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB322_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB322_27
.Lfunc_end322:
	.size	MBType2Value.281, .Lfunc_end322-MBType2Value.281
	.cfi_endproc
                                        # -- End function
	.globl	find_sad_16x16.282      # -- Begin function find_sad_16x16.282
	.p2align	4, 0x90
	.type	find_sad_16x16.282,@function
find_sad_16x16.282:                     # @find_sad_16x16.282
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$2632, %rsp             # imm = 0xA48
	.cfi_offset %rbx, -24
	movl	$487631069, -80(%rbp)   # imm = 0x1D10A8DD
	movq	%rdi, -88(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -72(%rbp)
	movl	$0, -12(%rbp)
.LBB323_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB323_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB323_1 Depth=1
	movl	-72(%rbp), %edi
	movl	-12(%rbp), %edx
	subl	$1, %edx
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %r8
	addq	%rax, %r8
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	callq	getNeighbour
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB323_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB323_1
.LBB323_4:                              # %for.end
	movl	-72(%rbp), %edi
	xorl	%esi, %esi
	movl	$4294967295, %edx       # imm = 0xFFFFFFFF
	movl	$1, %ecx
	leaq	-184(%rbp), %r8
	callq	getNeighbour
	movq	input, %rax
	cmpl	$0, 216(%rax)
	jne	.LBB323_6
# %bb.5:                                # %if.then
	movl	-184(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-568(%rbp), %eax
	movl	%eax, -64(%rbp)
	movl	-592(%rbp), %eax
	movl	%eax, -76(%rbp)
	jmp	.LBB323_20
.LBB323_6:                              # %if.else
	cmpl	$0, -184(%rbp)
	je	.LBB323_8
# %bb.7:                                # %cond.true
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-180(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB323_9
.LBB323_8:                              # %cond.false
	xorl	%eax, %eax
	jmp	.LBB323_9
.LBB323_9:                              # %cond.end
	movl	%eax, -68(%rbp)
	movl	$1, -12(%rbp)
	movl	$1, -64(%rbp)
.LBB323_10:                             # %for.cond9
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$17, -12(%rbp)
	jge	.LBB323_16
# %bb.11:                               # %for.body11
                                        #   in Loop: Header=BB323_10 Depth=1
	movslq	-12(%rbp), %rax
	imulq	$24, %rax, %rax
	leaq	-592(%rbp), %rcx
	addq	%rax, %rcx
	cmpl	$0, (%rcx)
	je	.LBB323_13
# %bb.12:                               # %cond.true16
                                        #   in Loop: Header=BB323_10 Depth=1
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-12(%rbp), %rcx
	imulq	$24, %rcx, %rcx
	leaq	-592(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	4(%rdx), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB323_14
.LBB323_13:                             # %cond.false23
                                        #   in Loop: Header=BB323_10 Depth=1
	xorl	%eax, %eax
	jmp	.LBB323_14
.LBB323_14:                             # %cond.end24
                                        #   in Loop: Header=BB323_10 Depth=1
	andl	-64(%rbp), %eax
	movl	%eax, -64(%rbp)
# %bb.15:                               # %for.inc26
                                        #   in Loop: Header=BB323_10 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB323_10
.LBB323_16:                             # %for.end28
	cmpl	$0, -592(%rbp)
	je	.LBB323_18
# %bb.17:                               # %cond.true32
	movq	img, %rax
	movq	71784(%rax), %rax
	movslq	-588(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	jmp	.LBB323_19
.LBB323_18:                             # %cond.false38
	xorl	%eax, %eax
	jmp	.LBB323_19
.LBB323_19:                             # %cond.end39
	movl	%eax, -76(%rbp)
.LBB323_20:                             # %if.end
	movl	$999999, -60(%rbp)      # imm = 0xF423F
	movq	-88(%rbp), %rax
	movl	$2, (%rax)
	movl	$0, -52(%rbp)
.LBB323_21:                             # %for.cond41
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB323_42 Depth 2
                                        #       Child Loop BB323_44 Depth 3
                                        #     Child Loop BB323_50 Depth 2
                                        #       Child Loop BB323_52 Depth 3
                                        #         Child Loop BB323_54 Depth 4
                                        #         Child Loop BB323_58 Depth 4
                                        #           Child Loop BB323_60 Depth 5
                                        #     Child Loop BB323_72 Depth 2
                                        #       Child Loop BB323_74 Depth 3
                                        #     Child Loop BB323_80 Depth 2
                                        #     Child Loop BB323_84 Depth 2
                                        #       Child Loop BB323_86 Depth 3
	cmpl	$4, -52(%rbp)
	jge	.LBB323_96
# %bb.22:                               # %for.body43
                                        #   in Loop: Header=BB323_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2396(%rax)
	je	.LBB323_24
# %bb.23:                               # %lor.lhs.false
                                        #   in Loop: Header=BB323_21 Depth=1
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB323_32
.LBB323_24:                             # %if.then46
                                        #   in Loop: Header=BB323_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2412(%rax)
	je	.LBB323_28
# %bb.25:                               # %land.lhs.true
                                        #   in Loop: Header=BB323_21 Depth=1
	cmpl	$0, -52(%rbp)
	je	.LBB323_27
# %bb.26:                               # %lor.lhs.false49
                                        #   in Loop: Header=BB323_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB323_28
.LBB323_27:                             # %if.then51
                                        #   in Loop: Header=BB323_21 Depth=1
	jmp	.LBB323_95
.LBB323_28:                             # %if.end52
                                        #   in Loop: Header=BB323_21 Depth=1
	movq	input, %rax
	cmpl	$0, 2416(%rax)
	je	.LBB323_31
# %bb.29:                               # %land.lhs.true54
                                        #   in Loop: Header=BB323_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB323_31
# %bb.30:                               # %if.then56
                                        #   in Loop: Header=BB323_21 Depth=1
	jmp	.LBB323_95
.LBB323_31:                             # %if.end57
                                        #   in Loop: Header=BB323_21 Depth=1
	jmp	.LBB323_32
.LBB323_32:                             # %if.end58
                                        #   in Loop: Header=BB323_21 Depth=1
	cmpl	$0, -52(%rbp)
	jne	.LBB323_34
# %bb.33:                               # %land.lhs.true60
                                        #   in Loop: Header=BB323_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB323_40
.LBB323_34:                             # %lor.lhs.false62
                                        #   in Loop: Header=BB323_21 Depth=1
	cmpl	$1, -52(%rbp)
	jne	.LBB323_36
# %bb.35:                               # %land.lhs.true64
                                        #   in Loop: Header=BB323_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB323_40
.LBB323_36:                             # %lor.lhs.false66
                                        #   in Loop: Header=BB323_21 Depth=1
	cmpl	$3, -52(%rbp)
	jne	.LBB323_41
# %bb.37:                               # %land.lhs.true68
                                        #   in Loop: Header=BB323_21 Depth=1
	cmpl	$0, -64(%rbp)
	je	.LBB323_40
# %bb.38:                               # %lor.lhs.false70
                                        #   in Loop: Header=BB323_21 Depth=1
	cmpl	$0, -68(%rbp)
	je	.LBB323_40
# %bb.39:                               # %lor.lhs.false72
                                        #   in Loop: Header=BB323_21 Depth=1
	cmpl	$0, -76(%rbp)
	jne	.LBB323_41
.LBB323_40:                             # %if.then74
                                        #   in Loop: Header=BB323_21 Depth=1
	jmp	.LBB323_94
.LBB323_41:                             # %if.else75
                                        #   in Loop: Header=BB323_21 Depth=1
	movl	$0, -16(%rbp)
.LBB323_42:                             # %for.cond76
                                        #   Parent Loop BB323_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB323_44 Depth 3
	cmpl	$16, -16(%rbp)
	jge	.LBB323_49
# %bb.43:                               # %for.body78
                                        #   in Loop: Header=BB323_42 Depth=2
	movl	$0, -12(%rbp)
.LBB323_44:                             # %for.cond79
                                        #   Parent Loop BB323_21 Depth=1
                                        #     Parent Loop BB323_42 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -12(%rbp)
	jge	.LBB323_47
# %bb.45:                               # %for.body81
                                        #   in Loop: Header=BB323_44 Depth=3
	movq	imgY_org, %rax
	movq	img, %rcx
	movl	172(%rcx), %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	168(%rcx), %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-52(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-2640(%rbp), %rdx
	movq	%rdx, %rsi
	addq	%rcx, %rsi
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rsi,%rcx,4)
	movslq	-12(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rdx
	movslq	-16(%rbp), %rax
	movl	(%rdx,%rax,4), %ecx
	movl	-12(%rbp), %eax
	cltd
	movl	$4, %esi
	idivl	%esi
	movslq	%edx, %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rdi
	addq	%rax, %rdi
	movl	-12(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	shlq	$6, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	movslq	%edx, %rax
	shlq	$4, %rax
	addq	%rax, %rdi
	movl	-16(%rbp), %eax
	cltd
	idivl	%esi
	cltq
	movl	%ecx, (%rdi,%rax,4)
# %bb.46:                               # %for.inc113
                                        #   in Loop: Header=BB323_44 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB323_44
.LBB323_47:                             # %for.end115
                                        #   in Loop: Header=BB323_42 Depth=2
	jmp	.LBB323_48
.LBB323_48:                             # %for.inc116
                                        #   in Loop: Header=BB323_42 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB323_42
.LBB323_49:                             # %for.end118
                                        #   in Loop: Header=BB323_21 Depth=1
	movl	$0, -56(%rbp)
	movl	$0, -20(%rbp)
.LBB323_50:                             # %for.cond119
                                        #   Parent Loop BB323_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB323_52 Depth 3
                                        #         Child Loop BB323_54 Depth 4
                                        #         Child Loop BB323_58 Depth 4
                                        #           Child Loop BB323_60 Depth 5
	cmpl	$4, -20(%rbp)
	jge	.LBB323_71
# %bb.51:                               # %for.body122
                                        #   in Loop: Header=BB323_50 Depth=2
	movl	$0, -24(%rbp)
.LBB323_52:                             # %for.cond123
                                        #   Parent Loop BB323_21 Depth=1
                                        #     Parent Loop BB323_50 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB323_54 Depth 4
                                        #         Child Loop BB323_58 Depth 4
                                        #           Child Loop BB323_60 Depth 5
	cmpl	$4, -24(%rbp)
	jge	.LBB323_69
# %bb.53:                               # %for.body126
                                        #   in Loop: Header=BB323_52 Depth=3
	movl	$0, -16(%rbp)
.LBB323_54:                             # %for.cond127
                                        #   Parent Loop BB323_21 Depth=1
                                        #     Parent Loop BB323_50 Depth=2
                                        #       Parent Loop BB323_52 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -16(%rbp)
	jge	.LBB323_57
# %bb.55:                               # %for.body130
                                        #   in Loop: Header=BB323_54 Depth=4
	leaq	-1616(%rbp), %rax
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -48(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -44(%rbp)
	movq	%rax, %rcx
	addq	$256, %rcx              # imm = 0x100
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-20(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movq	%rax, %rdx
	addq	$768, %rdx              # imm = 0x300
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	subl	(%rdx,%rsi,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movq	%rax, %rdx
	addq	$512, %rdx              # imm = 0x200
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movq	%rax, %rdx
	addq	$256, %rdx              # imm = 0x100
	movslq	-24(%rbp), %rsi
	shlq	$6, %rsi
	addq	%rsi, %rdx
	movslq	-16(%rbp), %rsi
	shlq	$4, %rsi
	addq	%rsi, %rdx
	movslq	-20(%rbp), %rsi
	movl	%ecx, (%rdx,%rsi,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	addq	$768, %rax              # imm = 0x300
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.56:                               # %for.inc235
                                        #   in Loop: Header=BB323_54 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB323_54
.LBB323_57:                             # %for.end237
                                        #   in Loop: Header=BB323_52 Depth=3
	movl	$0, -12(%rbp)
.LBB323_58:                             # %for.cond238
                                        #   Parent Loop BB323_21 Depth=1
                                        #     Parent Loop BB323_50 Depth=2
                                        #       Parent Loop BB323_52 Depth=3
                                        # =>      This Loop Header: Depth=4
                                        #           Child Loop BB323_60 Depth 5
	cmpl	$4, -12(%rbp)
	jge	.LBB323_67
# %bb.59:                               # %for.body241
                                        #   in Loop: Header=BB323_58 Depth=4
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	leaq	-1616(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	addl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	16(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	32(%rsi,%rdx,4), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$8, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movslq	-24(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rdx
	movslq	-20(%rbp), %rcx
	movl	(%rdx,%rcx,4), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	subl	48(%rsi,%rdx,4), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 32(%rsi,%rdx,4)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rsi
	movslq	-20(%rbp), %rdx
	movl	%ecx, 16(%rsi,%rdx,4)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$8, %rdx
	addq	%rdx, %rax
	movslq	-24(%rbp), %rdx
	shlq	$6, %rdx
	addq	%rdx, %rax
	movslq	-20(%rbp), %rdx
	movl	%ecx, 48(%rax,%rdx,4)
	movl	$0, -16(%rbp)
.LBB323_60:                             # %for.cond346
                                        #   Parent Loop BB323_21 Depth=1
                                        #     Parent Loop BB323_50 Depth=2
                                        #       Parent Loop BB323_52 Depth=3
                                        #         Parent Loop BB323_58 Depth=4
                                        # =>        This Inner Loop Header: Depth=5
	cmpl	$4, -16(%rbp)
	jge	.LBB323_65
# %bb.61:                               # %for.body349
                                        #   in Loop: Header=BB323_60 Depth=5
	movl	-12(%rbp), %eax
	addl	-16(%rbp), %eax
	cmpl	$0, %eax
	je	.LBB323_63
# %bb.62:                               # %if.then353
                                        #   in Loop: Header=BB323_60 Depth=5
	movslq	-12(%rbp), %rax
	shlq	$8, %rax
	leaq	-1616(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-24(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %rcx
	movslq	-20(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
.LBB323_63:                             # %if.end363
                                        #   in Loop: Header=BB323_60 Depth=5
	jmp	.LBB323_64
.LBB323_64:                             # %for.inc364
                                        #   in Loop: Header=BB323_60 Depth=5
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB323_60
.LBB323_65:                             # %for.end366
                                        #   in Loop: Header=BB323_58 Depth=4
	jmp	.LBB323_66
.LBB323_66:                             # %for.inc367
                                        #   in Loop: Header=BB323_58 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB323_58
.LBB323_67:                             # %for.end369
                                        #   in Loop: Header=BB323_52 Depth=3
	jmp	.LBB323_68
.LBB323_68:                             # %for.inc370
                                        #   in Loop: Header=BB323_52 Depth=3
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB323_52
.LBB323_69:                             # %for.end372
                                        #   in Loop: Header=BB323_50 Depth=2
	jmp	.LBB323_70
.LBB323_70:                             # %for.inc373
                                        #   in Loop: Header=BB323_50 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB323_50
.LBB323_71:                             # %for.end375
                                        #   in Loop: Header=BB323_21 Depth=1
	movl	$0, -16(%rbp)
.LBB323_72:                             # %for.cond376
                                        #   Parent Loop BB323_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB323_74 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB323_79
# %bb.73:                               # %for.body379
                                        #   in Loop: Header=BB323_72 Depth=2
	movl	$0, -12(%rbp)
.LBB323_74:                             # %for.cond380
                                        #   Parent Loop BB323_21 Depth=1
                                        #     Parent Loop BB323_72 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -12(%rbp)
	jge	.LBB323_77
# %bb.75:                               # %for.body383
                                        #   in Loop: Header=BB323_74 Depth=3
	leaq	-1616(%rbp), %rax
	movslq	-12(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.76:                               # %for.inc395
                                        #   in Loop: Header=BB323_74 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB323_74
.LBB323_77:                             # %for.end397
                                        #   in Loop: Header=BB323_72 Depth=2
	jmp	.LBB323_78
.LBB323_78:                             # %for.inc398
                                        #   in Loop: Header=BB323_72 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB323_72
.LBB323_79:                             # %for.end400
                                        #   in Loop: Header=BB323_21 Depth=1
	movl	$0, -16(%rbp)
.LBB323_80:                             # %for.cond401
                                        #   Parent Loop BB323_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB323_83
# %bb.81:                               # %for.body404
                                        #   in Loop: Header=BB323_80 Depth=2
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -48(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	addl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -44(%rbp)
	movslq	-16(%rbp), %rax
	movl	-144(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-128(%rbp,%rcx,4), %eax
	movl	%eax, -40(%rbp)
	movslq	-16(%rbp), %rax
	movl	-160(%rbp,%rax,4), %eax
	movslq	-16(%rbp), %rcx
	subl	-112(%rbp,%rcx,4), %eax
	movl	%eax, -36(%rbp)
	movl	-48(%rbp), %eax
	addl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -160(%rbp,%rcx,4)
	movl	-48(%rbp), %eax
	subl	-44(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -128(%rbp,%rcx,4)
	movl	-40(%rbp), %eax
	addl	-36(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -144(%rbp,%rcx,4)
	movl	-36(%rbp), %eax
	subl	-40(%rbp), %eax
	movslq	-16(%rbp), %rcx
	movl	%eax, -112(%rbp,%rcx,4)
# %bb.82:                               # %for.inc461
                                        #   in Loop: Header=BB323_80 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB323_80
.LBB323_83:                             # %for.end463
                                        #   in Loop: Header=BB323_21 Depth=1
	movl	$0, -12(%rbp)
.LBB323_84:                             # %for.cond464
                                        #   Parent Loop BB323_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB323_86 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB323_91
# %bb.85:                               # %for.body467
                                        #   in Loop: Header=BB323_84 Depth=2
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	leaq	-160(%rbp), %rax
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	12(%rsi), %ecx
	movl	%ecx, -48(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	addl	8(%rsi), %ecx
	movl	%ecx, -44(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	4(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	8(%rsi), %ecx
	movl	%ecx, -40(%rbp)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%rax, %rdx
	addq	%rcx, %rdx
	movl	(%rdx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	subl	12(%rsi), %ecx
	movl	%ecx, -36(%rbp)
	movl	-48(%rbp), %ecx
	addl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, (%rsi)
	movl	-48(%rbp), %ecx
	subl	-44(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 8(%rsi)
	movl	-40(%rbp), %ecx
	addl	-36(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movl	%ecx, 4(%rsi)
	movl	-36(%rbp), %ecx
	subl	-40(%rbp), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movl	%ecx, 12(%rax)
	movl	$0, -16(%rbp)
.LBB323_86:                             # %for.cond524
                                        #   Parent Loop BB323_21 Depth=1
                                        #     Parent Loop BB323_84 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$4, -16(%rbp)
	jge	.LBB323_89
# %bb.87:                               # %for.body527
                                        #   in Loop: Header=BB323_86 Depth=3
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	leaq	-160(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-16(%rbp), %rax
	movl	(%rcx,%rax,4), %edi
	callq	abs
	addl	-56(%rbp), %eax
	movl	%eax, -56(%rbp)
# %bb.88:                               # %for.inc534
                                        #   in Loop: Header=BB323_86 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB323_86
.LBB323_89:                             # %for.end536
                                        #   in Loop: Header=BB323_84 Depth=2
	jmp	.LBB323_90
.LBB323_90:                             # %for.inc537
                                        #   in Loop: Header=BB323_84 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB323_84
.LBB323_91:                             # %for.end539
                                        #   in Loop: Header=BB323_21 Depth=1
	movl	-56(%rbp), %eax
	cmpl	-60(%rbp), %eax
	jge	.LBB323_93
# %bb.92:                               # %if.then542
                                        #   in Loop: Header=BB323_21 Depth=1
	movl	-56(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-52(%rbp), %eax
	movq	-88(%rbp), %rcx
	movl	%eax, (%rcx)
.LBB323_93:                             # %if.end543
                                        #   in Loop: Header=BB323_21 Depth=1
	jmp	.LBB323_94
.LBB323_94:                             # %if.end544
                                        #   in Loop: Header=BB323_21 Depth=1
	jmp	.LBB323_95
.LBB323_95:                             # %for.inc545
                                        #   in Loop: Header=BB323_21 Depth=1
	movl	-52(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -52(%rbp)
	jmp	.LBB323_21
.LBB323_96:                             # %for.end547
	movl	-60(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -60(%rbp)
	movl	-60(%rbp), %ebx
	cmpl	$487631069, -80(%rbp)   # imm = 0x1D10A8DD
	jne	.LBB323_98
.LBB323_97:
	movl	%ebx, %eax
	addq	$2632, %rsp             # imm = 0xA48
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB323_98:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB323_97
.Lfunc_end323:
	.size	find_sad_16x16.282, .Lfunc_end323-find_sad_16x16.282
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.283   # -- Begin function LumaPrediction4x4.283
	.p2align	4, 0x90
	.type	LumaPrediction4x4.283,@function
LumaPrediction4x4.283:                  # @LumaPrediction4x4.283
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1552461784, -104(%rbp) # imm = 0x5C88AFD8
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -52(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB324_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB324_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB324_6
.LBB324_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB324_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB324_5:                              # %land.end
.LBB324_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB324_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB324_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB324_10
.LBB324_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB324_10
.LBB324_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB324_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB324_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB324_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB324_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -76(%rbp)
	jne	.LBB324_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -52(%rbp)
	jne	.LBB324_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB324_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB324_19
.LBB324_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB324_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB324_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB324_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB324_23
.LBB324_22:                             # %if.then45
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB324_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB324_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB324_26
.LBB324_25:                             # %if.then64
	movl	-64(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB324_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB324_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB324_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB324_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_31 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB324_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB324_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB324_31:                             # %for.cond85
                                        #   Parent Loop BB324_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB324_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB324_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB324_31 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_31
.LBB324_34:                             # %for.end
                                        #   in Loop: Header=BB324_29 Depth=1
	jmp	.LBB324_35
.LBB324_35:                             # %for.inc125
                                        #   in Loop: Header=BB324_29 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_29
.LBB324_36:                             # %for.end127
	jmp	.LBB324_57
.LBB324_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB324_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB324_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_41 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB324_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB324_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB324_41:                             # %for.cond135
                                        #   Parent Loop BB324_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB324_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB324_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB324_41 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_41
.LBB324_44:                             # %for.end161
                                        #   in Loop: Header=BB324_39 Depth=1
	jmp	.LBB324_45
.LBB324_45:                             # %for.inc162
                                        #   in Loop: Header=BB324_39 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_39
.LBB324_46:                             # %for.end164
	jmp	.LBB324_56
.LBB324_47:                             # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB324_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_50 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB324_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB324_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB324_50:                             # %for.cond170
                                        #   Parent Loop BB324_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB324_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB324_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB324_50 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_50
.LBB324_53:                             # %for.end196
                                        #   in Loop: Header=BB324_48 Depth=1
	jmp	.LBB324_54
.LBB324_54:                             # %for.inc197
                                        #   in Loop: Header=BB324_48 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_48
.LBB324_55:                             # %for.end199
	jmp	.LBB324_56
.LBB324_56:                             # %if.end200
	jmp	.LBB324_57
.LBB324_57:                             # %if.end201
	jmp	.LBB324_89
.LBB324_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB324_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB324_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_62 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB324_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB324_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB324_62:                             # %for.cond210
                                        #   Parent Loop BB324_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB324_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB324_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB324_62 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_62
.LBB324_65:                             # %for.end226
                                        #   in Loop: Header=BB324_60 Depth=1
	jmp	.LBB324_66
.LBB324_66:                             # %for.inc227
                                        #   in Loop: Header=BB324_60 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_60
.LBB324_67:                             # %for.end229
	jmp	.LBB324_88
.LBB324_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB324_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB324_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_72 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB324_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB324_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB324_72:                             # %for.cond238
                                        #   Parent Loop BB324_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB324_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB324_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB324_72 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_72
.LBB324_75:                             # %for.end251
                                        #   in Loop: Header=BB324_70 Depth=1
	jmp	.LBB324_76
.LBB324_76:                             # %for.inc252
                                        #   in Loop: Header=BB324_70 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_70
.LBB324_77:                             # %for.end254
	jmp	.LBB324_87
.LBB324_78:                             # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB324_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB324_81 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB324_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB324_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB324_81:                             # %for.cond260
                                        #   Parent Loop BB324_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB324_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB324_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB324_81 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB324_81
.LBB324_84:                             # %for.end273
                                        #   in Loop: Header=BB324_79 Depth=1
	jmp	.LBB324_85
.LBB324_85:                             # %for.inc274
                                        #   in Loop: Header=BB324_79 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB324_79
.LBB324_86:                             # %for.end276
	jmp	.LBB324_87
.LBB324_87:                             # %if.end277
	jmp	.LBB324_88
.LBB324_88:                             # %if.end278
	jmp	.LBB324_89
.LBB324_89:                             # %if.end279
	cmpl	$1552461784, -104(%rbp) # imm = 0x5C88AFD8
	jne	.LBB324_91
.LBB324_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB324_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB324_90
.Lfunc_end324:
	.size	LumaPrediction4x4.283, .Lfunc_end324-LumaPrediction4x4.283
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.284   # -- Begin function LumaPrediction4x4.284
	.p2align	4, 0x90
	.type	LumaPrediction4x4.284,@function
LumaPrediction4x4.284:                  # @LumaPrediction4x4.284
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$2059848823, -104(%rbp) # imm = 0x7AC6CC77
	movl	%edi, -16(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -68(%rbp)
	movl	%r8d, -64(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-20(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-20(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -72(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -76(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB325_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB325_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB325_6
.LBB325_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB325_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB325_5:                              # %land.end
.LBB325_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -100(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB325_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB325_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB325_10
.LBB325_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB325_10
.LBB325_10:                             # %cond.end
	movl	%ecx, -52(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB325_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB325_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB325_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -24(%rbp)
	jne	.LBB325_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -68(%rbp)
	jne	.LBB325_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -64(%rbp)
	jne	.LBB325_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB325_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB325_19
.LBB325_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB325_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB325_20:                             # %if.end
	cmpl	$0, -24(%rbp)
	je	.LBB325_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -24(%rbp)
	jne	.LBB325_23
.LBB325_22:                             # %if.then45
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB325_23:                             # %if.end58
	cmpl	$1, -24(%rbp)
	je	.LBB325_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -24(%rbp)
	jne	.LBB325_26
.LBB325_25:                             # %if.then64
	movl	-60(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-52(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB325_26:                             # %if.end77
	cmpl	$0, -100(%rbp)
	je	.LBB325_58
# %bb.27:                               # %if.then79
	cmpl	$2, -24(%rbp)
	jne	.LBB325_37
# %bb.28:                               # %if.then82
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB325_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB325_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB325_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB325_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB325_31:                             # %for.cond85
                                        #   Parent Loop BB325_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB325_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB325_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB325_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_31
.LBB325_34:                             # %for.end
                                        #   in Loop: Header=BB325_29 Depth=1
	jmp	.LBB325_35
.LBB325_35:                             # %for.inc125
                                        #   in Loop: Header=BB325_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_29
.LBB325_36:                             # %for.end127
	jmp	.LBB325_57
.LBB325_37:                             # %if.else
	cmpl	$0, -24(%rbp)
	jne	.LBB325_47
# %bb.38:                               # %if.then130
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB325_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB325_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB325_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB325_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB325_41:                             # %for.cond135
                                        #   Parent Loop BB325_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB325_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB325_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB325_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_41
.LBB325_44:                             # %for.end161
                                        #   in Loop: Header=BB325_39 Depth=1
	jmp	.LBB325_45
.LBB325_45:                             # %for.inc162
                                        #   in Loop: Header=BB325_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_39
.LBB325_46:                             # %for.end164
	jmp	.LBB325_56
.LBB325_47:                             # %if.else165
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB325_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB325_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB325_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB325_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB325_50:                             # %for.cond170
                                        #   Parent Loop BB325_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB325_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB325_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB325_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_50
.LBB325_53:                             # %for.end196
                                        #   in Loop: Header=BB325_48 Depth=1
	jmp	.LBB325_54
.LBB325_54:                             # %for.inc197
                                        #   in Loop: Header=BB325_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_48
.LBB325_55:                             # %for.end199
	jmp	.LBB325_56
.LBB325_56:                             # %if.end200
	jmp	.LBB325_57
.LBB325_57:                             # %if.end201
	jmp	.LBB325_89
.LBB325_58:                             # %if.else202
	cmpl	$2, -24(%rbp)
	jne	.LBB325_68
# %bb.59:                               # %if.then205
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB325_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB325_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB325_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB325_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB325_62:                             # %for.cond210
                                        #   Parent Loop BB325_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB325_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB325_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB325_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_62
.LBB325_65:                             # %for.end226
                                        #   in Loop: Header=BB325_60 Depth=1
	jmp	.LBB325_66
.LBB325_66:                             # %for.inc227
                                        #   in Loop: Header=BB325_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_60
.LBB325_67:                             # %for.end229
	jmp	.LBB325_88
.LBB325_68:                             # %if.else230
	cmpl	$0, -24(%rbp)
	jne	.LBB325_78
# %bb.69:                               # %if.then233
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB325_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB325_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB325_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB325_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB325_72:                             # %for.cond238
                                        #   Parent Loop BB325_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB325_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB325_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB325_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_72
.LBB325_75:                             # %for.end251
                                        #   in Loop: Header=BB325_70 Depth=1
	jmp	.LBB325_76
.LBB325_76:                             # %for.inc252
                                        #   in Loop: Header=BB325_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_70
.LBB325_77:                             # %for.end254
	jmp	.LBB325_87
.LBB325_78:                             # %if.else255
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB325_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB325_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB325_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB325_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB325_81:                             # %for.cond260
                                        #   Parent Loop BB325_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB325_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB325_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB325_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB325_81
.LBB325_84:                             # %for.end273
                                        #   in Loop: Header=BB325_79 Depth=1
	jmp	.LBB325_85
.LBB325_85:                             # %for.inc274
                                        #   in Loop: Header=BB325_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB325_79
.LBB325_86:                             # %for.end276
	jmp	.LBB325_87
.LBB325_87:                             # %if.end277
	jmp	.LBB325_88
.LBB325_88:                             # %if.end278
	jmp	.LBB325_89
.LBB325_89:                             # %if.end279
	cmpl	$2059848823, -104(%rbp) # imm = 0x7AC6CC77
	jne	.LBB325_91
.LBB325_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB325_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB325_90
.Lfunc_end325:
	.size	LumaPrediction4x4.284, .Lfunc_end325-LumaPrediction4x4.284
	.cfi_endproc
                                        # -- End function
	.globl	MBType2Value.285        # -- Begin function MBType2Value.285
	.p2align	4, 0x90
	.type	MBType2Value.285,@function
MBType2Value.285:                       # @MBType2Value.285
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$431036347, -36(%rbp)   # imm = 0x19B117BB
	movq	%rdi, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB326_12
# %bb.1:                                # %if.then
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB326_3
# %bb.2:                                # %lor.lhs.false
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	jne	.LBB326_4
.LBB326_3:                              # %if.then4
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB326_26
.LBB326_4:                              # %if.else
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	jne	.LBB326_6
# %bb.5:                                # %if.then9
	xorl	%eax, %eax
	movq	img, %rcx
	movl	24(%rcx), %ecx
	cmpl	$2, %ecx
	movl	$6, %ecx
	cmovel	%eax, %ecx
	movq	img, %rax
	addl	72380(%rax), %ecx
	movl	%ecx, -12(%rbp)
	jmp	.LBB326_26
.LBB326_6:                              # %if.else13
	movq	-24(%rbp), %rax
	cmpl	$8, 72(%rax)
	jne	.LBB326_11
# %bb.7:                                # %if.then16
	movq	input, %rax
	cmpl	$0, 2356(%rax)
	jne	.LBB326_10
# %bb.8:                                # %land.lhs.true
	movq	-24(%rbp), %rdi
	callq	ZeroRef
	cmpl	$0, %eax
	je	.LBB326_10
# %bb.9:                                # %if.then18
	movl	$5, -12(%rbp)
	jmp	.LBB326_26
.LBB326_10:                             # %if.else19
	movl	$4, -12(%rbp)
	jmp	.LBB326_26
.LBB326_11:                             # %if.else20
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB326_26
.LBB326_12:                             # %if.else22
	movq	-24(%rbp), %rax
	movl	72(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	-24(%rbp), %rax
	movl	488(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	500(%rax), %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -16(%rbp)
	jne	.LBB326_14
# %bb.13:                               # %if.then27
	movl	$0, -12(%rbp)
	jmp	.LBB326_26
.LBB326_14:                             # %if.else28
	cmpl	$9, -16(%rbp)
	je	.LBB326_16
# %bb.15:                               # %lor.lhs.false30
	cmpl	$13, -16(%rbp)
	jne	.LBB326_17
.LBB326_16:                             # %if.then32
	movl	$23, -12(%rbp)
	jmp	.LBB326_26
.LBB326_17:                             # %if.else33
	cmpl	$10, -16(%rbp)
	jne	.LBB326_19
# %bb.18:                               # %if.then35
	movq	img, %rax
	movl	72380(%rax), %eax
	addl	$23, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB326_26
.LBB326_19:                             # %if.else38
	cmpl	$8, -16(%rbp)
	jne	.LBB326_21
# %bb.20:                               # %if.then40
	movl	$22, -12(%rbp)
	jmp	.LBB326_26
.LBB326_21:                             # %if.else41
	cmpl	$1, -16(%rbp)
	jne	.LBB326_23
# %bb.22:                               # %if.then43
	movslq	-28(%rbp), %rax
	movl	MBType2Value.dir1offset(,%rax,4), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB326_26
.LBB326_23:                             # %if.else45
	cmpl	$2, -16(%rbp)
	jne	.LBB326_25
# %bb.24:                               # %if.then47
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$4, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB326_26
.LBB326_25:                             # %if.else53
	movslq	-28(%rbp), %rax
	imulq	$12, %rax, %rax
	movabsq	$MBType2Value.dir2offset, %rcx
	addq	%rax, %rcx
	movslq	-32(%rbp), %rax
	movl	(%rcx,%rax,4), %eax
	addl	$5, %eax
	movl	%eax, -12(%rbp)
.LBB326_26:                             # %return
	movl	-12(%rbp), %ebx
	cmpl	$431036347, -36(%rbp)   # imm = 0x19B117BB
	jne	.LBB326_28
.LBB326_27:
	movl	%ebx, %eax
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB326_28:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB326_27
.Lfunc_end326:
	.size	MBType2Value.285, .Lfunc_end326-MBType2Value.285
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.286   # -- Begin function LumaPrediction4x4.286
	.p2align	4, 0x90
	.type	LumaPrediction4x4.286,@function
LumaPrediction4x4.286:                  # @LumaPrediction4x4.286
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$62665846, -100(%rbp)   # imm = 0x3BC3476
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -76(%rbp)
	movl	%r8d, -56(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -68(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -96(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB327_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB327_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB327_6
.LBB327_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB327_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB327_5:                              # %land.end
.LBB327_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -88(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB327_9
# %bb.7:                                # %land.lhs.true11
	movq	-96(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB327_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB327_10
.LBB327_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB327_10
.LBB327_10:                             # %cond.end
	movl	%ecx, -72(%rbp)
	movq	-96(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB327_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB327_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB327_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB327_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -76(%rbp)
	jne	.LBB327_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -56(%rbp)
	jne	.LBB327_20
# %bb.16:                               # %if.then
	movq	-96(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB327_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB327_19
.LBB327_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB327_19:                             # %cond.end38
	movq	%rax, -88(%rbp)
.LBB327_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB327_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB327_23
.LBB327_22:                             # %if.then45
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB327_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB327_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB327_26
.LBB327_25:                             # %if.then64
	movl	-52(%rbp), %esi
	movl	-60(%rbp), %edx
	movq	-88(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-68(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-72(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB327_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB327_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB327_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB327_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB327_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB327_31:                             # %for.cond85
                                        #   Parent Loop BB327_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB327_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB327_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB327_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_31
.LBB327_34:                             # %for.end
                                        #   in Loop: Header=BB327_29 Depth=1
	jmp	.LBB327_35
.LBB327_35:                             # %for.inc125
                                        #   in Loop: Header=BB327_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_29
.LBB327_36:                             # %for.end127
	jmp	.LBB327_57
.LBB327_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB327_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB327_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB327_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB327_41:                             # %for.cond135
                                        #   Parent Loop BB327_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB327_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB327_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB327_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_41
.LBB327_44:                             # %for.end161
                                        #   in Loop: Header=BB327_39 Depth=1
	jmp	.LBB327_45
.LBB327_45:                             # %for.inc162
                                        #   in Loop: Header=BB327_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_39
.LBB327_46:                             # %for.end164
	jmp	.LBB327_56
.LBB327_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB327_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB327_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB327_50:                             # %for.cond170
                                        #   Parent Loop BB327_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB327_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB327_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB327_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_50
.LBB327_53:                             # %for.end196
                                        #   in Loop: Header=BB327_48 Depth=1
	jmp	.LBB327_54
.LBB327_54:                             # %for.inc197
                                        #   in Loop: Header=BB327_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_48
.LBB327_55:                             # %for.end199
	jmp	.LBB327_56
.LBB327_56:                             # %if.end200
	jmp	.LBB327_57
.LBB327_57:                             # %if.end201
	jmp	.LBB327_89
.LBB327_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB327_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB327_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB327_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB327_62:                             # %for.cond210
                                        #   Parent Loop BB327_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB327_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB327_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB327_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_62
.LBB327_65:                             # %for.end226
                                        #   in Loop: Header=BB327_60 Depth=1
	jmp	.LBB327_66
.LBB327_66:                             # %for.inc227
                                        #   in Loop: Header=BB327_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_60
.LBB327_67:                             # %for.end229
	jmp	.LBB327_88
.LBB327_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB327_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB327_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB327_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB327_72:                             # %for.cond238
                                        #   Parent Loop BB327_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB327_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB327_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB327_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_72
.LBB327_75:                             # %for.end251
                                        #   in Loop: Header=BB327_70 Depth=1
	jmp	.LBB327_76
.LBB327_76:                             # %for.inc252
                                        #   in Loop: Header=BB327_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_70
.LBB327_77:                             # %for.end254
	jmp	.LBB327_87
.LBB327_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB327_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB327_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB327_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB327_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB327_81:                             # %for.cond260
                                        #   Parent Loop BB327_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB327_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB327_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB327_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB327_81
.LBB327_84:                             # %for.end273
                                        #   in Loop: Header=BB327_79 Depth=1
	jmp	.LBB327_85
.LBB327_85:                             # %for.inc274
                                        #   in Loop: Header=BB327_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB327_79
.LBB327_86:                             # %for.end276
	jmp	.LBB327_87
.LBB327_87:                             # %if.end277
	jmp	.LBB327_88
.LBB327_88:                             # %if.end278
	jmp	.LBB327_89
.LBB327_89:                             # %if.end279
	cmpl	$62665846, -100(%rbp)   # imm = 0x3BC3476
	jne	.LBB327_91
.LBB327_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB327_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB327_90
.Lfunc_end327:
	.size	LumaPrediction4x4.286, .Lfunc_end327-LumaPrediction4x4.286
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.287   # -- Begin function LumaPrediction4x4.287
	.p2align	4, 0x90
	.type	LumaPrediction4x4.287,@function
LumaPrediction4x4.287:                  # @LumaPrediction4x4.287
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$1736456049, -100(%rbp) # imm = 0x67803771
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -72(%rbp)
	movl	%r8d, -76(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -52(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -40(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB328_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB328_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB328_6
.LBB328_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB328_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB328_5:                              # %land.end
.LBB328_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB328_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB328_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB328_10
.LBB328_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB328_10
.LBB328_10:                             # %cond.end
	movl	%ecx, -60(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB328_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB328_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB328_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB328_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -72(%rbp)
	jne	.LBB328_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -76(%rbp)
	jne	.LBB328_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB328_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB328_19
.LBB328_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB328_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB328_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB328_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB328_23
.LBB328_22:                             # %if.then45
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-72(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB328_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB328_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB328_26
.LBB328_25:                             # %if.then64
	movl	-68(%rbp), %esi
	movl	-56(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-76(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-60(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB328_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB328_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB328_37
# %bb.28:                               # %if.then82
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB328_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB328_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB328_29 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB328_31:                             # %for.cond85
                                        #   Parent Loop BB328_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB328_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB328_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB328_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_31
.LBB328_34:                             # %for.end
                                        #   in Loop: Header=BB328_29 Depth=1
	jmp	.LBB328_35
.LBB328_35:                             # %for.inc125
                                        #   in Loop: Header=BB328_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_29
.LBB328_36:                             # %for.end127
	jmp	.LBB328_57
.LBB328_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB328_47
# %bb.38:                               # %if.then130
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB328_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB328_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB328_39 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB328_41:                             # %for.cond135
                                        #   Parent Loop BB328_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB328_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB328_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB328_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_41
.LBB328_44:                             # %for.end161
                                        #   in Loop: Header=BB328_39 Depth=1
	jmp	.LBB328_45
.LBB328_45:                             # %for.inc162
                                        #   in Loop: Header=BB328_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_39
.LBB328_46:                             # %for.end164
	jmp	.LBB328_56
.LBB328_47:                             # %if.else165
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB328_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB328_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB328_48 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB328_50:                             # %for.cond170
                                        #   Parent Loop BB328_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB328_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB328_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB328_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_50
.LBB328_53:                             # %for.end196
                                        #   in Loop: Header=BB328_48 Depth=1
	jmp	.LBB328_54
.LBB328_54:                             # %for.inc197
                                        #   in Loop: Header=BB328_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_48
.LBB328_55:                             # %for.end199
	jmp	.LBB328_56
.LBB328_56:                             # %if.end200
	jmp	.LBB328_57
.LBB328_57:                             # %if.end201
	jmp	.LBB328_89
.LBB328_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB328_68
# %bb.59:                               # %if.then205
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB328_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB328_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB328_60 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB328_62:                             # %for.cond210
                                        #   Parent Loop BB328_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB328_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB328_62 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	-48(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -48(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB328_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_62
.LBB328_65:                             # %for.end226
                                        #   in Loop: Header=BB328_60 Depth=1
	jmp	.LBB328_66
.LBB328_66:                             # %for.inc227
                                        #   in Loop: Header=BB328_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_60
.LBB328_67:                             # %for.end229
	jmp	.LBB328_88
.LBB328_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB328_78
# %bb.69:                               # %if.then233
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB328_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB328_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB328_70 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB328_72:                             # %for.cond238
                                        #   Parent Loop BB328_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB328_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB328_72 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB328_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_72
.LBB328_75:                             # %for.end251
                                        #   in Loop: Header=BB328_70 Depth=1
	jmp	.LBB328_76
.LBB328_76:                             # %for.inc252
                                        #   in Loop: Header=BB328_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_70
.LBB328_77:                             # %for.end254
	jmp	.LBB328_87
.LBB328_78:                             # %if.else255
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB328_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB328_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB328_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB328_79 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB328_81:                             # %for.cond260
                                        #   Parent Loop BB328_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB328_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB328_81 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB328_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB328_81
.LBB328_84:                             # %for.end273
                                        #   in Loop: Header=BB328_79 Depth=1
	jmp	.LBB328_85
.LBB328_85:                             # %for.inc274
                                        #   in Loop: Header=BB328_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB328_79
.LBB328_86:                             # %for.end276
	jmp	.LBB328_87
.LBB328_87:                             # %if.end277
	jmp	.LBB328_88
.LBB328_88:                             # %if.end278
	jmp	.LBB328_89
.LBB328_89:                             # %if.end279
	cmpl	$1736456049, -100(%rbp) # imm = 0x67803771
	jne	.LBB328_91
.LBB328_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB328_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB328_90
.Lfunc_end328:
	.size	LumaPrediction4x4.287, .Lfunc_end328-LumaPrediction4x4.287
	.cfi_endproc
                                        # -- End function
	.globl	LumaPrediction4x4.288   # -- Begin function LumaPrediction4x4.288
	.p2align	4, 0x90
	.type	LumaPrediction4x4.288,@function
LumaPrediction4x4.288:                  # @LumaPrediction4x4.288
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$112, %rsp
	movw	16(%rbp), %ax
	movl	$822154178, -100(%rbp)  # imm = 0x310113C2
	movl	%edi, -16(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -56(%rbp)
	movl	%r8d, -52(%rbp)
	movw	%r9w, -10(%rbp)
	movl	-16(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	addl	$4, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	168(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	172(%rax), %eax
	addl	-24(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-16(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -60(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -64(%rbp)
	movabsq	$LumaPrediction4x4.fw_pred, %rax
	movq	%rax, -48(%rbp)
	movabsq	$LumaPrediction4x4.bw_pred, %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movq	img, %rcx
	movslq	12(%rcx), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -88(%rbp)
	movq	active_pps, %rax
	cmpl	$0, 192(%rax)
	je	.LBB329_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB329_6
# %bb.2:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	movb	$1, %al
	je	.LBB329_6
.LBB329_3:                              # %lor.rhs
	xorl	%eax, %eax
	movq	active_pps, %rcx
	cmpl	$0, 196(%rcx)
	je	.LBB329_5
# %bb.4:                                # %land.rhs
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
.LBB329_5:                              # %land.end
.LBB329_6:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -104(%rbp)
	movq	img, %rax
	movq	71928(%rax), %rax
	movq	%rax, -96(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB329_9
# %bb.7:                                # %land.lhs.true11
	movq	-88(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB329_9
# %bb.8:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB329_10
.LBB329_9:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB329_10
.LBB329_10:                             # %cond.end
	movl	%ecx, -68(%rbp)
	movq	-88(%rbp), %rax
	cmpl	$0, 580(%rax)
	je	.LBB329_20
# %bb.11:                               # %land.lhs.true17
	movswl	-10(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB329_20
# %bb.12:                               # %land.lhs.true20
	movswl	16(%rbp), %eax
	cmpl	$0, %eax
	jne	.LBB329_20
# %bb.13:                               # %land.lhs.true24
	cmpl	$2, -20(%rbp)
	jne	.LBB329_20
# %bb.14:                               # %land.lhs.true27
	cmpl	$1, -56(%rbp)
	jne	.LBB329_20
# %bb.15:                               # %land.lhs.true30
	cmpl	$1, -52(%rbp)
	jne	.LBB329_20
# %bb.16:                               # %if.then
	movq	-88(%rbp), %rax
	cmpl	$1, 580(%rax)
	jne	.LBB329_18
# %bb.17:                               # %cond.true36
	movq	img, %rax
	movq	71936(%rax), %rax
	jmp	.LBB329_19
.LBB329_18:                             # %cond.false37
	movq	img, %rax
	movq	71944(%rax), %rax
.LBB329_19:                             # %cond.end38
	movq	%rax, -96(%rbp)
.LBB329_20:                             # %if.end
	cmpl	$0, -20(%rbp)
	je	.LBB329_22
# %bb.21:                               # %lor.lhs.false42
	cmpl	$2, -20(%rbp)
	jne	.LBB329_23
.LBB329_22:                             # %if.then45
	movl	-72(%rbp), %esi
	movl	-76(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-56(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	-10(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$0, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.fw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB329_23:                             # %if.end58
	cmpl	$1, -20(%rbp)
	je	.LBB329_25
# %bb.24:                               # %lor.lhs.false61
	cmpl	$2, -20(%rbp)
	jne	.LBB329_26
.LBB329_25:                             # %if.then64
	movl	-72(%rbp), %esi
	movl	-76(%rbp), %edx
	movq	-96(%rbp), %rax
	movslq	-60(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-64(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-52(%rbp), %rcx
	movq	(%rax,%rcx,8), %rcx
	movw	16(%rbp), %ax
	movl	-68(%rbp), %edi
	addl	$1, %edi
	movslq	%edi, %rdi
	movq	listX(,%rdi,8), %r9
	movabsq	$LumaPrediction4x4.bw_pred, %rdi
	movswl	%ax, %r8d
	callq	OneComponentLumaPrediction4x4
.LBB329_26:                             # %if.end77
	cmpl	$0, -104(%rbp)
	je	.LBB329_58
# %bb.27:                               # %if.then79
	cmpl	$2, -20(%rbp)
	jne	.LBB329_37
# %bb.28:                               # %if.then82
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_29:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_31 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_36
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB329_29 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_31:                             # %for.cond85
                                        #   Parent Loop BB329_29 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_34
# %bb.32:                               # %for.body88
                                        #   in Loop: Header=BB329_31 Depth=2
	movq	wbp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	movq	wbp_weight, %rax
	movq	8(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	imull	(%rcx), %eax
	addl	%eax, %edi
	movl	wp_luma_round, %eax
	shll	$1, %eax
	addl	%eax, %edi
	movl	luma_log_weight_denom, %ecx
	addl	$1, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %eax
	movq	wp_offset, %rcx
	movq	8(%rcx), %rcx
	movswq	16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	addl	(%rcx), %eax
	addl	$1, %eax
	sarl	$1, %eax
	addl	%eax, %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.33:                               # %for.inc
                                        #   in Loop: Header=BB329_31 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_31
.LBB329_34:                             # %for.end
                                        #   in Loop: Header=BB329_29 Depth=1
	jmp	.LBB329_35
.LBB329_35:                             # %for.inc125
                                        #   in Loop: Header=BB329_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_29
.LBB329_36:                             # %for.end127
	jmp	.LBB329_57
.LBB329_37:                             # %if.else
	cmpl	$0, -20(%rbp)
	jne	.LBB329_47
# %bb.38:                               # %if.then130
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_39:                             # %for.cond131
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_41 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_46
# %bb.40:                               # %for.body134
                                        #   in Loop: Header=BB329_39 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_41:                             # %for.cond135
                                        #   Parent Loop BB329_39 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_44
# %bb.42:                               # %for.body138
                                        #   in Loop: Header=BB329_41 Depth=2
	movq	wp_weight, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	(%rax), %rax
	movswq	-10(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.43:                               # %for.inc159
                                        #   in Loop: Header=BB329_41 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_41
.LBB329_44:                             # %for.end161
                                        #   in Loop: Header=BB329_39 Depth=1
	jmp	.LBB329_45
.LBB329_45:                             # %for.inc162
                                        #   in Loop: Header=BB329_39 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_39
.LBB329_46:                             # %for.end164
	jmp	.LBB329_56
.LBB329_47:                             # %if.else165
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_48:                             # %for.cond166
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_50 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_55
# %bb.49:                               # %for.body169
                                        #   in Loop: Header=BB329_48 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_50:                             # %for.cond170
                                        #   Parent Loop BB329_48 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_53
# %bb.51:                               # %for.body173
                                        #   in Loop: Header=BB329_50 Depth=2
	movq	wp_weight, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	(%rax), %edi
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	imull	(%rax), %edi
	addl	wp_luma_round, %edi
	movl	luma_log_weight_denom, %ecx
                                        # kill: def $cl killed $ecx
	sarl	%cl, %edi
	movq	wp_offset, %rax
	movq	8(%rax), %rax
	movswq	16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	addl	(%rax), %edi
	callq	clip1a
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.52:                               # %for.inc194
                                        #   in Loop: Header=BB329_50 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_50
.LBB329_53:                             # %for.end196
                                        #   in Loop: Header=BB329_48 Depth=1
	jmp	.LBB329_54
.LBB329_54:                             # %for.inc197
                                        #   in Loop: Header=BB329_48 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_48
.LBB329_55:                             # %for.end199
	jmp	.LBB329_56
.LBB329_56:                             # %if.end200
	jmp	.LBB329_57
.LBB329_57:                             # %if.end201
	jmp	.LBB329_89
.LBB329_58:                             # %if.else202
	cmpl	$2, -20(%rbp)
	jne	.LBB329_68
# %bb.59:                               # %if.then205
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_60:                             # %for.cond206
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_62 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_67
# %bb.61:                               # %for.body209
                                        #   in Loop: Header=BB329_60 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_62:                             # %for.cond210
                                        #   Parent Loop BB329_60 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_65
# %bb.63:                               # %for.body213
                                        #   in Loop: Header=BB329_62 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	-40(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$4, %rdx
	movq	%rdx, -40(%rbp)
	addl	(%rcx), %eax
	addl	$1, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.64:                               # %for.inc224
                                        #   in Loop: Header=BB329_62 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_62
.LBB329_65:                             # %for.end226
                                        #   in Loop: Header=BB329_60 Depth=1
	jmp	.LBB329_66
.LBB329_66:                             # %for.inc227
                                        #   in Loop: Header=BB329_60 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_60
.LBB329_67:                             # %for.end229
	jmp	.LBB329_88
.LBB329_68:                             # %if.else230
	cmpl	$0, -20(%rbp)
	jne	.LBB329_78
# %bb.69:                               # %if.then233
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_70:                             # %for.cond234
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_72 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_77
# %bb.71:                               # %for.body237
                                        #   in Loop: Header=BB329_70 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_72:                             # %for.cond238
                                        #   Parent Loop BB329_70 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_75
# %bb.73:                               # %for.body241
                                        #   in Loop: Header=BB329_72 Depth=2
	movq	-48(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -48(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.74:                               # %for.inc249
                                        #   in Loop: Header=BB329_72 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_72
.LBB329_75:                             # %for.end251
                                        #   in Loop: Header=BB329_70 Depth=1
	jmp	.LBB329_76
.LBB329_76:                             # %for.inc252
                                        #   in Loop: Header=BB329_70 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_70
.LBB329_77:                             # %for.end254
	jmp	.LBB329_87
.LBB329_78:                             # %if.else255
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB329_79:                             # %for.cond256
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB329_81 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB329_86
# %bb.80:                               # %for.body259
                                        #   in Loop: Header=BB329_79 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB329_81:                             # %for.cond260
                                        #   Parent Loop BB329_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB329_84
# %bb.82:                               # %for.body263
                                        #   in Loop: Header=BB329_81 Depth=2
	movq	-40(%rbp), %rax
	movq	%rax, %rcx
	addq	$4, %rcx
	movq	%rcx, -40(%rbp)
	movl	(%rax), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.83:                               # %for.inc271
                                        #   in Loop: Header=BB329_81 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB329_81
.LBB329_84:                             # %for.end273
                                        #   in Loop: Header=BB329_79 Depth=1
	jmp	.LBB329_85
.LBB329_85:                             # %for.inc274
                                        #   in Loop: Header=BB329_79 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB329_79
.LBB329_86:                             # %for.end276
	jmp	.LBB329_87
.LBB329_87:                             # %if.end277
	jmp	.LBB329_88
.LBB329_88:                             # %if.end278
	jmp	.LBB329_89
.LBB329_89:                             # %if.end279
	cmpl	$822154178, -100(%rbp)  # imm = 0x310113C2
	jne	.LBB329_91
.LBB329_90:
	addq	$112, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB329_91:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB329_90
.Lfunc_end329:
	.size	LumaPrediction4x4.288, .Lfunc_end329-LumaPrediction4x4.288
	.cfi_endproc
                                        # -- End function
	.type	MODTAB,@object          # @MODTAB
	.section	.rodata,"a",@progbits
	.globl	MODTAB
	.p2align	4
MODTAB:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	16                      # 0x10
	.long	12                      # 0xc
	.long	8                       # 0x8
	.long	20                      # 0x14
	.size	MODTAB, 24

	.type	NCBP,@object            # @NCBP
	.globl	NCBP
	.p2align	4
NCBP:
	.asciz	"\001"
	.ascii	"\n\001"
	.ascii	"\013\002"
	.ascii	"\006\005"
	.ascii	"\f\003"
	.ascii	"\007\006"
	.zero	2,14
	.ascii	"\002\n"
	.ascii	"\r\004"
	.zero	2,15
	.ascii	"\b\007"
	.ascii	"\003\013"
	.ascii	"\t\b"
	.ascii	"\004\f"
	.ascii	"\005\r"
	.ascii	"\000\t"
	.zero	64
	.asciz	"\003"
	.ascii	"\035\002"
	.ascii	"\036\003"
	.ascii	"\021\007"
	.ascii	"\037\004"
	.ascii	"\022\b"
	.ascii	"%\021"
	.ascii	"\b\r"
	.ascii	" \005"
	.ascii	"&\022"
	.ascii	"\023\t"
	.ascii	"\t\016"
	.ascii	"\024\n"
	.ascii	"\n\017"
	.ascii	"\013\020"
	.ascii	"\002\013"
	.ascii	"\020\001"
	.ascii	"! "
	.ascii	"\"!"
	.ascii	"\025$"
	.ascii	"#\""
	.ascii	"\026%"
	.ascii	"',"
	.ascii	"\004("
	.ascii	"$#"
	.ascii	"(-"
	.ascii	"\027&"
	.ascii	"\005)"
	.ascii	"\030'"
	.ascii	"\006*"
	.ascii	"\007+"
	.ascii	"\001\023"
	.ascii	")\006"
	.ascii	"*\030"
	.ascii	"+\031"
	.ascii	"\031\024"
	.ascii	",\032"
	.ascii	"\032\025"
	.zero	2,46
	.ascii	"\f\034"
	.ascii	"-\033"
	.zero	2,47
	.ascii	"\033\026"
	.ascii	"\r\035"
	.ascii	"\034\027"
	.ascii	"\016\036"
	.ascii	"\017\037"
	.ascii	"\000\f"
	.size	NCBP, 192

	.type	subblk_offset_x,@object # @subblk_offset_x
	.globl	subblk_offset_x
	.p2align	4
subblk_offset_x:
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.ascii	"\000\004\000\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.ascii	"\000\004\000\004"
	.ascii	"\b\f\b\f"
	.size	subblk_offset_x, 96

	.type	subblk_offset_y,@object # @subblk_offset_y
	.globl	subblk_offset_y
	.p2align	4
subblk_offset_y:
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.ascii	"\000\000\004\004"
	.ascii	"\000\000\004\004"
	.ascii	"\b\b\f\f"
	.ascii	"\b\b\f\f"
	.size	subblk_offset_y, 96

	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	dq,@object              # @dq
	.comm	dq,4,4
	.type	predict_error,@object   # @predict_error
	.comm	predict_error,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	terminate_macroblock.skip,@object # @terminate_macroblock.skip
	.local	terminate_macroblock.skip
	.comm	terminate_macroblock.skip,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"Slice Mode %d not supported"
	.size	.L.str, 28

	.type	LumaPrediction4x4.fw_pred,@object # @LumaPrediction4x4.fw_pred
	.local	LumaPrediction4x4.fw_pred
	.comm	LumaPrediction4x4.fw_pred,64,16
	.type	LumaPrediction4x4.bw_pred,@object # @LumaPrediction4x4.bw_pred
	.local	LumaPrediction4x4.bw_pred
	.comm	LumaPrediction4x4.bw_pred,64,16
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	LumaPrediction4x4Bi.fw_pred,@object # @LumaPrediction4x4Bi.fw_pred
	.local	LumaPrediction4x4Bi.fw_pred
	.comm	LumaPrediction4x4Bi.fw_pred,64,16
	.type	LumaPrediction4x4Bi.bw_pred,@object # @LumaPrediction4x4Bi.bw_pred
	.local	LumaPrediction4x4Bi.bw_pred
	.comm	LumaPrediction4x4Bi.bw_pred,64,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	ChromaPrediction4x4.fw_pred,@object # @ChromaPrediction4x4.fw_pred
	.local	ChromaPrediction4x4.fw_pred
	.comm	ChromaPrediction4x4.fw_pred,64,16
	.type	ChromaPrediction4x4.bw_pred,@object # @ChromaPrediction4x4.bw_pred
	.local	ChromaPrediction4x4.bw_pred
	.comm	ChromaPrediction4x4.bw_pred,64,16
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	.L__const.ChromaResidualCoding.block8x8_idx,@object # @__const.ChromaResidualCoding.block8x8_idx
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.ChromaResidualCoding.block8x8_idx:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.ChromaResidualCoding.block8x8_idx, 192

	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	.L__const.IntraChromaPrediction.block_pos,@object # @__const.IntraChromaPrediction.block_pos
	.p2align	4
.L__const.IntraChromaPrediction.block_pos:
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.zero	16
	.zero	16
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	1                       # 0x1
	.long	1                       # 0x1
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	2                       # 0x2
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.long	3                       # 0x3
	.size	.L__const.IntraChromaPrediction.block_pos, 192

	.type	MBType2Value.dir1offset,@object # @MBType2Value.dir1offset
	.p2align	2
MBType2Value.dir1offset:
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	3                       # 0x3
	.size	MBType2Value.dir1offset, 12

	.type	MBType2Value.dir2offset,@object # @MBType2Value.dir2offset
	.p2align	4
MBType2Value.dir2offset:
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	6                       # 0x6
	.long	2                       # 0x2
	.long	10                      # 0xa
	.long	12                      # 0xc
	.long	14                      # 0xe
	.long	16                      # 0x10
	.size	MBType2Value.dir2offset, 36

	.type	B8Mode2Value.b8start,@object # @B8Mode2Value.b8start
	.p2align	4
B8Mode2Value.b8start:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	4                       # 0x4
	.long	5                       # 0x5
	.long	10                      # 0xa
	.size	B8Mode2Value.b8start, 32

	.type	B8Mode2Value.b8inc,@object # @B8Mode2Value.b8inc
	.p2align	4
B8Mode2Value.b8inc:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	1                       # 0x1
	.long	2                       # 0x2
	.long	2                       # 0x2
	.long	1                       # 0x1
	.size	B8Mode2Value.b8inc, 32

	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	.L__const.writeChromaCoeff.chroma_dc_context,@object # @__const.writeChromaCoeff.chroma_dc_context
	.p2align	2
.L__const.writeChromaCoeff.chroma_dc_context:
	.long	6                       # 0x6
	.long	8                       # 0x8
	.long	9                       # 0x9
	.size	.L__const.writeChromaCoeff.chroma_dc_context, 12

	.type	writeChromaCoeff.chroma_ac_param,@object # @writeChromaCoeff.chroma_ac_param
	.data
	.p2align	4
writeChromaCoeff.chroma_ac_param:
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"\006\026\007\027"
	.ascii	"$4%5"
	.ascii	"&6'7"
	.zero	4
	.zero	4
	.zero	4
	.zero	4
	.ascii	"\004\024\005\025"
	.ascii	"$4%5"
	.ascii	"\006\026\007\027"
	.ascii	"&6'7"
	.ascii	"\b\030\t\031"
	.ascii	"(8)9"
	.ascii	"\n\032\013\033"
	.ascii	"*:+;"
	.size	writeChromaCoeff.chroma_ac_param, 96

	.type	.L__const.predict_nnz_chroma.j_off_tab,@object # @__const.predict_nnz_chroma.j_off_tab
	.section	.rodata,"a",@progbits
	.p2align	4
.L__const.predict_nnz_chroma.j_off_tab:
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	0                       # 0x0
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	4                       # 0x4
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.long	8                       # 0x8
	.size	.L__const.predict_nnz_chroma.j_off_tab, 48

	.type	.L__const.writeCoeff4x4_CAVLC.incVlc,@object # @__const.writeCoeff4x4_CAVLC.incVlc
	.p2align	4
.L__const.writeCoeff4x4_CAVLC.incVlc:
	.long	0                       # 0x0
	.long	3                       # 0x3
	.long	6                       # 0x6
	.long	12                      # 0xc
	.long	24                      # 0x18
	.long	48                      # 0x30
	.long	32768                   # 0x8000
	.size	.L__const.writeCoeff4x4_CAVLC.incVlc, 28

	.type	.L.str.1,@object        # @.str.1
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str.1:
	.asciz	"%s"
	.size	.L.str.1, 3

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"Luma"
	.size	.L.str.2, 5

	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Lum16DC"
	.size	.L.str.3, 8

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"Lum16AC"
	.size	.L.str.4, 8

	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"ChrDC"
	.size	.L.str.5, 6

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"ChrAC"
	.size	.L.str.6, 6

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"writeCoeff4x4_CAVLC: Invalid block type"
	.size	.L.str.7, 40

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"ERROR: level > 1\n"
	.size	.L.str.8, 18

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
