	.text
	.file	"decoder.c"
	.globl	decode_one_b8block      # -- Begin function decode_one_b8block
	.p2align	4, 0x90
	.type	decode_one_b8block,@function
decode_one_b8block:                     # @decode_one_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movl	%esi, %r13d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_9
# %bb.1:                                # %func_decode_one_b8block.15
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.15
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_decode_one_b8block.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.28
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_decode_one_b8block.35
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.35
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_decode_one_b8block.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.50
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_decode_one_b8block.54
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.54
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_decode_one_b8block.55
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.55
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_decode_one_b8block.58
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.58
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_decode_one_b8block.59
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	decode_one_b8block.59
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
	jmp	.LBB0_8
.Lfunc_end0:
	.size	decode_one_b8block, .Lfunc_end0-decode_one_b8block
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block     # -- Begin function Get_Reference_Block
	.p2align	4, 0x90
	.type	Get_Reference_Block,@function
Get_Reference_Block:                    # @Get_Reference_Block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r9, -48(%rbp)          # 8-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movq	%rdi, %r15
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_9
# %bb.1:                                # %func_Get_Reference_Block.5
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movq	-48(%rbp), %r9          # 8-byte Reload
	callq	Get_Reference_Block.5
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_Get_Reference_Block.6
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_Get_Reference_Block.12
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.12
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_Get_Reference_Block.13
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.13
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_Get_Reference_Block.17
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.17
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_Get_Reference_Block.18
	.cfi_def_cfa %rbp, 16
	movq	%r15, %rdi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	Get_Reference_Block.18
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_Get_Reference_Block.20
	.cfi_def_cfa %rbp, 16
	callq	Get_Reference_Block.20
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_Get_Reference_Block.24
	.cfi_def_cfa %rbp, 16
	callq	Get_Reference_Block.24
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movq	-48(%rbp), %r9          # 8-byte Reload
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movq	%r15, %rdi
	je	.LBB1_7
	jmp	.LBB1_8
.Lfunc_end1:
	.size	Get_Reference_Block, .Lfunc_end1-Get_Reference_Block
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb           # -- Begin function decode_one_mb
	.p2align	4, 0x90
	.type	decode_one_mb,@function
decode_one_mb:                          # @decode_one_mb
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_2
# %bb.1:                                # %func_decode_one_mb.7
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.7
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_decode_one_mb.8
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movq	%r14, %rsi
	callq	decode_one_mb.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end2:
	.size	decode_one_mb, .Lfunc_end2-decode_one_mb
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel     # -- Begin function Get_Reference_Pixel
	.p2align	4, 0x90
	.type	Get_Reference_Pixel,@function
Get_Reference_Pixel:                    # @Get_Reference_Pixel
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%edx, %r14d
	movl	%esi, %r15d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_9
# %bb.1:                                # %func_Get_Reference_Pixel.11
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.11
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_Get_Reference_Pixel.21
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.21
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_Get_Reference_Pixel.33
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.33
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_Get_Reference_Pixel.34
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.34
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_Get_Reference_Pixel.38
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.38
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_Get_Reference_Pixel.46
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.46
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_Get_Reference_Pixel.48
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.48
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_Get_Reference_Pixel.53
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r15d, %esi
	movl	%r14d, %edx
	callq	Get_Reference_Pixel.53
	movzbl	%al, %eax
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB3_7
	jmp	.LBB3_8
.Lfunc_end3:
	.size	Get_Reference_Pixel, .Lfunc_end3-Get_Reference_Pixel
	.cfi_endproc
                                        # -- End function
	.globl	UpdateDecoders          # -- Begin function UpdateDecoders
	.p2align	4, 0x90
	.type	UpdateDecoders,@function
UpdateDecoders:                         # @UpdateDecoders
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$0, -4(%rbp)
.LBB4_1:                                # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB4_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB4_1 Depth=1
	movq	decs, %rax
	movq	40(%rax), %rdi
	callq	Build_Status_Map
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	40(%rax), %rsi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdx
	callq	Error_Concealment
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	decs, %rax
	movq	16(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	callq	DecOneForthPix
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB4_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB4_1
.LBB4_4:                                # %for.end
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end4:
	.size	UpdateDecoders, .Lfunc_end4-UpdateDecoders
	.cfi_endproc
                                        # -- End function
	.globl	Build_Status_Map        # -- Begin function Build_Status_Map
	.p2align	4, 0x90
	.type	Build_Status_Map,@function
Build_Status_Map:                       # @Build_Status_Map
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_Build_Status_Map.10
	movq	%rbx, %rdi
	callq	Build_Status_Map.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_Build_Status_Map.22
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.22
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_Build_Status_Map.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.37
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_Build_Status_Map.51
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.51
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_Build_Status_Map.57
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.57
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_Build_Status_Map.61
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.61
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_Build_Status_Map.65
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.65
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_Build_Status_Map.66
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	Build_Status_Map.66
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	Build_Status_Map, .Lfunc_end5-Build_Status_Map
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment       # -- Begin function Error_Concealment
	.p2align	4, 0x90
	.type	Error_Concealment,@function
Error_Concealment:                      # @Error_Concealment
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_9
# %bb.1:                                # %func_Error_Concealment.2
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.2
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_Error_Concealment.19
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.19
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_3:                                # %func_Error_Concealment.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.29
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_4:                                # %func_Error_Concealment.30
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.30
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_5:                                # %func_Error_Concealment.32
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.32
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_6:                                # %func_Error_Concealment.47
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.47
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_7:                                # %func_Error_Concealment.49
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.49
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_8:                                # %func_Error_Concealment.56
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	Error_Concealment.56
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB6_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB6_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB6_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB6_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB6_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB6_7
	jmp	.LBB6_8
.Lfunc_end6:
	.size	Error_Concealment, .Lfunc_end6-Error_Concealment
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix          # -- Begin function DecOneForthPix
	.p2align	4, 0x90
	.type	DecOneForthPix,@function
DecOneForthPix:                         # @DecOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_DecOneForthPix.3
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.3
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_DecOneForthPix.4
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.4
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_DecOneForthPix.14
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.14
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_DecOneForthPix.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.25
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_DecOneForthPix.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.26
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_DecOneForthPix.31
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.31
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_DecOneForthPix.36
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.36
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_DecOneForthPix.39
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	DecOneForthPix.39
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	DecOneForthPix, .Lfunc_end7-DecOneForthPix
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block # -- Begin function compute_residue_b8block
	.p2align	4, 0x90
	.type	compute_residue_b8block,@function
compute_residue_b8block:                # @compute_residue_b8block
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_9
# %bb.1:                                # %func_compute_residue_b8block.1
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.1
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_compute_residue_b8block.9
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.9
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_compute_residue_b8block.16
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.16
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_compute_residue_b8block.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_compute_residue_b8block.42
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.42
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_compute_residue_b8block.43
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.43
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_compute_residue_b8block.45
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.45
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_compute_residue_b8block.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	compute_residue_b8block.52
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
	jmp	.LBB8_8
.Lfunc_end8:
	.size	compute_residue_b8block, .Lfunc_end8-compute_residue_b8block
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_mb      # -- Begin function compute_residue_mb
	.p2align	4, 0x90
	.type	compute_residue_mb,@function
compute_residue_mb:                     # @compute_residue_mb
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %esi
	xorl	%edi, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$1, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$2, %edi
	callq	compute_residue_b8block
	movl	-4(%rbp), %esi
	movl	$3, %edi
	callq	compute_residue_b8block
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end9:
	.size	compute_residue_mb, .Lfunc_end9-compute_residue_mb
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error           # -- Begin function Conceal_Error
	.p2align	4, 0x90
	.type	Conceal_Error,@function
Conceal_Error:                          # @Conceal_Error
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%r8, %r14
	movq	%rcx, %r15
	movl	%edx, %r12d
	movl	%esi, %r13d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_Conceal_Error.23
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.23
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_Conceal_Error.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.27
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_Conceal_Error.41
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.41
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_Conceal_Error.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_Conceal_Error.60
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.60
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_Conceal_Error.62
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.62
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_Conceal_Error.63
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.63
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_Conceal_Error.64
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r13d, %esi
	movl	%r12d, %edx
	movq	%r15, %rcx
	movq	%r14, %r8
	callq	Conceal_Error.64
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	Conceal_Error, .Lfunc_end10-Conceal_Error
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.1 # -- Begin function compute_residue_b8block.1
	.p2align	4, 0x90
	.type	compute_residue_b8block.1,@function
compute_residue_b8block.1:              # @compute_residue_b8block.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$489447156, -36(%rbp)   # imm = 0x1D2C5EF4
	movl	%edi, -28(%rbp)
	movl	%esi, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB11_10
# %bb.1:                                # %if.then
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB11_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_4:                               # %for.cond4
                                        #   Parent Loop BB11_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB11_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB11_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB11_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_4
.LBB11_7:                               # %for.end
                                        #   in Loop: Header=BB11_2 Depth=1
	jmp	.LBB11_8
.LBB11_8:                               # %for.inc22
                                        #   in Loop: Header=BB11_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_2
.LBB11_9:                               # %for.end24
	jmp	.LBB11_19
.LBB11_10:                              # %if.else
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB11_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB11_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB11_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB11_13:                              # %for.cond29
                                        #   Parent Loop BB11_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB11_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB11_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB11_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB11_13
.LBB11_16:                              # %for.end56
                                        #   in Loop: Header=BB11_11 Depth=1
	jmp	.LBB11_17
.LBB11_17:                              # %for.inc57
                                        #   in Loop: Header=BB11_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB11_11
.LBB11_18:                              # %for.end59
	jmp	.LBB11_19
.LBB11_19:                              # %if.end
	cmpl	$489447156, -36(%rbp)   # imm = 0x1D2C5EF4
	jne	.LBB11_21
.LBB11_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB11_20
.Lfunc_end11:
	.size	compute_residue_b8block.1, .Lfunc_end11-compute_residue_b8block.1
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.2     # -- Begin function Error_Concealment.2
	.p2align	4, 0x90
	.type	Error_Concealment.2,@function
Error_Concealment.2:                    # @Error_Concealment.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$301840596, -16(%rbp)   # imm = 0x11FDB8D4
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB12_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB12_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB12_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	$0, -8(%rbp)
.LBB12_3:                               # %for.cond2
                                        #   Parent Loop BB12_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB12_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB12_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB12_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB12_6:                               # %if.end
                                        #   in Loop: Header=BB12_3 Depth=2
	jmp	.LBB12_7
.LBB12_7:                               # %for.inc
                                        #   in Loop: Header=BB12_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB12_3
.LBB12_8:                               # %for.end
                                        #   in Loop: Header=BB12_1 Depth=1
	jmp	.LBB12_9
.LBB12_9:                               # %for.inc7
                                        #   in Loop: Header=BB12_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB12_1
.LBB12_10:                              # %for.end9
	cmpl	$301840596, -16(%rbp)   # imm = 0x11FDB8D4
	jne	.LBB12_12
.LBB12_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB12_11
.Lfunc_end12:
	.size	Error_Concealment.2, .Lfunc_end12-Error_Concealment.2
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.3        # -- Begin function DecOneForthPix.3
	.p2align	4, 0x90
	.type	DecOneForthPix.3,@function
DecOneForthPix.3:                       # @DecOneForthPix.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1362115045, -12(%rbp)  # imm = 0x513039E5
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB13_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB13_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB13_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB13_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB13_1
.LBB13_4:                               # %for.end
	cmpl	$1362115045, -12(%rbp)  # imm = 0x513039E5
	jne	.LBB13_6
.LBB13_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB13_5
.Lfunc_end13:
	.size	DecOneForthPix.3, .Lfunc_end13-DecOneForthPix.3
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.4        # -- Begin function DecOneForthPix.4
	.p2align	4, 0x90
	.type	DecOneForthPix.4,@function
DecOneForthPix.4:                       # @DecOneForthPix.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1999417205, -8(%rbp)   # imm = 0x772CAF75
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB14_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB14_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB14_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB14_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB14_1
.LBB14_4:                               # %for.end
	cmpl	$1999417205, -8(%rbp)   # imm = 0x772CAF75
	jne	.LBB14_6
.LBB14_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB14_5
.Lfunc_end14:
	.size	DecOneForthPix.4, .Lfunc_end14-DecOneForthPix.4
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.5   # -- Begin function Get_Reference_Block.5
	.p2align	4, 0x90
	.type	Get_Reference_Block.5,@function
Get_Reference_Block.5:                  # @Get_Reference_Block.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1086171576, -32(%rbp)  # imm = 0x40BDA9B8
	movq	%rdi, -56(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -48(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB15_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB15_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB15_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	$0, -8(%rbp)
.LBB15_3:                               # %for.cond5
                                        #   Parent Loop BB15_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB15_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB15_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB15_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB15_3
.LBB15_6:                               # %for.end
                                        #   in Loop: Header=BB15_1 Depth=1
	jmp	.LBB15_7
.LBB15_7:                               # %for.inc14
                                        #   in Loop: Header=BB15_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB15_1
.LBB15_8:                               # %for.end16
	cmpl	$1086171576, -32(%rbp)  # imm = 0x40BDA9B8
	jne	.LBB15_10
.LBB15_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB15_9
.Lfunc_end15:
	.size	Get_Reference_Block.5, .Lfunc_end15-Get_Reference_Block.5
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.6   # -- Begin function Get_Reference_Block.6
	.p2align	4, 0x90
	.type	Get_Reference_Block.6,@function
Get_Reference_Block.6:                  # @Get_Reference_Block.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1629338326, -16(%rbp)  # imm = 0x611DBAD6
	movq	%rdi, -56(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -48(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB16_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB16_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB16_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	$0, -8(%rbp)
.LBB16_3:                               # %for.cond5
                                        #   Parent Loop BB16_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB16_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB16_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-36(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB16_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB16_3
.LBB16_6:                               # %for.end
                                        #   in Loop: Header=BB16_1 Depth=1
	jmp	.LBB16_7
.LBB16_7:                               # %for.inc14
                                        #   in Loop: Header=BB16_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB16_1
.LBB16_8:                               # %for.end16
	cmpl	$1629338326, -16(%rbp)  # imm = 0x611DBAD6
	jne	.LBB16_10
.LBB16_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB16_9
.Lfunc_end16:
	.size	Get_Reference_Block.6, .Lfunc_end16-Get_Reference_Block.6
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.7         # -- Begin function decode_one_mb.7
	.p2align	4, 0x90
	.type	decode_one_mb.7,@function
decode_one_mb.7:                        # @decode_one_mb.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1299711626, -4(%rbp)   # imm = 0x4D78068A
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$1299711626, -4(%rbp)   # imm = 0x4D78068A
	jne	.LBB17_2
.LBB17_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB17_1
.Lfunc_end17:
	.size	decode_one_mb.7, .Lfunc_end17-decode_one_mb.7
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_mb.8         # -- Begin function decode_one_mb.8
	.p2align	4, 0x90
	.type	decode_one_mb.8,@function
decode_one_mb.8:                        # @decode_one_mb.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1232428291, -4(%rbp)   # imm = 0x49755D03
	movl	%edi, -8(%rbp)
	movq	%rsi, -16(%rbp)
	cmpl	$1232428291, -4(%rbp)   # imm = 0x49755D03
	jne	.LBB18_2
.LBB18_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB18_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB18_1
.Lfunc_end18:
	.size	decode_one_mb.8, .Lfunc_end18-decode_one_mb.8
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.9 # -- Begin function compute_residue_b8block.9
	.p2align	4, 0x90
	.type	compute_residue_b8block.9,@function
compute_residue_b8block.9:              # @compute_residue_b8block.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$341661273, -36(%rbp)   # imm = 0x145D5659
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB19_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB19_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB19_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB19_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB19_4:                               # %for.cond4
                                        #   Parent Loop BB19_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB19_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB19_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB19_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_4
.LBB19_7:                               # %for.end
                                        #   in Loop: Header=BB19_2 Depth=1
	jmp	.LBB19_8
.LBB19_8:                               # %for.inc22
                                        #   in Loop: Header=BB19_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_2
.LBB19_9:                               # %for.end24
	jmp	.LBB19_19
.LBB19_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB19_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB19_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB19_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB19_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB19_13:                              # %for.cond29
                                        #   Parent Loop BB19_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB19_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB19_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB19_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB19_13
.LBB19_16:                              # %for.end56
                                        #   in Loop: Header=BB19_11 Depth=1
	jmp	.LBB19_17
.LBB19_17:                              # %for.inc57
                                        #   in Loop: Header=BB19_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB19_11
.LBB19_18:                              # %for.end59
	jmp	.LBB19_19
.LBB19_19:                              # %if.end
	cmpl	$341661273, -36(%rbp)   # imm = 0x145D5659
	jne	.LBB19_21
.LBB19_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB19_20
.Lfunc_end19:
	.size	compute_residue_b8block.9, .Lfunc_end19-compute_residue_b8block.9
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.10
.LCPI20_0:
	.quad	4636737291354636288     # double 100
.LCPI20_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.10
	.p2align	4, 0x90
	.type	Build_Status_Map.10,@function
Build_Status_Map.10:                    # @Build_Status_Map.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$104562326, -40(%rbp)   # imm = 0x63B7E96
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB20_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB20_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB20_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	$0, -12(%rbp)
.LBB20_3:                               # %for.cond2
                                        #   Parent Loop BB20_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB20_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB20_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB20_13
.LBB20_6:                               # %if.then
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI20_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB20_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB20_8:                               # %if.end
                                        #   in Loop: Header=BB20_3 Depth=2
	callq	rand
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI20_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB20_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB20_10:                              # %if.end20
                                        #   in Loop: Header=BB20_3 Depth=2
	callq	rand
	vmovsd	.LCPI20_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI20_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB20_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	$1, -4(%rbp)
.LBB20_12:                              # %if.end29
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB20_13:                              # %if.end30
                                        #   in Loop: Header=BB20_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB20_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB20_18
.LBB20_15:                              # %if.else
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB20_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB20_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB20_17:                              # %if.end49
                                        #   in Loop: Header=BB20_3 Depth=2
	jmp	.LBB20_18
.LBB20_18:                              # %if.end50
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB20_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB20_3
.LBB20_20:                              # %for.end
                                        #   in Loop: Header=BB20_1 Depth=1
	jmp	.LBB20_21
.LBB20_21:                              # %for.inc53
                                        #   in Loop: Header=BB20_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB20_1
.LBB20_22:                              # %for.end55
	cmpl	$104562326, -40(%rbp)   # imm = 0x63B7E96
	jne	.LBB20_24
.LBB20_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB20_23
.Lfunc_end20:
	.size	Build_Status_Map.10, .Lfunc_end20-Build_Status_Map.10
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.11  # -- Begin function Get_Reference_Pixel.11
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.11,@function
Get_Reference_Pixel.11:                 # @Get_Reference_Pixel.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1441338765, -108(%rbp) # imm = 0x55E9158D
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB21_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB21_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB21_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB21_5
.LBB21_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB21_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB21_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB21_11
.LBB21_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB21_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB21_10
.LBB21_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB21_10:                              # %cond.end14
.LBB21_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB21_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB21_14
.LBB21_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB21_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB21_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB21_20
.LBB21_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB21_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB21_19
.LBB21_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB21_19:                              # %cond.end29
.LBB21_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB21_332
.LBB21_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB21_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB21_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB21_25
.LBB21_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB21_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB21_31
.LBB21_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB21_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB21_30
.LBB21_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB21_30:                              # %cond.end52
.LBB21_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_36
.LBB21_35:                              # %cond.false61
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_36:                              # %cond.end63
                                        #   in Loop: Header=BB21_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB21_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_42
.LBB21_38:                              # %cond.false68
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_41
.LBB21_40:                              # %cond.false73
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_41:                              # %cond.end75
                                        #   in Loop: Header=BB21_32 Depth=1
.LBB21_42:                              # %cond.end77
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB21_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_32
.LBB21_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_47
.LBB21_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB21_53
.LBB21_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_52
.LBB21_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_52:                              # %cond.end113
.LBB21_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB21_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB21_57
.LBB21_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB21_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB21_63
.LBB21_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB21_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB21_62
.LBB21_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB21_62:                              # %cond.end136
.LBB21_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_76
.LBB21_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB21_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB21_68
.LBB21_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB21_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB21_74
.LBB21_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB21_73
.LBB21_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB21_73:                              # %cond.end169
.LBB21_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_75:                              # %if.end
	jmp	.LBB21_76
.LBB21_76:                              # %if.end178
	jmp	.LBB21_331
.LBB21_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB21_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB21_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB21_81
.LBB21_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB21_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB21_87
.LBB21_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB21_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB21_86
.LBB21_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB21_86:                              # %cond.end197
.LBB21_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_92
.LBB21_91:                              # %cond.false209
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_92:                              # %cond.end211
                                        #   in Loop: Header=BB21_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB21_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_98
.LBB21_94:                              # %cond.false216
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_97
.LBB21_96:                              # %cond.false221
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_97:                              # %cond.end223
                                        #   in Loop: Header=BB21_88 Depth=1
.LBB21_98:                              # %cond.end225
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB21_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_88
.LBB21_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_103
.LBB21_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB21_109
.LBB21_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_108
.LBB21_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_108:                             # %cond.end266
.LBB21_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB21_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB21_113
.LBB21_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB21_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB21_119
.LBB21_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB21_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB21_118
.LBB21_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB21_118:                             # %cond.end287
.LBB21_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_132
.LBB21_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB21_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB21_124
.LBB21_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB21_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB21_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB21_130
.LBB21_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB21_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB21_129
.LBB21_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB21_129:                             # %cond.end320
.LBB21_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_131:                             # %if.end331
	jmp	.LBB21_132
.LBB21_132:                             # %if.end332
	jmp	.LBB21_330
.LBB21_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB21_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB21_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_139
.LBB21_138:                             # %cond.false345
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_139:                             # %cond.end347
                                        #   in Loop: Header=BB21_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB21_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_145
.LBB21_141:                             # %cond.false352
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_144
.LBB21_143:                             # %cond.false357
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_144:                             # %cond.end359
                                        #   in Loop: Header=BB21_135 Depth=1
.LBB21_145:                             # %cond.end361
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_146:                             # %for.cond363
                                        #   Parent Loop BB21_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB21_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB21_150
.LBB21_149:                             # %cond.false371
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_150:                             # %cond.end373
                                        #   in Loop: Header=BB21_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB21_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_156
.LBB21_152:                             # %cond.false378
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB21_155
.LBB21_154:                             # %cond.false383
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_155:                             # %cond.end385
                                        #   in Loop: Header=BB21_146 Depth=2
.LBB21_156:                             # %cond.end387
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB21_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_146
.LBB21_158:                             # %for.end401
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB21_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_135
.LBB21_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB21_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB21_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_161
.LBB21_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_167
.LBB21_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB21_173
.LBB21_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_172
.LBB21_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_172:                             # %cond.end449
.LBB21_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_177
.LBB21_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB21_183
.LBB21_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_182
.LBB21_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_182:                             # %cond.end486
.LBB21_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_196
.LBB21_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB21_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_188
.LBB21_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB21_194
.LBB21_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_193
.LBB21_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_193:                             # %cond.end526
.LBB21_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_195:                             # %if.end532
	jmp	.LBB21_196
.LBB21_196:                             # %if.end533
	jmp	.LBB21_329
.LBB21_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB21_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB21_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB21_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_203
.LBB21_202:                             # %cond.false546
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_203:                             # %cond.end548
                                        #   in Loop: Header=BB21_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB21_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_209
.LBB21_205:                             # %cond.false553
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_208
.LBB21_207:                             # %cond.false558
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_208:                             # %cond.end560
                                        #   in Loop: Header=BB21_199 Depth=1
.LBB21_209:                             # %cond.end562
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_210:                             # %for.cond564
                                        #   Parent Loop BB21_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB21_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB21_214
.LBB21_213:                             # %cond.false572
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_214:                             # %cond.end574
                                        #   in Loop: Header=BB21_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB21_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB21_220
.LBB21_216:                             # %cond.false579
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB21_219
.LBB21_218:                             # %cond.false584
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_219:                             # %cond.end586
                                        #   in Loop: Header=BB21_210 Depth=2
.LBB21_220:                             # %cond.end588
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB21_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_210
.LBB21_222:                             # %for.end602
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB21_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_199
.LBB21_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB21_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB21_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_225
.LBB21_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_231
.LBB21_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB21_237
.LBB21_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_236
.LBB21_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB21_236:                             # %cond.end650
.LBB21_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_241
.LBB21_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB21_247
.LBB21_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_246
.LBB21_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_246:                             # %cond.end687
.LBB21_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB21_258
.LBB21_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_251
.LBB21_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB21_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB21_257
.LBB21_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB21_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_256
.LBB21_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB21_256:                             # %cond.end724
.LBB21_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_258:                             # %if.end730
	jmp	.LBB21_328
.LBB21_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB21_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB21_262
.LBB21_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB21_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB21_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB21_265
.LBB21_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB21_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB21_271
.LBB21_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB21_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB21_270
.LBB21_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB21_270:                             # %cond.end753
.LBB21_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB21_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB21_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_276
.LBB21_275:                             # %cond.false765
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_276:                             # %cond.end767
                                        #   in Loop: Header=BB21_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB21_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_282
.LBB21_278:                             # %cond.false772
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB21_281
.LBB21_280:                             # %cond.false777
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB21_281:                             # %cond.end779
                                        #   in Loop: Header=BB21_272 Depth=1
.LBB21_282:                             # %cond.end781
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB21_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB21_272
.LBB21_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_287
.LBB21_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB21_293
.LBB21_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_292
.LBB21_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_292:                             # %cond.end822
.LBB21_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB21_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB21_296
.LBB21_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB21_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB21_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB21_299
.LBB21_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB21_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB21_305
.LBB21_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB21_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB21_304
.LBB21_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB21_304:                             # %cond.end847
.LBB21_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB21_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB21_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_310
.LBB21_309:                             # %cond.false859
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_310:                             # %cond.end861
                                        #   in Loop: Header=BB21_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB21_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB21_316
.LBB21_312:                             # %cond.false866
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB21_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB21_315
.LBB21_314:                             # %cond.false871
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB21_315:                             # %cond.end873
                                        #   in Loop: Header=BB21_306 Depth=1
.LBB21_316:                             # %cond.end875
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB21_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB21_306
.LBB21_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_321
.LBB21_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB21_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB21_327
.LBB21_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB21_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB21_326
.LBB21_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB21_326:                             # %cond.end916
.LBB21_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB21_328:                             # %if.end922
	jmp	.LBB21_329
.LBB21_329:                             # %if.end923
	jmp	.LBB21_330
.LBB21_330:                             # %if.end924
	jmp	.LBB21_331
.LBB21_331:                             # %if.end925
	jmp	.LBB21_332
.LBB21_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1441338765, -108(%rbp) # imm = 0x55E9158D
	jne	.LBB21_334
.LBB21_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB21_333
.Lfunc_end21:
	.size	Get_Reference_Pixel.11, .Lfunc_end21-Get_Reference_Pixel.11
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.12  # -- Begin function Get_Reference_Block.12
	.p2align	4, 0x90
	.type	Get_Reference_Block.12,@function
Get_Reference_Block.12:                 # @Get_Reference_Block.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1506921489, -16(%rbp)  # imm = 0x59D1CC11
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -12(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-12(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB22_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB22_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	$0, -8(%rbp)
.LBB22_3:                               # %for.cond5
                                        #   Parent Loop BB22_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB22_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB22_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB22_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB22_3
.LBB22_6:                               # %for.end
                                        #   in Loop: Header=BB22_1 Depth=1
	jmp	.LBB22_7
.LBB22_7:                               # %for.inc14
                                        #   in Loop: Header=BB22_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB22_1
.LBB22_8:                               # %for.end16
	cmpl	$1506921489, -16(%rbp)  # imm = 0x59D1CC11
	jne	.LBB22_10
.LBB22_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB22_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB22_9
.Lfunc_end22:
	.size	Get_Reference_Block.12, .Lfunc_end22-Get_Reference_Block.12
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.13  # -- Begin function Get_Reference_Block.13
	.p2align	4, 0x90
	.type	Get_Reference_Block.13,@function
Get_Reference_Block.13:                 # @Get_Reference_Block.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$183785965, -28(%rbp)   # imm = 0xAF459ED
	movq	%rdi, -56(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -48(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	-16(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB23_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB23_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	$0, -8(%rbp)
.LBB23_3:                               # %for.cond5
                                        #   Parent Loop BB23_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB23_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB23_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-24(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB23_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB23_3
.LBB23_6:                               # %for.end
                                        #   in Loop: Header=BB23_1 Depth=1
	jmp	.LBB23_7
.LBB23_7:                               # %for.inc14
                                        #   in Loop: Header=BB23_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB23_1
.LBB23_8:                               # %for.end16
	cmpl	$183785965, -28(%rbp)   # imm = 0xAF459ED
	jne	.LBB23_10
.LBB23_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB23_9
.Lfunc_end23:
	.size	Get_Reference_Block.13, .Lfunc_end23-Get_Reference_Block.13
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.14       # -- Begin function DecOneForthPix.14
	.p2align	4, 0x90
	.type	DecOneForthPix.14,@function
DecOneForthPix.14:                      # @DecOneForthPix.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1275623697, -12(%rbp)  # imm = 0x4C087911
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB24_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB24_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB24_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB24_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB24_1
.LBB24_4:                               # %for.end
	cmpl	$1275623697, -12(%rbp)  # imm = 0x4C087911
	jne	.LBB24_6
.LBB24_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB24_5
.Lfunc_end24:
	.size	DecOneForthPix.14, .Lfunc_end24-DecOneForthPix.14
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.15   # -- Begin function decode_one_b8block.15
	.p2align	4, 0x90
	.type	decode_one_b8block.15,@function
decode_one_b8block.15:                  # @decode_one_b8block.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1496506228, -84(%rbp)  # imm = 0x5932DF74
	movl	%edi, -44(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB25_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB25_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB25_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB25_4:                               # %for.cond9
                                        #   Parent Loop BB25_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB25_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB25_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB25_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_4
.LBB25_7:                               # %for.end
                                        #   in Loop: Header=BB25_2 Depth=1
	jmp	.LBB25_8
.LBB25_8:                               # %for.inc26
                                        #   in Loop: Header=BB25_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_2
.LBB25_9:                               # %for.end28
	jmp	.LBB25_96
.LBB25_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB25_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB25_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB25_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB25_31
.LBB25_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB25_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB25_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB25_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB25_17:                              # %for.cond40
                                        #   Parent Loop BB25_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB25_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB25_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB25_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_17
.LBB25_20:                              # %for.end49
                                        #   in Loop: Header=BB25_15 Depth=1
	jmp	.LBB25_21
.LBB25_21:                              # %for.inc50
                                        #   in Loop: Header=BB25_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_15
.LBB25_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB25_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB25_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB25_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB25_25:                              # %for.cond56
                                        #   Parent Loop BB25_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB25_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB25_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB25_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_25
.LBB25_28:                              # %for.end71
                                        #   in Loop: Header=BB25_23 Depth=1
	jmp	.LBB25_29
.LBB25_29:                              # %for.inc72
                                        #   in Loop: Header=BB25_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_23
.LBB25_30:                              # %for.end74
	jmp	.LBB25_60
.LBB25_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB25_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB25_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB25_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB25_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB25_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB25_36:                              # %for.cond83
                                        #   Parent Loop BB25_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB25_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB25_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB25_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_36
.LBB25_39:                              # %for.end120
                                        #   in Loop: Header=BB25_34 Depth=1
	jmp	.LBB25_40
.LBB25_40:                              # %for.inc121
                                        #   in Loop: Header=BB25_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_34
.LBB25_41:                              # %for.end123
	jmp	.LBB25_51
.LBB25_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB25_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB25_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB25_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB25_45:                              # %for.cond129
                                        #   Parent Loop BB25_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB25_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB25_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB25_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_45
.LBB25_48:                              # %for.end145
                                        #   in Loop: Header=BB25_43 Depth=1
	jmp	.LBB25_49
.LBB25_49:                              # %for.inc146
                                        #   in Loop: Header=BB25_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_43
.LBB25_50:                              # %for.end148
	jmp	.LBB25_51
.LBB25_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB25_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB25_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB25_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB25_54:                              # %for.cond153
                                        #   Parent Loop BB25_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB25_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB25_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB25_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_54
.LBB25_57:                              # %for.end167
                                        #   in Loop: Header=BB25_52 Depth=1
	jmp	.LBB25_58
.LBB25_58:                              # %for.inc168
                                        #   in Loop: Header=BB25_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_52
.LBB25_59:                              # %for.end170
	jmp	.LBB25_60
.LBB25_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB25_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB25_66
.LBB25_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB25_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB25_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB25_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB25_86
.LBB25_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB25_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_69 Depth 2
                                        #       Child Loop BB25_74 Depth 3
                                        #         Child Loop BB25_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB25_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB25_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB25_69:                              # %for.cond197
                                        #   Parent Loop BB25_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB25_74 Depth 3
                                        #         Child Loop BB25_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB25_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB25_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB25_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB25_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB25_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB25_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB25_73:                              # %if.end218
                                        #   in Loop: Header=BB25_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB25_74:                              # %for.cond233
                                        #   Parent Loop BB25_67 Depth=1
                                        #     Parent Loop BB25_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB25_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB25_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB25_74 Depth=3
	movl	$0, -8(%rbp)
.LBB25_76:                              # %for.cond237
                                        #   Parent Loop BB25_67 Depth=1
                                        #     Parent Loop BB25_69 Depth=2
                                        #       Parent Loop BB25_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB25_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB25_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB25_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_76
.LBB25_79:                              # %for.end269
                                        #   in Loop: Header=BB25_74 Depth=3
	jmp	.LBB25_80
.LBB25_80:                              # %for.inc270
                                        #   in Loop: Header=BB25_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_74
.LBB25_81:                              # %for.end272
                                        #   in Loop: Header=BB25_69 Depth=2
	jmp	.LBB25_82
.LBB25_82:                              # %for.inc273
                                        #   in Loop: Header=BB25_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB25_69
.LBB25_83:                              # %for.end275
                                        #   in Loop: Header=BB25_67 Depth=1
	jmp	.LBB25_84
.LBB25_84:                              # %for.inc276
                                        #   in Loop: Header=BB25_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB25_67
.LBB25_85:                              # %for.end278
	jmp	.LBB25_95
.LBB25_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB25_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB25_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB25_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB25_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB25_89:                              # %for.cond284
                                        #   Parent Loop BB25_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB25_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB25_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB25_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB25_89
.LBB25_92:                              # %for.end310
                                        #   in Loop: Header=BB25_87 Depth=1
	jmp	.LBB25_93
.LBB25_93:                              # %for.inc311
                                        #   in Loop: Header=BB25_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB25_87
.LBB25_94:                              # %for.end313
	jmp	.LBB25_95
.LBB25_95:                              # %if.end314
	jmp	.LBB25_96
.LBB25_96:                              # %if.end315
	cmpl	$1496506228, -84(%rbp)  # imm = 0x5932DF74
	jne	.LBB25_98
.LBB25_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB25_97
.Lfunc_end25:
	.size	decode_one_b8block.15, .Lfunc_end25-decode_one_b8block.15
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.16 # -- Begin function compute_residue_b8block.16
	.p2align	4, 0x90
	.type	compute_residue_b8block.16,@function
compute_residue_b8block.16:             # @compute_residue_b8block.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2098769365, -36(%rbp)  # imm = 0x7D18ADD5
	movl	%edi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB26_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB26_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB26_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_4:                               # %for.cond4
                                        #   Parent Loop BB26_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB26_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB26_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB26_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_4
.LBB26_7:                               # %for.end
                                        #   in Loop: Header=BB26_2 Depth=1
	jmp	.LBB26_8
.LBB26_8:                               # %for.inc22
                                        #   in Loop: Header=BB26_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_2
.LBB26_9:                               # %for.end24
	jmp	.LBB26_19
.LBB26_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB26_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB26_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB26_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB26_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB26_13:                              # %for.cond29
                                        #   Parent Loop BB26_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB26_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB26_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB26_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB26_13
.LBB26_16:                              # %for.end56
                                        #   in Loop: Header=BB26_11 Depth=1
	jmp	.LBB26_17
.LBB26_17:                              # %for.inc57
                                        #   in Loop: Header=BB26_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB26_11
.LBB26_18:                              # %for.end59
	jmp	.LBB26_19
.LBB26_19:                              # %if.end
	cmpl	$2098769365, -36(%rbp)  # imm = 0x7D18ADD5
	jne	.LBB26_21
.LBB26_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB26_20
.Lfunc_end26:
	.size	compute_residue_b8block.16, .Lfunc_end26-compute_residue_b8block.16
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.17  # -- Begin function Get_Reference_Block.17
	.p2align	4, 0x90
	.type	Get_Reference_Block.17,@function
Get_Reference_Block.17:                 # @Get_Reference_Block.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$714127039, -16(%rbp)   # imm = 0x2A90B6BF
	movq	%rdi, -56(%rbp)
	movl	%esi, -36(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movq	%r9, -48(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-20(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB27_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB27_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB27_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	$0, -4(%rbp)
.LBB27_3:                               # %for.cond5
                                        #   Parent Loop BB27_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB27_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB27_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB27_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB27_3
.LBB27_6:                               # %for.end
                                        #   in Loop: Header=BB27_1 Depth=1
	jmp	.LBB27_7
.LBB27_7:                               # %for.inc14
                                        #   in Loop: Header=BB27_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB27_1
.LBB27_8:                               # %for.end16
	cmpl	$714127039, -16(%rbp)   # imm = 0x2A90B6BF
	jne	.LBB27_10
.LBB27_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB27_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB27_9
.Lfunc_end27:
	.size	Get_Reference_Block.17, .Lfunc_end27-Get_Reference_Block.17
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.18  # -- Begin function Get_Reference_Block.18
	.p2align	4, 0x90
	.type	Get_Reference_Block.18,@function
Get_Reference_Block.18:                 # @Get_Reference_Block.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1411923519, -28(%rbp)  # imm = 0x54283E3F
	movq	%rdi, -56(%rbp)
	movl	%esi, -32(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -24(%rbp)
	movq	%r9, -48(%rbp)
	movl	-32(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-24(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-36(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB28_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB28_3 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB28_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	$0, -4(%rbp)
.LBB28_3:                               # %for.cond5
                                        #   Parent Loop BB28_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB28_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB28_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-20(%rbp), %edx
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB28_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB28_3
.LBB28_6:                               # %for.end
                                        #   in Loop: Header=BB28_1 Depth=1
	jmp	.LBB28_7
.LBB28_7:                               # %for.inc14
                                        #   in Loop: Header=BB28_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB28_1
.LBB28_8:                               # %for.end16
	cmpl	$1411923519, -28(%rbp)  # imm = 0x54283E3F
	jne	.LBB28_10
.LBB28_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB28_9
.Lfunc_end28:
	.size	Get_Reference_Block.18, .Lfunc_end28-Get_Reference_Block.18
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.19    # -- Begin function Error_Concealment.19
	.p2align	4, 0x90
	.type	Error_Concealment.19,@function
Error_Concealment.19:                   # @Error_Concealment.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1277402435, -12(%rbp)  # imm = 0x4C239D43
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB29_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB29_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB29_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	$0, -4(%rbp)
.LBB29_3:                               # %for.cond2
                                        #   Parent Loop BB29_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB29_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB29_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB29_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB29_6:                               # %if.end
                                        #   in Loop: Header=BB29_3 Depth=2
	jmp	.LBB29_7
.LBB29_7:                               # %for.inc
                                        #   in Loop: Header=BB29_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB29_3
.LBB29_8:                               # %for.end
                                        #   in Loop: Header=BB29_1 Depth=1
	jmp	.LBB29_9
.LBB29_9:                               # %for.inc7
                                        #   in Loop: Header=BB29_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB29_1
.LBB29_10:                              # %for.end9
	cmpl	$1277402435, -12(%rbp)  # imm = 0x4C239D43
	jne	.LBB29_12
.LBB29_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB29_11
.Lfunc_end29:
	.size	Error_Concealment.19, .Lfunc_end29-Error_Concealment.19
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Block.20  # -- Begin function Get_Reference_Block.20
	.p2align	4, 0x90
	.type	Get_Reference_Block.20,@function
Get_Reference_Block.20:                 # @Get_Reference_Block.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1701767068, -16(%rbp)  # imm = 0x656EE79C
	movq	%rdi, -56(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movq	%r9, -48(%rbp)
	movl	-24(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-28(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB30_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB30_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB30_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	$0, -8(%rbp)
.LBB30_3:                               # %for.cond5
                                        #   Parent Loop BB30_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB30_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB30_3 Depth=2
	movq	-56(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-32(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-48(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB30_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB30_3
.LBB30_6:                               # %for.end
                                        #   in Loop: Header=BB30_1 Depth=1
	jmp	.LBB30_7
.LBB30_7:                               # %for.inc14
                                        #   in Loop: Header=BB30_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB30_1
.LBB30_8:                               # %for.end16
	cmpl	$1701767068, -16(%rbp)  # imm = 0x656EE79C
	jne	.LBB30_10
.LBB30_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB30_9
.Lfunc_end30:
	.size	Get_Reference_Block.20, .Lfunc_end30-Get_Reference_Block.20
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.21  # -- Begin function Get_Reference_Pixel.21
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.21,@function
Get_Reference_Pixel.21:                 # @Get_Reference_Pixel.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1506831006, -100(%rbp) # imm = 0x59D06A9E
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB31_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB31_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB31_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB31_5
.LBB31_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB31_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB31_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB31_11
.LBB31_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB31_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB31_10
.LBB31_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB31_10:                              # %cond.end14
.LBB31_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB31_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB31_14
.LBB31_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB31_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB31_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB31_20
.LBB31_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB31_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB31_19
.LBB31_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB31_19:                              # %cond.end29
.LBB31_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB31_332
.LBB31_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB31_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB31_25
.LBB31_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB31_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB31_31
.LBB31_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB31_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB31_30
.LBB31_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB31_30:                              # %cond.end52
.LBB31_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_36
.LBB31_35:                              # %cond.false61
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_36:                              # %cond.end63
                                        #   in Loop: Header=BB31_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB31_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_42
.LBB31_38:                              # %cond.false68
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_41
.LBB31_40:                              # %cond.false73
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_41:                              # %cond.end75
                                        #   in Loop: Header=BB31_32 Depth=1
.LBB31_42:                              # %cond.end77
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB31_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_32
.LBB31_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_47
.LBB31_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB31_53
.LBB31_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_52
.LBB31_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_52:                              # %cond.end113
.LBB31_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB31_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB31_57
.LBB31_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB31_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB31_63
.LBB31_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB31_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB31_62
.LBB31_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB31_62:                              # %cond.end136
.LBB31_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_76
.LBB31_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB31_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB31_68
.LBB31_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB31_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB31_74
.LBB31_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB31_73
.LBB31_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB31_73:                              # %cond.end169
.LBB31_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_75:                              # %if.end
	jmp	.LBB31_76
.LBB31_76:                              # %if.end178
	jmp	.LBB31_331
.LBB31_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB31_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB31_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB31_81
.LBB31_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB31_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB31_87
.LBB31_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB31_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB31_86
.LBB31_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB31_86:                              # %cond.end197
.LBB31_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_92
.LBB31_91:                              # %cond.false209
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_92:                              # %cond.end211
                                        #   in Loop: Header=BB31_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB31_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_98
.LBB31_94:                              # %cond.false216
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_97
.LBB31_96:                              # %cond.false221
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_97:                              # %cond.end223
                                        #   in Loop: Header=BB31_88 Depth=1
.LBB31_98:                              # %cond.end225
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB31_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_88
.LBB31_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_103
.LBB31_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB31_109
.LBB31_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_108
.LBB31_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_108:                             # %cond.end266
.LBB31_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB31_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB31_113
.LBB31_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB31_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB31_119
.LBB31_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB31_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB31_118
.LBB31_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB31_118:                             # %cond.end287
.LBB31_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_132
.LBB31_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB31_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB31_124
.LBB31_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB31_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB31_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB31_130
.LBB31_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB31_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB31_129
.LBB31_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB31_129:                             # %cond.end320
.LBB31_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_131:                             # %if.end331
	jmp	.LBB31_132
.LBB31_132:                             # %if.end332
	jmp	.LBB31_330
.LBB31_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB31_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB31_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB31_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_139
.LBB31_138:                             # %cond.false345
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_139:                             # %cond.end347
                                        #   in Loop: Header=BB31_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB31_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_145
.LBB31_141:                             # %cond.false352
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_144
.LBB31_143:                             # %cond.false357
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_144:                             # %cond.end359
                                        #   in Loop: Header=BB31_135 Depth=1
.LBB31_145:                             # %cond.end361
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_146:                             # %for.cond363
                                        #   Parent Loop BB31_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB31_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB31_150
.LBB31_149:                             # %cond.false371
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_150:                             # %cond.end373
                                        #   in Loop: Header=BB31_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB31_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_156
.LBB31_152:                             # %cond.false378
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB31_155
.LBB31_154:                             # %cond.false383
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_155:                             # %cond.end385
                                        #   in Loop: Header=BB31_146 Depth=2
.LBB31_156:                             # %cond.end387
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB31_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_146
.LBB31_158:                             # %for.end401
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB31_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_135
.LBB31_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB31_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB31_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_161
.LBB31_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_167
.LBB31_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB31_173
.LBB31_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_172
.LBB31_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_172:                             # %cond.end449
.LBB31_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_177
.LBB31_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB31_183
.LBB31_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_182
.LBB31_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_182:                             # %cond.end486
.LBB31_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_196
.LBB31_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB31_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_188
.LBB31_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB31_194
.LBB31_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_193
.LBB31_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_193:                             # %cond.end526
.LBB31_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_195:                             # %if.end532
	jmp	.LBB31_196
.LBB31_196:                             # %if.end533
	jmp	.LBB31_329
.LBB31_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB31_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB31_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB31_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB31_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_203
.LBB31_202:                             # %cond.false546
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_203:                             # %cond.end548
                                        #   in Loop: Header=BB31_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB31_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_209
.LBB31_205:                             # %cond.false553
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_208
.LBB31_207:                             # %cond.false558
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_208:                             # %cond.end560
                                        #   in Loop: Header=BB31_199 Depth=1
.LBB31_209:                             # %cond.end562
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_210:                             # %for.cond564
                                        #   Parent Loop BB31_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB31_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB31_214
.LBB31_213:                             # %cond.false572
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_214:                             # %cond.end574
                                        #   in Loop: Header=BB31_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB31_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB31_220
.LBB31_216:                             # %cond.false579
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB31_219
.LBB31_218:                             # %cond.false584
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_219:                             # %cond.end586
                                        #   in Loop: Header=BB31_210 Depth=2
.LBB31_220:                             # %cond.end588
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB31_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_210
.LBB31_222:                             # %for.end602
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB31_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_199
.LBB31_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB31_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB31_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_225
.LBB31_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_231
.LBB31_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB31_237
.LBB31_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_236
.LBB31_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB31_236:                             # %cond.end650
.LBB31_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_241
.LBB31_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB31_247
.LBB31_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_246
.LBB31_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_246:                             # %cond.end687
.LBB31_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB31_258
.LBB31_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_251
.LBB31_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB31_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB31_257
.LBB31_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB31_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_256
.LBB31_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB31_256:                             # %cond.end724
.LBB31_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_258:                             # %if.end730
	jmp	.LBB31_328
.LBB31_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB31_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB31_262
.LBB31_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB31_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB31_265
.LBB31_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB31_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB31_271
.LBB31_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB31_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB31_270
.LBB31_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB31_270:                             # %cond.end753
.LBB31_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB31_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB31_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_276
.LBB31_275:                             # %cond.false765
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_276:                             # %cond.end767
                                        #   in Loop: Header=BB31_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB31_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_282
.LBB31_278:                             # %cond.false772
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB31_281
.LBB31_280:                             # %cond.false777
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB31_281:                             # %cond.end779
                                        #   in Loop: Header=BB31_272 Depth=1
.LBB31_282:                             # %cond.end781
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB31_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB31_272
.LBB31_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_287
.LBB31_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB31_293
.LBB31_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_292
.LBB31_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_292:                             # %cond.end822
.LBB31_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB31_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB31_296
.LBB31_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB31_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB31_299
.LBB31_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB31_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB31_305
.LBB31_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB31_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB31_304
.LBB31_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB31_304:                             # %cond.end847
.LBB31_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB31_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB31_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_310
.LBB31_309:                             # %cond.false859
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_310:                             # %cond.end861
                                        #   in Loop: Header=BB31_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB31_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB31_316
.LBB31_312:                             # %cond.false866
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB31_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB31_315
.LBB31_314:                             # %cond.false871
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB31_315:                             # %cond.end873
                                        #   in Loop: Header=BB31_306 Depth=1
.LBB31_316:                             # %cond.end875
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB31_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB31_306
.LBB31_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_321
.LBB31_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB31_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB31_327
.LBB31_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB31_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB31_326
.LBB31_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB31_326:                             # %cond.end916
.LBB31_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB31_328:                             # %if.end922
	jmp	.LBB31_329
.LBB31_329:                             # %if.end923
	jmp	.LBB31_330
.LBB31_330:                             # %if.end924
	jmp	.LBB31_331
.LBB31_331:                             # %if.end925
	jmp	.LBB31_332
.LBB31_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1506831006, -100(%rbp) # imm = 0x59D06A9E
	jne	.LBB31_334
.LBB31_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB31_333
.Lfunc_end31:
	.size	Get_Reference_Pixel.21, .Lfunc_end31-Get_Reference_Pixel.21
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.22
.LCPI32_0:
	.quad	4636737291354636288     # double 100
.LCPI32_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.22
	.p2align	4, 0x90
	.type	Build_Status_Map.22,@function
Build_Status_Map.22:                    # @Build_Status_Map.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$870133273, -44(%rbp)   # imm = 0x33DD2E19
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -8(%rbp)
.LBB32_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB32_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB32_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	$0, -12(%rbp)
.LBB32_3:                               # %for.cond2
                                        #   Parent Loop BB32_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB32_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB32_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB32_13
.LBB32_6:                               # %if.then
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB32_8:                               # %if.end
                                        #   in Loop: Header=BB32_3 Depth=2
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB32_10:                              # %if.end20
                                        #   in Loop: Header=BB32_3 Depth=2
	callq	rand
	vmovsd	.LCPI32_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI32_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB32_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	$1, -4(%rbp)
.LBB32_12:                              # %if.end29
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB32_13:                              # %if.end30
                                        #   in Loop: Header=BB32_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB32_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB32_18
.LBB32_15:                              # %if.else
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB32_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB32_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB32_17:                              # %if.end49
                                        #   in Loop: Header=BB32_3 Depth=2
	jmp	.LBB32_18
.LBB32_18:                              # %if.end50
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB32_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB32_3
.LBB32_20:                              # %for.end
                                        #   in Loop: Header=BB32_1 Depth=1
	jmp	.LBB32_21
.LBB32_21:                              # %for.inc53
                                        #   in Loop: Header=BB32_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB32_1
.LBB32_22:                              # %for.end55
	cmpl	$870133273, -44(%rbp)   # imm = 0x33DD2E19
	jne	.LBB32_24
.LBB32_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB32_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB32_23
.Lfunc_end32:
	.size	Build_Status_Map.22, .Lfunc_end32-Build_Status_Map.22
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.23        # -- Begin function Conceal_Error.23
	.p2align	4, 0x90
	.type	Conceal_Error.23,@function
Conceal_Error.23:                       # @Conceal_Error.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$270865119, -68(%rbp)   # imm = 0x102512DF
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB33_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB33_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB33_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB33_4:                               # %land.end
.LBB33_5:                               # %lor.end
.LBB33_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB33_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB33_9
.LBB33_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB33_14
.LBB33_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB33_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB33_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB33_12:                              # %land.end51
.LBB33_13:                              # %lor.end53
.LBB33_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB33_180
# %bb.15:                               # %land.end54
	movq	.LJTI33_0(,%rax,8), %rax
	jmpq	*%rax
.LBB33_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB33_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB33_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB33_18 Depth=1
	movl	$0, -4(%rbp)
.LBB33_20:                              # %for.cond68
                                        #   Parent Loop BB33_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB33_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB33_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_20
.LBB33_23:                              # %for.end
                                        #   in Loop: Header=BB33_18 Depth=1
	jmp	.LBB33_24
.LBB33_24:                              # %for.inc85
                                        #   in Loop: Header=BB33_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_18
.LBB33_25:                              # %for.end87
	jmp	.LBB33_35
.LBB33_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB33_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB33_27 Depth=1
	movl	$0, -4(%rbp)
.LBB33_29:                              # %for.cond92
                                        #   Parent Loop BB33_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB33_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB33_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_29
.LBB33_32:                              # %for.end104
                                        #   in Loop: Header=BB33_27 Depth=1
	jmp	.LBB33_33
.LBB33_33:                              # %for.inc105
                                        #   in Loop: Header=BB33_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_27
.LBB33_34:                              # %for.end107
	jmp	.LBB33_35
.LBB33_35:                              # %if.end
	jmp	.LBB33_180
.LBB33_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB33_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_39 Depth 2
                                        #       Child Loop BB33_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB33_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB33_37 Depth=1
	movl	$0, -16(%rbp)
.LBB33_39:                              # %for.cond113
                                        #   Parent Loop BB33_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB33_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB33_39 Depth=2
	movl	$0, -4(%rbp)
.LBB33_41:                              # %for.cond117
                                        #   Parent Loop BB33_37 Depth=1
                                        #     Parent Loop BB33_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB33_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB33_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB33_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_41
.LBB33_44:                              # %for.end141
                                        #   in Loop: Header=BB33_39 Depth=2
	jmp	.LBB33_45
.LBB33_45:                              # %for.inc142
                                        #   in Loop: Header=BB33_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_39
.LBB33_46:                              # %for.end144
                                        #   in Loop: Header=BB33_37 Depth=1
	jmp	.LBB33_47
.LBB33_47:                              # %for.inc145
                                        #   in Loop: Header=BB33_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_37
.LBB33_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB33_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB33_49 Depth=1
	movl	$0, -8(%rbp)
.LBB33_51:                              # %for.cond152
                                        #   Parent Loop BB33_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB33_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB33_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_51
.LBB33_54:                              # %for.end162
                                        #   in Loop: Header=BB33_49 Depth=1
	jmp	.LBB33_55
.LBB33_55:                              # %for.inc163
                                        #   in Loop: Header=BB33_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_49
.LBB33_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB33_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB33_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB33_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB33_59 Depth=1
	movl	$0, -4(%rbp)
.LBB33_61:                              # %for.cond175
                                        #   Parent Loop BB33_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB33_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB33_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_61
.LBB33_64:                              # %for.end195
                                        #   in Loop: Header=BB33_59 Depth=1
	jmp	.LBB33_65
.LBB33_65:                              # %for.inc196
                                        #   in Loop: Header=BB33_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_59
.LBB33_66:                              # %for.end198
	jmp	.LBB33_95
.LBB33_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB33_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB33_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_71 Depth 2
                                        #       Child Loop BB33_73 Depth 3
                                        #         Child Loop BB33_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB33_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB33_71:                              # %for.cond210
                                        #   Parent Loop BB33_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_73 Depth 3
                                        #         Child Loop BB33_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB33_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB33_73:                              # %for.cond236
                                        #   Parent Loop BB33_69 Depth=1
                                        #     Parent Loop BB33_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB33_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB33_73 Depth=3
	movl	$0, -4(%rbp)
.LBB33_75:                              # %for.cond240
                                        #   Parent Loop BB33_69 Depth=1
                                        #     Parent Loop BB33_71 Depth=2
                                        #       Parent Loop BB33_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB33_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB33_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB33_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_75
.LBB33_78:                              # %for.end259
                                        #   in Loop: Header=BB33_73 Depth=3
	jmp	.LBB33_79
.LBB33_79:                              # %for.inc260
                                        #   in Loop: Header=BB33_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_73
.LBB33_80:                              # %for.end262
                                        #   in Loop: Header=BB33_71 Depth=2
	jmp	.LBB33_81
.LBB33_81:                              # %for.inc263
                                        #   in Loop: Header=BB33_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_71
.LBB33_82:                              # %for.end265
                                        #   in Loop: Header=BB33_69 Depth=1
	jmp	.LBB33_83
.LBB33_83:                              # %for.inc266
                                        #   in Loop: Header=BB33_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_69
.LBB33_84:                              # %for.end268
	jmp	.LBB33_94
.LBB33_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB33_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB33_86 Depth=1
	movl	$0, -4(%rbp)
.LBB33_88:                              # %for.cond274
                                        #   Parent Loop BB33_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB33_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB33_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_88
.LBB33_91:                              # %for.end294
                                        #   in Loop: Header=BB33_86 Depth=1
	jmp	.LBB33_92
.LBB33_92:                              # %for.inc295
                                        #   in Loop: Header=BB33_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_86
.LBB33_93:                              # %for.end297
	jmp	.LBB33_94
.LBB33_94:                              # %if.end298
	jmp	.LBB33_95
.LBB33_95:                              # %if.end299
	jmp	.LBB33_105
.LBB33_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB33_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB33_97 Depth=1
	movl	$0, -4(%rbp)
.LBB33_99:                              # %for.cond305
                                        #   Parent Loop BB33_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB33_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB33_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_99
.LBB33_102:                             # %for.end317
                                        #   in Loop: Header=BB33_97 Depth=1
	jmp	.LBB33_103
.LBB33_103:                             # %for.inc318
                                        #   in Loop: Header=BB33_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_97
.LBB33_104:                             # %for.end320
	jmp	.LBB33_105
.LBB33_105:                             # %if.end321
	jmp	.LBB33_180
.LBB33_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB33_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB33_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_110 Depth 2
                                        #       Child Loop BB33_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB33_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB33_108 Depth=1
	movl	$0, -16(%rbp)
.LBB33_110:                             # %for.cond331
                                        #   Parent Loop BB33_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB33_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB33_110 Depth=2
	movl	$0, -4(%rbp)
.LBB33_112:                             # %for.cond335
                                        #   Parent Loop BB33_108 Depth=1
                                        #     Parent Loop BB33_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB33_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB33_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB33_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_112
.LBB33_115:                             # %for.end359
                                        #   in Loop: Header=BB33_110 Depth=2
	jmp	.LBB33_116
.LBB33_116:                             # %for.inc360
                                        #   in Loop: Header=BB33_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_110
.LBB33_117:                             # %for.end362
                                        #   in Loop: Header=BB33_108 Depth=1
	jmp	.LBB33_118
.LBB33_118:                             # %for.inc363
                                        #   in Loop: Header=BB33_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_108
.LBB33_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB33_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB33_120 Depth=1
	movl	$0, -8(%rbp)
.LBB33_122:                             # %for.cond370
                                        #   Parent Loop BB33_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB33_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB33_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_122
.LBB33_125:                             # %for.end380
                                        #   in Loop: Header=BB33_120 Depth=1
	jmp	.LBB33_126
.LBB33_126:                             # %for.inc381
                                        #   in Loop: Header=BB33_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_120
.LBB33_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB33_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB33_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB33_129 Depth=1
	movl	$0, -4(%rbp)
.LBB33_131:                             # %for.cond390
                                        #   Parent Loop BB33_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB33_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB33_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_131
.LBB33_134:                             # %for.end410
                                        #   in Loop: Header=BB33_129 Depth=1
	jmp	.LBB33_135
.LBB33_135:                             # %for.inc411
                                        #   in Loop: Header=BB33_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_129
.LBB33_136:                             # %for.end413
	jmp	.LBB33_156
.LBB33_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB33_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB33_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_141 Depth 2
                                        #       Child Loop BB33_143 Depth 3
                                        #         Child Loop BB33_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB33_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB33_141:                             # %for.cond425
                                        #   Parent Loop BB33_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB33_143 Depth 3
                                        #         Child Loop BB33_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB33_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB33_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB33_143:                             # %for.cond452
                                        #   Parent Loop BB33_139 Depth=1
                                        #     Parent Loop BB33_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB33_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB33_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB33_143 Depth=3
	movl	$0, -4(%rbp)
.LBB33_145:                             # %for.cond456
                                        #   Parent Loop BB33_139 Depth=1
                                        #     Parent Loop BB33_141 Depth=2
                                        #       Parent Loop BB33_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB33_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB33_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB33_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_145
.LBB33_148:                             # %for.end475
                                        #   in Loop: Header=BB33_143 Depth=3
	jmp	.LBB33_149
.LBB33_149:                             # %for.inc476
                                        #   in Loop: Header=BB33_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_143
.LBB33_150:                             # %for.end478
                                        #   in Loop: Header=BB33_141 Depth=2
	jmp	.LBB33_151
.LBB33_151:                             # %for.inc479
                                        #   in Loop: Header=BB33_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB33_141
.LBB33_152:                             # %for.end481
                                        #   in Loop: Header=BB33_139 Depth=1
	jmp	.LBB33_153
.LBB33_153:                             # %for.inc482
                                        #   in Loop: Header=BB33_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB33_139
.LBB33_154:                             # %for.end484
	jmp	.LBB33_155
.LBB33_155:                             # %if.end485
	jmp	.LBB33_156
.LBB33_156:                             # %if.end486
	jmp	.LBB33_157
.LBB33_157:                             # %if.end487
	jmp	.LBB33_180
.LBB33_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB33_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB33_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB33_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB33_161 Depth=1
	movl	$0, -4(%rbp)
.LBB33_163:                             # %for.cond499
                                        #   Parent Loop BB33_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB33_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB33_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_163
.LBB33_166:                             # %for.end519
                                        #   in Loop: Header=BB33_161 Depth=1
	jmp	.LBB33_167
.LBB33_167:                             # %for.inc520
                                        #   in Loop: Header=BB33_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_161
.LBB33_168:                             # %for.end522
	jmp	.LBB33_169
.LBB33_169:                             # %if.end523
	jmp	.LBB33_179
.LBB33_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB33_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB33_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB33_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB33_171 Depth=1
	movl	$0, -4(%rbp)
.LBB33_173:                             # %for.cond529
                                        #   Parent Loop BB33_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB33_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB33_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB33_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB33_173
.LBB33_176:                             # %for.end541
                                        #   in Loop: Header=BB33_171 Depth=1
	jmp	.LBB33_177
.LBB33_177:                             # %for.inc542
                                        #   in Loop: Header=BB33_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB33_171
.LBB33_178:                             # %for.end544
	jmp	.LBB33_179
.LBB33_179:                             # %if.end545
	jmp	.LBB33_180
.LBB33_180:                             # %sw.epilog
	cmpl	$270865119, -68(%rbp)   # imm = 0x102512DF
	jne	.LBB33_182
.LBB33_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB33_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB33_181
.Lfunc_end33:
	.size	Conceal_Error.23, .Lfunc_end33-Conceal_Error.23
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI33_0:
	.quad	.LBB33_16
	.quad	.LBB33_158
	.quad	.LBB33_106
	.quad	.LBB33_180
	.quad	.LBB33_36
                                        # -- End function
	.text
	.globl	Get_Reference_Block.24  # -- Begin function Get_Reference_Block.24
	.p2align	4, 0x90
	.type	Get_Reference_Block.24,@function
Get_Reference_Block.24:                 # @Get_Reference_Block.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$211469720, -32(%rbp)   # imm = 0xC9AC598
	movq	%rdi, -48(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -16(%rbp)
	movl	%r8d, -36(%rbp)
	movq	%r9, -56(%rbp)
	movl	-28(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-36(%rbp), %eax
	movl	%eax, -20(%rbp)
	movl	-12(%rbp), %eax
	shll	$2, %eax
	shll	$2, %eax
	addl	-16(%rbp), %eax
	movl	%eax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB34_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB34_3 Depth 2
	cmpl	$4, -4(%rbp)
	jge	.LBB34_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	$0, -8(%rbp)
.LBB34_3:                               # %for.cond5
                                        #   Parent Loop BB34_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -8(%rbp)
	jge	.LBB34_6
# %bb.4:                                # %for.body7
                                        #   in Loop: Header=BB34_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-20(%rbp), %esi
	movl	-4(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %esi
	movl	-24(%rbp), %edx
	movl	-8(%rbp), %eax
	shll	$2, %eax
	addl	%eax, %edx
	callq	Get_Reference_Pixel
	movzbl	%al, %eax
	movq	-56(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB34_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB34_3
.LBB34_6:                               # %for.end
                                        #   in Loop: Header=BB34_1 Depth=1
	jmp	.LBB34_7
.LBB34_7:                               # %for.inc14
                                        #   in Loop: Header=BB34_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB34_1
.LBB34_8:                               # %for.end16
	cmpl	$211469720, -32(%rbp)   # imm = 0xC9AC598
	jne	.LBB34_10
.LBB34_9:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB34_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB34_9
.Lfunc_end34:
	.size	Get_Reference_Block.24, .Lfunc_end34-Get_Reference_Block.24
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.25       # -- Begin function DecOneForthPix.25
	.p2align	4, 0x90
	.type	DecOneForthPix.25,@function
DecOneForthPix.25:                      # @DecOneForthPix.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$55172793, -8(%rbp)     # imm = 0x349DEB9
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB35_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB35_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB35_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB35_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB35_1
.LBB35_4:                               # %for.end
	cmpl	$55172793, -8(%rbp)     # imm = 0x349DEB9
	jne	.LBB35_6
.LBB35_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB35_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB35_5
.Lfunc_end35:
	.size	DecOneForthPix.25, .Lfunc_end35-DecOneForthPix.25
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.26       # -- Begin function DecOneForthPix.26
	.p2align	4, 0x90
	.type	DecOneForthPix.26,@function
DecOneForthPix.26:                      # @DecOneForthPix.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$882680978, -8(%rbp)    # imm = 0x349CA492
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB36_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB36_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB36_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB36_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB36_1
.LBB36_4:                               # %for.end
	cmpl	$882680978, -8(%rbp)    # imm = 0x349CA492
	jne	.LBB36_6
.LBB36_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB36_5
.Lfunc_end36:
	.size	DecOneForthPix.26, .Lfunc_end36-DecOneForthPix.26
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.27        # -- Begin function Conceal_Error.27
	.p2align	4, 0x90
	.type	Conceal_Error.27,@function
Conceal_Error.27:                       # @Conceal_Error.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1027547179, -68(%rbp)  # imm = 0x3D3F202B
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB37_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB37_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB37_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB37_4:                               # %land.end
.LBB37_5:                               # %lor.end
.LBB37_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB37_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB37_9
.LBB37_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB37_14
.LBB37_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB37_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB37_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB37_12:                              # %land.end51
.LBB37_13:                              # %lor.end53
.LBB37_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB37_180
# %bb.15:                               # %land.end54
	movq	.LJTI37_0(,%rax,8), %rax
	jmpq	*%rax
.LBB37_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB37_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB37_18 Depth=1
	movl	$0, -4(%rbp)
.LBB37_20:                              # %for.cond68
                                        #   Parent Loop BB37_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB37_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB37_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_20
.LBB37_23:                              # %for.end
                                        #   in Loop: Header=BB37_18 Depth=1
	jmp	.LBB37_24
.LBB37_24:                              # %for.inc85
                                        #   in Loop: Header=BB37_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_18
.LBB37_25:                              # %for.end87
	jmp	.LBB37_35
.LBB37_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB37_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB37_27 Depth=1
	movl	$0, -4(%rbp)
.LBB37_29:                              # %for.cond92
                                        #   Parent Loop BB37_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB37_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB37_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_29
.LBB37_32:                              # %for.end104
                                        #   in Loop: Header=BB37_27 Depth=1
	jmp	.LBB37_33
.LBB37_33:                              # %for.inc105
                                        #   in Loop: Header=BB37_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_27
.LBB37_34:                              # %for.end107
	jmp	.LBB37_35
.LBB37_35:                              # %if.end
	jmp	.LBB37_180
.LBB37_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB37_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_39 Depth 2
                                        #       Child Loop BB37_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB37_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB37_37 Depth=1
	movl	$0, -12(%rbp)
.LBB37_39:                              # %for.cond113
                                        #   Parent Loop BB37_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB37_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB37_39 Depth=2
	movl	$0, -4(%rbp)
.LBB37_41:                              # %for.cond117
                                        #   Parent Loop BB37_37 Depth=1
                                        #     Parent Loop BB37_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB37_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB37_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB37_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_41
.LBB37_44:                              # %for.end141
                                        #   in Loop: Header=BB37_39 Depth=2
	jmp	.LBB37_45
.LBB37_45:                              # %for.inc142
                                        #   in Loop: Header=BB37_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_39
.LBB37_46:                              # %for.end144
                                        #   in Loop: Header=BB37_37 Depth=1
	jmp	.LBB37_47
.LBB37_47:                              # %for.inc145
                                        #   in Loop: Header=BB37_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_37
.LBB37_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB37_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB37_49 Depth=1
	movl	$0, -8(%rbp)
.LBB37_51:                              # %for.cond152
                                        #   Parent Loop BB37_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB37_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB37_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_51
.LBB37_54:                              # %for.end162
                                        #   in Loop: Header=BB37_49 Depth=1
	jmp	.LBB37_55
.LBB37_55:                              # %for.inc163
                                        #   in Loop: Header=BB37_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_49
.LBB37_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB37_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB37_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB37_59 Depth=1
	movl	$0, -4(%rbp)
.LBB37_61:                              # %for.cond175
                                        #   Parent Loop BB37_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB37_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB37_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_61
.LBB37_64:                              # %for.end195
                                        #   in Loop: Header=BB37_59 Depth=1
	jmp	.LBB37_65
.LBB37_65:                              # %for.inc196
                                        #   in Loop: Header=BB37_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_59
.LBB37_66:                              # %for.end198
	jmp	.LBB37_95
.LBB37_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB37_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB37_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_71 Depth 2
                                        #       Child Loop BB37_73 Depth 3
                                        #         Child Loop BB37_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB37_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB37_71:                              # %for.cond210
                                        #   Parent Loop BB37_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_73 Depth 3
                                        #         Child Loop BB37_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB37_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB37_73:                              # %for.cond236
                                        #   Parent Loop BB37_69 Depth=1
                                        #     Parent Loop BB37_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB37_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB37_73 Depth=3
	movl	$0, -4(%rbp)
.LBB37_75:                              # %for.cond240
                                        #   Parent Loop BB37_69 Depth=1
                                        #     Parent Loop BB37_71 Depth=2
                                        #       Parent Loop BB37_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB37_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB37_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB37_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_75
.LBB37_78:                              # %for.end259
                                        #   in Loop: Header=BB37_73 Depth=3
	jmp	.LBB37_79
.LBB37_79:                              # %for.inc260
                                        #   in Loop: Header=BB37_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_73
.LBB37_80:                              # %for.end262
                                        #   in Loop: Header=BB37_71 Depth=2
	jmp	.LBB37_81
.LBB37_81:                              # %for.inc263
                                        #   in Loop: Header=BB37_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_71
.LBB37_82:                              # %for.end265
                                        #   in Loop: Header=BB37_69 Depth=1
	jmp	.LBB37_83
.LBB37_83:                              # %for.inc266
                                        #   in Loop: Header=BB37_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_69
.LBB37_84:                              # %for.end268
	jmp	.LBB37_94
.LBB37_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB37_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB37_86 Depth=1
	movl	$0, -4(%rbp)
.LBB37_88:                              # %for.cond274
                                        #   Parent Loop BB37_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB37_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB37_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_88
.LBB37_91:                              # %for.end294
                                        #   in Loop: Header=BB37_86 Depth=1
	jmp	.LBB37_92
.LBB37_92:                              # %for.inc295
                                        #   in Loop: Header=BB37_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_86
.LBB37_93:                              # %for.end297
	jmp	.LBB37_94
.LBB37_94:                              # %if.end298
	jmp	.LBB37_95
.LBB37_95:                              # %if.end299
	jmp	.LBB37_105
.LBB37_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB37_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB37_97 Depth=1
	movl	$0, -4(%rbp)
.LBB37_99:                              # %for.cond305
                                        #   Parent Loop BB37_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB37_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB37_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_99
.LBB37_102:                             # %for.end317
                                        #   in Loop: Header=BB37_97 Depth=1
	jmp	.LBB37_103
.LBB37_103:                             # %for.inc318
                                        #   in Loop: Header=BB37_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_97
.LBB37_104:                             # %for.end320
	jmp	.LBB37_105
.LBB37_105:                             # %if.end321
	jmp	.LBB37_180
.LBB37_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB37_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_110 Depth 2
                                        #       Child Loop BB37_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB37_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB37_108 Depth=1
	movl	$0, -12(%rbp)
.LBB37_110:                             # %for.cond331
                                        #   Parent Loop BB37_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB37_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB37_110 Depth=2
	movl	$0, -4(%rbp)
.LBB37_112:                             # %for.cond335
                                        #   Parent Loop BB37_108 Depth=1
                                        #     Parent Loop BB37_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB37_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB37_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB37_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_112
.LBB37_115:                             # %for.end359
                                        #   in Loop: Header=BB37_110 Depth=2
	jmp	.LBB37_116
.LBB37_116:                             # %for.inc360
                                        #   in Loop: Header=BB37_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_110
.LBB37_117:                             # %for.end362
                                        #   in Loop: Header=BB37_108 Depth=1
	jmp	.LBB37_118
.LBB37_118:                             # %for.inc363
                                        #   in Loop: Header=BB37_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_108
.LBB37_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB37_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB37_120 Depth=1
	movl	$0, -8(%rbp)
.LBB37_122:                             # %for.cond370
                                        #   Parent Loop BB37_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB37_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB37_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_122
.LBB37_125:                             # %for.end380
                                        #   in Loop: Header=BB37_120 Depth=1
	jmp	.LBB37_126
.LBB37_126:                             # %for.inc381
                                        #   in Loop: Header=BB37_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_120
.LBB37_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB37_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB37_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB37_129 Depth=1
	movl	$0, -4(%rbp)
.LBB37_131:                             # %for.cond390
                                        #   Parent Loop BB37_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB37_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB37_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_131
.LBB37_134:                             # %for.end410
                                        #   in Loop: Header=BB37_129 Depth=1
	jmp	.LBB37_135
.LBB37_135:                             # %for.inc411
                                        #   in Loop: Header=BB37_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_129
.LBB37_136:                             # %for.end413
	jmp	.LBB37_156
.LBB37_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB37_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB37_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_141 Depth 2
                                        #       Child Loop BB37_143 Depth 3
                                        #         Child Loop BB37_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB37_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB37_141:                             # %for.cond425
                                        #   Parent Loop BB37_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_143 Depth 3
                                        #         Child Loop BB37_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB37_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB37_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB37_143:                             # %for.cond452
                                        #   Parent Loop BB37_139 Depth=1
                                        #     Parent Loop BB37_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB37_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB37_143 Depth=3
	movl	$0, -4(%rbp)
.LBB37_145:                             # %for.cond456
                                        #   Parent Loop BB37_139 Depth=1
                                        #     Parent Loop BB37_141 Depth=2
                                        #       Parent Loop BB37_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB37_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB37_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB37_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_145
.LBB37_148:                             # %for.end475
                                        #   in Loop: Header=BB37_143 Depth=3
	jmp	.LBB37_149
.LBB37_149:                             # %for.inc476
                                        #   in Loop: Header=BB37_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_143
.LBB37_150:                             # %for.end478
                                        #   in Loop: Header=BB37_141 Depth=2
	jmp	.LBB37_151
.LBB37_151:                             # %for.inc479
                                        #   in Loop: Header=BB37_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_141
.LBB37_152:                             # %for.end481
                                        #   in Loop: Header=BB37_139 Depth=1
	jmp	.LBB37_153
.LBB37_153:                             # %for.inc482
                                        #   in Loop: Header=BB37_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_139
.LBB37_154:                             # %for.end484
	jmp	.LBB37_155
.LBB37_155:                             # %if.end485
	jmp	.LBB37_156
.LBB37_156:                             # %if.end486
	jmp	.LBB37_157
.LBB37_157:                             # %if.end487
	jmp	.LBB37_180
.LBB37_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB37_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB37_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB37_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB37_161 Depth=1
	movl	$0, -4(%rbp)
.LBB37_163:                             # %for.cond499
                                        #   Parent Loop BB37_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB37_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB37_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_163
.LBB37_166:                             # %for.end519
                                        #   in Loop: Header=BB37_161 Depth=1
	jmp	.LBB37_167
.LBB37_167:                             # %for.inc520
                                        #   in Loop: Header=BB37_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_161
.LBB37_168:                             # %for.end522
	jmp	.LBB37_169
.LBB37_169:                             # %if.end523
	jmp	.LBB37_179
.LBB37_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB37_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB37_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB37_171 Depth=1
	movl	$0, -4(%rbp)
.LBB37_173:                             # %for.cond529
                                        #   Parent Loop BB37_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB37_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB37_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB37_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_173
.LBB37_176:                             # %for.end541
                                        #   in Loop: Header=BB37_171 Depth=1
	jmp	.LBB37_177
.LBB37_177:                             # %for.inc542
                                        #   in Loop: Header=BB37_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_171
.LBB37_178:                             # %for.end544
	jmp	.LBB37_179
.LBB37_179:                             # %if.end545
	jmp	.LBB37_180
.LBB37_180:                             # %sw.epilog
	cmpl	$1027547179, -68(%rbp)  # imm = 0x3D3F202B
	jne	.LBB37_182
.LBB37_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_181
.Lfunc_end37:
	.size	Conceal_Error.27, .Lfunc_end37-Conceal_Error.27
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI37_0:
	.quad	.LBB37_16
	.quad	.LBB37_158
	.quad	.LBB37_106
	.quad	.LBB37_180
	.quad	.LBB37_36
                                        # -- End function
	.text
	.globl	decode_one_b8block.28   # -- Begin function decode_one_b8block.28
	.p2align	4, 0x90
	.type	decode_one_b8block.28,@function
decode_one_b8block.28:                  # @decode_one_b8block.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$770544333, -84(%rbp)   # imm = 0x2DED92CD
	movl	%edi, -44(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB38_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_4:                               # %for.cond9
                                        #   Parent Loop BB38_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB38_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB38_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_4
.LBB38_7:                               # %for.end
                                        #   in Loop: Header=BB38_2 Depth=1
	jmp	.LBB38_8
.LBB38_8:                               # %for.inc26
                                        #   in Loop: Header=BB38_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_2
.LBB38_9:                               # %for.end28
	jmp	.LBB38_96
.LBB38_10:                              # %if.else
	cmpl	$0, -64(%rbp)
	jne	.LBB38_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB38_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_31
.LBB38_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB38_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_17:                              # %for.cond40
                                        #   Parent Loop BB38_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB38_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB38_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_17
.LBB38_20:                              # %for.end49
                                        #   in Loop: Header=BB38_15 Depth=1
	jmp	.LBB38_21
.LBB38_21:                              # %for.inc50
                                        #   in Loop: Header=BB38_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_15
.LBB38_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_25:                              # %for.cond56
                                        #   Parent Loop BB38_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB38_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB38_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_25
.LBB38_28:                              # %for.end71
                                        #   in Loop: Header=BB38_23 Depth=1
	jmp	.LBB38_29
.LBB38_29:                              # %for.inc72
                                        #   in Loop: Header=BB38_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_23
.LBB38_30:                              # %for.end74
	jmp	.LBB38_60
.LBB38_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB38_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB38_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB38_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_36:                              # %for.cond83
                                        #   Parent Loop BB38_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB38_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB38_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_36
.LBB38_39:                              # %for.end120
                                        #   in Loop: Header=BB38_34 Depth=1
	jmp	.LBB38_40
.LBB38_40:                              # %for.inc121
                                        #   in Loop: Header=BB38_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_34
.LBB38_41:                              # %for.end123
	jmp	.LBB38_51
.LBB38_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_45:                              # %for.cond129
                                        #   Parent Loop BB38_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB38_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB38_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_45
.LBB38_48:                              # %for.end145
                                        #   in Loop: Header=BB38_43 Depth=1
	jmp	.LBB38_49
.LBB38_49:                              # %for.inc146
                                        #   in Loop: Header=BB38_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_43
.LBB38_50:                              # %for.end148
	jmp	.LBB38_51
.LBB38_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_54:                              # %for.cond153
                                        #   Parent Loop BB38_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB38_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB38_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_54
.LBB38_57:                              # %for.end167
                                        #   in Loop: Header=BB38_52 Depth=1
	jmp	.LBB38_58
.LBB38_58:                              # %for.inc168
                                        #   in Loop: Header=BB38_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_52
.LBB38_59:                              # %for.end170
	jmp	.LBB38_60
.LBB38_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB38_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB38_66
.LBB38_62:                              # %lor.lhs.false177
	cmpl	$0, -64(%rbp)
	jne	.LBB38_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB38_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB38_86
.LBB38_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB38_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_69 Depth 2
                                        #       Child Loop BB38_74 Depth 3
                                        #         Child Loop BB38_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB38_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB38_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB38_69:                              # %for.cond197
                                        #   Parent Loop BB38_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB38_74 Depth 3
                                        #         Child Loop BB38_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB38_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB38_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB38_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB38_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB38_73:                              # %if.end218
                                        #   in Loop: Header=BB38_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB38_74:                              # %for.cond233
                                        #   Parent Loop BB38_67 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB38_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB38_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB38_74 Depth=3
	movl	$0, -4(%rbp)
.LBB38_76:                              # %for.cond237
                                        #   Parent Loop BB38_67 Depth=1
                                        #     Parent Loop BB38_69 Depth=2
                                        #       Parent Loop BB38_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB38_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB38_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB38_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_76
.LBB38_79:                              # %for.end269
                                        #   in Loop: Header=BB38_74 Depth=3
	jmp	.LBB38_80
.LBB38_80:                              # %for.inc270
                                        #   in Loop: Header=BB38_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_74
.LBB38_81:                              # %for.end272
                                        #   in Loop: Header=BB38_69 Depth=2
	jmp	.LBB38_82
.LBB38_82:                              # %for.inc273
                                        #   in Loop: Header=BB38_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB38_69
.LBB38_83:                              # %for.end275
                                        #   in Loop: Header=BB38_67 Depth=1
	jmp	.LBB38_84
.LBB38_84:                              # %for.inc276
                                        #   in Loop: Header=BB38_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB38_67
.LBB38_85:                              # %for.end278
	jmp	.LBB38_95
.LBB38_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB38_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB38_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB38_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB38_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB38_89:                              # %for.cond284
                                        #   Parent Loop BB38_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB38_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB38_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB38_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB38_89
.LBB38_92:                              # %for.end310
                                        #   in Loop: Header=BB38_87 Depth=1
	jmp	.LBB38_93
.LBB38_93:                              # %for.inc311
                                        #   in Loop: Header=BB38_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB38_87
.LBB38_94:                              # %for.end313
	jmp	.LBB38_95
.LBB38_95:                              # %if.end314
	jmp	.LBB38_96
.LBB38_96:                              # %if.end315
	cmpl	$770544333, -84(%rbp)   # imm = 0x2DED92CD
	jne	.LBB38_98
.LBB38_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_97
.Lfunc_end38:
	.size	decode_one_b8block.28, .Lfunc_end38-decode_one_b8block.28
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.29    # -- Begin function Error_Concealment.29
	.p2align	4, 0x90
	.type	Error_Concealment.29,@function
Error_Concealment.29:                   # @Error_Concealment.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1128897080, -20(%rbp)  # imm = 0x43499A38
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB39_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB39_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	$0, -4(%rbp)
.LBB39_3:                               # %for.cond2
                                        #   Parent Loop BB39_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB39_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB39_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB39_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB39_6:                               # %if.end
                                        #   in Loop: Header=BB39_3 Depth=2
	jmp	.LBB39_7
.LBB39_7:                               # %for.inc
                                        #   in Loop: Header=BB39_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_3
.LBB39_8:                               # %for.end
                                        #   in Loop: Header=BB39_1 Depth=1
	jmp	.LBB39_9
.LBB39_9:                               # %for.inc7
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB39_1
.LBB39_10:                              # %for.end9
	cmpl	$1128897080, -20(%rbp)  # imm = 0x43499A38
	jne	.LBB39_12
.LBB39_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_11
.Lfunc_end39:
	.size	Error_Concealment.29, .Lfunc_end39-Error_Concealment.29
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.30    # -- Begin function Error_Concealment.30
	.p2align	4, 0x90
	.type	Error_Concealment.30,@function
Error_Concealment.30:                   # @Error_Concealment.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1095511021, -12(%rbp)  # imm = 0x414C2BED
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB40_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB40_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB40_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	$0, -4(%rbp)
.LBB40_3:                               # %for.cond2
                                        #   Parent Loop BB40_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB40_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB40_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB40_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB40_6:                               # %if.end
                                        #   in Loop: Header=BB40_3 Depth=2
	jmp	.LBB40_7
.LBB40_7:                               # %for.inc
                                        #   in Loop: Header=BB40_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB40_3
.LBB40_8:                               # %for.end
                                        #   in Loop: Header=BB40_1 Depth=1
	jmp	.LBB40_9
.LBB40_9:                               # %for.inc7
                                        #   in Loop: Header=BB40_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB40_1
.LBB40_10:                              # %for.end9
	cmpl	$1095511021, -12(%rbp)  # imm = 0x414C2BED
	jne	.LBB40_12
.LBB40_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_11
.Lfunc_end40:
	.size	Error_Concealment.30, .Lfunc_end40-Error_Concealment.30
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.31       # -- Begin function DecOneForthPix.31
	.p2align	4, 0x90
	.type	DecOneForthPix.31,@function
DecOneForthPix.31:                      # @DecOneForthPix.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$398147271, -12(%rbp)   # imm = 0x17BB3EC7
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB41_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_1
.LBB41_4:                               # %for.end
	cmpl	$398147271, -12(%rbp)   # imm = 0x17BB3EC7
	jne	.LBB41_6
.LBB41_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_5
.Lfunc_end41:
	.size	DecOneForthPix.31, .Lfunc_end41-DecOneForthPix.31
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.32    # -- Begin function Error_Concealment.32
	.p2align	4, 0x90
	.type	Error_Concealment.32,@function
Error_Concealment.32:                   # @Error_Concealment.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$246052406, -20(%rbp)   # imm = 0xEAA7636
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB42_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB42_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB42_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	$0, -4(%rbp)
.LBB42_3:                               # %for.cond2
                                        #   Parent Loop BB42_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB42_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB42_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB42_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB42_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB42_6:                               # %if.end
                                        #   in Loop: Header=BB42_3 Depth=2
	jmp	.LBB42_7
.LBB42_7:                               # %for.inc
                                        #   in Loop: Header=BB42_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB42_3
.LBB42_8:                               # %for.end
                                        #   in Loop: Header=BB42_1 Depth=1
	jmp	.LBB42_9
.LBB42_9:                               # %for.inc7
                                        #   in Loop: Header=BB42_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB42_1
.LBB42_10:                              # %for.end9
	cmpl	$246052406, -20(%rbp)   # imm = 0xEAA7636
	jne	.LBB42_12
.LBB42_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_11
.Lfunc_end42:
	.size	Error_Concealment.32, .Lfunc_end42-Error_Concealment.32
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.33  # -- Begin function Get_Reference_Pixel.33
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.33,@function
Get_Reference_Pixel.33:                 # @Get_Reference_Pixel.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1144717531, -108(%rbp) # imm = 0x443B00DB
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB43_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB43_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB43_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB43_5
.LBB43_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB43_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB43_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB43_11
.LBB43_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB43_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB43_10
.LBB43_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB43_10:                              # %cond.end14
.LBB43_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB43_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB43_14
.LBB43_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB43_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB43_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB43_20
.LBB43_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB43_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB43_19
.LBB43_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB43_19:                              # %cond.end29
.LBB43_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB43_332
.LBB43_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB43_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB43_25
.LBB43_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB43_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB43_31
.LBB43_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB43_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB43_30
.LBB43_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB43_30:                              # %cond.end52
.LBB43_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB43_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_36
.LBB43_35:                              # %cond.false61
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_36:                              # %cond.end63
                                        #   in Loop: Header=BB43_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB43_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_42
.LBB43_38:                              # %cond.false68
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_41
.LBB43_40:                              # %cond.false73
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_41:                              # %cond.end75
                                        #   in Loop: Header=BB43_32 Depth=1
.LBB43_42:                              # %cond.end77
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB43_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_32
.LBB43_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_47
.LBB43_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB43_53
.LBB43_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_52
.LBB43_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_52:                              # %cond.end113
.LBB43_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB43_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB43_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB43_57
.LBB43_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB43_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB43_63
.LBB43_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB43_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB43_62
.LBB43_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB43_62:                              # %cond.end136
.LBB43_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_76
.LBB43_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB43_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB43_68
.LBB43_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB43_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB43_74
.LBB43_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB43_73
.LBB43_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB43_73:                              # %cond.end169
.LBB43_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_75:                              # %if.end
	jmp	.LBB43_76
.LBB43_76:                              # %if.end178
	jmp	.LBB43_331
.LBB43_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB43_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB43_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB43_81
.LBB43_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB43_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB43_87
.LBB43_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB43_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB43_86
.LBB43_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB43_86:                              # %cond.end197
.LBB43_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB43_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_92
.LBB43_91:                              # %cond.false209
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_92:                              # %cond.end211
                                        #   in Loop: Header=BB43_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB43_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_98
.LBB43_94:                              # %cond.false216
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_97
.LBB43_96:                              # %cond.false221
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_97:                              # %cond.end223
                                        #   in Loop: Header=BB43_88 Depth=1
.LBB43_98:                              # %cond.end225
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB43_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_88
.LBB43_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_103
.LBB43_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB43_109
.LBB43_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_108
.LBB43_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_108:                             # %cond.end266
.LBB43_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB43_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB43_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB43_113
.LBB43_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB43_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB43_119
.LBB43_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB43_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB43_118
.LBB43_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB43_118:                             # %cond.end287
.LBB43_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_132
.LBB43_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB43_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB43_124
.LBB43_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB43_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB43_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB43_130
.LBB43_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB43_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB43_129
.LBB43_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB43_129:                             # %cond.end320
.LBB43_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_131:                             # %if.end331
	jmp	.LBB43_132
.LBB43_132:                             # %if.end332
	jmp	.LBB43_330
.LBB43_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB43_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB43_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB43_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_139
.LBB43_138:                             # %cond.false345
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_139:                             # %cond.end347
                                        #   in Loop: Header=BB43_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB43_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_145
.LBB43_141:                             # %cond.false352
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_144
.LBB43_143:                             # %cond.false357
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_144:                             # %cond.end359
                                        #   in Loop: Header=BB43_135 Depth=1
.LBB43_145:                             # %cond.end361
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_146:                             # %for.cond363
                                        #   Parent Loop BB43_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB43_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB43_150
.LBB43_149:                             # %cond.false371
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_150:                             # %cond.end373
                                        #   in Loop: Header=BB43_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB43_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB43_156
.LBB43_152:                             # %cond.false378
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB43_155
.LBB43_154:                             # %cond.false383
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_155:                             # %cond.end385
                                        #   in Loop: Header=BB43_146 Depth=2
.LBB43_156:                             # %cond.end387
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB43_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_146
.LBB43_158:                             # %for.end401
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB43_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_135
.LBB43_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB43_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB43_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB43_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_161
.LBB43_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_167
.LBB43_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB43_173
.LBB43_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_172
.LBB43_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_172:                             # %cond.end449
.LBB43_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB43_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_177
.LBB43_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB43_183
.LBB43_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_182
.LBB43_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_182:                             # %cond.end486
.LBB43_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_196
.LBB43_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB43_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_188
.LBB43_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB43_194
.LBB43_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_193
.LBB43_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_193:                             # %cond.end526
.LBB43_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_195:                             # %if.end532
	jmp	.LBB43_196
.LBB43_196:                             # %if.end533
	jmp	.LBB43_329
.LBB43_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB43_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB43_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB43_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB43_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_203
.LBB43_202:                             # %cond.false546
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_203:                             # %cond.end548
                                        #   in Loop: Header=BB43_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB43_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_209
.LBB43_205:                             # %cond.false553
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_208
.LBB43_207:                             # %cond.false558
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_208:                             # %cond.end560
                                        #   in Loop: Header=BB43_199 Depth=1
.LBB43_209:                             # %cond.end562
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_210:                             # %for.cond564
                                        #   Parent Loop BB43_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB43_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB43_214
.LBB43_213:                             # %cond.false572
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_214:                             # %cond.end574
                                        #   in Loop: Header=BB43_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB43_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB43_220
.LBB43_216:                             # %cond.false579
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB43_219
.LBB43_218:                             # %cond.false584
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_219:                             # %cond.end586
                                        #   in Loop: Header=BB43_210 Depth=2
.LBB43_220:                             # %cond.end588
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB43_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_210
.LBB43_222:                             # %for.end602
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB43_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_199
.LBB43_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB43_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB43_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB43_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_225
.LBB43_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_231
.LBB43_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB43_237
.LBB43_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_236
.LBB43_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB43_236:                             # %cond.end650
.LBB43_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB43_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_241
.LBB43_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB43_247
.LBB43_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_246
.LBB43_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_246:                             # %cond.end687
.LBB43_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB43_258
.LBB43_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_251
.LBB43_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB43_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB43_257
.LBB43_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB43_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_256
.LBB43_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB43_256:                             # %cond.end724
.LBB43_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_258:                             # %if.end730
	jmp	.LBB43_328
.LBB43_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB43_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB43_262
.LBB43_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB43_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB43_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB43_265
.LBB43_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB43_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB43_271
.LBB43_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB43_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB43_270
.LBB43_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB43_270:                             # %cond.end753
.LBB43_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB43_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB43_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_276
.LBB43_275:                             # %cond.false765
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_276:                             # %cond.end767
                                        #   in Loop: Header=BB43_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB43_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_282
.LBB43_278:                             # %cond.false772
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB43_281
.LBB43_280:                             # %cond.false777
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB43_281:                             # %cond.end779
                                        #   in Loop: Header=BB43_272 Depth=1
.LBB43_282:                             # %cond.end781
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB43_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB43_272
.LBB43_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_287
.LBB43_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB43_293
.LBB43_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_292
.LBB43_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_292:                             # %cond.end822
.LBB43_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB43_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB43_296
.LBB43_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB43_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB43_299
.LBB43_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB43_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB43_305
.LBB43_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB43_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB43_304
.LBB43_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB43_304:                             # %cond.end847
.LBB43_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB43_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB43_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_310
.LBB43_309:                             # %cond.false859
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_310:                             # %cond.end861
                                        #   in Loop: Header=BB43_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB43_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB43_316
.LBB43_312:                             # %cond.false866
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB43_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB43_315
.LBB43_314:                             # %cond.false871
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB43_315:                             # %cond.end873
                                        #   in Loop: Header=BB43_306 Depth=1
.LBB43_316:                             # %cond.end875
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB43_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB43_306
.LBB43_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_321
.LBB43_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB43_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB43_327
.LBB43_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB43_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB43_326
.LBB43_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB43_326:                             # %cond.end916
.LBB43_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-104(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB43_328:                             # %if.end922
	jmp	.LBB43_329
.LBB43_329:                             # %if.end923
	jmp	.LBB43_330
.LBB43_330:                             # %if.end924
	jmp	.LBB43_331
.LBB43_331:                             # %if.end925
	jmp	.LBB43_332
.LBB43_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1144717531, -108(%rbp) # imm = 0x443B00DB
	jne	.LBB43_334
.LBB43_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_333
.Lfunc_end43:
	.size	Get_Reference_Pixel.33, .Lfunc_end43-Get_Reference_Pixel.33
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.34  # -- Begin function Get_Reference_Pixel.34
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.34,@function
Get_Reference_Pixel.34:                 # @Get_Reference_Pixel.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$2011085377, -104(%rbp) # imm = 0x77DEBA41
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB44_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB44_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB44_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB44_5
.LBB44_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB44_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB44_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB44_11
.LBB44_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB44_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB44_10
.LBB44_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB44_10:                              # %cond.end14
.LBB44_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB44_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB44_14
.LBB44_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB44_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB44_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB44_20
.LBB44_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB44_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB44_19
.LBB44_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB44_19:                              # %cond.end29
.LBB44_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB44_332
.LBB44_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB44_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB44_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB44_25
.LBB44_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB44_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB44_31
.LBB44_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB44_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB44_30
.LBB44_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB44_30:                              # %cond.end52
.LBB44_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB44_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB44_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB44_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB44_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB44_36
.LBB44_35:                              # %cond.false61
                                        #   in Loop: Header=BB44_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB44_36:                              # %cond.end63
                                        #   in Loop: Header=BB44_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB44_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_42
.LBB44_38:                              # %cond.false68
                                        #   in Loop: Header=BB44_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB44_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB44_41
.LBB44_40:                              # %cond.false73
                                        #   in Loop: Header=BB44_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB44_41:                              # %cond.end75
                                        #   in Loop: Header=BB44_32 Depth=1
.LBB44_42:                              # %cond.end77
                                        #   in Loop: Header=BB44_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB44_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_32
.LBB44_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_47
.LBB44_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB44_53
.LBB44_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_52
.LBB44_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_52:                              # %cond.end113
.LBB44_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB44_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB44_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB44_57
.LBB44_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB44_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB44_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB44_63
.LBB44_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB44_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB44_62
.LBB44_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB44_62:                              # %cond.end136
.LBB44_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB44_76
.LBB44_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB44_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB44_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB44_68
.LBB44_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB44_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB44_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB44_74
.LBB44_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB44_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB44_73
.LBB44_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB44_73:                              # %cond.end169
.LBB44_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB44_75:                              # %if.end
	jmp	.LBB44_76
.LBB44_76:                              # %if.end178
	jmp	.LBB44_331
.LBB44_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB44_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB44_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB44_81
.LBB44_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB44_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB44_87
.LBB44_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB44_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB44_86
.LBB44_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB44_86:                              # %cond.end197
.LBB44_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB44_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB44_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB44_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB44_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB44_92
.LBB44_91:                              # %cond.false209
                                        #   in Loop: Header=BB44_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB44_92:                              # %cond.end211
                                        #   in Loop: Header=BB44_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB44_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_98
.LBB44_94:                              # %cond.false216
                                        #   in Loop: Header=BB44_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB44_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB44_97
.LBB44_96:                              # %cond.false221
                                        #   in Loop: Header=BB44_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB44_97:                              # %cond.end223
                                        #   in Loop: Header=BB44_88 Depth=1
.LBB44_98:                              # %cond.end225
                                        #   in Loop: Header=BB44_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB44_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_88
.LBB44_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_103
.LBB44_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB44_109
.LBB44_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_108
.LBB44_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_108:                             # %cond.end266
.LBB44_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB44_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB44_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB44_113
.LBB44_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB44_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB44_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB44_119
.LBB44_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB44_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB44_118
.LBB44_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB44_118:                             # %cond.end287
.LBB44_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB44_132
.LBB44_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB44_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB44_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB44_124
.LBB44_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB44_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB44_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB44_130
.LBB44_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB44_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB44_129
.LBB44_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB44_129:                             # %cond.end320
.LBB44_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB44_131:                             # %if.end331
	jmp	.LBB44_132
.LBB44_132:                             # %if.end332
	jmp	.LBB44_330
.LBB44_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB44_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB44_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB44_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB44_139
.LBB44_138:                             # %cond.false345
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB44_139:                             # %cond.end347
                                        #   in Loop: Header=BB44_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB44_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_145
.LBB44_141:                             # %cond.false352
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB44_144
.LBB44_143:                             # %cond.false357
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB44_144:                             # %cond.end359
                                        #   in Loop: Header=BB44_135 Depth=1
.LBB44_145:                             # %cond.end361
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB44_146:                             # %for.cond363
                                        #   Parent Loop BB44_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB44_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB44_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB44_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB44_150
.LBB44_149:                             # %cond.false371
                                        #   in Loop: Header=BB44_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB44_150:                             # %cond.end373
                                        #   in Loop: Header=BB44_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB44_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_156
.LBB44_152:                             # %cond.false378
                                        #   in Loop: Header=BB44_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB44_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB44_155
.LBB44_154:                             # %cond.false383
                                        #   in Loop: Header=BB44_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB44_155:                             # %cond.end385
                                        #   in Loop: Header=BB44_146 Depth=2
.LBB44_156:                             # %cond.end387
                                        #   in Loop: Header=BB44_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB44_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_146
.LBB44_158:                             # %for.end401
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB44_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_135
.LBB44_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB44_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB44_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB44_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB44_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_161
.LBB44_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_167
.LBB44_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB44_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB44_173
.LBB44_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_172
.LBB44_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB44_172:                             # %cond.end449
.LBB44_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB44_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB44_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_177
.LBB44_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB44_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB44_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB44_183
.LBB44_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB44_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_182
.LBB44_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB44_182:                             # %cond.end486
.LBB44_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB44_196
.LBB44_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB44_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB44_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_188
.LBB44_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB44_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB44_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB44_194
.LBB44_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB44_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_193
.LBB44_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB44_193:                             # %cond.end526
.LBB44_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB44_195:                             # %if.end532
	jmp	.LBB44_196
.LBB44_196:                             # %if.end533
	jmp	.LBB44_329
.LBB44_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB44_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB44_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB44_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB44_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB44_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB44_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB44_203
.LBB44_202:                             # %cond.false546
                                        #   in Loop: Header=BB44_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB44_203:                             # %cond.end548
                                        #   in Loop: Header=BB44_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB44_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_209
.LBB44_205:                             # %cond.false553
                                        #   in Loop: Header=BB44_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB44_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB44_208
.LBB44_207:                             # %cond.false558
                                        #   in Loop: Header=BB44_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB44_208:                             # %cond.end560
                                        #   in Loop: Header=BB44_199 Depth=1
.LBB44_209:                             # %cond.end562
                                        #   in Loop: Header=BB44_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB44_210:                             # %for.cond564
                                        #   Parent Loop BB44_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB44_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB44_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB44_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB44_214
.LBB44_213:                             # %cond.false572
                                        #   in Loop: Header=BB44_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB44_214:                             # %cond.end574
                                        #   in Loop: Header=BB44_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB44_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB44_220
.LBB44_216:                             # %cond.false579
                                        #   in Loop: Header=BB44_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB44_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB44_219
.LBB44_218:                             # %cond.false584
                                        #   in Loop: Header=BB44_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB44_219:                             # %cond.end586
                                        #   in Loop: Header=BB44_210 Depth=2
.LBB44_220:                             # %cond.end588
                                        #   in Loop: Header=BB44_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB44_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_210
.LBB44_222:                             # %for.end602
                                        #   in Loop: Header=BB44_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB44_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_199
.LBB44_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB44_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB44_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB44_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB44_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_225
.LBB44_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_231
.LBB44_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB44_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB44_237
.LBB44_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_236
.LBB44_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB44_236:                             # %cond.end650
.LBB44_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB44_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB44_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_241
.LBB44_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB44_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB44_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB44_247
.LBB44_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB44_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_246
.LBB44_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB44_246:                             # %cond.end687
.LBB44_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB44_258
.LBB44_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB44_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_251
.LBB44_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB44_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB44_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB44_257
.LBB44_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB44_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_256
.LBB44_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB44_256:                             # %cond.end724
.LBB44_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB44_258:                             # %if.end730
	jmp	.LBB44_328
.LBB44_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB44_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB44_262
.LBB44_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB44_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB44_265
.LBB44_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB44_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB44_271
.LBB44_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB44_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB44_270
.LBB44_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB44_270:                             # %cond.end753
.LBB44_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB44_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB44_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB44_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB44_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB44_276
.LBB44_275:                             # %cond.false765
                                        #   in Loop: Header=BB44_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB44_276:                             # %cond.end767
                                        #   in Loop: Header=BB44_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB44_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_282
.LBB44_278:                             # %cond.false772
                                        #   in Loop: Header=BB44_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB44_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB44_281
.LBB44_280:                             # %cond.false777
                                        #   in Loop: Header=BB44_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB44_281:                             # %cond.end779
                                        #   in Loop: Header=BB44_272 Depth=1
.LBB44_282:                             # %cond.end781
                                        #   in Loop: Header=BB44_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB44_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB44_272
.LBB44_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_287
.LBB44_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB44_293
.LBB44_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_292
.LBB44_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_292:                             # %cond.end822
.LBB44_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB44_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB44_296
.LBB44_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB44_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB44_299
.LBB44_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB44_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB44_305
.LBB44_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB44_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB44_304
.LBB44_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB44_304:                             # %cond.end847
.LBB44_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB44_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB44_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB44_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB44_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB44_310
.LBB44_309:                             # %cond.false859
                                        #   in Loop: Header=BB44_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB44_310:                             # %cond.end861
                                        #   in Loop: Header=BB44_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB44_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB44_316
.LBB44_312:                             # %cond.false866
                                        #   in Loop: Header=BB44_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB44_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB44_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB44_315
.LBB44_314:                             # %cond.false871
                                        #   in Loop: Header=BB44_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB44_315:                             # %cond.end873
                                        #   in Loop: Header=BB44_306 Depth=1
.LBB44_316:                             # %cond.end875
                                        #   in Loop: Header=BB44_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB44_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB44_306
.LBB44_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_321
.LBB44_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB44_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB44_327
.LBB44_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB44_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB44_326
.LBB44_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB44_326:                             # %cond.end916
.LBB44_327:                             # %cond.end918
	movl	%eax, -100(%rbp)
	movl	-108(%rbp), %eax
	addl	-100(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB44_328:                             # %if.end922
	jmp	.LBB44_329
.LBB44_329:                             # %if.end923
	jmp	.LBB44_330
.LBB44_330:                             # %if.end924
	jmp	.LBB44_331
.LBB44_331:                             # %if.end925
	jmp	.LBB44_332
.LBB44_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$2011085377, -104(%rbp) # imm = 0x77DEBA41
	jne	.LBB44_334
.LBB44_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_333
.Lfunc_end44:
	.size	Get_Reference_Pixel.34, .Lfunc_end44-Get_Reference_Pixel.34
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.35   # -- Begin function decode_one_b8block.35
	.p2align	4, 0x90
	.type	decode_one_b8block.35,@function
decode_one_b8block.35:                  # @decode_one_b8block.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1678938750, -84(%rbp)  # imm = 0x6412927E
	movl	%edi, -44(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB45_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_4:                               # %for.cond9
                                        #   Parent Loop BB45_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB45_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB45_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_4
.LBB45_7:                               # %for.end
                                        #   in Loop: Header=BB45_2 Depth=1
	jmp	.LBB45_8
.LBB45_8:                               # %for.inc26
                                        #   in Loop: Header=BB45_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_2
.LBB45_9:                               # %for.end28
	jmp	.LBB45_96
.LBB45_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB45_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB45_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB45_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB45_31
.LBB45_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB45_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_17:                              # %for.cond40
                                        #   Parent Loop BB45_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB45_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB45_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_17
.LBB45_20:                              # %for.end49
                                        #   in Loop: Header=BB45_15 Depth=1
	jmp	.LBB45_21
.LBB45_21:                              # %for.inc50
                                        #   in Loop: Header=BB45_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_15
.LBB45_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB45_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_25:                              # %for.cond56
                                        #   Parent Loop BB45_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB45_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB45_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_25
.LBB45_28:                              # %for.end71
                                        #   in Loop: Header=BB45_23 Depth=1
	jmp	.LBB45_29
.LBB45_29:                              # %for.inc72
                                        #   in Loop: Header=BB45_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_23
.LBB45_30:                              # %for.end74
	jmp	.LBB45_60
.LBB45_31:                              # %if.else75
	cmpl	$1, -24(%rbp)
	jl	.LBB45_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -24(%rbp)
	jg	.LBB45_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB45_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_36:                              # %for.cond83
                                        #   Parent Loop BB45_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB45_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB45_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_36
.LBB45_39:                              # %for.end120
                                        #   in Loop: Header=BB45_34 Depth=1
	jmp	.LBB45_40
.LBB45_40:                              # %for.inc121
                                        #   in Loop: Header=BB45_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_34
.LBB45_41:                              # %for.end123
	jmp	.LBB45_51
.LBB45_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB45_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_45:                              # %for.cond129
                                        #   Parent Loop BB45_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB45_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB45_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_45
.LBB45_48:                              # %for.end145
                                        #   in Loop: Header=BB45_43 Depth=1
	jmp	.LBB45_49
.LBB45_49:                              # %for.inc146
                                        #   in Loop: Header=BB45_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_43
.LBB45_50:                              # %for.end148
	jmp	.LBB45_51
.LBB45_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_54:                              # %for.cond153
                                        #   Parent Loop BB45_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB45_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB45_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_54
.LBB45_57:                              # %for.end167
                                        #   in Loop: Header=BB45_52 Depth=1
	jmp	.LBB45_58
.LBB45_58:                              # %for.inc168
                                        #   in Loop: Header=BB45_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_52
.LBB45_59:                              # %for.end170
	jmp	.LBB45_60
.LBB45_60:                              # %if.end171
	cmpl	$1, -24(%rbp)
	jl	.LBB45_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -24(%rbp)
	jle	.LBB45_66
.LBB45_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB45_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB45_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB45_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB45_86
.LBB45_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB45_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_69 Depth 2
                                        #       Child Loop BB45_74 Depth 3
                                        #         Child Loop BB45_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB45_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB45_69:                              # %for.cond197
                                        #   Parent Loop BB45_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB45_74 Depth 3
                                        #         Child Loop BB45_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB45_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB45_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB45_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB45_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB45_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB45_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB45_73:                              # %if.end218
                                        #   in Loop: Header=BB45_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-72(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB45_74:                              # %for.cond233
                                        #   Parent Loop BB45_67 Depth=1
                                        #     Parent Loop BB45_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB45_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB45_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB45_74 Depth=3
	movl	$0, -8(%rbp)
.LBB45_76:                              # %for.cond237
                                        #   Parent Loop BB45_67 Depth=1
                                        #     Parent Loop BB45_69 Depth=2
                                        #       Parent Loop BB45_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB45_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB45_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB45_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_76
.LBB45_79:                              # %for.end269
                                        #   in Loop: Header=BB45_74 Depth=3
	jmp	.LBB45_80
.LBB45_80:                              # %for.inc270
                                        #   in Loop: Header=BB45_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_74
.LBB45_81:                              # %for.end272
                                        #   in Loop: Header=BB45_69 Depth=2
	jmp	.LBB45_82
.LBB45_82:                              # %for.inc273
                                        #   in Loop: Header=BB45_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB45_69
.LBB45_83:                              # %for.end275
                                        #   in Loop: Header=BB45_67 Depth=1
	jmp	.LBB45_84
.LBB45_84:                              # %for.inc276
                                        #   in Loop: Header=BB45_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB45_67
.LBB45_85:                              # %for.end278
	jmp	.LBB45_95
.LBB45_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB45_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB45_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB45_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB45_89:                              # %for.cond284
                                        #   Parent Loop BB45_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB45_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB45_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB45_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB45_89
.LBB45_92:                              # %for.end310
                                        #   in Loop: Header=BB45_87 Depth=1
	jmp	.LBB45_93
.LBB45_93:                              # %for.inc311
                                        #   in Loop: Header=BB45_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB45_87
.LBB45_94:                              # %for.end313
	jmp	.LBB45_95
.LBB45_95:                              # %if.end314
	jmp	.LBB45_96
.LBB45_96:                              # %if.end315
	cmpl	$1678938750, -84(%rbp)  # imm = 0x6412927E
	jne	.LBB45_98
.LBB45_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_97
.Lfunc_end45:
	.size	decode_one_b8block.35, .Lfunc_end45-decode_one_b8block.35
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.36       # -- Begin function DecOneForthPix.36
	.p2align	4, 0x90
	.type	DecOneForthPix.36,@function
DecOneForthPix.36:                      # @DecOneForthPix.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1859166967, -12(%rbp)  # imm = 0x6ED0A2F7
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB46_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB46_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB46_1 Depth=1
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-24(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB46_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_1
.LBB46_4:                               # %for.end
	cmpl	$1859166967, -12(%rbp)  # imm = 0x6ED0A2F7
	jne	.LBB46_6
.LBB46_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_5
.Lfunc_end46:
	.size	DecOneForthPix.36, .Lfunc_end46-DecOneForthPix.36
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.37
.LCPI47_0:
	.quad	4636737291354636288     # double 100
.LCPI47_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.37
	.p2align	4, 0x90
	.type	Build_Status_Map.37,@function
Build_Status_Map.37:                    # @Build_Status_Map.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1893005769, -36(%rbp)  # imm = 0x70D4F9C9
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB47_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -12(%rbp)
.LBB47_3:                               # %for.cond2
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB47_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB47_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB47_13
.LBB47_6:                               # %if.then
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI47_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB47_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB47_8:                               # %if.end
                                        #   in Loop: Header=BB47_3 Depth=2
	callq	rand
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI47_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB47_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB47_10:                              # %if.end20
                                        #   in Loop: Header=BB47_3 Depth=2
	callq	rand
	vmovsd	.LCPI47_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI47_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB47_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	$1, -4(%rbp)
.LBB47_12:                              # %if.end29
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB47_13:                              # %if.end30
                                        #   in Loop: Header=BB47_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB47_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB47_18
.LBB47_15:                              # %if.else
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB47_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB47_17:                              # %if.end49
                                        #   in Loop: Header=BB47_3 Depth=2
	jmp	.LBB47_18
.LBB47_18:                              # %if.end50
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB47_3
.LBB47_20:                              # %for.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_21
.LBB47_21:                              # %for.inc53
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB47_1
.LBB47_22:                              # %for.end55
	cmpl	$1893005769, -36(%rbp)  # imm = 0x70D4F9C9
	jne	.LBB47_24
.LBB47_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_23
.Lfunc_end47:
	.size	Build_Status_Map.37, .Lfunc_end47-Build_Status_Map.37
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.38  # -- Begin function Get_Reference_Pixel.38
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.38,@function
Get_Reference_Pixel.38:                 # @Get_Reference_Pixel.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1021504829, -100(%rbp) # imm = 0x3CE2ED3D
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB48_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB48_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB48_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB48_5
.LBB48_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB48_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB48_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB48_11
.LBB48_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB48_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB48_10
.LBB48_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB48_10:                              # %cond.end14
.LBB48_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB48_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB48_14
.LBB48_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB48_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB48_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB48_20
.LBB48_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB48_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB48_19
.LBB48_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB48_19:                              # %cond.end29
.LBB48_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_332
.LBB48_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB48_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB48_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB48_25
.LBB48_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB48_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB48_31
.LBB48_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB48_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB48_30
.LBB48_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB48_30:                              # %cond.end52
.LBB48_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB48_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB48_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_36
.LBB48_35:                              # %cond.false61
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_36:                              # %cond.end63
                                        #   in Loop: Header=BB48_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB48_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_42
.LBB48_38:                              # %cond.false68
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_41
.LBB48_40:                              # %cond.false73
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_41:                              # %cond.end75
                                        #   in Loop: Header=BB48_32 Depth=1
.LBB48_42:                              # %cond.end77
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB48_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_32
.LBB48_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_47
.LBB48_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB48_53
.LBB48_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_52
.LBB48_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_52:                              # %cond.end113
.LBB48_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB48_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB48_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB48_57
.LBB48_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB48_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB48_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB48_63
.LBB48_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB48_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB48_62
.LBB48_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB48_62:                              # %cond.end136
.LBB48_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB48_76
.LBB48_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB48_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB48_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB48_68
.LBB48_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB48_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB48_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB48_74
.LBB48_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB48_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB48_73
.LBB48_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB48_73:                              # %cond.end169
.LBB48_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB48_75:                              # %if.end
	jmp	.LBB48_76
.LBB48_76:                              # %if.end178
	jmp	.LBB48_331
.LBB48_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB48_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB48_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB48_81
.LBB48_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB48_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB48_87
.LBB48_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB48_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB48_86
.LBB48_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB48_86:                              # %cond.end197
.LBB48_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB48_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB48_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_92
.LBB48_91:                              # %cond.false209
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_92:                              # %cond.end211
                                        #   in Loop: Header=BB48_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB48_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_98
.LBB48_94:                              # %cond.false216
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_97
.LBB48_96:                              # %cond.false221
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_97:                              # %cond.end223
                                        #   in Loop: Header=BB48_88 Depth=1
.LBB48_98:                              # %cond.end225
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB48_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_88
.LBB48_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_103
.LBB48_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB48_109
.LBB48_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_108
.LBB48_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_108:                             # %cond.end266
.LBB48_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB48_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB48_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB48_113
.LBB48_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB48_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB48_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB48_119
.LBB48_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB48_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB48_118
.LBB48_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB48_118:                             # %cond.end287
.LBB48_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB48_132
.LBB48_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB48_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB48_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB48_124
.LBB48_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB48_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB48_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB48_130
.LBB48_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB48_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB48_129
.LBB48_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB48_129:                             # %cond.end320
.LBB48_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB48_131:                             # %if.end331
	jmp	.LBB48_132
.LBB48_132:                             # %if.end332
	jmp	.LBB48_330
.LBB48_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB48_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB48_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB48_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_139
.LBB48_138:                             # %cond.false345
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_139:                             # %cond.end347
                                        #   in Loop: Header=BB48_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB48_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_145
.LBB48_141:                             # %cond.false352
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_144
.LBB48_143:                             # %cond.false357
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_144:                             # %cond.end359
                                        #   in Loop: Header=BB48_135 Depth=1
.LBB48_145:                             # %cond.end361
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB48_146:                             # %for.cond363
                                        #   Parent Loop BB48_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB48_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB48_150
.LBB48_149:                             # %cond.false371
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_150:                             # %cond.end373
                                        #   in Loop: Header=BB48_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB48_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB48_156
.LBB48_152:                             # %cond.false378
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB48_155
.LBB48_154:                             # %cond.false383
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_155:                             # %cond.end385
                                        #   in Loop: Header=BB48_146 Depth=2
.LBB48_156:                             # %cond.end387
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB48_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_146
.LBB48_158:                             # %for.end401
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB48_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_135
.LBB48_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB48_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB48_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB48_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB48_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_161
.LBB48_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_167
.LBB48_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB48_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB48_173
.LBB48_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_172
.LBB48_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB48_172:                             # %cond.end449
.LBB48_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB48_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_177
.LBB48_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB48_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB48_183
.LBB48_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_182
.LBB48_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_182:                             # %cond.end486
.LBB48_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB48_196
.LBB48_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB48_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_188
.LBB48_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB48_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB48_194
.LBB48_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_193
.LBB48_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_193:                             # %cond.end526
.LBB48_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB48_195:                             # %if.end532
	jmp	.LBB48_196
.LBB48_196:                             # %if.end533
	jmp	.LBB48_329
.LBB48_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB48_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB48_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB48_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_203
.LBB48_202:                             # %cond.false546
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_203:                             # %cond.end548
                                        #   in Loop: Header=BB48_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB48_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_209
.LBB48_205:                             # %cond.false553
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_208
.LBB48_207:                             # %cond.false558
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_208:                             # %cond.end560
                                        #   in Loop: Header=BB48_199 Depth=1
.LBB48_209:                             # %cond.end562
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB48_210:                             # %for.cond564
                                        #   Parent Loop BB48_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB48_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB48_214
.LBB48_213:                             # %cond.false572
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_214:                             # %cond.end574
                                        #   in Loop: Header=BB48_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB48_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB48_220
.LBB48_216:                             # %cond.false579
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB48_219
.LBB48_218:                             # %cond.false584
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_219:                             # %cond.end586
                                        #   in Loop: Header=BB48_210 Depth=2
.LBB48_220:                             # %cond.end588
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB48_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_210
.LBB48_222:                             # %for.end602
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB48_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_199
.LBB48_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB48_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB48_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB48_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB48_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_225
.LBB48_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_231
.LBB48_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB48_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB48_237
.LBB48_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_236
.LBB48_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB48_236:                             # %cond.end650
.LBB48_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB48_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_241
.LBB48_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB48_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB48_247
.LBB48_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_246
.LBB48_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_246:                             # %cond.end687
.LBB48_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB48_258
.LBB48_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_251
.LBB48_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB48_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB48_257
.LBB48_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB48_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_256
.LBB48_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB48_256:                             # %cond.end724
.LBB48_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB48_258:                             # %if.end730
	jmp	.LBB48_328
.LBB48_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB48_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB48_262
.LBB48_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB48_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB48_265
.LBB48_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB48_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB48_271
.LBB48_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB48_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB48_270
.LBB48_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB48_270:                             # %cond.end753
.LBB48_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB48_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB48_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_276
.LBB48_275:                             # %cond.false765
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_276:                             # %cond.end767
                                        #   in Loop: Header=BB48_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB48_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_282
.LBB48_278:                             # %cond.false772
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB48_281
.LBB48_280:                             # %cond.false777
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB48_281:                             # %cond.end779
                                        #   in Loop: Header=BB48_272 Depth=1
.LBB48_282:                             # %cond.end781
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB48_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB48_272
.LBB48_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_287
.LBB48_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB48_293
.LBB48_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_292
.LBB48_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_292:                             # %cond.end822
.LBB48_293:                             # %cond.end824
	movl	%eax, -108(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB48_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB48_296
.LBB48_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB48_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB48_299
.LBB48_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB48_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB48_305
.LBB48_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB48_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB48_304
.LBB48_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB48_304:                             # %cond.end847
.LBB48_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB48_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB48_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_310
.LBB48_309:                             # %cond.false859
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_310:                             # %cond.end861
                                        #   in Loop: Header=BB48_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB48_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB48_316
.LBB48_312:                             # %cond.false866
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB48_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB48_315
.LBB48_314:                             # %cond.false871
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB48_315:                             # %cond.end873
                                        #   in Loop: Header=BB48_306 Depth=1
.LBB48_316:                             # %cond.end875
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB48_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_306
.LBB48_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_321
.LBB48_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB48_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB48_327
.LBB48_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB48_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB48_326
.LBB48_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB48_326:                             # %cond.end916
.LBB48_327:                             # %cond.end918
	movl	%eax, -104(%rbp)
	movl	-108(%rbp), %eax
	addl	-104(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB48_328:                             # %if.end922
	jmp	.LBB48_329
.LBB48_329:                             # %if.end923
	jmp	.LBB48_330
.LBB48_330:                             # %if.end924
	jmp	.LBB48_331
.LBB48_331:                             # %if.end925
	jmp	.LBB48_332
.LBB48_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1021504829, -100(%rbp) # imm = 0x3CE2ED3D
	jne	.LBB48_334
.LBB48_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_333
.Lfunc_end48:
	.size	Get_Reference_Pixel.38, .Lfunc_end48-Get_Reference_Pixel.38
	.cfi_endproc
                                        # -- End function
	.globl	DecOneForthPix.39       # -- Begin function DecOneForthPix.39
	.p2align	4, 0x90
	.type	DecOneForthPix.39,@function
DecOneForthPix.39:                      # @DecOneForthPix.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1673276284, -12(%rbp)  # imm = 0x63BC2B7C
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	img, %rcx
	cltd
	idivl	72376(%rcx)
	movl	%edx, -8(%rbp)
	movl	$0, -4(%rbp)
.LBB49_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	60(%rcx), %eax
	jge	.LBB49_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB49_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	movq	img, %rax
	movslq	52(%rax), %rdx
	shlq	$1, %rdx
	callq	memcpy
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB49_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB49_1
.LBB49_4:                               # %for.end
	cmpl	$1673276284, -12(%rbp)  # imm = 0x63BC2B7C
	jne	.LBB49_6
.LBB49_5:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_6:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_5
.Lfunc_end49:
	.size	DecOneForthPix.39, .Lfunc_end49-DecOneForthPix.39
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.40 # -- Begin function compute_residue_b8block.40
	.p2align	4, 0x90
	.type	compute_residue_b8block.40,@function
compute_residue_b8block.40:             # @compute_residue_b8block.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$369624933, -36(%rbp)   # imm = 0x16080765
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB50_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB50_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB50_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB50_4:                               # %for.cond4
                                        #   Parent Loop BB50_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB50_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB50_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB50_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_4
.LBB50_7:                               # %for.end
                                        #   in Loop: Header=BB50_2 Depth=1
	jmp	.LBB50_8
.LBB50_8:                               # %for.inc22
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_2
.LBB50_9:                               # %for.end24
	jmp	.LBB50_19
.LBB50_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB50_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB50_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB50_13:                              # %for.cond29
                                        #   Parent Loop BB50_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB50_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB50_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB50_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB50_13
.LBB50_16:                              # %for.end56
                                        #   in Loop: Header=BB50_11 Depth=1
	jmp	.LBB50_17
.LBB50_17:                              # %for.inc57
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB50_11
.LBB50_18:                              # %for.end59
	jmp	.LBB50_19
.LBB50_19:                              # %if.end
	cmpl	$369624933, -36(%rbp)   # imm = 0x16080765
	jne	.LBB50_21
.LBB50_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_20
.Lfunc_end50:
	.size	compute_residue_b8block.40, .Lfunc_end50-compute_residue_b8block.40
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.41        # -- Begin function Conceal_Error.41
	.p2align	4, 0x90
	.type	Conceal_Error.41,@function
Conceal_Error.41:                       # @Conceal_Error.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1851729911, -68(%rbp)  # imm = 0x6E5F27F7
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB51_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB51_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB51_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB51_4:                               # %land.end
.LBB51_5:                               # %lor.end
.LBB51_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB51_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB51_9
.LBB51_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB51_14
.LBB51_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB51_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB51_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB51_12:                              # %land.end51
.LBB51_13:                              # %lor.end53
.LBB51_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB51_180
# %bb.15:                               # %land.end54
	movq	.LJTI51_0(,%rax,8), %rax
	jmpq	*%rax
.LBB51_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB51_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB51_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB51_18 Depth=1
	movl	$0, -4(%rbp)
.LBB51_20:                              # %for.cond68
                                        #   Parent Loop BB51_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB51_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB51_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_20
.LBB51_23:                              # %for.end
                                        #   in Loop: Header=BB51_18 Depth=1
	jmp	.LBB51_24
.LBB51_24:                              # %for.inc85
                                        #   in Loop: Header=BB51_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_18
.LBB51_25:                              # %for.end87
	jmp	.LBB51_35
.LBB51_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB51_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB51_27 Depth=1
	movl	$0, -4(%rbp)
.LBB51_29:                              # %for.cond92
                                        #   Parent Loop BB51_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB51_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB51_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_29
.LBB51_32:                              # %for.end104
                                        #   in Loop: Header=BB51_27 Depth=1
	jmp	.LBB51_33
.LBB51_33:                              # %for.inc105
                                        #   in Loop: Header=BB51_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_27
.LBB51_34:                              # %for.end107
	jmp	.LBB51_35
.LBB51_35:                              # %if.end
	jmp	.LBB51_180
.LBB51_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB51_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_39 Depth 2
                                        #       Child Loop BB51_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB51_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB51_37 Depth=1
	movl	$0, -12(%rbp)
.LBB51_39:                              # %for.cond113
                                        #   Parent Loop BB51_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB51_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB51_39 Depth=2
	movl	$0, -4(%rbp)
.LBB51_41:                              # %for.cond117
                                        #   Parent Loop BB51_37 Depth=1
                                        #     Parent Loop BB51_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB51_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB51_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB51_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_41
.LBB51_44:                              # %for.end141
                                        #   in Loop: Header=BB51_39 Depth=2
	jmp	.LBB51_45
.LBB51_45:                              # %for.inc142
                                        #   in Loop: Header=BB51_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_39
.LBB51_46:                              # %for.end144
                                        #   in Loop: Header=BB51_37 Depth=1
	jmp	.LBB51_47
.LBB51_47:                              # %for.inc145
                                        #   in Loop: Header=BB51_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_37
.LBB51_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB51_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB51_49 Depth=1
	movl	$0, -8(%rbp)
.LBB51_51:                              # %for.cond152
                                        #   Parent Loop BB51_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB51_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB51_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_51
.LBB51_54:                              # %for.end162
                                        #   in Loop: Header=BB51_49 Depth=1
	jmp	.LBB51_55
.LBB51_55:                              # %for.inc163
                                        #   in Loop: Header=BB51_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_49
.LBB51_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB51_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB51_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB51_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB51_59 Depth=1
	movl	$0, -4(%rbp)
.LBB51_61:                              # %for.cond175
                                        #   Parent Loop BB51_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB51_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB51_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_61
.LBB51_64:                              # %for.end195
                                        #   in Loop: Header=BB51_59 Depth=1
	jmp	.LBB51_65
.LBB51_65:                              # %for.inc196
                                        #   in Loop: Header=BB51_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_59
.LBB51_66:                              # %for.end198
	jmp	.LBB51_95
.LBB51_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB51_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB51_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_71 Depth 2
                                        #       Child Loop BB51_73 Depth 3
                                        #         Child Loop BB51_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB51_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB51_71:                              # %for.cond210
                                        #   Parent Loop BB51_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_73 Depth 3
                                        #         Child Loop BB51_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB51_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB51_73:                              # %for.cond236
                                        #   Parent Loop BB51_69 Depth=1
                                        #     Parent Loop BB51_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB51_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB51_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB51_73 Depth=3
	movl	$0, -4(%rbp)
.LBB51_75:                              # %for.cond240
                                        #   Parent Loop BB51_69 Depth=1
                                        #     Parent Loop BB51_71 Depth=2
                                        #       Parent Loop BB51_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB51_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB51_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB51_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_75
.LBB51_78:                              # %for.end259
                                        #   in Loop: Header=BB51_73 Depth=3
	jmp	.LBB51_79
.LBB51_79:                              # %for.inc260
                                        #   in Loop: Header=BB51_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_73
.LBB51_80:                              # %for.end262
                                        #   in Loop: Header=BB51_71 Depth=2
	jmp	.LBB51_81
.LBB51_81:                              # %for.inc263
                                        #   in Loop: Header=BB51_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_71
.LBB51_82:                              # %for.end265
                                        #   in Loop: Header=BB51_69 Depth=1
	jmp	.LBB51_83
.LBB51_83:                              # %for.inc266
                                        #   in Loop: Header=BB51_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_69
.LBB51_84:                              # %for.end268
	jmp	.LBB51_94
.LBB51_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB51_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB51_86 Depth=1
	movl	$0, -4(%rbp)
.LBB51_88:                              # %for.cond274
                                        #   Parent Loop BB51_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB51_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB51_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_88
.LBB51_91:                              # %for.end294
                                        #   in Loop: Header=BB51_86 Depth=1
	jmp	.LBB51_92
.LBB51_92:                              # %for.inc295
                                        #   in Loop: Header=BB51_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_86
.LBB51_93:                              # %for.end297
	jmp	.LBB51_94
.LBB51_94:                              # %if.end298
	jmp	.LBB51_95
.LBB51_95:                              # %if.end299
	jmp	.LBB51_105
.LBB51_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB51_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB51_97 Depth=1
	movl	$0, -4(%rbp)
.LBB51_99:                              # %for.cond305
                                        #   Parent Loop BB51_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB51_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB51_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_99
.LBB51_102:                             # %for.end317
                                        #   in Loop: Header=BB51_97 Depth=1
	jmp	.LBB51_103
.LBB51_103:                             # %for.inc318
                                        #   in Loop: Header=BB51_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_97
.LBB51_104:                             # %for.end320
	jmp	.LBB51_105
.LBB51_105:                             # %if.end321
	jmp	.LBB51_180
.LBB51_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB51_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB51_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_110 Depth 2
                                        #       Child Loop BB51_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB51_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB51_108 Depth=1
	movl	$0, -12(%rbp)
.LBB51_110:                             # %for.cond331
                                        #   Parent Loop BB51_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB51_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB51_110 Depth=2
	movl	$0, -4(%rbp)
.LBB51_112:                             # %for.cond335
                                        #   Parent Loop BB51_108 Depth=1
                                        #     Parent Loop BB51_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB51_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB51_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB51_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_112
.LBB51_115:                             # %for.end359
                                        #   in Loop: Header=BB51_110 Depth=2
	jmp	.LBB51_116
.LBB51_116:                             # %for.inc360
                                        #   in Loop: Header=BB51_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_110
.LBB51_117:                             # %for.end362
                                        #   in Loop: Header=BB51_108 Depth=1
	jmp	.LBB51_118
.LBB51_118:                             # %for.inc363
                                        #   in Loop: Header=BB51_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_108
.LBB51_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB51_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB51_120 Depth=1
	movl	$0, -8(%rbp)
.LBB51_122:                             # %for.cond370
                                        #   Parent Loop BB51_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB51_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB51_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_122
.LBB51_125:                             # %for.end380
                                        #   in Loop: Header=BB51_120 Depth=1
	jmp	.LBB51_126
.LBB51_126:                             # %for.inc381
                                        #   in Loop: Header=BB51_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_120
.LBB51_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB51_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB51_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB51_129 Depth=1
	movl	$0, -4(%rbp)
.LBB51_131:                             # %for.cond390
                                        #   Parent Loop BB51_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB51_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB51_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_131
.LBB51_134:                             # %for.end410
                                        #   in Loop: Header=BB51_129 Depth=1
	jmp	.LBB51_135
.LBB51_135:                             # %for.inc411
                                        #   in Loop: Header=BB51_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_129
.LBB51_136:                             # %for.end413
	jmp	.LBB51_156
.LBB51_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB51_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB51_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_141 Depth 2
                                        #       Child Loop BB51_143 Depth 3
                                        #         Child Loop BB51_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB51_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB51_141:                             # %for.cond425
                                        #   Parent Loop BB51_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB51_143 Depth 3
                                        #         Child Loop BB51_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB51_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB51_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB51_143:                             # %for.cond452
                                        #   Parent Loop BB51_139 Depth=1
                                        #     Parent Loop BB51_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB51_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB51_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB51_143 Depth=3
	movl	$0, -4(%rbp)
.LBB51_145:                             # %for.cond456
                                        #   Parent Loop BB51_139 Depth=1
                                        #     Parent Loop BB51_141 Depth=2
                                        #       Parent Loop BB51_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB51_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB51_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB51_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_145
.LBB51_148:                             # %for.end475
                                        #   in Loop: Header=BB51_143 Depth=3
	jmp	.LBB51_149
.LBB51_149:                             # %for.inc476
                                        #   in Loop: Header=BB51_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_143
.LBB51_150:                             # %for.end478
                                        #   in Loop: Header=BB51_141 Depth=2
	jmp	.LBB51_151
.LBB51_151:                             # %for.inc479
                                        #   in Loop: Header=BB51_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB51_141
.LBB51_152:                             # %for.end481
                                        #   in Loop: Header=BB51_139 Depth=1
	jmp	.LBB51_153
.LBB51_153:                             # %for.inc482
                                        #   in Loop: Header=BB51_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB51_139
.LBB51_154:                             # %for.end484
	jmp	.LBB51_155
.LBB51_155:                             # %if.end485
	jmp	.LBB51_156
.LBB51_156:                             # %if.end486
	jmp	.LBB51_157
.LBB51_157:                             # %if.end487
	jmp	.LBB51_180
.LBB51_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB51_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB51_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB51_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB51_161 Depth=1
	movl	$0, -4(%rbp)
.LBB51_163:                             # %for.cond499
                                        #   Parent Loop BB51_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB51_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB51_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_163
.LBB51_166:                             # %for.end519
                                        #   in Loop: Header=BB51_161 Depth=1
	jmp	.LBB51_167
.LBB51_167:                             # %for.inc520
                                        #   in Loop: Header=BB51_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_161
.LBB51_168:                             # %for.end522
	jmp	.LBB51_169
.LBB51_169:                             # %if.end523
	jmp	.LBB51_179
.LBB51_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB51_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB51_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB51_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB51_171 Depth=1
	movl	$0, -4(%rbp)
.LBB51_173:                             # %for.cond529
                                        #   Parent Loop BB51_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB51_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB51_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB51_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB51_173
.LBB51_176:                             # %for.end541
                                        #   in Loop: Header=BB51_171 Depth=1
	jmp	.LBB51_177
.LBB51_177:                             # %for.inc542
                                        #   in Loop: Header=BB51_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB51_171
.LBB51_178:                             # %for.end544
	jmp	.LBB51_179
.LBB51_179:                             # %if.end545
	jmp	.LBB51_180
.LBB51_180:                             # %sw.epilog
	cmpl	$1851729911, -68(%rbp)  # imm = 0x6E5F27F7
	jne	.LBB51_182
.LBB51_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_181
.Lfunc_end51:
	.size	Conceal_Error.41, .Lfunc_end51-Conceal_Error.41
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI51_0:
	.quad	.LBB51_16
	.quad	.LBB51_158
	.quad	.LBB51_106
	.quad	.LBB51_180
	.quad	.LBB51_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.42 # -- Begin function compute_residue_b8block.42
	.p2align	4, 0x90
	.type	compute_residue_b8block.42,@function
compute_residue_b8block.42:             # @compute_residue_b8block.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2134379569, -36(%rbp)  # imm = 0x7F380C31
	movl	%edi, -28(%rbp)
	movl	%esi, -24(%rbp)
	movl	-28(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -32(%rbp)
	movl	-28(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB52_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB52_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB52_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB52_4:                               # %for.cond4
                                        #   Parent Loop BB52_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB52_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB52_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB52_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_4
.LBB52_7:                               # %for.end
                                        #   in Loop: Header=BB52_2 Depth=1
	jmp	.LBB52_8
.LBB52_8:                               # %for.inc22
                                        #   in Loop: Header=BB52_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_2
.LBB52_9:                               # %for.end24
	jmp	.LBB52_19
.LBB52_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB52_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB52_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB52_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB52_13:                              # %for.cond29
                                        #   Parent Loop BB52_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB52_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB52_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB52_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_13
.LBB52_16:                              # %for.end56
                                        #   in Loop: Header=BB52_11 Depth=1
	jmp	.LBB52_17
.LBB52_17:                              # %for.inc57
                                        #   in Loop: Header=BB52_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_11
.LBB52_18:                              # %for.end59
	jmp	.LBB52_19
.LBB52_19:                              # %if.end
	cmpl	$2134379569, -36(%rbp)  # imm = 0x7F380C31
	jne	.LBB52_21
.LBB52_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_20
.Lfunc_end52:
	.size	compute_residue_b8block.42, .Lfunc_end52-compute_residue_b8block.42
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.43 # -- Begin function compute_residue_b8block.43
	.p2align	4, 0x90
	.type	compute_residue_b8block.43,@function
compute_residue_b8block.43:             # @compute_residue_b8block.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1614629882, -36(%rbp)  # imm = 0x603D4BFA
	movl	%edi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	cmpl	$0, -20(%rbp)
	jl	.LBB53_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB53_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_4:                               # %for.cond4
                                        #   Parent Loop BB53_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB53_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB53_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-20(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB53_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_4
.LBB53_7:                               # %for.end
                                        #   in Loop: Header=BB53_2 Depth=1
	jmp	.LBB53_8
.LBB53_8:                               # %for.inc22
                                        #   in Loop: Header=BB53_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_2
.LBB53_9:                               # %for.end24
	jmp	.LBB53_19
.LBB53_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB53_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB53_13 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB53_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB53_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB53_13:                              # %for.cond29
                                        #   Parent Loop BB53_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB53_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB53_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB53_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB53_13
.LBB53_16:                              # %for.end56
                                        #   in Loop: Header=BB53_11 Depth=1
	jmp	.LBB53_17
.LBB53_17:                              # %for.inc57
                                        #   in Loop: Header=BB53_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB53_11
.LBB53_18:                              # %for.end59
	jmp	.LBB53_19
.LBB53_19:                              # %if.end
	cmpl	$1614629882, -36(%rbp)  # imm = 0x603D4BFA
	jne	.LBB53_21
.LBB53_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_20
.Lfunc_end53:
	.size	compute_residue_b8block.43, .Lfunc_end53-compute_residue_b8block.43
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.44        # -- Begin function Conceal_Error.44
	.p2align	4, 0x90
	.type	Conceal_Error.44,@function
Conceal_Error.44:                       # @Conceal_Error.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1756692162, -68(%rbp)  # imm = 0x68B4FEC2
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB54_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB54_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB54_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB54_4:                               # %land.end
.LBB54_5:                               # %lor.end
.LBB54_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB54_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB54_9
.LBB54_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB54_14
.LBB54_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB54_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB54_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB54_12:                              # %land.end51
.LBB54_13:                              # %lor.end53
.LBB54_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB54_180
# %bb.15:                               # %land.end54
	movq	.LJTI54_0(,%rax,8), %rax
	jmpq	*%rax
.LBB54_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB54_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB54_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB54_18 Depth=1
	movl	$0, -4(%rbp)
.LBB54_20:                              # %for.cond68
                                        #   Parent Loop BB54_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB54_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB54_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_20
.LBB54_23:                              # %for.end
                                        #   in Loop: Header=BB54_18 Depth=1
	jmp	.LBB54_24
.LBB54_24:                              # %for.inc85
                                        #   in Loop: Header=BB54_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_18
.LBB54_25:                              # %for.end87
	jmp	.LBB54_35
.LBB54_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB54_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB54_27 Depth=1
	movl	$0, -4(%rbp)
.LBB54_29:                              # %for.cond92
                                        #   Parent Loop BB54_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB54_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB54_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_29
.LBB54_32:                              # %for.end104
                                        #   in Loop: Header=BB54_27 Depth=1
	jmp	.LBB54_33
.LBB54_33:                              # %for.inc105
                                        #   in Loop: Header=BB54_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_27
.LBB54_34:                              # %for.end107
	jmp	.LBB54_35
.LBB54_35:                              # %if.end
	jmp	.LBB54_180
.LBB54_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB54_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_39 Depth 2
                                        #       Child Loop BB54_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB54_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB54_37 Depth=1
	movl	$0, -12(%rbp)
.LBB54_39:                              # %for.cond113
                                        #   Parent Loop BB54_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB54_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB54_39 Depth=2
	movl	$0, -4(%rbp)
.LBB54_41:                              # %for.cond117
                                        #   Parent Loop BB54_37 Depth=1
                                        #     Parent Loop BB54_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB54_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB54_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB54_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_41
.LBB54_44:                              # %for.end141
                                        #   in Loop: Header=BB54_39 Depth=2
	jmp	.LBB54_45
.LBB54_45:                              # %for.inc142
                                        #   in Loop: Header=BB54_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_39
.LBB54_46:                              # %for.end144
                                        #   in Loop: Header=BB54_37 Depth=1
	jmp	.LBB54_47
.LBB54_47:                              # %for.inc145
                                        #   in Loop: Header=BB54_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_37
.LBB54_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB54_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB54_49 Depth=1
	movl	$0, -8(%rbp)
.LBB54_51:                              # %for.cond152
                                        #   Parent Loop BB54_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB54_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB54_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_51
.LBB54_54:                              # %for.end162
                                        #   in Loop: Header=BB54_49 Depth=1
	jmp	.LBB54_55
.LBB54_55:                              # %for.inc163
                                        #   in Loop: Header=BB54_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_49
.LBB54_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB54_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB54_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB54_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB54_59 Depth=1
	movl	$0, -4(%rbp)
.LBB54_61:                              # %for.cond175
                                        #   Parent Loop BB54_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB54_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB54_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_61
.LBB54_64:                              # %for.end195
                                        #   in Loop: Header=BB54_59 Depth=1
	jmp	.LBB54_65
.LBB54_65:                              # %for.inc196
                                        #   in Loop: Header=BB54_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_59
.LBB54_66:                              # %for.end198
	jmp	.LBB54_95
.LBB54_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB54_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB54_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_71 Depth 2
                                        #       Child Loop BB54_73 Depth 3
                                        #         Child Loop BB54_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB54_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB54_71:                              # %for.cond210
                                        #   Parent Loop BB54_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_73 Depth 3
                                        #         Child Loop BB54_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB54_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB54_73:                              # %for.cond236
                                        #   Parent Loop BB54_69 Depth=1
                                        #     Parent Loop BB54_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB54_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB54_73 Depth=3
	movl	$0, -4(%rbp)
.LBB54_75:                              # %for.cond240
                                        #   Parent Loop BB54_69 Depth=1
                                        #     Parent Loop BB54_71 Depth=2
                                        #       Parent Loop BB54_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB54_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB54_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB54_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_75
.LBB54_78:                              # %for.end259
                                        #   in Loop: Header=BB54_73 Depth=3
	jmp	.LBB54_79
.LBB54_79:                              # %for.inc260
                                        #   in Loop: Header=BB54_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_73
.LBB54_80:                              # %for.end262
                                        #   in Loop: Header=BB54_71 Depth=2
	jmp	.LBB54_81
.LBB54_81:                              # %for.inc263
                                        #   in Loop: Header=BB54_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_71
.LBB54_82:                              # %for.end265
                                        #   in Loop: Header=BB54_69 Depth=1
	jmp	.LBB54_83
.LBB54_83:                              # %for.inc266
                                        #   in Loop: Header=BB54_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_69
.LBB54_84:                              # %for.end268
	jmp	.LBB54_94
.LBB54_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB54_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB54_86 Depth=1
	movl	$0, -4(%rbp)
.LBB54_88:                              # %for.cond274
                                        #   Parent Loop BB54_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB54_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB54_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_88
.LBB54_91:                              # %for.end294
                                        #   in Loop: Header=BB54_86 Depth=1
	jmp	.LBB54_92
.LBB54_92:                              # %for.inc295
                                        #   in Loop: Header=BB54_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_86
.LBB54_93:                              # %for.end297
	jmp	.LBB54_94
.LBB54_94:                              # %if.end298
	jmp	.LBB54_95
.LBB54_95:                              # %if.end299
	jmp	.LBB54_105
.LBB54_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB54_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB54_97 Depth=1
	movl	$0, -4(%rbp)
.LBB54_99:                              # %for.cond305
                                        #   Parent Loop BB54_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB54_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB54_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_99
.LBB54_102:                             # %for.end317
                                        #   in Loop: Header=BB54_97 Depth=1
	jmp	.LBB54_103
.LBB54_103:                             # %for.inc318
                                        #   in Loop: Header=BB54_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_97
.LBB54_104:                             # %for.end320
	jmp	.LBB54_105
.LBB54_105:                             # %if.end321
	jmp	.LBB54_180
.LBB54_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB54_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB54_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_110 Depth 2
                                        #       Child Loop BB54_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB54_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB54_108 Depth=1
	movl	$0, -12(%rbp)
.LBB54_110:                             # %for.cond331
                                        #   Parent Loop BB54_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB54_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB54_110 Depth=2
	movl	$0, -4(%rbp)
.LBB54_112:                             # %for.cond335
                                        #   Parent Loop BB54_108 Depth=1
                                        #     Parent Loop BB54_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB54_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB54_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB54_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_112
.LBB54_115:                             # %for.end359
                                        #   in Loop: Header=BB54_110 Depth=2
	jmp	.LBB54_116
.LBB54_116:                             # %for.inc360
                                        #   in Loop: Header=BB54_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_110
.LBB54_117:                             # %for.end362
                                        #   in Loop: Header=BB54_108 Depth=1
	jmp	.LBB54_118
.LBB54_118:                             # %for.inc363
                                        #   in Loop: Header=BB54_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_108
.LBB54_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB54_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB54_120 Depth=1
	movl	$0, -8(%rbp)
.LBB54_122:                             # %for.cond370
                                        #   Parent Loop BB54_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB54_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB54_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_122
.LBB54_125:                             # %for.end380
                                        #   in Loop: Header=BB54_120 Depth=1
	jmp	.LBB54_126
.LBB54_126:                             # %for.inc381
                                        #   in Loop: Header=BB54_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_120
.LBB54_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB54_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB54_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB54_129 Depth=1
	movl	$0, -4(%rbp)
.LBB54_131:                             # %for.cond390
                                        #   Parent Loop BB54_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB54_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB54_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_131
.LBB54_134:                             # %for.end410
                                        #   in Loop: Header=BB54_129 Depth=1
	jmp	.LBB54_135
.LBB54_135:                             # %for.inc411
                                        #   in Loop: Header=BB54_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_129
.LBB54_136:                             # %for.end413
	jmp	.LBB54_156
.LBB54_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB54_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB54_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_141 Depth 2
                                        #       Child Loop BB54_143 Depth 3
                                        #         Child Loop BB54_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB54_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB54_141:                             # %for.cond425
                                        #   Parent Loop BB54_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB54_143 Depth 3
                                        #         Child Loop BB54_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB54_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB54_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB54_143:                             # %for.cond452
                                        #   Parent Loop BB54_139 Depth=1
                                        #     Parent Loop BB54_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB54_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB54_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB54_143 Depth=3
	movl	$0, -4(%rbp)
.LBB54_145:                             # %for.cond456
                                        #   Parent Loop BB54_139 Depth=1
                                        #     Parent Loop BB54_141 Depth=2
                                        #       Parent Loop BB54_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB54_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB54_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB54_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_145
.LBB54_148:                             # %for.end475
                                        #   in Loop: Header=BB54_143 Depth=3
	jmp	.LBB54_149
.LBB54_149:                             # %for.inc476
                                        #   in Loop: Header=BB54_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_143
.LBB54_150:                             # %for.end478
                                        #   in Loop: Header=BB54_141 Depth=2
	jmp	.LBB54_151
.LBB54_151:                             # %for.inc479
                                        #   in Loop: Header=BB54_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB54_141
.LBB54_152:                             # %for.end481
                                        #   in Loop: Header=BB54_139 Depth=1
	jmp	.LBB54_153
.LBB54_153:                             # %for.inc482
                                        #   in Loop: Header=BB54_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB54_139
.LBB54_154:                             # %for.end484
	jmp	.LBB54_155
.LBB54_155:                             # %if.end485
	jmp	.LBB54_156
.LBB54_156:                             # %if.end486
	jmp	.LBB54_157
.LBB54_157:                             # %if.end487
	jmp	.LBB54_180
.LBB54_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB54_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB54_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB54_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB54_161 Depth=1
	movl	$0, -4(%rbp)
.LBB54_163:                             # %for.cond499
                                        #   Parent Loop BB54_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB54_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB54_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_163
.LBB54_166:                             # %for.end519
                                        #   in Loop: Header=BB54_161 Depth=1
	jmp	.LBB54_167
.LBB54_167:                             # %for.inc520
                                        #   in Loop: Header=BB54_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_161
.LBB54_168:                             # %for.end522
	jmp	.LBB54_169
.LBB54_169:                             # %if.end523
	jmp	.LBB54_179
.LBB54_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB54_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB54_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB54_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB54_171 Depth=1
	movl	$0, -4(%rbp)
.LBB54_173:                             # %for.cond529
                                        #   Parent Loop BB54_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB54_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB54_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB54_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB54_173
.LBB54_176:                             # %for.end541
                                        #   in Loop: Header=BB54_171 Depth=1
	jmp	.LBB54_177
.LBB54_177:                             # %for.inc542
                                        #   in Loop: Header=BB54_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB54_171
.LBB54_178:                             # %for.end544
	jmp	.LBB54_179
.LBB54_179:                             # %if.end545
	jmp	.LBB54_180
.LBB54_180:                             # %sw.epilog
	cmpl	$1756692162, -68(%rbp)  # imm = 0x68B4FEC2
	jne	.LBB54_182
.LBB54_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_181
.Lfunc_end54:
	.size	Conceal_Error.44, .Lfunc_end54-Conceal_Error.44
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI54_0:
	.quad	.LBB54_16
	.quad	.LBB54_158
	.quad	.LBB54_106
	.quad	.LBB54_180
	.quad	.LBB54_36
                                        # -- End function
	.text
	.globl	compute_residue_b8block.45 # -- Begin function compute_residue_b8block.45
	.p2align	4, 0x90
	.type	compute_residue_b8block.45,@function
compute_residue_b8block.45:             # @compute_residue_b8block.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1641567519, -36(%rbp)  # imm = 0x61D8551F
	movl	%edi, -20(%rbp)
	movl	%esi, -32(%rbp)
	movl	-20(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -24(%rbp)
	cmpl	$0, -32(%rbp)
	jl	.LBB55_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB55_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_4:                               # %for.cond4
                                        #   Parent Loop BB55_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB55_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB55_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-32(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB55_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_4
.LBB55_7:                               # %for.end
                                        #   in Loop: Header=BB55_2 Depth=1
	jmp	.LBB55_8
.LBB55_8:                               # %for.inc22
                                        #   in Loop: Header=BB55_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_2
.LBB55_9:                               # %for.end24
	jmp	.LBB55_19
.LBB55_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB55_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB55_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB55_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB55_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB55_13:                              # %for.cond29
                                        #   Parent Loop BB55_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB55_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB55_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB55_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_13
.LBB55_16:                              # %for.end56
                                        #   in Loop: Header=BB55_11 Depth=1
	jmp	.LBB55_17
.LBB55_17:                              # %for.inc57
                                        #   in Loop: Header=BB55_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB55_11
.LBB55_18:                              # %for.end59
	jmp	.LBB55_19
.LBB55_19:                              # %if.end
	cmpl	$1641567519, -36(%rbp)  # imm = 0x61D8551F
	jne	.LBB55_21
.LBB55_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_20
.Lfunc_end55:
	.size	compute_residue_b8block.45, .Lfunc_end55-compute_residue_b8block.45
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.46  # -- Begin function Get_Reference_Pixel.46
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.46,@function
Get_Reference_Pixel.46:                 # @Get_Reference_Pixel.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1910326445, -100(%rbp) # imm = 0x71DD44AD
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB56_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB56_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB56_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB56_5
.LBB56_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB56_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB56_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB56_11
.LBB56_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB56_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB56_10
.LBB56_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB56_10:                              # %cond.end14
.LBB56_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB56_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB56_14
.LBB56_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB56_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB56_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB56_20
.LBB56_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB56_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB56_19
.LBB56_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB56_19:                              # %cond.end29
.LBB56_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB56_332
.LBB56_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB56_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB56_25
.LBB56_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB56_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB56_31
.LBB56_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB56_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB56_30
.LBB56_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB56_30:                              # %cond.end52
.LBB56_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB56_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_36
.LBB56_35:                              # %cond.false61
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_36:                              # %cond.end63
                                        #   in Loop: Header=BB56_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB56_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_42
.LBB56_38:                              # %cond.false68
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_41
.LBB56_40:                              # %cond.false73
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_41:                              # %cond.end75
                                        #   in Loop: Header=BB56_32 Depth=1
.LBB56_42:                              # %cond.end77
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB56_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_32
.LBB56_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_47
.LBB56_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB56_53
.LBB56_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_52
.LBB56_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_52:                              # %cond.end113
.LBB56_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB56_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB56_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB56_57
.LBB56_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB56_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB56_63
.LBB56_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB56_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB56_62
.LBB56_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB56_62:                              # %cond.end136
.LBB56_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_76
.LBB56_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB56_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB56_68
.LBB56_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB56_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB56_74
.LBB56_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB56_73
.LBB56_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB56_73:                              # %cond.end169
.LBB56_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_75:                              # %if.end
	jmp	.LBB56_76
.LBB56_76:                              # %if.end178
	jmp	.LBB56_331
.LBB56_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB56_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB56_81
.LBB56_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB56_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB56_87
.LBB56_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB56_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB56_86
.LBB56_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB56_86:                              # %cond.end197
.LBB56_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB56_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_92
.LBB56_91:                              # %cond.false209
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_92:                              # %cond.end211
                                        #   in Loop: Header=BB56_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB56_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_98
.LBB56_94:                              # %cond.false216
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_97
.LBB56_96:                              # %cond.false221
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_97:                              # %cond.end223
                                        #   in Loop: Header=BB56_88 Depth=1
.LBB56_98:                              # %cond.end225
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB56_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_88
.LBB56_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_103
.LBB56_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB56_109
.LBB56_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_108
.LBB56_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_108:                             # %cond.end266
.LBB56_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB56_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB56_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB56_113
.LBB56_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB56_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB56_119
.LBB56_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB56_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB56_118
.LBB56_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB56_118:                             # %cond.end287
.LBB56_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_132
.LBB56_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB56_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB56_124
.LBB56_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB56_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB56_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB56_130
.LBB56_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB56_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB56_129
.LBB56_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB56_129:                             # %cond.end320
.LBB56_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_131:                             # %if.end331
	jmp	.LBB56_132
.LBB56_132:                             # %if.end332
	jmp	.LBB56_330
.LBB56_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB56_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB56_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB56_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_139
.LBB56_138:                             # %cond.false345
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_139:                             # %cond.end347
                                        #   in Loop: Header=BB56_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB56_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_145
.LBB56_141:                             # %cond.false352
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_144
.LBB56_143:                             # %cond.false357
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_144:                             # %cond.end359
                                        #   in Loop: Header=BB56_135 Depth=1
.LBB56_145:                             # %cond.end361
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_146:                             # %for.cond363
                                        #   Parent Loop BB56_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB56_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB56_150
.LBB56_149:                             # %cond.false371
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_150:                             # %cond.end373
                                        #   in Loop: Header=BB56_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB56_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_156
.LBB56_152:                             # %cond.false378
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB56_155
.LBB56_154:                             # %cond.false383
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_155:                             # %cond.end385
                                        #   in Loop: Header=BB56_146 Depth=2
.LBB56_156:                             # %cond.end387
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB56_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_146
.LBB56_158:                             # %for.end401
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB56_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_135
.LBB56_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB56_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB56_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB56_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_161
.LBB56_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_167
.LBB56_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB56_173
.LBB56_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_172
.LBB56_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_172:                             # %cond.end449
.LBB56_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB56_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_177
.LBB56_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB56_183
.LBB56_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_182
.LBB56_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_182:                             # %cond.end486
.LBB56_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_196
.LBB56_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB56_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_188
.LBB56_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB56_194
.LBB56_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_193
.LBB56_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_193:                             # %cond.end526
.LBB56_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_195:                             # %if.end532
	jmp	.LBB56_196
.LBB56_196:                             # %if.end533
	jmp	.LBB56_329
.LBB56_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB56_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB56_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB56_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_203
.LBB56_202:                             # %cond.false546
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_203:                             # %cond.end548
                                        #   in Loop: Header=BB56_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB56_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_209
.LBB56_205:                             # %cond.false553
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_208
.LBB56_207:                             # %cond.false558
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_208:                             # %cond.end560
                                        #   in Loop: Header=BB56_199 Depth=1
.LBB56_209:                             # %cond.end562
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_210:                             # %for.cond564
                                        #   Parent Loop BB56_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB56_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB56_214
.LBB56_213:                             # %cond.false572
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_214:                             # %cond.end574
                                        #   in Loop: Header=BB56_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB56_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB56_220
.LBB56_216:                             # %cond.false579
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB56_219
.LBB56_218:                             # %cond.false584
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_219:                             # %cond.end586
                                        #   in Loop: Header=BB56_210 Depth=2
.LBB56_220:                             # %cond.end588
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB56_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_210
.LBB56_222:                             # %for.end602
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB56_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_199
.LBB56_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB56_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB56_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB56_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_225
.LBB56_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_231
.LBB56_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB56_237
.LBB56_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_236
.LBB56_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB56_236:                             # %cond.end650
.LBB56_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB56_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_241
.LBB56_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB56_247
.LBB56_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_246
.LBB56_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_246:                             # %cond.end687
.LBB56_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB56_258
.LBB56_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_251
.LBB56_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB56_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB56_257
.LBB56_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB56_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_256
.LBB56_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB56_256:                             # %cond.end724
.LBB56_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_258:                             # %if.end730
	jmp	.LBB56_328
.LBB56_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB56_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB56_262
.LBB56_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB56_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB56_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB56_265
.LBB56_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB56_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB56_271
.LBB56_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB56_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB56_270
.LBB56_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB56_270:                             # %cond.end753
.LBB56_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -16(%rbp)
.LBB56_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB56_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_276
.LBB56_275:                             # %cond.false765
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_276:                             # %cond.end767
                                        #   in Loop: Header=BB56_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB56_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_282
.LBB56_278:                             # %cond.false772
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB56_281
.LBB56_280:                             # %cond.false777
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB56_281:                             # %cond.end779
                                        #   in Loop: Header=BB56_272 Depth=1
.LBB56_282:                             # %cond.end781
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB56_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB56_272
.LBB56_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_287
.LBB56_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB56_293
.LBB56_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_292
.LBB56_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_292:                             # %cond.end822
.LBB56_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB56_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB56_296
.LBB56_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB56_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB56_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB56_299
.LBB56_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB56_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB56_305
.LBB56_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB56_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB56_304
.LBB56_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB56_304:                             # %cond.end847
.LBB56_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -20(%rbp)
.LBB56_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB56_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_310
.LBB56_309:                             # %cond.false859
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_310:                             # %cond.end861
                                        #   in Loop: Header=BB56_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB56_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB56_316
.LBB56_312:                             # %cond.false866
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB56_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB56_315
.LBB56_314:                             # %cond.false871
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB56_315:                             # %cond.end873
                                        #   in Loop: Header=BB56_306 Depth=1
.LBB56_316:                             # %cond.end875
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB56_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB56_306
.LBB56_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_321
.LBB56_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB56_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB56_327
.LBB56_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB56_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB56_326
.LBB56_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB56_326:                             # %cond.end916
.LBB56_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB56_328:                             # %if.end922
	jmp	.LBB56_329
.LBB56_329:                             # %if.end923
	jmp	.LBB56_330
.LBB56_330:                             # %if.end924
	jmp	.LBB56_331
.LBB56_331:                             # %if.end925
	jmp	.LBB56_332
.LBB56_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1910326445, -100(%rbp) # imm = 0x71DD44AD
	jne	.LBB56_334
.LBB56_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_333
.Lfunc_end56:
	.size	Get_Reference_Pixel.46, .Lfunc_end56-Get_Reference_Pixel.46
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.47    # -- Begin function Error_Concealment.47
	.p2align	4, 0x90
	.type	Error_Concealment.47,@function
Error_Concealment.47:                   # @Error_Concealment.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1593216039, -20(%rbp)  # imm = 0x5EF68C27
	movq	%rdi, -48(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB57_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB57_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB57_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	$0, -4(%rbp)
.LBB57_3:                               # %for.cond2
                                        #   Parent Loop BB57_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB57_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB57_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB57_3 Depth=2
	movq	-48(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-40(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB57_6:                               # %if.end
                                        #   in Loop: Header=BB57_3 Depth=2
	jmp	.LBB57_7
.LBB57_7:                               # %for.inc
                                        #   in Loop: Header=BB57_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB57_3
.LBB57_8:                               # %for.end
                                        #   in Loop: Header=BB57_1 Depth=1
	jmp	.LBB57_9
.LBB57_9:                               # %for.inc7
                                        #   in Loop: Header=BB57_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB57_1
.LBB57_10:                              # %for.end9
	cmpl	$1593216039, -20(%rbp)  # imm = 0x5EF68C27
	jne	.LBB57_12
.LBB57_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_11
.Lfunc_end57:
	.size	Error_Concealment.47, .Lfunc_end57-Error_Concealment.47
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.48  # -- Begin function Get_Reference_Pixel.48
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.48,@function
Get_Reference_Pixel.48:                 # @Get_Reference_Pixel.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$244452127, -100(%rbp)  # imm = 0xE920B1F
	movq	%rdi, -64(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -28(%rbp)
	movl	$0, -12(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-28(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movl	-24(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB58_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB58_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB58_4
# %bb.3:                                # %cond.true
	movl	-32(%rbp), %ecx
	jmp	.LBB58_5
.LBB58_4:                               # %cond.false
	movl	-24(%rbp), %ecx
.LBB58_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB58_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB58_11
.LBB58_7:                               # %cond.false10
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB58_9
# %bb.8:                                # %cond.true12
	movl	-32(%rbp), %ecx
	jmp	.LBB58_10
.LBB58_9:                               # %cond.false13
	movl	-24(%rbp), %ecx
.LBB58_10:                              # %cond.end14
.LBB58_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB58_13
# %bb.12:                               # %cond.true19
	movl	-36(%rbp), %ecx
	jmp	.LBB58_14
.LBB58_13:                              # %cond.false20
	movl	-28(%rbp), %ecx
.LBB58_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB58_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB58_20
.LBB58_16:                              # %cond.false25
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB58_18
# %bb.17:                               # %cond.true27
	movl	-36(%rbp), %ecx
	jmp	.LBB58_19
.LBB58_18:                              # %cond.false28
	movl	-28(%rbp), %ecx
.LBB58_19:                              # %cond.end29
.LBB58_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB58_332
.LBB58_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB58_77
# %bb.22:                               # %if.then37
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB58_24
# %bb.23:                               # %cond.true40
	movl	-32(%rbp), %eax
	jmp	.LBB58_25
.LBB58_24:                              # %cond.false41
	movl	-24(%rbp), %eax
.LBB58_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB58_31
.LBB58_27:                              # %cond.false47
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB58_29
# %bb.28:                               # %cond.true50
	movl	-32(%rbp), %eax
	jmp	.LBB58_30
.LBB58_29:                              # %cond.false51
	movl	-24(%rbp), %eax
.LBB58_30:                              # %cond.end52
.LBB58_31:                              # %cond.end54
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB58_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_36
.LBB58_35:                              # %cond.false61
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_36:                              # %cond.end63
                                        #   in Loop: Header=BB58_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB58_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_42
.LBB58_38:                              # %cond.false68
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_41
.LBB58_40:                              # %cond.false73
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_41:                              # %cond.end75
                                        #   in Loop: Header=BB58_32 Depth=1
.LBB58_42:                              # %cond.end77
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB58_32 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_32
.LBB58_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_47
.LBB58_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB58_53
.LBB58_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_52
.LBB58_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_52:                              # %cond.end113
.LBB58_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB58_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB58_56
# %bb.55:                               # %cond.true124
	movl	-36(%rbp), %edx
	jmp	.LBB58_57
.LBB58_56:                              # %cond.false125
	movl	-28(%rbp), %edx
.LBB58_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB58_63
.LBB58_59:                              # %cond.false131
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB58_61
# %bb.60:                               # %cond.true134
	movl	-36(%rbp), %edx
	jmp	.LBB58_62
.LBB58_61:                              # %cond.false135
	movl	-28(%rbp), %edx
.LBB58_62:                              # %cond.end136
.LBB58_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_76
.LBB58_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB58_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_67
# %bb.66:                               # %cond.true154
	movl	-36(%rbp), %edx
	jmp	.LBB58_68
.LBB58_67:                              # %cond.false155
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB58_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB58_74
.LBB58_70:                              # %cond.false162
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_72
# %bb.71:                               # %cond.true166
	movl	-36(%rbp), %edx
	jmp	.LBB58_73
.LBB58_72:                              # %cond.false167
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB58_73:                              # %cond.end169
.LBB58_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_75:                              # %if.end
	jmp	.LBB58_76
.LBB58_76:                              # %if.end178
	jmp	.LBB58_331
.LBB58_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB58_133
# %bb.78:                               # %if.then182
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_80
# %bb.79:                               # %cond.true185
	movl	-36(%rbp), %eax
	jmp	.LBB58_81
.LBB58_80:                              # %cond.false186
	movl	-28(%rbp), %eax
.LBB58_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB58_87
.LBB58_83:                              # %cond.false192
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB58_85
# %bb.84:                               # %cond.true195
	movl	-36(%rbp), %eax
	jmp	.LBB58_86
.LBB58_85:                              # %cond.false196
	movl	-28(%rbp), %eax
.LBB58_86:                              # %cond.end197
.LBB58_87:                              # %cond.end199
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB58_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_92
.LBB58_91:                              # %cond.false209
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_92:                              # %cond.end211
                                        #   in Loop: Header=BB58_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB58_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_98
.LBB58_94:                              # %cond.false216
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_97
.LBB58_96:                              # %cond.false221
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_97:                              # %cond.end223
                                        #   in Loop: Header=BB58_88 Depth=1
.LBB58_98:                              # %cond.end225
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB58_88 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_88
.LBB58_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_103
.LBB58_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB58_109
.LBB58_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_108
.LBB58_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_108:                             # %cond.end266
.LBB58_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB58_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB58_112
# %bb.111:                              # %cond.true275
	movl	-32(%rbp), %edx
	jmp	.LBB58_113
.LBB58_112:                             # %cond.false276
	movl	-24(%rbp), %edx
.LBB58_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB58_119
.LBB58_115:                             # %cond.false282
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB58_117
# %bb.116:                              # %cond.true285
	movl	-32(%rbp), %edx
	jmp	.LBB58_118
.LBB58_117:                             # %cond.false286
	movl	-24(%rbp), %edx
.LBB58_118:                             # %cond.end287
.LBB58_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_132
.LBB58_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB58_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_123
# %bb.122:                              # %cond.true305
	movl	-32(%rbp), %edx
	jmp	.LBB58_124
.LBB58_123:                             # %cond.false306
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB58_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB58_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB58_130
.LBB58_126:                             # %cond.false313
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB58_128
# %bb.127:                              # %cond.true317
	movl	-32(%rbp), %edx
	jmp	.LBB58_129
.LBB58_128:                             # %cond.false318
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB58_129:                             # %cond.end320
.LBB58_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-40(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_131:                             # %if.end331
	jmp	.LBB58_132
.LBB58_132:                             # %if.end332
	jmp	.LBB58_330
.LBB58_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB58_197
# %bb.134:                              # %if.then336
	movl	$-2, -20(%rbp)
.LBB58_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_146 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB58_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_139
.LBB58_138:                             # %cond.false345
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_139:                             # %cond.end347
                                        #   in Loop: Header=BB58_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB58_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_145
.LBB58_141:                             # %cond.false352
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_144
.LBB58_143:                             # %cond.false357
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_144:                             # %cond.end359
                                        #   in Loop: Header=BB58_135 Depth=1
.LBB58_145:                             # %cond.end361
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_146:                             # %for.cond363
                                        #   Parent Loop BB58_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB58_150
.LBB58_149:                             # %cond.false371
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_150:                             # %cond.end373
                                        #   in Loop: Header=BB58_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB58_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_156
.LBB58_152:                             # %cond.false378
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB58_155
.LBB58_154:                             # %cond.false383
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_155:                             # %cond.end385
                                        #   in Loop: Header=BB58_146 Depth=2
.LBB58_156:                             # %cond.end387
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB58_146 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_146
.LBB58_158:                             # %for.end401
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB58_135 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_135
.LBB58_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB58_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB58_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB58_161 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_161
.LBB58_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_167
.LBB58_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB58_173
.LBB58_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_172
.LBB58_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_172:                             # %cond.end449
.LBB58_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB58_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_177
.LBB58_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB58_183
.LBB58_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_182
.LBB58_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_182:                             # %cond.end486
.LBB58_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_196
.LBB58_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB58_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_188
.LBB58_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB58_194
.LBB58_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_193
.LBB58_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_193:                             # %cond.end526
.LBB58_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_195:                             # %if.end532
	jmp	.LBB58_196
.LBB58_196:                             # %if.end533
	jmp	.LBB58_329
.LBB58_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB58_259
# %bb.198:                              # %if.then537
	movl	$-2, -16(%rbp)
.LBB58_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB58_210 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB58_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_203
.LBB58_202:                             # %cond.false546
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_203:                             # %cond.end548
                                        #   in Loop: Header=BB58_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB58_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_209
.LBB58_205:                             # %cond.false553
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_208
.LBB58_207:                             # %cond.false558
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_208:                             # %cond.end560
                                        #   in Loop: Header=BB58_199 Depth=1
.LBB58_209:                             # %cond.end562
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_210:                             # %for.cond564
                                        #   Parent Loop BB58_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB58_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB58_214
.LBB58_213:                             # %cond.false572
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_214:                             # %cond.end574
                                        #   in Loop: Header=BB58_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB58_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB58_220
.LBB58_216:                             # %cond.false579
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB58_219
.LBB58_218:                             # %cond.false584
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_219:                             # %cond.end586
                                        #   in Loop: Header=BB58_210 Depth=2
.LBB58_220:                             # %cond.end588
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB58_210 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_210
.LBB58_222:                             # %for.end602
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB58_199 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_199
.LBB58_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB58_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB58_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB58_225 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_225
.LBB58_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_231
.LBB58_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB58_237
.LBB58_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_236
.LBB58_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB58_236:                             # %cond.end650
.LBB58_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB58_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_241
.LBB58_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB58_247
.LBB58_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_246
.LBB58_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_246:                             # %cond.end687
.LBB58_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB58_258
.LBB58_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_251
.LBB58_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB58_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB58_257
.LBB58_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB58_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_256
.LBB58_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB58_256:                             # %cond.end724
.LBB58_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_258:                             # %if.end730
	jmp	.LBB58_328
.LBB58_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB58_261
# %bb.260:                              # %cond.true734
	movl	-24(%rbp), %eax
	jmp	.LBB58_262
.LBB58_261:                             # %cond.false735
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB58_262:                             # %cond.end737
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_264
# %bb.263:                              # %cond.true741
	movl	-32(%rbp), %eax
	jmp	.LBB58_265
.LBB58_264:                             # %cond.false742
	movl	-44(%rbp), %eax
.LBB58_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB58_271
.LBB58_267:                             # %cond.false748
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB58_269
# %bb.268:                              # %cond.true751
	movl	-32(%rbp), %eax
	jmp	.LBB58_270
.LBB58_269:                             # %cond.false752
	movl	-44(%rbp), %eax
.LBB58_270:                             # %cond.end753
.LBB58_271:                             # %cond.end755
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB58_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB58_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_276
.LBB58_275:                             # %cond.false765
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_276:                             # %cond.end767
                                        #   in Loop: Header=BB58_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB58_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_282
.LBB58_278:                             # %cond.false772
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB58_281
.LBB58_280:                             # %cond.false777
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB58_281:                             # %cond.end779
                                        #   in Loop: Header=BB58_272 Depth=1
.LBB58_282:                             # %cond.end781
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB58_272 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB58_272
.LBB58_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_287
.LBB58_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB58_293
.LBB58_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_292
.LBB58_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_292:                             # %cond.end822
.LBB58_293:                             # %cond.end824
	movl	%eax, -104(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB58_295
# %bb.294:                              # %cond.true828
	movl	-28(%rbp), %eax
	jmp	.LBB58_296
.LBB58_295:                             # %cond.false829
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB58_296:                             # %cond.end831
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB58_298
# %bb.297:                              # %cond.true835
	movl	-36(%rbp), %eax
	jmp	.LBB58_299
.LBB58_298:                             # %cond.false836
	movl	-40(%rbp), %eax
.LBB58_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB58_305
.LBB58_301:                             # %cond.false842
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB58_303
# %bb.302:                              # %cond.true845
	movl	-36(%rbp), %eax
	jmp	.LBB58_304
.LBB58_303:                             # %cond.false846
	movl	-40(%rbp), %eax
.LBB58_304:                             # %cond.end847
.LBB58_305:                             # %cond.end849
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB58_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB58_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_310
.LBB58_309:                             # %cond.false859
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_310:                             # %cond.end861
                                        #   in Loop: Header=BB58_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB58_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB58_316
.LBB58_312:                             # %cond.false866
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB58_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB58_315
.LBB58_314:                             # %cond.false871
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB58_315:                             # %cond.end873
                                        #   in Loop: Header=BB58_306 Depth=1
.LBB58_316:                             # %cond.end875
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-44(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-40(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB58_306 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB58_306
.LBB58_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_321
.LBB58_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB58_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB58_327
.LBB58_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB58_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB58_326
.LBB58_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB58_326:                             # %cond.end916
.LBB58_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-104(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB58_328:                             # %if.end922
	jmp	.LBB58_329
.LBB58_329:                             # %if.end923
	jmp	.LBB58_330
.LBB58_330:                             # %if.end924
	jmp	.LBB58_331
.LBB58_331:                             # %if.end925
	jmp	.LBB58_332
.LBB58_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$244452127, -100(%rbp)  # imm = 0xE920B1F
	jne	.LBB58_334
.LBB58_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_333
.Lfunc_end58:
	.size	Get_Reference_Pixel.48, .Lfunc_end58-Get_Reference_Pixel.48
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.49    # -- Begin function Error_Concealment.49
	.p2align	4, 0x90
	.type	Error_Concealment.49,@function
Error_Concealment.49:                   # @Error_Concealment.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$195157596, -16(%rbp)   # imm = 0xBA1DE5C
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -20(%rbp)
	movl	$0, -4(%rbp)
.LBB59_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB59_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB59_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	$0, -8(%rbp)
.LBB59_3:                               # %for.cond2
                                        #   Parent Loop BB59_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB59_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB59_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB59_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB59_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-4(%rbp), %esi
	movl	-8(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB59_6:                               # %if.end
                                        #   in Loop: Header=BB59_3 Depth=2
	jmp	.LBB59_7
.LBB59_7:                               # %for.inc
                                        #   in Loop: Header=BB59_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB59_3
.LBB59_8:                               # %for.end
                                        #   in Loop: Header=BB59_1 Depth=1
	jmp	.LBB59_9
.LBB59_9:                               # %for.inc7
                                        #   in Loop: Header=BB59_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB59_1
.LBB59_10:                              # %for.end9
	cmpl	$195157596, -16(%rbp)   # imm = 0xBA1DE5C
	jne	.LBB59_12
.LBB59_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_11
.Lfunc_end59:
	.size	Error_Concealment.49, .Lfunc_end59-Error_Concealment.49
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.50   # -- Begin function decode_one_b8block.50
	.p2align	4, 0x90
	.type	decode_one_b8block.50,@function
decode_one_b8block.50:                  # @decode_one_b8block.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$508342921, -84(%rbp)   # imm = 0x1E4CB289
	movl	%edi, -48(%rbp)
	movl	%esi, -76(%rbp)
	movl	%edx, -64(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
	movl	-64(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -44(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-64(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB60_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB60_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_4:                               # %for.cond9
                                        #   Parent Loop BB60_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB60_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB60_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_4
.LBB60_7:                               # %for.end
                                        #   in Loop: Header=BB60_2 Depth=1
	jmp	.LBB60_8
.LBB60_8:                               # %for.inc26
                                        #   in Loop: Header=BB60_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_2
.LBB60_9:                               # %for.end28
	jmp	.LBB60_96
.LBB60_10:                              # %if.else
	cmpl	$0, -76(%rbp)
	jne	.LBB60_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB60_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB60_31
.LBB60_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB60_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB60_15 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_17:                              # %for.cond40
                                        #   Parent Loop BB60_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB60_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB60_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_17
.LBB60_20:                              # %for.end49
                                        #   in Loop: Header=BB60_15 Depth=1
	jmp	.LBB60_21
.LBB60_21:                              # %for.inc50
                                        #   in Loop: Header=BB60_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_15
.LBB60_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_25:                              # %for.cond56
                                        #   Parent Loop BB60_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB60_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB60_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_25
.LBB60_28:                              # %for.end71
                                        #   in Loop: Header=BB60_23 Depth=1
	jmp	.LBB60_29
.LBB60_29:                              # %for.inc72
                                        #   in Loop: Header=BB60_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_23
.LBB60_30:                              # %for.end74
	jmp	.LBB60_60
.LBB60_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB60_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB60_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_36:                              # %for.cond83
                                        #   Parent Loop BB60_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB60_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB60_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_36
.LBB60_39:                              # %for.end120
                                        #   in Loop: Header=BB60_34 Depth=1
	jmp	.LBB60_40
.LBB60_40:                              # %for.inc121
                                        #   in Loop: Header=BB60_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_34
.LBB60_41:                              # %for.end123
	jmp	.LBB60_51
.LBB60_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB60_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_45:                              # %for.cond129
                                        #   Parent Loop BB60_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB60_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB60_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_45
.LBB60_48:                              # %for.end145
                                        #   in Loop: Header=BB60_43 Depth=1
	jmp	.LBB60_49
.LBB60_49:                              # %for.inc146
                                        #   in Loop: Header=BB60_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_43
.LBB60_50:                              # %for.end148
	jmp	.LBB60_51
.LBB60_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB60_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB60_52 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_54:                              # %for.cond153
                                        #   Parent Loop BB60_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB60_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB60_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_54
.LBB60_57:                              # %for.end167
                                        #   in Loop: Header=BB60_52 Depth=1
	jmp	.LBB60_58
.LBB60_58:                              # %for.inc168
                                        #   in Loop: Header=BB60_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_52
.LBB60_59:                              # %for.end170
	jmp	.LBB60_60
.LBB60_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB60_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB60_66
.LBB60_62:                              # %lor.lhs.false177
	cmpl	$0, -76(%rbp)
	jne	.LBB60_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB60_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB60_86
.LBB60_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB60_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_69 Depth 2
                                        #       Child Loop BB60_74 Depth 3
                                        #         Child Loop BB60_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB60_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB60_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB60_69:                              # %for.cond197
                                        #   Parent Loop BB60_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB60_74 Depth 3
                                        #         Child Loop BB60_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB60_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB60_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -72(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB60_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB60_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB60_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB60_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -80(%rbp)
.LBB60_73:                              # %if.end218
                                        #   in Loop: Header=BB60_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-80(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-72(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB60_74:                              # %for.cond233
                                        #   Parent Loop BB60_67 Depth=1
                                        #     Parent Loop BB60_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB60_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB60_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB60_74 Depth=3
	movl	$0, -4(%rbp)
.LBB60_76:                              # %for.cond237
                                        #   Parent Loop BB60_67 Depth=1
                                        #     Parent Loop BB60_69 Depth=2
                                        #       Parent Loop BB60_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB60_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB60_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-72(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB60_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_76
.LBB60_79:                              # %for.end269
                                        #   in Loop: Header=BB60_74 Depth=3
	jmp	.LBB60_80
.LBB60_80:                              # %for.inc270
                                        #   in Loop: Header=BB60_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_74
.LBB60_81:                              # %for.end272
                                        #   in Loop: Header=BB60_69 Depth=2
	jmp	.LBB60_82
.LBB60_82:                              # %for.inc273
                                        #   in Loop: Header=BB60_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB60_69
.LBB60_83:                              # %for.end275
                                        #   in Loop: Header=BB60_67 Depth=1
	jmp	.LBB60_84
.LBB60_84:                              # %for.inc276
                                        #   in Loop: Header=BB60_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB60_67
.LBB60_85:                              # %for.end278
	jmp	.LBB60_95
.LBB60_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB60_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB60_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB60_87 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB60_89:                              # %for.cond284
                                        #   Parent Loop BB60_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB60_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB60_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB60_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB60_89
.LBB60_92:                              # %for.end310
                                        #   in Loop: Header=BB60_87 Depth=1
	jmp	.LBB60_93
.LBB60_93:                              # %for.inc311
                                        #   in Loop: Header=BB60_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB60_87
.LBB60_94:                              # %for.end313
	jmp	.LBB60_95
.LBB60_95:                              # %if.end314
	jmp	.LBB60_96
.LBB60_96:                              # %if.end315
	cmpl	$508342921, -84(%rbp)   # imm = 0x1E4CB289
	jne	.LBB60_98
.LBB60_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_97
.Lfunc_end60:
	.size	decode_one_b8block.50, .Lfunc_end60-decode_one_b8block.50
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.51
.LCPI61_0:
	.quad	4636737291354636288     # double 100
.LCPI61_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.51
	.p2align	4, 0x90
	.type	Build_Status_Map.51,@function
Build_Status_Map.51:                    # @Build_Status_Map.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1248058831, -44(%rbp)  # imm = 0x4A63DDCF
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -8(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB61_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	$0, -12(%rbp)
.LBB61_3:                               # %for.cond2
                                        #   Parent Loop BB61_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB61_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB61_13
.LBB61_6:                               # %if.then
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB61_8:                               # %if.end
                                        #   in Loop: Header=BB61_3 Depth=2
	callq	rand
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB61_10:                              # %if.end20
                                        #   in Loop: Header=BB61_3 Depth=2
	callq	rand
	vmovsd	.LCPI61_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI61_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB61_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	$1, -4(%rbp)
.LBB61_12:                              # %if.end29
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB61_13:                              # %if.end30
                                        #   in Loop: Header=BB61_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB61_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB61_18
.LBB61_15:                              # %if.else
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB61_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB61_17:                              # %if.end49
                                        #   in Loop: Header=BB61_3 Depth=2
	jmp	.LBB61_18
.LBB61_18:                              # %if.end50
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB61_3
.LBB61_20:                              # %for.end
                                        #   in Loop: Header=BB61_1 Depth=1
	jmp	.LBB61_21
.LBB61_21:                              # %for.inc53
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB61_1
.LBB61_22:                              # %for.end55
	cmpl	$1248058831, -44(%rbp)  # imm = 0x4A63DDCF
	jne	.LBB61_24
.LBB61_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_23
.Lfunc_end61:
	.size	Build_Status_Map.51, .Lfunc_end61-Build_Status_Map.51
	.cfi_endproc
                                        # -- End function
	.globl	compute_residue_b8block.52 # -- Begin function compute_residue_b8block.52
	.p2align	4, 0x90
	.type	compute_residue_b8block.52,@function
compute_residue_b8block.52:             # @compute_residue_b8block.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1967374049, -36(%rbp)  # imm = 0x7543BEE1
	movl	%edi, -32(%rbp)
	movl	%esi, -24(%rbp)
	movl	-32(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -12(%rbp)
	movl	-12(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -28(%rbp)
	movl	-32(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -20(%rbp)
	cmpl	$0, -24(%rbp)
	jl	.LBB62_10
# %bb.1:                                # %if.then
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB62_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB62_2 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_4:                               # %for.cond4
                                        #   Parent Loop BB62_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB62_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB62_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$4792, %rcx             # imm = 0x12B8
	movslq	-24(%rbp), %rdx
	shlq	$9, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB62_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_4
.LBB62_7:                               # %for.end
                                        #   in Loop: Header=BB62_2 Depth=1
	jmp	.LBB62_8
.LBB62_8:                               # %for.inc22
                                        #   in Loop: Header=BB62_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_2
.LBB62_9:                               # %for.end24
	jmp	.LBB62_19
.LBB62_10:                              # %if.else
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB62_11:                              # %for.cond25
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_13 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB62_18
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB62_11 Depth=1
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB62_13:                              # %for.cond29
                                        #   Parent Loop BB62_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB62_16
# %bb.14:                               # %for.body32
                                        #   in Loop: Header=BB62_13 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movq	img, %rcx
	addq	$12600, %rcx            # imm = 0x3138
	movslq	-8(%rbp), %rdx
	shlq	$5, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	subl	%ecx, %eax
	movq	decs, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.15:                               # %for.inc54
                                        #   in Loop: Header=BB62_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB62_13
.LBB62_16:                              # %for.end56
                                        #   in Loop: Header=BB62_11 Depth=1
	jmp	.LBB62_17
.LBB62_17:                              # %for.inc57
                                        #   in Loop: Header=BB62_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB62_11
.LBB62_18:                              # %for.end59
	jmp	.LBB62_19
.LBB62_19:                              # %if.end
	cmpl	$1967374049, -36(%rbp)  # imm = 0x7543BEE1
	jne	.LBB62_21
.LBB62_20:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_21:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_20
.Lfunc_end62:
	.size	compute_residue_b8block.52, .Lfunc_end62-compute_residue_b8block.52
	.cfi_endproc
                                        # -- End function
	.globl	Get_Reference_Pixel.53  # -- Begin function Get_Reference_Pixel.53
	.p2align	4, 0x90
	.type	Get_Reference_Pixel.53,@function
Get_Reference_Pixel.53:                 # @Get_Reference_Pixel.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$104, %rsp
	.cfi_offset %rbx, -24
	movl	$1423910129, -104(%rbp) # imm = 0x54DF24F1
	movq	%rdi, -64(%rbp)
	movl	%esi, -28(%rbp)
	movl	%edx, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	-24(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -52(%rbp)
	movl	-28(%rbp), %eax
	andl	$3, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	subl	-52(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	movl	%eax, -24(%rbp)
	movl	-28(%rbp), %eax
	subl	-48(%rbp), %eax
	cltd
	idivl	%ecx
	movl	%eax, -28(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	subl	$1, %eax
	movl	%eax, -32(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	subl	$1, %eax
	movl	%eax, -36(%rbp)
	cmpl	$0, -52(%rbp)
	jne	.LBB63_21
# %bb.1:                                # %land.lhs.true
	cmpl	$0, -48(%rbp)
	jne	.LBB63_21
# %bb.2:                                # %if.then
	movq	-64(%rbp), %rax
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB63_4
# %bb.3:                                # %cond.true
	movl	-36(%rbp), %ecx
	jmp	.LBB63_5
.LBB63_4:                               # %cond.false
	movl	-28(%rbp), %ecx
.LBB63_5:                               # %cond.end
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB63_7
# %bb.6:                                # %cond.true9
	xorl	%ecx, %ecx
	jmp	.LBB63_11
.LBB63_7:                               # %cond.false10
	movl	-36(%rbp), %ecx
	cmpl	-28(%rbp), %ecx
	jge	.LBB63_9
# %bb.8:                                # %cond.true12
	movl	-36(%rbp), %ecx
	jmp	.LBB63_10
.LBB63_9:                               # %cond.false13
	movl	-28(%rbp), %ecx
.LBB63_10:                              # %cond.end14
.LBB63_11:                              # %cond.end16
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB63_13
# %bb.12:                               # %cond.true19
	movl	-32(%rbp), %ecx
	jmp	.LBB63_14
.LBB63_13:                              # %cond.false20
	movl	-24(%rbp), %ecx
.LBB63_14:                              # %cond.end21
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB63_16
# %bb.15:                               # %cond.true24
	xorl	%ecx, %ecx
	jmp	.LBB63_20
.LBB63_16:                              # %cond.false25
	movl	-32(%rbp), %ecx
	cmpl	-24(%rbp), %ecx
	jge	.LBB63_18
# %bb.17:                               # %cond.true27
	movl	-32(%rbp), %ecx
	jmp	.LBB63_19
.LBB63_18:                              # %cond.false28
	movl	-24(%rbp), %ecx
.LBB63_19:                              # %cond.end29
.LBB63_20:                              # %cond.end31
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB63_332
.LBB63_21:                              # %if.else
	cmpl	$0, -48(%rbp)
	jne	.LBB63_77
# %bb.22:                               # %if.then37
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_24
# %bb.23:                               # %cond.true40
	movl	-36(%rbp), %eax
	jmp	.LBB63_25
.LBB63_24:                              # %cond.false41
	movl	-28(%rbp), %eax
.LBB63_25:                              # %cond.end42
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_27
# %bb.26:                               # %cond.true46
	xorl	%eax, %eax
	jmp	.LBB63_31
.LBB63_27:                              # %cond.false47
	movl	-36(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB63_29
# %bb.28:                               # %cond.true50
	movl	-36(%rbp), %eax
	jmp	.LBB63_30
.LBB63_29:                              # %cond.false51
	movl	-28(%rbp), %eax
.LBB63_30:                              # %cond.end52
.LBB63_31:                              # %cond.end54
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_32:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB63_44
# %bb.33:                               # %for.body
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_35
# %bb.34:                               # %cond.true60
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_36
.LBB63_35:                              # %cond.false61
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_36:                              # %cond.end63
                                        #   in Loop: Header=BB63_32 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_38
# %bb.37:                               # %cond.true67
                                        #   in Loop: Header=BB63_32 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_42
.LBB63_38:                              # %cond.false68
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_40
# %bb.39:                               # %cond.true72
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_41
.LBB63_40:                              # %cond.false73
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_41:                              # %cond.end75
                                        #   in Loop: Header=BB63_32 Depth=1
.LBB63_42:                              # %cond.end77
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.43:                               # %for.inc
                                        #   in Loop: Header=BB63_32 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_32
.LBB63_44:                              # %for.end
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_46
# %bb.45:                               # %cond.true92
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_47
.LBB63_46:                              # %cond.false94
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_47:                              # %cond.end97
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_49
# %bb.48:                               # %cond.true101
	xorl	%eax, %eax
	jmp	.LBB63_53
.LBB63_49:                              # %cond.false102
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_51
# %bb.50:                               # %cond.true108
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_52
.LBB63_51:                              # %cond.false110
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_52:                              # %cond.end113
.LBB63_53:                              # %cond.end115
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB63_64
# %bb.54:                               # %if.then119
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB63_56
# %bb.55:                               # %cond.true124
	movl	-32(%rbp), %edx
	jmp	.LBB63_57
.LBB63_56:                              # %cond.false125
	movl	-24(%rbp), %edx
.LBB63_57:                              # %cond.end126
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_59
# %bb.58:                               # %cond.true130
	xorl	%edx, %edx
	jmp	.LBB63_63
.LBB63_59:                              # %cond.false131
	movl	-32(%rbp), %edx
	cmpl	-24(%rbp), %edx
	jge	.LBB63_61
# %bb.60:                               # %cond.true134
	movl	-32(%rbp), %edx
	jmp	.LBB63_62
.LBB63_61:                              # %cond.false135
	movl	-24(%rbp), %edx
.LBB63_62:                              # %cond.end136
.LBB63_63:                              # %cond.end138
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_76
.LBB63_64:                              # %if.else145
	cmpl	$3, -52(%rbp)
	jne	.LBB63_75
# %bb.65:                               # %if.then148
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movslq	-40(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_67
# %bb.66:                               # %cond.true154
	movl	-32(%rbp), %edx
	jmp	.LBB63_68
.LBB63_67:                              # %cond.false155
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB63_68:                              # %cond.end157
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_70
# %bb.69:                               # %cond.true161
	xorl	%edx, %edx
	jmp	.LBB63_74
.LBB63_70:                              # %cond.false162
	movl	-32(%rbp), %edx
	movl	-24(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_72
# %bb.71:                               # %cond.true166
	movl	-32(%rbp), %edx
	jmp	.LBB63_73
.LBB63_72:                              # %cond.false167
	movl	-24(%rbp), %edx
	addl	$1, %edx
.LBB63_73:                              # %cond.end169
.LBB63_74:                              # %cond.end171
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_75:                              # %if.end
	jmp	.LBB63_76
.LBB63_76:                              # %if.end178
	jmp	.LBB63_331
.LBB63_77:                              # %if.else179
	cmpl	$0, -52(%rbp)
	jne	.LBB63_133
# %bb.78:                               # %if.then182
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB63_80
# %bb.79:                               # %cond.true185
	movl	-32(%rbp), %eax
	jmp	.LBB63_81
.LBB63_80:                              # %cond.false186
	movl	-24(%rbp), %eax
.LBB63_81:                              # %cond.end187
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_83
# %bb.82:                               # %cond.true191
	xorl	%eax, %eax
	jmp	.LBB63_87
.LBB63_83:                              # %cond.false192
	movl	-32(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB63_85
# %bb.84:                               # %cond.true195
	movl	-32(%rbp), %eax
	jmp	.LBB63_86
.LBB63_85:                              # %cond.false196
	movl	-24(%rbp), %eax
.LBB63_86:                              # %cond.end197
.LBB63_87:                              # %cond.end199
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_88:                              # %for.cond201
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB63_100
# %bb.89:                               # %for.body204
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_91
# %bb.90:                               # %cond.true208
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_92
.LBB63_91:                              # %cond.false209
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_92:                              # %cond.end211
                                        #   in Loop: Header=BB63_88 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_94
# %bb.93:                               # %cond.true215
                                        #   in Loop: Header=BB63_88 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_98
.LBB63_94:                              # %cond.false216
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_96
# %bb.95:                               # %cond.true220
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_97
.LBB63_96:                              # %cond.false221
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_97:                              # %cond.end223
                                        #   in Loop: Header=BB63_88 Depth=1
.LBB63_98:                              # %cond.end225
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.99:                               # %for.inc237
                                        #   in Loop: Header=BB63_88 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_88
.LBB63_100:                             # %for.end239
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_102
# %bb.101:                              # %cond.true245
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_103
.LBB63_102:                             # %cond.false247
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_103:                             # %cond.end250
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_105
# %bb.104:                              # %cond.true254
	xorl	%eax, %eax
	jmp	.LBB63_109
.LBB63_105:                             # %cond.false255
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_107
# %bb.106:                              # %cond.true261
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_108
.LBB63_107:                             # %cond.false263
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_108:                             # %cond.end266
.LBB63_109:                             # %cond.end268
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB63_120
# %bb.110:                              # %if.then272
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB63_112
# %bb.111:                              # %cond.true275
	movl	-36(%rbp), %edx
	jmp	.LBB63_113
.LBB63_112:                             # %cond.false276
	movl	-28(%rbp), %edx
.LBB63_113:                             # %cond.end277
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_115
# %bb.114:                              # %cond.true281
	xorl	%edx, %edx
	jmp	.LBB63_119
.LBB63_115:                             # %cond.false282
	movl	-36(%rbp), %edx
	cmpl	-28(%rbp), %edx
	jge	.LBB63_117
# %bb.116:                              # %cond.true285
	movl	-36(%rbp), %edx
	jmp	.LBB63_118
.LBB63_117:                             # %cond.false286
	movl	-28(%rbp), %edx
.LBB63_118:                             # %cond.end287
.LBB63_119:                             # %cond.end289
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_132
.LBB63_120:                             # %if.else298
	cmpl	$3, -48(%rbp)
	jne	.LBB63_131
# %bb.121:                              # %if.then301
	movl	-12(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_123
# %bb.122:                              # %cond.true305
	movl	-36(%rbp), %edx
	jmp	.LBB63_124
.LBB63_123:                             # %cond.false306
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB63_124:                             # %cond.end308
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB63_126
# %bb.125:                              # %cond.true312
	xorl	%edx, %edx
	jmp	.LBB63_130
.LBB63_126:                             # %cond.false313
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %esi
	addl	$1, %esi
	cmpl	%esi, %edx
	jge	.LBB63_128
# %bb.127:                              # %cond.true317
	movl	-36(%rbp), %edx
	jmp	.LBB63_129
.LBB63_128:                             # %cond.false318
	movl	-28(%rbp), %edx
	addl	$1, %edx
.LBB63_129:                             # %cond.end320
.LBB63_130:                             # %cond.end322
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_131:                             # %if.end331
	jmp	.LBB63_132
.LBB63_132:                             # %if.end332
	jmp	.LBB63_330
.LBB63_133:                             # %if.else333
	cmpl	$2, -52(%rbp)
	jne	.LBB63_197
# %bb.134:                              # %if.then336
	movl	$-2, -16(%rbp)
.LBB63_135:                             # %for.cond337
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_146 Depth 2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_160
# %bb.136:                              # %for.body340
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	$0, -12(%rbp)
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_138
# %bb.137:                              # %cond.true344
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_139
.LBB63_138:                             # %cond.false345
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_139:                             # %cond.end347
                                        #   in Loop: Header=BB63_135 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_141
# %bb.140:                              # %cond.true351
                                        #   in Loop: Header=BB63_135 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_145
.LBB63_141:                             # %cond.false352
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_143
# %bb.142:                              # %cond.true356
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_144
.LBB63_143:                             # %cond.false357
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_144:                             # %cond.end359
                                        #   in Loop: Header=BB63_135 Depth=1
.LBB63_145:                             # %cond.end361
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_146:                             # %for.cond363
                                        #   Parent Loop BB63_135 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -20(%rbp)
	jge	.LBB63_158
# %bb.147:                              # %for.body366
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_149
# %bb.148:                              # %cond.true370
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB63_150
.LBB63_149:                             # %cond.false371
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_150:                             # %cond.end373
                                        #   in Loop: Header=BB63_146 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_152
# %bb.151:                              # %cond.true377
                                        #   in Loop: Header=BB63_146 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_156
.LBB63_152:                             # %cond.false378
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_154
# %bb.153:                              # %cond.true382
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-32(%rbp), %eax
	jmp	.LBB63_155
.LBB63_154:                             # %cond.false383
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_155:                             # %cond.end385
                                        #   in Loop: Header=BB63_146 Depth=2
.LBB63_156:                             # %cond.end387
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.157:                              # %for.inc399
                                        #   in Loop: Header=BB63_146 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_146
.LBB63_158:                             # %for.end401
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-12(%rbp), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.159:                              # %for.inc405
                                        #   in Loop: Header=BB63_135 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_135
.LBB63_160:                             # %for.end407
	movl	$0, -12(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_161:                             # %for.cond408
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB63_164
# %bb.162:                              # %for.body411
                                        #   in Loop: Header=BB63_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.163:                              # %for.inc420
                                        #   in Loop: Header=BB63_161 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_161
.LBB63_164:                             # %for.end422
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_166
# %bb.165:                              # %cond.true428
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_167
.LBB63_166:                             # %cond.false430
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_167:                             # %cond.end433
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_169
# %bb.168:                              # %cond.true437
	xorl	%eax, %eax
	jmp	.LBB63_173
.LBB63_169:                             # %cond.false438
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_171
# %bb.170:                              # %cond.true444
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_172
.LBB63_171:                             # %cond.false446
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_172:                             # %cond.end449
.LBB63_173:                             # %cond.end451
	movl	%eax, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB63_184
# %bb.174:                              # %if.then455
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_176
# %bb.175:                              # %cond.true462
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_177
.LBB63_176:                             # %cond.false464
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_177:                             # %cond.end468
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_179
# %bb.178:                              # %cond.true472
	xorl	%eax, %eax
	jmp	.LBB63_183
.LBB63_179:                             # %cond.false473
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_181
# %bb.180:                              # %cond.true480
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_182
.LBB63_181:                             # %cond.false482
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_182:                             # %cond.end486
.LBB63_183:                             # %cond.end488
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_196
.LBB63_184:                             # %if.else492
	cmpl	$3, -48(%rbp)
	jne	.LBB63_195
# %bb.185:                              # %if.then495
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_187
# %bb.186:                              # %cond.true502
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_188
.LBB63_187:                             # %cond.false504
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_188:                             # %cond.end508
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_190
# %bb.189:                              # %cond.true512
	xorl	%eax, %eax
	jmp	.LBB63_194
.LBB63_190:                             # %cond.false513
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_192
# %bb.191:                              # %cond.true520
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_193
.LBB63_192:                             # %cond.false522
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_193:                             # %cond.end526
.LBB63_194:                             # %cond.end528
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_195:                             # %if.end532
	jmp	.LBB63_196
.LBB63_196:                             # %if.end533
	jmp	.LBB63_329
.LBB63_197:                             # %if.else534
	cmpl	$2, -48(%rbp)
	jne	.LBB63_259
# %bb.198:                              # %if.then537
	movl	$-2, -20(%rbp)
.LBB63_199:                             # %for.cond538
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_210 Depth 2
	cmpl	$4, -20(%rbp)
	jge	.LBB63_224
# %bb.200:                              # %for.body541
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	$0, -12(%rbp)
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_202
# %bb.201:                              # %cond.true545
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_203
.LBB63_202:                             # %cond.false546
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_203:                             # %cond.end548
                                        #   in Loop: Header=BB63_199 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_205
# %bb.204:                              # %cond.true552
                                        #   in Loop: Header=BB63_199 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_209
.LBB63_205:                             # %cond.false553
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_207
# %bb.206:                              # %cond.true557
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_208
.LBB63_207:                             # %cond.false558
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_208:                             # %cond.end560
                                        #   in Loop: Header=BB63_199 Depth=1
.LBB63_209:                             # %cond.end562
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_210:                             # %for.cond564
                                        #   Parent Loop BB63_199 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -16(%rbp)
	jge	.LBB63_222
# %bb.211:                              # %for.body567
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_213
# %bb.212:                              # %cond.true571
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB63_214
.LBB63_213:                             # %cond.false572
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_214:                             # %cond.end574
                                        #   in Loop: Header=BB63_210 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_216
# %bb.215:                              # %cond.true578
                                        #   in Loop: Header=BB63_210 Depth=2
	xorl	%eax, %eax
	jmp	.LBB63_220
.LBB63_216:                             # %cond.false579
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_218
# %bb.217:                              # %cond.true583
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-36(%rbp), %eax
	jmp	.LBB63_219
.LBB63_218:                             # %cond.false584
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_219:                             # %cond.end586
                                        #   in Loop: Header=BB63_210 Depth=2
.LBB63_220:                             # %cond.end588
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.221:                              # %for.inc600
                                        #   in Loop: Header=BB63_210 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_210
.LBB63_222:                             # %for.end602
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	movl	%eax, -96(%rbp,%rcx,4)
# %bb.223:                              # %for.inc606
                                        #   in Loop: Header=BB63_199 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_199
.LBB63_224:                             # %for.end608
	movl	$0, -12(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_225:                             # %for.cond609
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB63_228
# %bb.226:                              # %for.body612
                                        #   in Loop: Header=BB63_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	cltq
	movl	-96(%rbp,%rax,4), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.227:                              # %for.inc621
                                        #   in Loop: Header=BB63_225 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_225
.LBB63_228:                             # %for.end623
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_230
# %bb.229:                              # %cond.true629
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_231
.LBB63_230:                             # %cond.false631
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_231:                             # %cond.end634
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_233
# %bb.232:                              # %cond.true638
	xorl	%eax, %eax
	jmp	.LBB63_237
.LBB63_233:                             # %cond.false639
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %esi             # imm = 0x400
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_235
# %bb.234:                              # %cond.true645
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_236
.LBB63_235:                             # %cond.false647
	movl	-12(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB63_236:                             # %cond.end650
.LBB63_237:                             # %cond.end652
	movl	%eax, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB63_248
# %bb.238:                              # %if.then656
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_240
# %bb.239:                              # %cond.true663
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_241
.LBB63_240:                             # %cond.false665
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_241:                             # %cond.end669
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_243
# %bb.242:                              # %cond.true673
	xorl	%eax, %eax
	jmp	.LBB63_247
.LBB63_243:                             # %cond.false674
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_245
# %bb.244:                              # %cond.true681
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_246
.LBB63_245:                             # %cond.false683
	movl	-88(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_246:                             # %cond.end687
.LBB63_247:                             # %cond.end689
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
	jmp	.LBB63_258
.LBB63_248:                             # %if.else693
	movl	-12(%rbp), %ecx
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_250
# %bb.249:                              # %cond.true700
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_251
.LBB63_250:                             # %cond.false702
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_251:                             # %cond.end706
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB63_253
# %bb.252:                              # %cond.true710
	xorl	%eax, %eax
	jmp	.LBB63_257
.LBB63_253:                             # %cond.false711
	movq	img, %rax
	movl	72684(%rax), %esi
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %edi
	idivl	%edi
	cmpl	%eax, %esi
	jge	.LBB63_255
# %bb.254:                              # %cond.true718
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_256
.LBB63_255:                             # %cond.false720
	movl	-84(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
.LBB63_256:                             # %cond.end724
.LBB63_257:                             # %cond.end726
	addl	%eax, %ecx
	movl	%ecx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_258:                             # %if.end730
	jmp	.LBB63_328
.LBB63_259:                             # %if.else731
	movl	$0, -12(%rbp)
	cmpl	$1, -48(%rbp)
	jne	.LBB63_261
# %bb.260:                              # %cond.true734
	movl	-28(%rbp), %eax
	jmp	.LBB63_262
.LBB63_261:                             # %cond.false735
	movl	-28(%rbp), %eax
	addl	$1, %eax
.LBB63_262:                             # %cond.end737
	movl	%eax, -40(%rbp)
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_264
# %bb.263:                              # %cond.true741
	movl	-36(%rbp), %eax
	jmp	.LBB63_265
.LBB63_264:                             # %cond.false742
	movl	-40(%rbp), %eax
.LBB63_265:                             # %cond.end743
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_267
# %bb.266:                              # %cond.true747
	xorl	%eax, %eax
	jmp	.LBB63_271
.LBB63_267:                             # %cond.false748
	movl	-36(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_269
# %bb.268:                              # %cond.true751
	movl	-36(%rbp), %eax
	jmp	.LBB63_270
.LBB63_269:                             # %cond.false752
	movl	-40(%rbp), %eax
.LBB63_270:                             # %cond.end753
.LBB63_271:                             # %cond.end755
	movl	%eax, -40(%rbp)
	movl	$-2, -20(%rbp)
.LBB63_272:                             # %for.cond757
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -20(%rbp)
	jge	.LBB63_284
# %bb.273:                              # %for.body760
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_275
# %bb.274:                              # %cond.true764
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_276
.LBB63_275:                             # %cond.false765
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_276:                             # %cond.end767
                                        #   in Loop: Header=BB63_272 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_278
# %bb.277:                              # %cond.true771
                                        #   in Loop: Header=BB63_272 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_282
.LBB63_278:                             # %cond.false772
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-32(%rbp), %eax
	movl	-24(%rbp), %ecx
	addl	-20(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_280
# %bb.279:                              # %cond.true776
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-32(%rbp), %eax
	jmp	.LBB63_281
.LBB63_280:                             # %cond.false777
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-24(%rbp), %eax
	addl	-20(%rbp), %eax
.LBB63_281:                             # %cond.end779
                                        #   in Loop: Header=BB63_272 Depth=1
.LBB63_282:                             # %cond.end781
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	%eax, -44(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-20(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.283:                              # %for.inc793
                                        #   in Loop: Header=BB63_272 Depth=1
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB63_272
.LBB63_284:                             # %for.end795
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_286
# %bb.285:                              # %cond.true801
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_287
.LBB63_286:                             # %cond.false803
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_287:                             # %cond.end806
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_289
# %bb.288:                              # %cond.true810
	xorl	%eax, %eax
	jmp	.LBB63_293
.LBB63_289:                             # %cond.false811
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_291
# %bb.290:                              # %cond.true817
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_292
.LBB63_291:                             # %cond.false819
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_292:                             # %cond.end822
.LBB63_293:                             # %cond.end824
	movl	%eax, -100(%rbp)
	movl	$0, -12(%rbp)
	cmpl	$1, -52(%rbp)
	jne	.LBB63_295
# %bb.294:                              # %cond.true828
	movl	-24(%rbp), %eax
	jmp	.LBB63_296
.LBB63_295:                             # %cond.false829
	movl	-24(%rbp), %eax
	addl	$1, %eax
.LBB63_296:                             # %cond.end831
	movl	%eax, -44(%rbp)
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_298
# %bb.297:                              # %cond.true835
	movl	-32(%rbp), %eax
	jmp	.LBB63_299
.LBB63_298:                             # %cond.false836
	movl	-44(%rbp), %eax
.LBB63_299:                             # %cond.end837
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_301
# %bb.300:                              # %cond.true841
	xorl	%eax, %eax
	jmp	.LBB63_305
.LBB63_301:                             # %cond.false842
	movl	-32(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB63_303
# %bb.302:                              # %cond.true845
	movl	-32(%rbp), %eax
	jmp	.LBB63_304
.LBB63_303:                             # %cond.false846
	movl	-44(%rbp), %eax
.LBB63_304:                             # %cond.end847
.LBB63_305:                             # %cond.end849
	movl	%eax, -44(%rbp)
	movl	$-2, -16(%rbp)
.LBB63_306:                             # %for.cond851
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -16(%rbp)
	jge	.LBB63_318
# %bb.307:                              # %for.body854
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_309
# %bb.308:                              # %cond.true858
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_310
.LBB63_309:                             # %cond.false859
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_310:                             # %cond.end861
                                        #   in Loop: Header=BB63_306 Depth=1
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_312
# %bb.311:                              # %cond.true865
                                        #   in Loop: Header=BB63_306 Depth=1
	xorl	%eax, %eax
	jmp	.LBB63_316
.LBB63_312:                             # %cond.false866
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-36(%rbp), %eax
	movl	-28(%rbp), %ecx
	addl	-16(%rbp), %ecx
	cmpl	%ecx, %eax
	jge	.LBB63_314
# %bb.313:                              # %cond.true870
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-36(%rbp), %eax
	jmp	.LBB63_315
.LBB63_314:                             # %cond.false871
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-28(%rbp), %eax
	addl	-16(%rbp), %eax
.LBB63_315:                             # %cond.end873
                                        #   in Loop: Header=BB63_306 Depth=1
.LBB63_316:                             # %cond.end875
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	%eax, -40(%rbp)
	movq	-64(%rbp), %rax
	movslq	-40(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	movl	-16(%rbp), %ecx
	addl	$2, %ecx
	movslq	%ecx, %rcx
	imull	Get_Reference_Pixel.COEF(,%rcx,4), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
# %bb.317:                              # %for.inc887
                                        #   in Loop: Header=BB63_306 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB63_306
.LBB63_318:                             # %for.end889
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_320
# %bb.319:                              # %cond.true895
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_321
.LBB63_320:                             # %cond.false897
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_321:                             # %cond.end900
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB63_323
# %bb.322:                              # %cond.true904
	xorl	%eax, %eax
	jmp	.LBB63_327
.LBB63_323:                             # %cond.false905
	movq	img, %rax
	movl	72684(%rax), %ecx
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %esi
	idivl	%esi
	cmpl	%eax, %ecx
	jge	.LBB63_325
# %bb.324:                              # %cond.true911
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB63_326
.LBB63_325:                             # %cond.false913
	movl	-12(%rbp), %eax
	addl	$16, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
.LBB63_326:                             # %cond.end916
.LBB63_327:                             # %cond.end918
	movl	%eax, -108(%rbp)
	movl	-100(%rbp), %eax
	addl	-108(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movl	%eax, -12(%rbp)
.LBB63_328:                             # %if.end922
	jmp	.LBB63_329
.LBB63_329:                             # %if.end923
	jmp	.LBB63_330
.LBB63_330:                             # %if.end924
	jmp	.LBB63_331
.LBB63_331:                             # %if.end925
	jmp	.LBB63_332
.LBB63_332:                             # %if.end926
	movl	-12(%rbp), %ebx
	cmpl	$1423910129, -104(%rbp) # imm = 0x54DF24F1
	jne	.LBB63_334
.LBB63_333:
	movzbl	%bl, %eax
	addq	$104, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_334:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_333
.Lfunc_end63:
	.size	Get_Reference_Pixel.53, .Lfunc_end63-Get_Reference_Pixel.53
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.54   # -- Begin function decode_one_b8block.54
	.p2align	4, 0x90
	.type	decode_one_b8block.54,@function
decode_one_b8block.54:                  # @decode_one_b8block.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$455342546, -84(%rbp)   # imm = 0x1B23F9D2
	movl	%edi, -44(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -28(%rbp)
	movl	-28(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB64_10
# %bb.1:                                # %if.then
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_4 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB64_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB64_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_4:                               # %for.cond9
                                        #   Parent Loop BB64_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB64_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB64_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB64_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_4
.LBB64_7:                               # %for.end
                                        #   in Loop: Header=BB64_2 Depth=1
	jmp	.LBB64_8
.LBB64_8:                               # %for.inc26
                                        #   in Loop: Header=BB64_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_2
.LBB64_9:                               # %for.end28
	jmp	.LBB64_96
.LBB64_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB64_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB64_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB64_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB64_31
.LBB64_14:                              # %if.then36
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_17 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB64_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB64_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_17:                              # %for.cond40
                                        #   Parent Loop BB64_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB64_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB64_17 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB64_17 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_17
.LBB64_20:                              # %for.end49
                                        #   in Loop: Header=BB64_15 Depth=1
	jmp	.LBB64_21
.LBB64_21:                              # %for.inc50
                                        #   in Loop: Header=BB64_15 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_15
.LBB64_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB64_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB64_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB64_25:                              # %for.cond56
                                        #   Parent Loop BB64_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB64_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB64_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB64_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_25
.LBB64_28:                              # %for.end71
                                        #   in Loop: Header=BB64_23 Depth=1
	jmp	.LBB64_29
.LBB64_29:                              # %for.inc72
                                        #   in Loop: Header=BB64_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_23
.LBB64_30:                              # %for.end74
	jmp	.LBB64_60
.LBB64_31:                              # %if.else75
	cmpl	$1, -20(%rbp)
	jl	.LBB64_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -20(%rbp)
	jg	.LBB64_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB64_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB64_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB64_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB64_36:                              # %for.cond83
                                        #   Parent Loop BB64_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB64_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB64_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB64_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_36
.LBB64_39:                              # %for.end120
                                        #   in Loop: Header=BB64_34 Depth=1
	jmp	.LBB64_40
.LBB64_40:                              # %for.inc121
                                        #   in Loop: Header=BB64_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_34
.LBB64_41:                              # %for.end123
	jmp	.LBB64_51
.LBB64_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB64_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB64_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB64_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB64_45:                              # %for.cond129
                                        #   Parent Loop BB64_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB64_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB64_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB64_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_45
.LBB64_48:                              # %for.end145
                                        #   in Loop: Header=BB64_43 Depth=1
	jmp	.LBB64_49
.LBB64_49:                              # %for.inc146
                                        #   in Loop: Header=BB64_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_43
.LBB64_50:                              # %for.end148
	jmp	.LBB64_51
.LBB64_51:                              # %if.end
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_54 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB64_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB64_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_54:                              # %for.cond153
                                        #   Parent Loop BB64_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB64_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB64_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB64_54 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_54
.LBB64_57:                              # %for.end167
                                        #   in Loop: Header=BB64_52 Depth=1
	jmp	.LBB64_58
.LBB64_58:                              # %for.inc168
                                        #   in Loop: Header=BB64_52 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_52
.LBB64_59:                              # %for.end170
	jmp	.LBB64_60
.LBB64_60:                              # %if.end171
	cmpl	$1, -20(%rbp)
	jl	.LBB64_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -20(%rbp)
	jle	.LBB64_66
.LBB64_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB64_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB64_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB64_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB64_86
.LBB64_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB64_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_69 Depth 2
                                        #       Child Loop BB64_74 Depth 3
                                        #         Child Loop BB64_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB64_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB64_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB64_69:                              # %for.cond197
                                        #   Parent Loop BB64_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB64_74 Depth 3
                                        #         Child Loop BB64_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB64_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB64_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB64_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB64_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB64_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB64_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -76(%rbp)
.LBB64_73:                              # %if.end218
                                        #   in Loop: Header=BB64_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-76(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-68(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB64_74:                              # %for.cond233
                                        #   Parent Loop BB64_67 Depth=1
                                        #     Parent Loop BB64_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB64_76 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB64_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB64_74 Depth=3
	movl	$0, -4(%rbp)
.LBB64_76:                              # %for.cond237
                                        #   Parent Loop BB64_67 Depth=1
                                        #     Parent Loop BB64_69 Depth=2
                                        #       Parent Loop BB64_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB64_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB64_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB64_76 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_76
.LBB64_79:                              # %for.end269
                                        #   in Loop: Header=BB64_74 Depth=3
	jmp	.LBB64_80
.LBB64_80:                              # %for.inc270
                                        #   in Loop: Header=BB64_74 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_74
.LBB64_81:                              # %for.end272
                                        #   in Loop: Header=BB64_69 Depth=2
	jmp	.LBB64_82
.LBB64_82:                              # %for.inc273
                                        #   in Loop: Header=BB64_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB64_69
.LBB64_83:                              # %for.end275
                                        #   in Loop: Header=BB64_67 Depth=1
	jmp	.LBB64_84
.LBB64_84:                              # %for.inc276
                                        #   in Loop: Header=BB64_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB64_67
.LBB64_85:                              # %for.end278
	jmp	.LBB64_95
.LBB64_86:                              # %if.else279
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB64_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB64_89 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB64_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB64_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB64_89:                              # %for.cond284
                                        #   Parent Loop BB64_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB64_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB64_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB64_89 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB64_89
.LBB64_92:                              # %for.end310
                                        #   in Loop: Header=BB64_87 Depth=1
	jmp	.LBB64_93
.LBB64_93:                              # %for.inc311
                                        #   in Loop: Header=BB64_87 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB64_87
.LBB64_94:                              # %for.end313
	jmp	.LBB64_95
.LBB64_95:                              # %if.end314
	jmp	.LBB64_96
.LBB64_96:                              # %if.end315
	cmpl	$455342546, -84(%rbp)   # imm = 0x1B23F9D2
	jne	.LBB64_98
.LBB64_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_97
.Lfunc_end64:
	.size	decode_one_b8block.54, .Lfunc_end64-decode_one_b8block.54
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.55   # -- Begin function decode_one_b8block.55
	.p2align	4, 0x90
	.type	decode_one_b8block.55,@function
decode_one_b8block.55:                  # @decode_one_b8block.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1256729352, -84(%rbp)  # imm = 0x4AE82B08
	movl	%edi, -56(%rbp)
	movl	%esi, -68(%rbp)
	movl	%edx, -72(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
	movl	-72(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	movl	-72(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB65_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_4:                               # %for.cond9
                                        #   Parent Loop BB65_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB65_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB65_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_4
.LBB65_7:                               # %for.end
                                        #   in Loop: Header=BB65_2 Depth=1
	jmp	.LBB65_8
.LBB65_8:                               # %for.inc26
                                        #   in Loop: Header=BB65_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_2
.LBB65_9:                               # %for.end28
	jmp	.LBB65_96
.LBB65_10:                              # %if.else
	cmpl	$0, -68(%rbp)
	jne	.LBB65_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB65_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB65_31
.LBB65_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB65_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_17:                              # %for.cond40
                                        #   Parent Loop BB65_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB65_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB65_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_17
.LBB65_20:                              # %for.end49
                                        #   in Loop: Header=BB65_15 Depth=1
	jmp	.LBB65_21
.LBB65_21:                              # %for.inc50
                                        #   in Loop: Header=BB65_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_15
.LBB65_22:                              # %for.end52
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB65_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_25:                              # %for.cond56
                                        #   Parent Loop BB65_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB65_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB65_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_25
.LBB65_28:                              # %for.end71
                                        #   in Loop: Header=BB65_23 Depth=1
	jmp	.LBB65_29
.LBB65_29:                              # %for.inc72
                                        #   in Loop: Header=BB65_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_23
.LBB65_30:                              # %for.end74
	jmp	.LBB65_60
.LBB65_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB65_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB65_42
# %bb.33:                               # %if.then79
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB65_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_36:                              # %for.cond83
                                        #   Parent Loop BB65_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB65_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB65_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_36
.LBB65_39:                              # %for.end120
                                        #   in Loop: Header=BB65_34 Depth=1
	jmp	.LBB65_40
.LBB65_40:                              # %for.inc121
                                        #   in Loop: Header=BB65_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_34
.LBB65_41:                              # %for.end123
	jmp	.LBB65_51
.LBB65_42:                              # %if.else124
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB65_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB65_43 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_45:                              # %for.cond129
                                        #   Parent Loop BB65_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB65_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB65_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_45
.LBB65_48:                              # %for.end145
                                        #   in Loop: Header=BB65_43 Depth=1
	jmp	.LBB65_49
.LBB65_49:                              # %for.inc146
                                        #   in Loop: Header=BB65_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_43
.LBB65_50:                              # %for.end148
	jmp	.LBB65_51
.LBB65_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB65_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_54:                              # %for.cond153
                                        #   Parent Loop BB65_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB65_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB65_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_54
.LBB65_57:                              # %for.end167
                                        #   in Loop: Header=BB65_52 Depth=1
	jmp	.LBB65_58
.LBB65_58:                              # %for.inc168
                                        #   in Loop: Header=BB65_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_52
.LBB65_59:                              # %for.end170
	jmp	.LBB65_60
.LBB65_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB65_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB65_66
.LBB65_62:                              # %lor.lhs.false177
	cmpl	$0, -68(%rbp)
	jne	.LBB65_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB65_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB65_86
.LBB65_66:                              # %if.then192
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB65_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_69 Depth 2
                                        #       Child Loop BB65_74 Depth 3
                                        #         Child Loop BB65_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB65_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB65_67 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB65_69:                              # %for.cond197
                                        #   Parent Loop BB65_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB65_74 Depth 3
                                        #         Child Loop BB65_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB65_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB65_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -80(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB65_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB65_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB65_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB65_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -64(%rbp)
.LBB65_73:                              # %if.end218
                                        #   in Loop: Header=BB65_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-64(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-76(%rbp), %esi
	movl	-80(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB65_74:                              # %for.cond233
                                        #   Parent Loop BB65_67 Depth=1
                                        #     Parent Loop BB65_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB65_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB65_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB65_74 Depth=3
	movl	$0, -8(%rbp)
.LBB65_76:                              # %for.cond237
                                        #   Parent Loop BB65_67 Depth=1
                                        #     Parent Loop BB65_69 Depth=2
                                        #       Parent Loop BB65_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB65_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB65_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-80(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB65_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_76
.LBB65_79:                              # %for.end269
                                        #   in Loop: Header=BB65_74 Depth=3
	jmp	.LBB65_80
.LBB65_80:                              # %for.inc270
                                        #   in Loop: Header=BB65_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_74
.LBB65_81:                              # %for.end272
                                        #   in Loop: Header=BB65_69 Depth=2
	jmp	.LBB65_82
.LBB65_82:                              # %for.inc273
                                        #   in Loop: Header=BB65_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB65_69
.LBB65_83:                              # %for.end275
                                        #   in Loop: Header=BB65_67 Depth=1
	jmp	.LBB65_84
.LBB65_84:                              # %for.inc276
                                        #   in Loop: Header=BB65_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB65_67
.LBB65_85:                              # %for.end278
	jmp	.LBB65_95
.LBB65_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB65_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB65_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB65_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB65_89:                              # %for.cond284
                                        #   Parent Loop BB65_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB65_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB65_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-56(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB65_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB65_89
.LBB65_92:                              # %for.end310
                                        #   in Loop: Header=BB65_87 Depth=1
	jmp	.LBB65_93
.LBB65_93:                              # %for.inc311
                                        #   in Loop: Header=BB65_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB65_87
.LBB65_94:                              # %for.end313
	jmp	.LBB65_95
.LBB65_95:                              # %if.end314
	jmp	.LBB65_96
.LBB65_96:                              # %if.end315
	cmpl	$1256729352, -84(%rbp)  # imm = 0x4AE82B08
	jne	.LBB65_98
.LBB65_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_97
.Lfunc_end65:
	.size	decode_one_b8block.55, .Lfunc_end65-decode_one_b8block.55
	.cfi_endproc
                                        # -- End function
	.globl	Error_Concealment.56    # -- Begin function Error_Concealment.56
	.p2align	4, 0x90
	.type	Error_Concealment.56,@function
Error_Concealment.56:                   # @Error_Concealment.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1789479488, -20(%rbp)  # imm = 0x6AA94A40
	movq	%rdi, -40(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -48(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB66_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB66_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB66_10
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	$0, -4(%rbp)
.LBB66_3:                               # %for.cond2
                                        #   Parent Loop BB66_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB66_8
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB66_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB66_6
# %bb.5:                                # %if.then
                                        #   in Loop: Header=BB66_3 Depth=2
	movq	-40(%rbp), %rdi
	movl	-8(%rbp), %esi
	movl	-4(%rbp), %edx
	movq	-48(%rbp), %rcx
	movq	-32(%rbp), %r8
	callq	Conceal_Error
.LBB66_6:                               # %if.end
                                        #   in Loop: Header=BB66_3 Depth=2
	jmp	.LBB66_7
.LBB66_7:                               # %for.inc
                                        #   in Loop: Header=BB66_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB66_3
.LBB66_8:                               # %for.end
                                        #   in Loop: Header=BB66_1 Depth=1
	jmp	.LBB66_9
.LBB66_9:                               # %for.inc7
                                        #   in Loop: Header=BB66_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB66_1
.LBB66_10:                              # %for.end9
	cmpl	$1789479488, -20(%rbp)  # imm = 0x6AA94A40
	jne	.LBB66_12
.LBB66_11:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_12:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_11
.Lfunc_end66:
	.size	Error_Concealment.56, .Lfunc_end66-Error_Concealment.56
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.57
.LCPI67_0:
	.quad	4636737291354636288     # double 100
.LCPI67_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.57
	.p2align	4, 0x90
	.type	Build_Status_Map.57,@function
Build_Status_Map.57:                    # @Build_Status_Map.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2007111690, -44(%rbp)  # imm = 0x77A2180A
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB67_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB67_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB67_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	$0, -8(%rbp)
.LBB67_3:                               # %for.cond2
                                        #   Parent Loop BB67_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB67_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB67_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB67_13
.LBB67_6:                               # %if.then
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB67_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB67_8:                               # %if.end
                                        #   in Loop: Header=BB67_3 Depth=2
	callq	rand
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB67_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB67_10:                              # %if.end20
                                        #   in Loop: Header=BB67_3 Depth=2
	callq	rand
	vmovsd	.LCPI67_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI67_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB67_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	$1, -4(%rbp)
.LBB67_12:                              # %if.end29
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB67_13:                              # %if.end30
                                        #   in Loop: Header=BB67_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB67_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB67_18
.LBB67_15:                              # %if.else
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB67_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB67_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB67_17:                              # %if.end49
                                        #   in Loop: Header=BB67_3 Depth=2
	jmp	.LBB67_18
.LBB67_18:                              # %if.end50
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB67_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB67_3
.LBB67_20:                              # %for.end
                                        #   in Loop: Header=BB67_1 Depth=1
	jmp	.LBB67_21
.LBB67_21:                              # %for.inc53
                                        #   in Loop: Header=BB67_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB67_1
.LBB67_22:                              # %for.end55
	cmpl	$2007111690, -44(%rbp)  # imm = 0x77A2180A
	jne	.LBB67_24
.LBB67_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_23
.Lfunc_end67:
	.size	Build_Status_Map.57, .Lfunc_end67-Build_Status_Map.57
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.58   # -- Begin function decode_one_b8block.58
	.p2align	4, 0x90
	.type	decode_one_b8block.58,@function
decode_one_b8block.58:                  # @decode_one_b8block.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$2131953528, -84(%rbp)  # imm = 0x7F130778
	movl	%edi, -44(%rbp)
	movl	%esi, -72(%rbp)
	movl	%edx, -80(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
	movl	-80(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -56(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	movl	-80(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -40(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_10
# %bb.1:                                # %if.then
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB68_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_4:                               # %for.cond9
                                        #   Parent Loop BB68_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB68_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB68_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB68_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_4
.LBB68_7:                               # %for.end
                                        #   in Loop: Header=BB68_2 Depth=1
	jmp	.LBB68_8
.LBB68_8:                               # %for.inc26
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_2
.LBB68_9:                               # %for.end28
	jmp	.LBB68_96
.LBB68_10:                              # %if.else
	cmpl	$0, -72(%rbp)
	jne	.LBB68_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB68_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB68_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB68_31
.LBB68_14:                              # %if.then36
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB68_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB68_15 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_17:                              # %for.cond40
                                        #   Parent Loop BB68_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB68_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB68_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB68_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_17
.LBB68_20:                              # %for.end49
                                        #   in Loop: Header=BB68_15 Depth=1
	jmp	.LBB68_21
.LBB68_21:                              # %for.inc50
                                        #   in Loop: Header=BB68_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_15
.LBB68_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB68_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_25 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB68_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB68_25:                              # %for.cond56
                                        #   Parent Loop BB68_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB68_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB68_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_25
.LBB68_28:                              # %for.end71
                                        #   in Loop: Header=BB68_23 Depth=1
	jmp	.LBB68_29
.LBB68_29:                              # %for.inc72
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_23
.LBB68_30:                              # %for.end74
	jmp	.LBB68_60
.LBB68_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB68_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB68_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB68_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_36 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB68_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB68_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB68_36:                              # %for.cond83
                                        #   Parent Loop BB68_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB68_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB68_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-12(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB68_36 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_36
.LBB68_39:                              # %for.end120
                                        #   in Loop: Header=BB68_34 Depth=1
	jmp	.LBB68_40
.LBB68_40:                              # %for.inc121
                                        #   in Loop: Header=BB68_34 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_34
.LBB68_41:                              # %for.end123
	jmp	.LBB68_51
.LBB68_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB68_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_45 Depth 2
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB68_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB68_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB68_45:                              # %for.cond129
                                        #   Parent Loop BB68_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB68_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB68_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-16(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-12(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB68_45 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_45
.LBB68_48:                              # %for.end145
                                        #   in Loop: Header=BB68_43 Depth=1
	jmp	.LBB68_49
.LBB68_49:                              # %for.inc146
                                        #   in Loop: Header=BB68_43 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_43
.LBB68_50:                              # %for.end148
	jmp	.LBB68_51
.LBB68_51:                              # %if.end
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB68_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB68_52 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_54:                              # %for.cond153
                                        #   Parent Loop BB68_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB68_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB68_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB68_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_54
.LBB68_57:                              # %for.end167
                                        #   in Loop: Header=BB68_52 Depth=1
	jmp	.LBB68_58
.LBB68_58:                              # %for.inc168
                                        #   in Loop: Header=BB68_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_52
.LBB68_59:                              # %for.end170
	jmp	.LBB68_60
.LBB68_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB68_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB68_66
.LBB68_62:                              # %lor.lhs.false177
	cmpl	$0, -72(%rbp)
	jne	.LBB68_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB68_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB68_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB68_86
.LBB68_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB68_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_69 Depth 2
                                        #       Child Loop BB68_74 Depth 3
                                        #         Child Loop BB68_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB68_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB68_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB68_69:                              # %for.cond197
                                        #   Parent Loop BB68_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB68_74 Depth 3
                                        #         Child Loop BB68_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB68_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB68_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -76(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB68_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB68_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB68_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB68_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -68(%rbp)
.LBB68_73:                              # %if.end218
                                        #   in Loop: Header=BB68_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-68(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-64(%rbp), %esi
	movl	-76(%rbp), %edx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-12(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-16(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-12(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB68_74:                              # %for.cond233
                                        #   Parent Loop BB68_67 Depth=1
                                        #     Parent Loop BB68_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB68_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB68_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB68_74 Depth=3
	movl	$0, -8(%rbp)
.LBB68_76:                              # %for.cond237
                                        #   Parent Loop BB68_67 Depth=1
                                        #     Parent Loop BB68_69 Depth=2
                                        #       Parent Loop BB68_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB68_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB68_76 Depth=4
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-76(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB68_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_76
.LBB68_79:                              # %for.end269
                                        #   in Loop: Header=BB68_74 Depth=3
	jmp	.LBB68_80
.LBB68_80:                              # %for.inc270
                                        #   in Loop: Header=BB68_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_74
.LBB68_81:                              # %for.end272
                                        #   in Loop: Header=BB68_69 Depth=2
	jmp	.LBB68_82
.LBB68_82:                              # %for.inc273
                                        #   in Loop: Header=BB68_69 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB68_69
.LBB68_83:                              # %for.end275
                                        #   in Loop: Header=BB68_67 Depth=1
	jmp	.LBB68_84
.LBB68_84:                              # %for.inc276
                                        #   in Loop: Header=BB68_67 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB68_67
.LBB68_85:                              # %for.end278
	jmp	.LBB68_95
.LBB68_86:                              # %if.else279
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB68_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB68_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB68_87 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB68_89:                              # %for.cond284
                                        #   Parent Loop BB68_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB68_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB68_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB68_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_89
.LBB68_92:                              # %for.end310
                                        #   in Loop: Header=BB68_87 Depth=1
	jmp	.LBB68_93
.LBB68_93:                              # %for.inc311
                                        #   in Loop: Header=BB68_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_87
.LBB68_94:                              # %for.end313
	jmp	.LBB68_95
.LBB68_95:                              # %if.end314
	jmp	.LBB68_96
.LBB68_96:                              # %if.end315
	cmpl	$2131953528, -84(%rbp)  # imm = 0x7F130778
	jne	.LBB68_98
.LBB68_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_97
.Lfunc_end68:
	.size	decode_one_b8block.58, .Lfunc_end68-decode_one_b8block.58
	.cfi_endproc
                                        # -- End function
	.globl	decode_one_b8block.59   # -- Begin function decode_one_b8block.59
	.p2align	4, 0x90
	.type	decode_one_b8block.59,@function
decode_one_b8block.59:                  # @decode_one_b8block.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	movl	$1751137382, -84(%rbp)  # imm = 0x68603C66
	movl	%edi, -44(%rbp)
	movl	%esi, -80(%rbp)
	movl	%edx, -76(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -60(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
	movl	-76(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	shll	$3, %edx
	movl	%edx, -20(%rbp)
	movl	-20(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -52(%rbp)
	movl	-20(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -40(%rbp)
	movl	-76(%rbp), %eax
	cltd
	idivl	%ecx
	shll	$3, %eax
	movl	%eax, -24(%rbp)
	movl	-24(%rbp), %eax
	addl	$8, %eax
	movl	%eax, -48(%rbp)
	movl	-24(%rbp), %eax
	sarl	$2, %eax
	movl	%eax, -32(%rbp)
	movl	-32(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -56(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB69_10
# %bb.1:                                # %if.then
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_4 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB69_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB69_2 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_4:                               # %for.cond9
                                        #   Parent Loop BB69_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB69_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB69_4 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB69_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_4
.LBB69_7:                               # %for.end
                                        #   in Loop: Header=BB69_2 Depth=1
	jmp	.LBB69_8
.LBB69_8:                               # %for.inc26
                                        #   in Loop: Header=BB69_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_2
.LBB69_9:                               # %for.end28
	jmp	.LBB69_96
.LBB69_10:                              # %if.else
	cmpl	$0, -80(%rbp)
	jne	.LBB69_31
# %bb.11:                               # %land.lhs.true
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB69_14
# %bb.12:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB69_31
# %bb.13:                               # %land.lhs.true34
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB69_31
.LBB69_14:                              # %if.then36
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_15:                              # %for.cond37
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_17 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB69_22
# %bb.16:                               # %for.body39
                                        #   in Loop: Header=BB69_15 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_17:                              # %for.cond40
                                        #   Parent Loop BB69_15 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB69_20
# %bb.18:                               # %for.body42
                                        #   in Loop: Header=BB69_17 Depth=2
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-8(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.19:                               # %for.inc47
                                        #   in Loop: Header=BB69_17 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_17
.LBB69_20:                              # %for.end49
                                        #   in Loop: Header=BB69_15 Depth=1
	jmp	.LBB69_21
.LBB69_21:                              # %for.inc50
                                        #   in Loop: Header=BB69_15 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_15
.LBB69_22:                              # %for.end52
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB69_23:                              # %for.cond53
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_25 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB69_30
# %bb.24:                               # %for.body55
                                        #   in Loop: Header=BB69_23 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB69_25:                              # %for.cond56
                                        #   Parent Loop BB69_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_28
# %bb.26:                               # %for.body58
                                        #   in Loop: Header=BB69_25 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.27:                               # %for.inc69
                                        #   in Loop: Header=BB69_25 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_25
.LBB69_28:                              # %for.end71
                                        #   in Loop: Header=BB69_23 Depth=1
	jmp	.LBB69_29
.LBB69_29:                              # %for.inc72
                                        #   in Loop: Header=BB69_23 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_23
.LBB69_30:                              # %for.end74
	jmp	.LBB69_60
.LBB69_31:                              # %if.else75
	cmpl	$1, -28(%rbp)
	jl	.LBB69_42
# %bb.32:                               # %land.lhs.true77
	cmpl	$7, -28(%rbp)
	jg	.LBB69_42
# %bb.33:                               # %if.then79
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB69_34:                              # %for.cond80
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_36 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB69_41
# %bb.35:                               # %for.body82
                                        #   in Loop: Header=BB69_34 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB69_36:                              # %for.cond83
                                        #   Parent Loop BB69_34 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_39
# %bb.37:                               # %for.body85
                                        #   in Loop: Header=BB69_36 Depth=2
	leaq	-224(%rbp), %rax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	(%rcx), %ecx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	movq	%rax, %rsi
	addq	%rdx, %rsi
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rsi,%rdx,4)
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-60(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-28(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movswl	2(%rcx), %ecx
	addq	$64, %rax
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rax
	movslq	-16(%rbp), %rdx
	movl	%ecx, (%rax,%rdx,4)
# %bb.38:                               # %for.inc118
                                        #   in Loop: Header=BB69_36 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_36
.LBB69_39:                              # %for.end120
                                        #   in Loop: Header=BB69_34 Depth=1
	jmp	.LBB69_40
.LBB69_40:                              # %for.inc121
                                        #   in Loop: Header=BB69_34 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_34
.LBB69_41:                              # %for.end123
	jmp	.LBB69_51
.LBB69_42:                              # %if.else124
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB69_43:                              # %for.cond125
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_45 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB69_50
# %bb.44:                               # %for.body128
                                        #   in Loop: Header=BB69_43 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB69_45:                              # %for.cond129
                                        #   Parent Loop BB69_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_48
# %bb.46:                               # %for.body132
                                        #   in Loop: Header=BB69_45 Depth=2
	leaq	-224(%rbp), %rax
	movq	%rax, %rcx
	addq	$64, %rcx
	movslq	-12(%rbp), %rdx
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movslq	-16(%rbp), %rdx
	movl	$0, (%rcx,%rdx,4)
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	$0, (%rax,%rcx,4)
# %bb.47:                               # %for.inc143
                                        #   in Loop: Header=BB69_45 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_45
.LBB69_48:                              # %for.end145
                                        #   in Loop: Header=BB69_43 Depth=1
	jmp	.LBB69_49
.LBB69_49:                              # %for.inc146
                                        #   in Loop: Header=BB69_43 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_43
.LBB69_50:                              # %for.end148
	jmp	.LBB69_51
.LBB69_51:                              # %if.end
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_52:                              # %for.cond149
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_54 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB69_59
# %bb.53:                               # %for.body152
                                        #   in Loop: Header=BB69_52 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_54:                              # %for.cond153
                                        #   Parent Loop BB69_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB69_57
# %bb.55:                               # %for.body156
                                        #   in Loop: Header=BB69_54 Depth=2
	movq	decs, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1248(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.56:                               # %for.inc165
                                        #   in Loop: Header=BB69_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_54
.LBB69_57:                              # %for.end167
                                        #   in Loop: Header=BB69_52 Depth=1
	jmp	.LBB69_58
.LBB69_58:                              # %for.inc168
                                        #   in Loop: Header=BB69_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_52
.LBB69_59:                              # %for.end170
	jmp	.LBB69_60
.LBB69_60:                              # %if.end171
	cmpl	$1, -28(%rbp)
	jl	.LBB69_62
# %bb.61:                               # %land.lhs.true174
	cmpl	$7, -28(%rbp)
	jle	.LBB69_66
.LBB69_62:                              # %lor.lhs.false177
	cmpl	$0, -80(%rbp)
	jne	.LBB69_86
# %bb.63:                               # %land.lhs.true180
	movq	img, %rax
	cmpl	$0, 24(%rax)
	je	.LBB69_66
# %bb.64:                               # %lor.lhs.false184
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB69_86
# %bb.65:                               # %land.lhs.true188
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB69_86
.LBB69_66:                              # %if.then192
	movl	-32(%rbp), %eax
	movl	%eax, -12(%rbp)
.LBB69_67:                              # %for.cond193
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_69 Depth 2
                                        #       Child Loop BB69_74 Depth 3
                                        #         Child Loop BB69_76 Depth 4
	movl	-12(%rbp), %eax
	cmpl	-56(%rbp), %eax
	jge	.LBB69_85
# %bb.68:                               # %for.body196
                                        #   in Loop: Header=BB69_67 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -16(%rbp)
.LBB69_69:                              # %for.cond197
                                        #   Parent Loop BB69_67 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_74 Depth 3
                                        #         Child Loop BB69_76 Depth 4
	movl	-16(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB69_83
# %bb.70:                               # %for.body200
                                        #   in Loop: Header=BB69_69 Depth=2
	movq	img, %rax
	movl	144(%rax), %eax
	addl	-16(%rbp), %eax
	movl	%eax, -64(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	addl	-12(%rbp), %eax
	movl	%eax, -68(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB69_73
# %bb.71:                               # %land.lhs.true208
                                        #   in Loop: Header=BB69_69 Depth=2
	movq	enc_picture, %rax
	cmpq	enc_frame_picture, %rax
	je	.LBB69_73
# %bb.72:                               # %if.then211
                                        #   in Loop: Header=BB69_69 Depth=2
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	-60(%rbp), %eax
	subl	$2, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -72(%rbp)
.LBB69_73:                              # %if.end218
                                        #   in Loop: Header=BB69_69 Depth=2
	leaq	-224(%rbp), %r8
	movq	decs, %rcx
	movq	16(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-72(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-68(%rbp), %esi
	movl	-64(%rbp), %edx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	movq	%r8, %rax
	addq	%rcx, %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %ecx
	addq	$64, %r8
	movslq	-12(%rbp), %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movslq	-16(%rbp), %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -4(%rbp)
.LBB69_74:                              # %for.cond233
                                        #   Parent Loop BB69_67 Depth=1
                                        #     Parent Loop BB69_69 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_76 Depth 4
	cmpl	$4, -4(%rbp)
	jge	.LBB69_81
# %bb.75:                               # %for.body236
                                        #   in Loop: Header=BB69_74 Depth=3
	movl	$0, -8(%rbp)
.LBB69_76:                              # %for.cond237
                                        #   Parent Loop BB69_67 Depth=1
                                        #     Parent Loop BB69_69 Depth=2
                                        #       Parent Loop BB69_74 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -8(%rbp)
	jge	.LBB69_79
# %bb.77:                               # %for.body240
                                        #   in Loop: Header=BB69_76 Depth=4
	movl	-12(%rbp), %eax
	shll	$2, %eax
	addl	-4(%rbp), %eax
	cltq
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movl	-16(%rbp), %eax
	shll	$2, %eax
	addl	-8(%rbp), %eax
	cltq
	movl	(%rcx,%rax,4), %eax
	movq	decs, %rcx
	movq	32(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	addl	%ecx, %eax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-68(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-64(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.78:                               # %for.inc267
                                        #   in Loop: Header=BB69_76 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_76
.LBB69_79:                              # %for.end269
                                        #   in Loop: Header=BB69_74 Depth=3
	jmp	.LBB69_80
.LBB69_80:                              # %for.inc270
                                        #   in Loop: Header=BB69_74 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_74
.LBB69_81:                              # %for.end272
                                        #   in Loop: Header=BB69_69 Depth=2
	jmp	.LBB69_82
.LBB69_82:                              # %for.inc273
                                        #   in Loop: Header=BB69_69 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_69
.LBB69_83:                              # %for.end275
                                        #   in Loop: Header=BB69_67 Depth=1
	jmp	.LBB69_84
.LBB69_84:                              # %for.inc276
                                        #   in Loop: Header=BB69_67 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_67
.LBB69_85:                              # %for.end278
	jmp	.LBB69_95
.LBB69_86:                              # %if.else279
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB69_87:                              # %for.cond280
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_89 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-52(%rbp), %eax
	jge	.LBB69_94
# %bb.88:                               # %for.body283
                                        #   in Loop: Header=BB69_87 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB69_89:                              # %for.cond284
                                        #   Parent Loop BB69_87 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB69_92
# %bb.90:                               # %for.body287
                                        #   in Loop: Header=BB69_89 Depth=2
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	img, %rcx
	movl	156(%rcx), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movq	img, %rcx
	movl	152(%rcx), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	decs, %rcx
	movq	8(%rcx), %rcx
	movslq	-44(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.91:                               # %for.inc308
                                        #   in Loop: Header=BB69_89 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_89
.LBB69_92:                              # %for.end310
                                        #   in Loop: Header=BB69_87 Depth=1
	jmp	.LBB69_93
.LBB69_93:                              # %for.inc311
                                        #   in Loop: Header=BB69_87 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_87
.LBB69_94:                              # %for.end313
	jmp	.LBB69_95
.LBB69_95:                              # %if.end314
	jmp	.LBB69_96
.LBB69_96:                              # %if.end315
	cmpl	$1751137382, -84(%rbp)  # imm = 0x68603C66
	jne	.LBB69_98
.LBB69_97:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_98:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_97
.Lfunc_end69:
	.size	decode_one_b8block.59, .Lfunc_end69-decode_one_b8block.59
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.60        # -- Begin function Conceal_Error.60
	.p2align	4, 0x90
	.type	Conceal_Error.60,@function
Conceal_Error.60:                       # @Conceal_Error.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1229005714, -68(%rbp)  # imm = 0x49412392
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB70_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB70_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB70_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB70_4:                               # %land.end
.LBB70_5:                               # %lor.end
.LBB70_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB70_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB70_9
.LBB70_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB70_14
.LBB70_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB70_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB70_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB70_12:                              # %land.end51
.LBB70_13:                              # %lor.end53
.LBB70_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB70_180
# %bb.15:                               # %land.end54
	movq	.LJTI70_0(,%rax,8), %rax
	jmpq	*%rax
.LBB70_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB70_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB70_18 Depth=1
	movl	$0, -4(%rbp)
.LBB70_20:                              # %for.cond68
                                        #   Parent Loop BB70_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB70_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB70_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_20
.LBB70_23:                              # %for.end
                                        #   in Loop: Header=BB70_18 Depth=1
	jmp	.LBB70_24
.LBB70_24:                              # %for.inc85
                                        #   in Loop: Header=BB70_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_18
.LBB70_25:                              # %for.end87
	jmp	.LBB70_35
.LBB70_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB70_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB70_27 Depth=1
	movl	$0, -4(%rbp)
.LBB70_29:                              # %for.cond92
                                        #   Parent Loop BB70_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB70_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB70_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_29
.LBB70_32:                              # %for.end104
                                        #   in Loop: Header=BB70_27 Depth=1
	jmp	.LBB70_33
.LBB70_33:                              # %for.inc105
                                        #   in Loop: Header=BB70_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_27
.LBB70_34:                              # %for.end107
	jmp	.LBB70_35
.LBB70_35:                              # %if.end
	jmp	.LBB70_180
.LBB70_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB70_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_39 Depth 2
                                        #       Child Loop BB70_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB70_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB70_37 Depth=1
	movl	$0, -12(%rbp)
.LBB70_39:                              # %for.cond113
                                        #   Parent Loop BB70_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB70_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB70_39 Depth=2
	movl	$0, -4(%rbp)
.LBB70_41:                              # %for.cond117
                                        #   Parent Loop BB70_37 Depth=1
                                        #     Parent Loop BB70_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB70_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB70_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB70_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_41
.LBB70_44:                              # %for.end141
                                        #   in Loop: Header=BB70_39 Depth=2
	jmp	.LBB70_45
.LBB70_45:                              # %for.inc142
                                        #   in Loop: Header=BB70_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_39
.LBB70_46:                              # %for.end144
                                        #   in Loop: Header=BB70_37 Depth=1
	jmp	.LBB70_47
.LBB70_47:                              # %for.inc145
                                        #   in Loop: Header=BB70_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_37
.LBB70_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB70_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB70_49 Depth=1
	movl	$0, -8(%rbp)
.LBB70_51:                              # %for.cond152
                                        #   Parent Loop BB70_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB70_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB70_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_51
.LBB70_54:                              # %for.end162
                                        #   in Loop: Header=BB70_49 Depth=1
	jmp	.LBB70_55
.LBB70_55:                              # %for.inc163
                                        #   in Loop: Header=BB70_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_49
.LBB70_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB70_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB70_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB70_59 Depth=1
	movl	$0, -4(%rbp)
.LBB70_61:                              # %for.cond175
                                        #   Parent Loop BB70_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB70_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB70_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_61
.LBB70_64:                              # %for.end195
                                        #   in Loop: Header=BB70_59 Depth=1
	jmp	.LBB70_65
.LBB70_65:                              # %for.inc196
                                        #   in Loop: Header=BB70_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_59
.LBB70_66:                              # %for.end198
	jmp	.LBB70_95
.LBB70_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB70_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB70_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_71 Depth 2
                                        #       Child Loop BB70_73 Depth 3
                                        #         Child Loop BB70_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB70_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB70_71:                              # %for.cond210
                                        #   Parent Loop BB70_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_73 Depth 3
                                        #         Child Loop BB70_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB70_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB70_73:                              # %for.cond236
                                        #   Parent Loop BB70_69 Depth=1
                                        #     Parent Loop BB70_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB70_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB70_73 Depth=3
	movl	$0, -4(%rbp)
.LBB70_75:                              # %for.cond240
                                        #   Parent Loop BB70_69 Depth=1
                                        #     Parent Loop BB70_71 Depth=2
                                        #       Parent Loop BB70_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB70_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB70_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB70_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_75
.LBB70_78:                              # %for.end259
                                        #   in Loop: Header=BB70_73 Depth=3
	jmp	.LBB70_79
.LBB70_79:                              # %for.inc260
                                        #   in Loop: Header=BB70_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_73
.LBB70_80:                              # %for.end262
                                        #   in Loop: Header=BB70_71 Depth=2
	jmp	.LBB70_81
.LBB70_81:                              # %for.inc263
                                        #   in Loop: Header=BB70_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_71
.LBB70_82:                              # %for.end265
                                        #   in Loop: Header=BB70_69 Depth=1
	jmp	.LBB70_83
.LBB70_83:                              # %for.inc266
                                        #   in Loop: Header=BB70_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_69
.LBB70_84:                              # %for.end268
	jmp	.LBB70_94
.LBB70_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB70_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB70_86 Depth=1
	movl	$0, -4(%rbp)
.LBB70_88:                              # %for.cond274
                                        #   Parent Loop BB70_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB70_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB70_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_88
.LBB70_91:                              # %for.end294
                                        #   in Loop: Header=BB70_86 Depth=1
	jmp	.LBB70_92
.LBB70_92:                              # %for.inc295
                                        #   in Loop: Header=BB70_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_86
.LBB70_93:                              # %for.end297
	jmp	.LBB70_94
.LBB70_94:                              # %if.end298
	jmp	.LBB70_95
.LBB70_95:                              # %if.end299
	jmp	.LBB70_105
.LBB70_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB70_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB70_97 Depth=1
	movl	$0, -4(%rbp)
.LBB70_99:                              # %for.cond305
                                        #   Parent Loop BB70_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB70_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB70_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_99
.LBB70_102:                             # %for.end317
                                        #   in Loop: Header=BB70_97 Depth=1
	jmp	.LBB70_103
.LBB70_103:                             # %for.inc318
                                        #   in Loop: Header=BB70_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_97
.LBB70_104:                             # %for.end320
	jmp	.LBB70_105
.LBB70_105:                             # %if.end321
	jmp	.LBB70_180
.LBB70_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB70_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_110 Depth 2
                                        #       Child Loop BB70_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB70_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB70_108 Depth=1
	movl	$0, -12(%rbp)
.LBB70_110:                             # %for.cond331
                                        #   Parent Loop BB70_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB70_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB70_110 Depth=2
	movl	$0, -4(%rbp)
.LBB70_112:                             # %for.cond335
                                        #   Parent Loop BB70_108 Depth=1
                                        #     Parent Loop BB70_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB70_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB70_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB70_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_112
.LBB70_115:                             # %for.end359
                                        #   in Loop: Header=BB70_110 Depth=2
	jmp	.LBB70_116
.LBB70_116:                             # %for.inc360
                                        #   in Loop: Header=BB70_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_110
.LBB70_117:                             # %for.end362
                                        #   in Loop: Header=BB70_108 Depth=1
	jmp	.LBB70_118
.LBB70_118:                             # %for.inc363
                                        #   in Loop: Header=BB70_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_108
.LBB70_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB70_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB70_120 Depth=1
	movl	$0, -8(%rbp)
.LBB70_122:                             # %for.cond370
                                        #   Parent Loop BB70_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB70_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB70_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_122
.LBB70_125:                             # %for.end380
                                        #   in Loop: Header=BB70_120 Depth=1
	jmp	.LBB70_126
.LBB70_126:                             # %for.inc381
                                        #   in Loop: Header=BB70_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_120
.LBB70_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB70_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB70_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB70_129 Depth=1
	movl	$0, -4(%rbp)
.LBB70_131:                             # %for.cond390
                                        #   Parent Loop BB70_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB70_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB70_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_131
.LBB70_134:                             # %for.end410
                                        #   in Loop: Header=BB70_129 Depth=1
	jmp	.LBB70_135
.LBB70_135:                             # %for.inc411
                                        #   in Loop: Header=BB70_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_129
.LBB70_136:                             # %for.end413
	jmp	.LBB70_156
.LBB70_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB70_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB70_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_141 Depth 2
                                        #       Child Loop BB70_143 Depth 3
                                        #         Child Loop BB70_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB70_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB70_141:                             # %for.cond425
                                        #   Parent Loop BB70_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB70_143 Depth 3
                                        #         Child Loop BB70_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB70_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB70_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB70_143:                             # %for.cond452
                                        #   Parent Loop BB70_139 Depth=1
                                        #     Parent Loop BB70_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB70_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB70_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB70_143 Depth=3
	movl	$0, -4(%rbp)
.LBB70_145:                             # %for.cond456
                                        #   Parent Loop BB70_139 Depth=1
                                        #     Parent Loop BB70_141 Depth=2
                                        #       Parent Loop BB70_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB70_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB70_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB70_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_145
.LBB70_148:                             # %for.end475
                                        #   in Loop: Header=BB70_143 Depth=3
	jmp	.LBB70_149
.LBB70_149:                             # %for.inc476
                                        #   in Loop: Header=BB70_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_143
.LBB70_150:                             # %for.end478
                                        #   in Loop: Header=BB70_141 Depth=2
	jmp	.LBB70_151
.LBB70_151:                             # %for.inc479
                                        #   in Loop: Header=BB70_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB70_141
.LBB70_152:                             # %for.end481
                                        #   in Loop: Header=BB70_139 Depth=1
	jmp	.LBB70_153
.LBB70_153:                             # %for.inc482
                                        #   in Loop: Header=BB70_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_139
.LBB70_154:                             # %for.end484
	jmp	.LBB70_155
.LBB70_155:                             # %if.end485
	jmp	.LBB70_156
.LBB70_156:                             # %if.end486
	jmp	.LBB70_157
.LBB70_157:                             # %if.end487
	jmp	.LBB70_180
.LBB70_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB70_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB70_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB70_161 Depth=1
	movl	$0, -4(%rbp)
.LBB70_163:                             # %for.cond499
                                        #   Parent Loop BB70_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB70_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB70_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_163
.LBB70_166:                             # %for.end519
                                        #   in Loop: Header=BB70_161 Depth=1
	jmp	.LBB70_167
.LBB70_167:                             # %for.inc520
                                        #   in Loop: Header=BB70_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_161
.LBB70_168:                             # %for.end522
	jmp	.LBB70_169
.LBB70_169:                             # %if.end523
	jmp	.LBB70_179
.LBB70_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB70_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB70_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB70_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB70_171 Depth=1
	movl	$0, -4(%rbp)
.LBB70_173:                             # %for.cond529
                                        #   Parent Loop BB70_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB70_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB70_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB70_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB70_173
.LBB70_176:                             # %for.end541
                                        #   in Loop: Header=BB70_171 Depth=1
	jmp	.LBB70_177
.LBB70_177:                             # %for.inc542
                                        #   in Loop: Header=BB70_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB70_171
.LBB70_178:                             # %for.end544
	jmp	.LBB70_179
.LBB70_179:                             # %if.end545
	jmp	.LBB70_180
.LBB70_180:                             # %sw.epilog
	cmpl	$1229005714, -68(%rbp)  # imm = 0x49412392
	jne	.LBB70_182
.LBB70_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_181
.Lfunc_end70:
	.size	Conceal_Error.60, .Lfunc_end70-Conceal_Error.60
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI70_0:
	.quad	.LBB70_16
	.quad	.LBB70_158
	.quad	.LBB70_106
	.quad	.LBB70_180
	.quad	.LBB70_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.61
.LCPI71_0:
	.quad	4636737291354636288     # double 100
.LCPI71_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.61
	.p2align	4, 0x90
	.type	Build_Status_Map.61,@function
Build_Status_Map.61:                    # @Build_Status_Map.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1142587442, -44(%rbp)  # imm = 0x441A8032
	movq	%rdi, -32(%rbp)
	movl	$-1, -16(%rbp)
	movl	$0, -20(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB71_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB71_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB71_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	$0, -8(%rbp)
.LBB71_3:                               # %for.cond2
                                        #   Parent Loop BB71_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB71_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB71_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-20(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-16(%rbp), %eax
	je	.LBB71_13
.LBB71_6:                               # %if.then
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB71_8:                               # %if.end
                                        #   in Loop: Header=BB71_3 Depth=2
	callq	rand
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB71_10:                              # %if.end20
                                        #   in Loop: Header=BB71_3 Depth=2
	callq	rand
	vmovsd	.LCPI71_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI71_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB71_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	$1, -4(%rbp)
.LBB71_12:                              # %if.end29
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
.LBB71_13:                              # %if.end30
                                        #   in Loop: Header=BB71_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB71_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB71_18
.LBB71_15:                              # %if.else
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB71_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB71_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB71_17:                              # %if.end49
                                        #   in Loop: Header=BB71_3 Depth=2
	jmp	.LBB71_18
.LBB71_18:                              # %if.end50
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB71_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB71_3
.LBB71_20:                              # %for.end
                                        #   in Loop: Header=BB71_1 Depth=1
	jmp	.LBB71_21
.LBB71_21:                              # %for.inc53
                                        #   in Loop: Header=BB71_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB71_1
.LBB71_22:                              # %for.end55
	cmpl	$1142587442, -44(%rbp)  # imm = 0x441A8032
	jne	.LBB71_24
.LBB71_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_23
.Lfunc_end71:
	.size	Build_Status_Map.61, .Lfunc_end71-Build_Status_Map.61
	.cfi_endproc
                                        # -- End function
	.globl	Conceal_Error.62        # -- Begin function Conceal_Error.62
	.p2align	4, 0x90
	.type	Conceal_Error.62,@function
Conceal_Error.62:                       # @Conceal_Error.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$375721736, -68(%rbp)   # imm = 0x16650F08
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB72_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB72_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB72_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB72_4:                               # %land.end
.LBB72_5:                               # %lor.end
.LBB72_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB72_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB72_9
.LBB72_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB72_14
.LBB72_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB72_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB72_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB72_12:                              # %land.end51
.LBB72_13:                              # %lor.end53
.LBB72_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB72_180
# %bb.15:                               # %land.end54
	movq	.LJTI72_0(,%rax,8), %rax
	jmpq	*%rax
.LBB72_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB72_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB72_18 Depth=1
	movl	$0, -4(%rbp)
.LBB72_20:                              # %for.cond68
                                        #   Parent Loop BB72_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB72_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB72_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_20
.LBB72_23:                              # %for.end
                                        #   in Loop: Header=BB72_18 Depth=1
	jmp	.LBB72_24
.LBB72_24:                              # %for.inc85
                                        #   in Loop: Header=BB72_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_18
.LBB72_25:                              # %for.end87
	jmp	.LBB72_35
.LBB72_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB72_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB72_27 Depth=1
	movl	$0, -4(%rbp)
.LBB72_29:                              # %for.cond92
                                        #   Parent Loop BB72_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB72_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB72_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_29
.LBB72_32:                              # %for.end104
                                        #   in Loop: Header=BB72_27 Depth=1
	jmp	.LBB72_33
.LBB72_33:                              # %for.inc105
                                        #   in Loop: Header=BB72_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_27
.LBB72_34:                              # %for.end107
	jmp	.LBB72_35
.LBB72_35:                              # %if.end
	jmp	.LBB72_180
.LBB72_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB72_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_39 Depth 2
                                        #       Child Loop BB72_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB72_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB72_37 Depth=1
	movl	$0, -12(%rbp)
.LBB72_39:                              # %for.cond113
                                        #   Parent Loop BB72_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB72_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB72_39 Depth=2
	movl	$0, -4(%rbp)
.LBB72_41:                              # %for.cond117
                                        #   Parent Loop BB72_37 Depth=1
                                        #     Parent Loop BB72_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB72_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB72_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB72_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_41
.LBB72_44:                              # %for.end141
                                        #   in Loop: Header=BB72_39 Depth=2
	jmp	.LBB72_45
.LBB72_45:                              # %for.inc142
                                        #   in Loop: Header=BB72_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_39
.LBB72_46:                              # %for.end144
                                        #   in Loop: Header=BB72_37 Depth=1
	jmp	.LBB72_47
.LBB72_47:                              # %for.inc145
                                        #   in Loop: Header=BB72_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_37
.LBB72_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB72_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB72_49 Depth=1
	movl	$0, -8(%rbp)
.LBB72_51:                              # %for.cond152
                                        #   Parent Loop BB72_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB72_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB72_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_51
.LBB72_54:                              # %for.end162
                                        #   in Loop: Header=BB72_49 Depth=1
	jmp	.LBB72_55
.LBB72_55:                              # %for.inc163
                                        #   in Loop: Header=BB72_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_49
.LBB72_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB72_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB72_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB72_59 Depth=1
	movl	$0, -4(%rbp)
.LBB72_61:                              # %for.cond175
                                        #   Parent Loop BB72_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB72_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB72_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_61
.LBB72_64:                              # %for.end195
                                        #   in Loop: Header=BB72_59 Depth=1
	jmp	.LBB72_65
.LBB72_65:                              # %for.inc196
                                        #   in Loop: Header=BB72_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_59
.LBB72_66:                              # %for.end198
	jmp	.LBB72_95
.LBB72_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB72_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB72_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_71 Depth 2
                                        #       Child Loop BB72_73 Depth 3
                                        #         Child Loop BB72_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB72_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB72_71:                              # %for.cond210
                                        #   Parent Loop BB72_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_73 Depth 3
                                        #         Child Loop BB72_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB72_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB72_73:                              # %for.cond236
                                        #   Parent Loop BB72_69 Depth=1
                                        #     Parent Loop BB72_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB72_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB72_73 Depth=3
	movl	$0, -4(%rbp)
.LBB72_75:                              # %for.cond240
                                        #   Parent Loop BB72_69 Depth=1
                                        #     Parent Loop BB72_71 Depth=2
                                        #       Parent Loop BB72_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB72_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB72_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB72_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_75
.LBB72_78:                              # %for.end259
                                        #   in Loop: Header=BB72_73 Depth=3
	jmp	.LBB72_79
.LBB72_79:                              # %for.inc260
                                        #   in Loop: Header=BB72_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_73
.LBB72_80:                              # %for.end262
                                        #   in Loop: Header=BB72_71 Depth=2
	jmp	.LBB72_81
.LBB72_81:                              # %for.inc263
                                        #   in Loop: Header=BB72_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_71
.LBB72_82:                              # %for.end265
                                        #   in Loop: Header=BB72_69 Depth=1
	jmp	.LBB72_83
.LBB72_83:                              # %for.inc266
                                        #   in Loop: Header=BB72_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_69
.LBB72_84:                              # %for.end268
	jmp	.LBB72_94
.LBB72_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB72_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB72_86 Depth=1
	movl	$0, -4(%rbp)
.LBB72_88:                              # %for.cond274
                                        #   Parent Loop BB72_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB72_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB72_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_88
.LBB72_91:                              # %for.end294
                                        #   in Loop: Header=BB72_86 Depth=1
	jmp	.LBB72_92
.LBB72_92:                              # %for.inc295
                                        #   in Loop: Header=BB72_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_86
.LBB72_93:                              # %for.end297
	jmp	.LBB72_94
.LBB72_94:                              # %if.end298
	jmp	.LBB72_95
.LBB72_95:                              # %if.end299
	jmp	.LBB72_105
.LBB72_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB72_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB72_97 Depth=1
	movl	$0, -4(%rbp)
.LBB72_99:                              # %for.cond305
                                        #   Parent Loop BB72_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB72_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB72_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_99
.LBB72_102:                             # %for.end317
                                        #   in Loop: Header=BB72_97 Depth=1
	jmp	.LBB72_103
.LBB72_103:                             # %for.inc318
                                        #   in Loop: Header=BB72_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_97
.LBB72_104:                             # %for.end320
	jmp	.LBB72_105
.LBB72_105:                             # %if.end321
	jmp	.LBB72_180
.LBB72_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB72_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_110 Depth 2
                                        #       Child Loop BB72_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB72_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB72_108 Depth=1
	movl	$0, -12(%rbp)
.LBB72_110:                             # %for.cond331
                                        #   Parent Loop BB72_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB72_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB72_110 Depth=2
	movl	$0, -4(%rbp)
.LBB72_112:                             # %for.cond335
                                        #   Parent Loop BB72_108 Depth=1
                                        #     Parent Loop BB72_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB72_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB72_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB72_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_112
.LBB72_115:                             # %for.end359
                                        #   in Loop: Header=BB72_110 Depth=2
	jmp	.LBB72_116
.LBB72_116:                             # %for.inc360
                                        #   in Loop: Header=BB72_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_110
.LBB72_117:                             # %for.end362
                                        #   in Loop: Header=BB72_108 Depth=1
	jmp	.LBB72_118
.LBB72_118:                             # %for.inc363
                                        #   in Loop: Header=BB72_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_108
.LBB72_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB72_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB72_120 Depth=1
	movl	$0, -8(%rbp)
.LBB72_122:                             # %for.cond370
                                        #   Parent Loop BB72_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB72_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB72_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_122
.LBB72_125:                             # %for.end380
                                        #   in Loop: Header=BB72_120 Depth=1
	jmp	.LBB72_126
.LBB72_126:                             # %for.inc381
                                        #   in Loop: Header=BB72_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_120
.LBB72_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB72_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB72_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB72_129 Depth=1
	movl	$0, -4(%rbp)
.LBB72_131:                             # %for.cond390
                                        #   Parent Loop BB72_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB72_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB72_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_131
.LBB72_134:                             # %for.end410
                                        #   in Loop: Header=BB72_129 Depth=1
	jmp	.LBB72_135
.LBB72_135:                             # %for.inc411
                                        #   in Loop: Header=BB72_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_129
.LBB72_136:                             # %for.end413
	jmp	.LBB72_156
.LBB72_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB72_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB72_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_141 Depth 2
                                        #       Child Loop BB72_143 Depth 3
                                        #         Child Loop BB72_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB72_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB72_141:                             # %for.cond425
                                        #   Parent Loop BB72_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB72_143 Depth 3
                                        #         Child Loop BB72_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB72_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB72_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB72_143:                             # %for.cond452
                                        #   Parent Loop BB72_139 Depth=1
                                        #     Parent Loop BB72_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB72_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB72_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB72_143 Depth=3
	movl	$0, -4(%rbp)
.LBB72_145:                             # %for.cond456
                                        #   Parent Loop BB72_139 Depth=1
                                        #     Parent Loop BB72_141 Depth=2
                                        #       Parent Loop BB72_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB72_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB72_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB72_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_145
.LBB72_148:                             # %for.end475
                                        #   in Loop: Header=BB72_143 Depth=3
	jmp	.LBB72_149
.LBB72_149:                             # %for.inc476
                                        #   in Loop: Header=BB72_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_143
.LBB72_150:                             # %for.end478
                                        #   in Loop: Header=BB72_141 Depth=2
	jmp	.LBB72_151
.LBB72_151:                             # %for.inc479
                                        #   in Loop: Header=BB72_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB72_141
.LBB72_152:                             # %for.end481
                                        #   in Loop: Header=BB72_139 Depth=1
	jmp	.LBB72_153
.LBB72_153:                             # %for.inc482
                                        #   in Loop: Header=BB72_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB72_139
.LBB72_154:                             # %for.end484
	jmp	.LBB72_155
.LBB72_155:                             # %if.end485
	jmp	.LBB72_156
.LBB72_156:                             # %if.end486
	jmp	.LBB72_157
.LBB72_157:                             # %if.end487
	jmp	.LBB72_180
.LBB72_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB72_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB72_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB72_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB72_161 Depth=1
	movl	$0, -4(%rbp)
.LBB72_163:                             # %for.cond499
                                        #   Parent Loop BB72_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB72_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB72_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_163
.LBB72_166:                             # %for.end519
                                        #   in Loop: Header=BB72_161 Depth=1
	jmp	.LBB72_167
.LBB72_167:                             # %for.inc520
                                        #   in Loop: Header=BB72_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_161
.LBB72_168:                             # %for.end522
	jmp	.LBB72_169
.LBB72_169:                             # %if.end523
	jmp	.LBB72_179
.LBB72_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB72_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB72_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB72_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB72_171 Depth=1
	movl	$0, -4(%rbp)
.LBB72_173:                             # %for.cond529
                                        #   Parent Loop BB72_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB72_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB72_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB72_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB72_173
.LBB72_176:                             # %for.end541
                                        #   in Loop: Header=BB72_171 Depth=1
	jmp	.LBB72_177
.LBB72_177:                             # %for.inc542
                                        #   in Loop: Header=BB72_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB72_171
.LBB72_178:                             # %for.end544
	jmp	.LBB72_179
.LBB72_179:                             # %if.end545
	jmp	.LBB72_180
.LBB72_180:                             # %sw.epilog
	cmpl	$375721736, -68(%rbp)   # imm = 0x16650F08
	jne	.LBB72_182
.LBB72_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_181
.Lfunc_end72:
	.size	Conceal_Error.62, .Lfunc_end72-Conceal_Error.62
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI72_0:
	.quad	.LBB72_16
	.quad	.LBB72_158
	.quad	.LBB72_106
	.quad	.LBB72_180
	.quad	.LBB72_36
                                        # -- End function
	.text
	.globl	Conceal_Error.63        # -- Begin function Conceal_Error.63
	.p2align	4, 0x90
	.type	Conceal_Error.63,@function
Conceal_Error.63:                       # @Conceal_Error.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$635541168, -68(%rbp)   # imm = 0x25E196B0
	movq	%rdi, -48(%rbp)
	movl	%esi, -24(%rbp)
	movl	%edx, -20(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB73_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB73_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB73_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB73_4:                               # %land.end
.LBB73_5:                               # %lor.end
.LBB73_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB73_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB73_9
.LBB73_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-20(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-24(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB73_14
.LBB73_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB73_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB73_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB73_12:                              # %land.end51
.LBB73_13:                              # %lor.end53
.LBB73_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB73_180
# %bb.15:                               # %land.end54
	movq	.LJTI73_0(,%rax,8), %rax
	jmpq	*%rax
.LBB73_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB73_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	$0, -4(%rbp)
.LBB73_20:                              # %for.cond68
                                        #   Parent Loop BB73_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB73_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB73_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_20
.LBB73_23:                              # %for.end
                                        #   in Loop: Header=BB73_18 Depth=1
	jmp	.LBB73_24
.LBB73_24:                              # %for.inc85
                                        #   in Loop: Header=BB73_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_18
.LBB73_25:                              # %for.end87
	jmp	.LBB73_35
.LBB73_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB73_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	$0, -4(%rbp)
.LBB73_29:                              # %for.cond92
                                        #   Parent Loop BB73_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB73_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB73_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_29
.LBB73_32:                              # %for.end104
                                        #   in Loop: Header=BB73_27 Depth=1
	jmp	.LBB73_33
.LBB73_33:                              # %for.inc105
                                        #   in Loop: Header=BB73_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_27
.LBB73_34:                              # %for.end107
	jmp	.LBB73_35
.LBB73_35:                              # %if.end
	jmp	.LBB73_180
.LBB73_36:                              # %sw.bb108
	movl	$0, -12(%rbp)
.LBB73_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_39 Depth 2
                                        #       Child Loop BB73_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB73_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	$0, -16(%rbp)
.LBB73_39:                              # %for.cond113
                                        #   Parent Loop BB73_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB73_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	$0, -4(%rbp)
.LBB73_41:                              # %for.cond117
                                        #   Parent Loop BB73_37 Depth=1
                                        #     Parent Loop BB73_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB73_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB73_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB73_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_41
.LBB73_44:                              # %for.end141
                                        #   in Loop: Header=BB73_39 Depth=2
	jmp	.LBB73_45
.LBB73_45:                              # %for.inc142
                                        #   in Loop: Header=BB73_39 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_39
.LBB73_46:                              # %for.end144
                                        #   in Loop: Header=BB73_37 Depth=1
	jmp	.LBB73_47
.LBB73_47:                              # %for.inc145
                                        #   in Loop: Header=BB73_37 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_37
.LBB73_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB73_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB73_49 Depth=1
	movl	$0, -8(%rbp)
.LBB73_51:                              # %for.cond152
                                        #   Parent Loop BB73_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB73_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB73_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_51
.LBB73_54:                              # %for.end162
                                        #   in Loop: Header=BB73_49 Depth=1
	jmp	.LBB73_55
.LBB73_55:                              # %for.inc163
                                        #   in Loop: Header=BB73_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_49
.LBB73_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB73_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB73_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	$0, -4(%rbp)
.LBB73_61:                              # %for.cond175
                                        #   Parent Loop BB73_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB73_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB73_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_61
.LBB73_64:                              # %for.end195
                                        #   in Loop: Header=BB73_59 Depth=1
	jmp	.LBB73_65
.LBB73_65:                              # %for.inc196
                                        #   in Loop: Header=BB73_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_59
.LBB73_66:                              # %for.end198
	jmp	.LBB73_95
.LBB73_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB73_85
# %bb.68:                               # %if.then201
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB73_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_71 Depth 2
                                        #       Child Loop BB73_73 Depth 3
                                        #         Child Loop BB73_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB73_69 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB73_71:                              # %for.cond210
                                        #   Parent Loop BB73_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_73 Depth 3
                                        #         Child Loop BB73_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB73_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB73_73:                              # %for.cond236
                                        #   Parent Loop BB73_69 Depth=1
                                        #     Parent Loop BB73_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB73_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB73_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB73_73 Depth=3
	movl	$0, -4(%rbp)
.LBB73_75:                              # %for.cond240
                                        #   Parent Loop BB73_69 Depth=1
                                        #     Parent Loop BB73_71 Depth=2
                                        #       Parent Loop BB73_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB73_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB73_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB73_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_75
.LBB73_78:                              # %for.end259
                                        #   in Loop: Header=BB73_73 Depth=3
	jmp	.LBB73_79
.LBB73_79:                              # %for.inc260
                                        #   in Loop: Header=BB73_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_73
.LBB73_80:                              # %for.end262
                                        #   in Loop: Header=BB73_71 Depth=2
	jmp	.LBB73_81
.LBB73_81:                              # %for.inc263
                                        #   in Loop: Header=BB73_71 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_71
.LBB73_82:                              # %for.end265
                                        #   in Loop: Header=BB73_69 Depth=1
	jmp	.LBB73_83
.LBB73_83:                              # %for.inc266
                                        #   in Loop: Header=BB73_69 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_69
.LBB73_84:                              # %for.end268
	jmp	.LBB73_94
.LBB73_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB73_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB73_86 Depth=1
	movl	$0, -4(%rbp)
.LBB73_88:                              # %for.cond274
                                        #   Parent Loop BB73_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB73_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB73_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_88
.LBB73_91:                              # %for.end294
                                        #   in Loop: Header=BB73_86 Depth=1
	jmp	.LBB73_92
.LBB73_92:                              # %for.inc295
                                        #   in Loop: Header=BB73_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_86
.LBB73_93:                              # %for.end297
	jmp	.LBB73_94
.LBB73_94:                              # %if.end298
	jmp	.LBB73_95
.LBB73_95:                              # %if.end299
	jmp	.LBB73_105
.LBB73_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB73_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB73_97 Depth=1
	movl	$0, -4(%rbp)
.LBB73_99:                              # %for.cond305
                                        #   Parent Loop BB73_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB73_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB73_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_99
.LBB73_102:                             # %for.end317
                                        #   in Loop: Header=BB73_97 Depth=1
	jmp	.LBB73_103
.LBB73_103:                             # %for.inc318
                                        #   in Loop: Header=BB73_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_97
.LBB73_104:                             # %for.end320
	jmp	.LBB73_105
.LBB73_105:                             # %if.end321
	jmp	.LBB73_180
.LBB73_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_157
# %bb.107:                              # %if.then326
	movl	$0, -12(%rbp)
.LBB73_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_110 Depth 2
                                        #       Child Loop BB73_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB73_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB73_108 Depth=1
	movl	$0, -16(%rbp)
.LBB73_110:                             # %for.cond331
                                        #   Parent Loop BB73_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB73_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB73_110 Depth=2
	movl	$0, -4(%rbp)
.LBB73_112:                             # %for.cond335
                                        #   Parent Loop BB73_108 Depth=1
                                        #     Parent Loop BB73_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB73_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB73_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB73_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_112
.LBB73_115:                             # %for.end359
                                        #   in Loop: Header=BB73_110 Depth=2
	jmp	.LBB73_116
.LBB73_116:                             # %for.inc360
                                        #   in Loop: Header=BB73_110 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_110
.LBB73_117:                             # %for.end362
                                        #   in Loop: Header=BB73_108 Depth=1
	jmp	.LBB73_118
.LBB73_118:                             # %for.inc363
                                        #   in Loop: Header=BB73_108 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_108
.LBB73_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB73_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB73_120 Depth=1
	movl	$0, -8(%rbp)
.LBB73_122:                             # %for.cond370
                                        #   Parent Loop BB73_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB73_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB73_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_122
.LBB73_125:                             # %for.end380
                                        #   in Loop: Header=BB73_120 Depth=1
	jmp	.LBB73_126
.LBB73_126:                             # %for.inc381
                                        #   in Loop: Header=BB73_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_120
.LBB73_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB73_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB73_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB73_129 Depth=1
	movl	$0, -4(%rbp)
.LBB73_131:                             # %for.cond390
                                        #   Parent Loop BB73_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB73_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB73_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_131
.LBB73_134:                             # %for.end410
                                        #   in Loop: Header=BB73_129 Depth=1
	jmp	.LBB73_135
.LBB73_135:                             # %for.inc411
                                        #   in Loop: Header=BB73_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_129
.LBB73_136:                             # %for.end413
	jmp	.LBB73_156
.LBB73_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB73_155
# %bb.138:                              # %if.then416
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB73_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_141 Depth 2
                                        #       Child Loop BB73_143 Depth 3
                                        #         Child Loop BB73_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB73_139 Depth=1
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB73_141:                             # %for.cond425
                                        #   Parent Loop BB73_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB73_143 Depth 3
                                        #         Child Loop BB73_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB73_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB73_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-12(%rbp), %esi
	movl	-16(%rbp), %edx
	movl	-12(%rbp), %ecx
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB73_143:                             # %for.cond452
                                        #   Parent Loop BB73_139 Depth=1
                                        #     Parent Loop BB73_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB73_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB73_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB73_143 Depth=3
	movl	$0, -4(%rbp)
.LBB73_145:                             # %for.cond456
                                        #   Parent Loop BB73_139 Depth=1
                                        #     Parent Loop BB73_141 Depth=2
                                        #       Parent Loop BB73_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB73_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB73_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB73_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_145
.LBB73_148:                             # %for.end475
                                        #   in Loop: Header=BB73_143 Depth=3
	jmp	.LBB73_149
.LBB73_149:                             # %for.inc476
                                        #   in Loop: Header=BB73_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_143
.LBB73_150:                             # %for.end478
                                        #   in Loop: Header=BB73_141 Depth=2
	jmp	.LBB73_151
.LBB73_151:                             # %for.inc479
                                        #   in Loop: Header=BB73_141 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB73_141
.LBB73_152:                             # %for.end481
                                        #   in Loop: Header=BB73_139 Depth=1
	jmp	.LBB73_153
.LBB73_153:                             # %for.inc482
                                        #   in Loop: Header=BB73_139 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB73_139
.LBB73_154:                             # %for.end484
	jmp	.LBB73_155
.LBB73_155:                             # %if.end485
	jmp	.LBB73_156
.LBB73_156:                             # %if.end486
	jmp	.LBB73_157
.LBB73_157:                             # %if.end487
	jmp	.LBB73_180
.LBB73_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB73_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB73_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB73_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	$0, -4(%rbp)
.LBB73_163:                             # %for.cond499
                                        #   Parent Loop BB73_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB73_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-28(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-32(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB73_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_163
.LBB73_166:                             # %for.end519
                                        #   in Loop: Header=BB73_161 Depth=1
	jmp	.LBB73_167
.LBB73_167:                             # %for.inc520
                                        #   in Loop: Header=BB73_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_161
.LBB73_168:                             # %for.end522
	jmp	.LBB73_169
.LBB73_169:                             # %if.end523
	jmp	.LBB73_179
.LBB73_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB73_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB73_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB73_171 Depth=1
	movl	$0, -4(%rbp)
.LBB73_173:                             # %for.cond529
                                        #   Parent Loop BB73_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB73_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB73_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-28(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB73_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_173
.LBB73_176:                             # %for.end541
                                        #   in Loop: Header=BB73_171 Depth=1
	jmp	.LBB73_177
.LBB73_177:                             # %for.inc542
                                        #   in Loop: Header=BB73_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_171
.LBB73_178:                             # %for.end544
	jmp	.LBB73_179
.LBB73_179:                             # %if.end545
	jmp	.LBB73_180
.LBB73_180:                             # %sw.epilog
	cmpl	$635541168, -68(%rbp)   # imm = 0x25E196B0
	jne	.LBB73_182
.LBB73_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_181
.Lfunc_end73:
	.size	Conceal_Error.63, .Lfunc_end73-Conceal_Error.63
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI73_0:
	.quad	.LBB73_16
	.quad	.LBB73_158
	.quad	.LBB73_106
	.quad	.LBB73_180
	.quad	.LBB73_36
                                        # -- End function
	.text
	.globl	Conceal_Error.64        # -- Begin function Conceal_Error.64
	.p2align	4, 0x90
	.type	Conceal_Error.64,@function
Conceal_Error.64:                       # @Conceal_Error.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1248, %rsp             # imm = 0x4E0
	xorl	%r9d, %r9d
	movl	$1241980384, -68(%rbp)  # imm = 0x4A071DE0
	movq	%rdi, -48(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -24(%rbp)
	movq	%rcx, -56(%rbp)
	movq	%r8, -88(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	subl	$1, %eax
	movq	img, %rcx
	cltd
	idivl	32(%rcx)
	movl	%edx, -36(%rbp)
	movl	-20(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -32(%rbp)
	movl	-24(%rbp), %eax
	shll	$4, %eax
	movl	%eax, -28(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$0, %eax
	jne	.LBB74_6
# %bb.1:                                # %land.rhs
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %r9b
	je	.LBB74_5
# %bb.2:                                # %lor.rhs
	xorl	%r9d, %r9d
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_4
# %bb.3:                                # %land.rhs11
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%r9b
.LBB74_4:                               # %land.end
.LBB74_5:                               # %lor.end
.LBB74_6:                               # %land.end14
	andb	$1, %r9b
	movzbl	%r9b, %eax
	movl	%eax, -64(%rbp)
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$1, %eax
	jl	.LBB74_8
# %bb.7:                                # %land.lhs.true
	movq	decs, %rax
	movq	48(%rax), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-20(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	cmpl	$3, %eax
	jle	.LBB74_9
.LBB74_8:                               # %lor.lhs.false
	xorl	%eax, %eax
	movq	decs, %rcx
	movq	48(%rcx), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-20(%rbp), %rdx
	movzbl	(%rcx,%rdx), %ecx
	cmpl	$8, %ecx
	jne	.LBB74_14
.LBB74_9:                               # %land.rhs39
	movq	img, %rax
	cmpl	$0, 24(%rax)
	movb	$1, %al
	je	.LBB74_13
# %bb.10:                               # %lor.rhs43
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$1, 24(%rcx)
	jne	.LBB74_12
# %bb.11:                               # %land.rhs47
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	setg	%al
.LBB74_12:                              # %land.end51
.LBB74_13:                              # %lor.end53
.LBB74_14:                              # %land.end54
	movzbl	%al, %eax
	andl	$1, %eax
	movl	%eax, -60(%rbp)
	movq	enc_picture(%rip), %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-88(%rbp), %rax
	movslq	-20(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-24(%rbp), %rcx
	movzbl	(%rax,%rcx), %eax
	addl	$-1, %eax
	movl	%eax, %ecx
	subl	$4, %ecx
	ja	.LBB74_180
# %bb.15:                               # %land.end54
	movq	.LJTI74_0(,%rax,8), %rax
	jmpq	*%rax
.LBB74_16:                              # %sw.bb
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_26
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB74_18:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_20 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_25
# %bb.19:                               # %for.body
                                        #   in Loop: Header=BB74_18 Depth=1
	movl	$0, -4(%rbp)
.LBB74_20:                              # %for.cond68
                                        #   Parent Loop BB74_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_23
# %bb.21:                               # %for.body71
                                        #   in Loop: Header=BB74_20 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc
                                        #   in Loop: Header=BB74_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_20
.LBB74_23:                              # %for.end
                                        #   in Loop: Header=BB74_18 Depth=1
	jmp	.LBB74_24
.LBB74_24:                              # %for.inc85
                                        #   in Loop: Header=BB74_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_18
.LBB74_25:                              # %for.end87
	jmp	.LBB74_35
.LBB74_26:                              # %if.else
	movl	$0, -8(%rbp)
.LBB74_27:                              # %for.cond88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_29 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_34
# %bb.28:                               # %for.body91
                                        #   in Loop: Header=BB74_27 Depth=1
	movl	$0, -4(%rbp)
.LBB74_29:                              # %for.cond92
                                        #   Parent Loop BB74_27 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_32
# %bb.30:                               # %for.body95
                                        #   in Loop: Header=BB74_29 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.31:                               # %for.inc102
                                        #   in Loop: Header=BB74_29 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_29
.LBB74_32:                              # %for.end104
                                        #   in Loop: Header=BB74_27 Depth=1
	jmp	.LBB74_33
.LBB74_33:                              # %for.inc105
                                        #   in Loop: Header=BB74_27 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_27
.LBB74_34:                              # %for.end107
	jmp	.LBB74_35
.LBB74_35:                              # %if.end
	jmp	.LBB74_180
.LBB74_36:                              # %sw.bb108
	movl	$0, -16(%rbp)
.LBB74_37:                              # %for.cond109
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_39 Depth 2
                                        #       Child Loop BB74_41 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_48
# %bb.38:                               # %for.body112
                                        #   in Loop: Header=BB74_37 Depth=1
	movl	$0, -12(%rbp)
.LBB74_39:                              # %for.cond113
                                        #   Parent Loop BB74_37 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_41 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_46
# %bb.40:                               # %for.body116
                                        #   in Loop: Header=BB74_39 Depth=2
	movl	$0, -4(%rbp)
.LBB74_41:                              # %for.cond117
                                        #   Parent Loop BB74_37 Depth=1
                                        #     Parent Loop BB74_39 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB74_44
# %bb.42:                               # %for.body120
                                        #   in Loop: Header=BB74_41 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.43:                               # %for.inc139
                                        #   in Loop: Header=BB74_41 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_41
.LBB74_44:                              # %for.end141
                                        #   in Loop: Header=BB74_39 Depth=2
	jmp	.LBB74_45
.LBB74_45:                              # %for.inc142
                                        #   in Loop: Header=BB74_39 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_39
.LBB74_46:                              # %for.end144
                                        #   in Loop: Header=BB74_37 Depth=1
	jmp	.LBB74_47
.LBB74_47:                              # %for.inc145
                                        #   in Loop: Header=BB74_37 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_37
.LBB74_48:                              # %for.end147
	movl	$0, -4(%rbp)
.LBB74_49:                              # %for.cond148
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_51 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_56
# %bb.50:                               # %for.body151
                                        #   in Loop: Header=BB74_49 Depth=1
	movl	$0, -8(%rbp)
.LBB74_51:                              # %for.cond152
                                        #   Parent Loop BB74_49 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_54
# %bb.52:                               # %for.body155
                                        #   in Loop: Header=BB74_51 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.53:                               # %for.inc160
                                        #   in Loop: Header=BB74_51 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_51
.LBB74_54:                              # %for.end162
                                        #   in Loop: Header=BB74_49 Depth=1
	jmp	.LBB74_55
.LBB74_55:                              # %for.inc163
                                        #   in Loop: Header=BB74_49 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_49
.LBB74_56:                              # %for.end165
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_96
# %bb.57:                               # %if.then169
	cmpl	$0, -64(%rbp)
	je	.LBB74_67
# %bb.58:                               # %if.then170
	movl	$0, -8(%rbp)
.LBB74_59:                              # %for.cond171
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_61 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_66
# %bb.60:                               # %for.body174
                                        #   in Loop: Header=BB74_59 Depth=1
	movl	$0, -4(%rbp)
.LBB74_61:                              # %for.cond175
                                        #   Parent Loop BB74_59 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_64
# %bb.62:                               # %for.body178
                                        #   in Loop: Header=BB74_61 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.63:                               # %for.inc193
                                        #   in Loop: Header=BB74_61 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_61
.LBB74_64:                              # %for.end195
                                        #   in Loop: Header=BB74_59 Depth=1
	jmp	.LBB74_65
.LBB74_65:                              # %for.inc196
                                        #   in Loop: Header=BB74_59 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_59
.LBB74_66:                              # %for.end198
	jmp	.LBB74_95
.LBB74_67:                              # %if.else199
	cmpl	$0, -60(%rbp)
	je	.LBB74_85
# %bb.68:                               # %if.then201
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB74_69:                              # %for.cond203
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_71 Depth 2
                                        #       Child Loop BB74_73 Depth 3
                                        #         Child Loop BB74_75 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_84
# %bb.70:                               # %for.body208
                                        #   in Loop: Header=BB74_69 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB74_71:                              # %for.cond210
                                        #   Parent Loop BB74_69 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_73 Depth 3
                                        #         Child Loop BB74_75 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_82
# %bb.72:                               # %for.body215
                                        #   in Loop: Header=BB74_71 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB74_73:                              # %for.cond236
                                        #   Parent Loop BB74_69 Depth=1
                                        #     Parent Loop BB74_71 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_75 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB74_80
# %bb.74:                               # %for.body239
                                        #   in Loop: Header=BB74_73 Depth=3
	movl	$0, -4(%rbp)
.LBB74_75:                              # %for.cond240
                                        #   Parent Loop BB74_69 Depth=1
                                        #     Parent Loop BB74_71 Depth=2
                                        #       Parent Loop BB74_73 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB74_78
# %bb.76:                               # %for.body243
                                        #   in Loop: Header=BB74_75 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.77:                               # %for.inc257
                                        #   in Loop: Header=BB74_75 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_75
.LBB74_78:                              # %for.end259
                                        #   in Loop: Header=BB74_73 Depth=3
	jmp	.LBB74_79
.LBB74_79:                              # %for.inc260
                                        #   in Loop: Header=BB74_73 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_73
.LBB74_80:                              # %for.end262
                                        #   in Loop: Header=BB74_71 Depth=2
	jmp	.LBB74_81
.LBB74_81:                              # %for.inc263
                                        #   in Loop: Header=BB74_71 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_71
.LBB74_82:                              # %for.end265
                                        #   in Loop: Header=BB74_69 Depth=1
	jmp	.LBB74_83
.LBB74_83:                              # %for.inc266
                                        #   in Loop: Header=BB74_69 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_69
.LBB74_84:                              # %for.end268
	jmp	.LBB74_94
.LBB74_85:                              # %if.else269
	movl	$0, -8(%rbp)
.LBB74_86:                              # %for.cond270
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_88 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_93
# %bb.87:                               # %for.body273
                                        #   in Loop: Header=BB74_86 Depth=1
	movl	$0, -4(%rbp)
.LBB74_88:                              # %for.cond274
                                        #   Parent Loop BB74_86 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_91
# %bb.89:                               # %for.body277
                                        #   in Loop: Header=BB74_88 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.90:                               # %for.inc292
                                        #   in Loop: Header=BB74_88 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_88
.LBB74_91:                              # %for.end294
                                        #   in Loop: Header=BB74_86 Depth=1
	jmp	.LBB74_92
.LBB74_92:                              # %for.inc295
                                        #   in Loop: Header=BB74_86 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_86
.LBB74_93:                              # %for.end297
	jmp	.LBB74_94
.LBB74_94:                              # %if.end298
	jmp	.LBB74_95
.LBB74_95:                              # %if.end299
	jmp	.LBB74_105
.LBB74_96:                              # %if.else300
	movl	$0, -8(%rbp)
.LBB74_97:                              # %for.cond301
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_99 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_104
# %bb.98:                               # %for.body304
                                        #   in Loop: Header=BB74_97 Depth=1
	movl	$0, -4(%rbp)
.LBB74_99:                              # %for.cond305
                                        #   Parent Loop BB74_97 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_102
# %bb.100:                              # %for.body308
                                        #   in Loop: Header=BB74_99 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.101:                              # %for.inc315
                                        #   in Loop: Header=BB74_99 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_99
.LBB74_102:                             # %for.end317
                                        #   in Loop: Header=BB74_97 Depth=1
	jmp	.LBB74_103
.LBB74_103:                             # %for.inc318
                                        #   in Loop: Header=BB74_97 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_97
.LBB74_104:                             # %for.end320
	jmp	.LBB74_105
.LBB74_105:                             # %if.end321
	jmp	.LBB74_180
.LBB74_106:                             # %sw.bb322
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_157
# %bb.107:                              # %if.then326
	movl	$0, -16(%rbp)
.LBB74_108:                             # %for.cond327
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_110 Depth 2
                                        #       Child Loop BB74_112 Depth 3
	cmpl	$4, -16(%rbp)
	jge	.LBB74_119
# %bb.109:                              # %for.body330
                                        #   in Loop: Header=BB74_108 Depth=1
	movl	$0, -12(%rbp)
.LBB74_110:                             # %for.cond331
                                        #   Parent Loop BB74_108 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_112 Depth 3
	cmpl	$4, -12(%rbp)
	jge	.LBB74_117
# %bb.111:                              # %for.body334
                                        #   in Loop: Header=BB74_110 Depth=2
	movl	$0, -4(%rbp)
.LBB74_112:                             # %for.cond335
                                        #   Parent Loop BB74_108 Depth=1
                                        #     Parent Loop BB74_110 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$2, -4(%rbp)
	jge	.LBB74_115
# %bb.113:                              # %for.body338
                                        #   in Loop: Header=BB74_112 Depth=3
	movq	-80(%rbp), %rax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	-12(%rbp), %ecx
	addl	$4, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	-16(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movswl	(%rax,%rcx,2), %eax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-224(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-16(%rbp), %rcx
	shlq	$4, %rcx
	addq	%rcx, %rdx
	movslq	-12(%rbp), %rcx
	movl	%eax, (%rdx,%rcx,4)
# %bb.114:                              # %for.inc357
                                        #   in Loop: Header=BB74_112 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_112
.LBB74_115:                             # %for.end359
                                        #   in Loop: Header=BB74_110 Depth=2
	jmp	.LBB74_116
.LBB74_116:                             # %for.inc360
                                        #   in Loop: Header=BB74_110 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_110
.LBB74_117:                             # %for.end362
                                        #   in Loop: Header=BB74_108 Depth=1
	jmp	.LBB74_118
.LBB74_118:                             # %for.inc363
                                        #   in Loop: Header=BB74_108 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_108
.LBB74_119:                             # %for.end365
	movl	$0, -4(%rbp)
.LBB74_120:                             # %for.cond366
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_122 Depth 2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_127
# %bb.121:                              # %for.body369
                                        #   in Loop: Header=BB74_120 Depth=1
	movl	$0, -8(%rbp)
.LBB74_122:                             # %for.cond370
                                        #   Parent Loop BB74_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_125
# %bb.123:                              # %for.body373
                                        #   in Loop: Header=BB74_122 Depth=2
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1248(%rbp), %rcx
	addq	%rax, %rcx
	movslq	-4(%rbp), %rax
	movl	$0, (%rcx,%rax,4)
# %bb.124:                              # %for.inc378
                                        #   in Loop: Header=BB74_122 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_122
.LBB74_125:                             # %for.end380
                                        #   in Loop: Header=BB74_120 Depth=1
	jmp	.LBB74_126
.LBB74_126:                             # %for.inc381
                                        #   in Loop: Header=BB74_120 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_120
.LBB74_127:                             # %for.end383
	cmpl	$0, -64(%rbp)
	je	.LBB74_137
# %bb.128:                              # %if.then385
	movl	$0, -8(%rbp)
.LBB74_129:                             # %for.cond386
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_131 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_136
# %bb.130:                              # %for.body389
                                        #   in Loop: Header=BB74_129 Depth=1
	movl	$0, -4(%rbp)
.LBB74_131:                             # %for.cond390
                                        #   Parent Loop BB74_129 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_134
# %bb.132:                              # %for.body393
                                        #   in Loop: Header=BB74_131 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.133:                              # %for.inc408
                                        #   in Loop: Header=BB74_131 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_131
.LBB74_134:                             # %for.end410
                                        #   in Loop: Header=BB74_129 Depth=1
	jmp	.LBB74_135
.LBB74_135:                             # %for.inc411
                                        #   in Loop: Header=BB74_129 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_129
.LBB74_136:                             # %for.end413
	jmp	.LBB74_156
.LBB74_137:                             # %if.else414
	cmpl	$0, -60(%rbp)
	je	.LBB74_155
# %bb.138:                              # %if.then416
	movl	-20(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -16(%rbp)
.LBB74_139:                             # %for.cond418
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_141 Depth 2
                                        #       Child Loop BB74_143 Depth 3
                                        #         Child Loop BB74_145 Depth 4
	movl	-16(%rbp), %eax
	movl	-20(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_154
# %bb.140:                              # %for.body423
                                        #   in Loop: Header=BB74_139 Depth=1
	movl	-24(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -12(%rbp)
.LBB74_141:                             # %for.cond425
                                        #   Parent Loop BB74_139 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB74_143 Depth 3
                                        #         Child Loop BB74_145 Depth 4
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB74_152
# %bb.142:                              # %for.body430
                                        #   in Loop: Header=BB74_141 Depth=2
	leaq	-224(%rbp), %r8
	movq	-56(%rbp), %rcx
	movslq	-36(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rdi
	movl	-16(%rbp), %esi
	movl	-12(%rbp), %edx
	movl	-16(%rbp), %ecx
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %ecx
	movslq	%ecx, %rax
	shlq	$4, %rax
	movq	%r8, %r9
	addq	%rax, %r9
	movl	-12(%rbp), %eax
	movl	-24(%rbp), %ecx
	shll	$2, %ecx
	subl	%ecx, %eax
	cltq
	movl	(%r9,%rax,4), %ecx
	addq	$64, %r8
	movl	-16(%rbp), %r9d
	movl	-20(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	shlq	$4, %rax
	addq	%rax, %r8
	movl	-12(%rbp), %r9d
	movl	-24(%rbp), %eax
	shll	$2, %eax
	subl	%eax, %r9d
	movslq	%r9d, %rax
	movl	(%r8,%rax,4), %r8d
	movq	decs, %rax
	movq	32(%rax), %r9
	callq	Get_Reference_Block
	movl	$0, -8(%rbp)
.LBB74_143:                             # %for.cond452
                                        #   Parent Loop BB74_139 Depth=1
                                        #     Parent Loop BB74_141 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB74_145 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB74_150
# %bb.144:                              # %for.body455
                                        #   in Loop: Header=BB74_143 Depth=3
	movl	$0, -4(%rbp)
.LBB74_145:                             # %for.cond456
                                        #   Parent Loop BB74_139 Depth=1
                                        #     Parent Loop BB74_141 Depth=2
                                        #       Parent Loop BB74_143 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$4, -4(%rbp)
	jge	.LBB74_148
# %bb.146:                              # %for.body459
                                        #   in Loop: Header=BB74_145 Depth=4
	movq	decs, %rax
	movq	32(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-16(%rbp), %edx
	shll	$2, %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	shll	$2, %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.147:                              # %for.inc473
                                        #   in Loop: Header=BB74_145 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_145
.LBB74_148:                             # %for.end475
                                        #   in Loop: Header=BB74_143 Depth=3
	jmp	.LBB74_149
.LBB74_149:                             # %for.inc476
                                        #   in Loop: Header=BB74_143 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_143
.LBB74_150:                             # %for.end478
                                        #   in Loop: Header=BB74_141 Depth=2
	jmp	.LBB74_151
.LBB74_151:                             # %for.inc479
                                        #   in Loop: Header=BB74_141 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB74_141
.LBB74_152:                             # %for.end481
                                        #   in Loop: Header=BB74_139 Depth=1
	jmp	.LBB74_153
.LBB74_153:                             # %for.inc482
                                        #   in Loop: Header=BB74_139 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_139
.LBB74_154:                             # %for.end484
	jmp	.LBB74_155
.LBB74_155:                             # %if.end485
	jmp	.LBB74_156
.LBB74_156:                             # %if.end486
	jmp	.LBB74_157
.LBB74_157:                             # %if.end487
	jmp	.LBB74_180
.LBB74_158:                             # %sw.bb488
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_170
# %bb.159:                              # %if.then492
	cmpl	$0, -60(%rbp)
	jne	.LBB74_169
# %bb.160:                              # %if.then494
	movl	$0, -8(%rbp)
.LBB74_161:                             # %for.cond495
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_163 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_168
# %bb.162:                              # %for.body498
                                        #   in Loop: Header=BB74_161 Depth=1
	movl	$0, -4(%rbp)
.LBB74_163:                             # %for.cond499
                                        #   Parent Loop BB74_161 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_166
# %bb.164:                              # %for.body502
                                        #   in Loop: Header=BB74_163 Depth=2
	movq	-56(%rbp), %rax
	movslq	-36(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	-48(%rbp), %rcx
	movl	-32(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-28(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.165:                              # %for.inc517
                                        #   in Loop: Header=BB74_163 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_163
.LBB74_166:                             # %for.end519
                                        #   in Loop: Header=BB74_161 Depth=1
	jmp	.LBB74_167
.LBB74_167:                             # %for.inc520
                                        #   in Loop: Header=BB74_161 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_161
.LBB74_168:                             # %for.end522
	jmp	.LBB74_169
.LBB74_169:                             # %if.end523
	jmp	.LBB74_179
.LBB74_170:                             # %if.else524
	movl	$0, -8(%rbp)
.LBB74_171:                             # %for.cond525
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB74_173 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB74_178
# %bb.172:                              # %for.body528
                                        #   in Loop: Header=BB74_171 Depth=1
	movl	$0, -4(%rbp)
.LBB74_173:                             # %for.cond529
                                        #   Parent Loop BB74_171 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB74_176
# %bb.174:                              # %for.body532
                                        #   in Loop: Header=BB74_173 Depth=2
	movq	-48(%rbp), %rax
	movl	-32(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-28(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	$127, (%rax,%rcx,2)
# %bb.175:                              # %for.inc539
                                        #   in Loop: Header=BB74_173 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB74_173
.LBB74_176:                             # %for.end541
                                        #   in Loop: Header=BB74_171 Depth=1
	jmp	.LBB74_177
.LBB74_177:                             # %for.inc542
                                        #   in Loop: Header=BB74_171 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB74_171
.LBB74_178:                             # %for.end544
	jmp	.LBB74_179
.LBB74_179:                             # %if.end545
	jmp	.LBB74_180
.LBB74_180:                             # %sw.epilog
	cmpl	$1241980384, -68(%rbp)  # imm = 0x4A071DE0
	jne	.LBB74_182
.LBB74_181:
	addq	$1248, %rsp             # imm = 0x4E0
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_182:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_181
.Lfunc_end74:
	.size	Conceal_Error.64, .Lfunc_end74-Conceal_Error.64
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.p2align	3
.LJTI74_0:
	.quad	.LBB74_16
	.quad	.LBB74_158
	.quad	.LBB74_106
	.quad	.LBB74_180
	.quad	.LBB74_36
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.65
.LCPI75_0:
	.quad	4636737291354636288     # double 100
.LCPI75_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.65
	.p2align	4, 0x90
	.type	Build_Status_Map.65,@function
Build_Status_Map.65:                    # @Build_Status_Map.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$387487487, -40(%rbp)   # imm = 0x171896FF
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movl	$0, -12(%rbp)
.LBB75_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_3 Depth 2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB75_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	$0, -8(%rbp)
.LBB75_3:                               # %for.cond2
                                        #   Parent Loop BB75_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB75_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB75_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB75_13
.LBB75_6:                               # %if.then
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI75_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB75_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB75_8:                               # %if.end
                                        #   in Loop: Header=BB75_3 Depth=2
	callq	rand
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI75_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB75_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB75_10:                              # %if.end20
                                        #   in Loop: Header=BB75_3 Depth=2
	callq	rand
	vmovsd	.LCPI75_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI75_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB75_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	$1, -4(%rbp)
.LBB75_12:                              # %if.end29
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB75_13:                              # %if.end30
                                        #   in Loop: Header=BB75_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB75_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB75_18
.LBB75_15:                              # %if.else
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB75_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB75_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB75_17:                              # %if.end49
                                        #   in Loop: Header=BB75_3 Depth=2
	jmp	.LBB75_18
.LBB75_18:                              # %if.end50
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB75_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_3
.LBB75_20:                              # %for.end
                                        #   in Loop: Header=BB75_1 Depth=1
	jmp	.LBB75_21
.LBB75_21:                              # %for.inc53
                                        #   in Loop: Header=BB75_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB75_1
.LBB75_22:                              # %for.end55
	cmpl	$387487487, -40(%rbp)   # imm = 0x171896FF
	jne	.LBB75_24
.LBB75_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_23
.Lfunc_end75:
	.size	Build_Status_Map.65, .Lfunc_end75-Build_Status_Map.65
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function Build_Status_Map.66
.LCPI76_0:
	.quad	4636737291354636288     # double 100
.LCPI76_1:
	.quad	4746794007244308480     # double 2147483647
	.text
	.globl	Build_Status_Map.66
	.p2align	4, 0x90
	.type	Build_Status_Map.66,@function
Build_Status_Map.66:                    # @Build_Status_Map.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$495465726, -40(%rbp)   # imm = 0x1D8834FE
	movq	%rdi, -32(%rbp)
	movl	$-1, -20(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, -4(%rbp)
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %ecx
	idivl	%ecx
	movl	%eax, -36(%rbp)
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	idivl	%ecx
	movl	%eax, -44(%rbp)
	movl	$0, -8(%rbp)
.LBB76_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB76_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB76_22
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	$0, -12(%rbp)
.LBB76_3:                               # %for.cond2
                                        #   Parent Loop BB76_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	cmpl	-44(%rbp), %eax
	jge	.LBB76_20
# %bb.4:                                # %for.body4
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	input, %rax
	cmpl	$0, 208(%rax)
	je	.LBB76_6
# %bb.5:                                # %lor.lhs.false
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-16(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	4(%rax), %eax
	cmpl	-20(%rbp), %eax
	je	.LBB76_13
.LBB76_6:                               # %if.then
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	$0, -4(%rbp)
	callq	rand
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI76_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2900(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB76_8
# %bb.7:                                # %if.then10
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$3, %eax
	movl	%eax, -4(%rbp)
.LBB76_8:                               # %if.end
                                        #   in Loop: Header=BB76_3 Depth=2
	callq	rand
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI76_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2896(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB76_10
# %bb.9:                                # %if.then18
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -4(%rbp)
.LBB76_10:                              # %if.end20
                                        #   in Loop: Header=BB76_3 Depth=2
	callq	rand
	vmovsd	.LCPI76_0(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI76_1(%rip), %xmm1  # xmm1 = mem[0],zero
	vcvtsi2sd	%eax, %xmm0, %xmm2
	vdivsd	%xmm1, %xmm2, %xmm1
	vmulsd	%xmm0, %xmm1, %xmm0
	movq	input, %rax
	vcvtsi2sdl	2892(%rax), %xmm0, %xmm1
	vucomisd	%xmm0, %xmm1
	jbe	.LBB76_12
# %bb.11:                               # %if.then28
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	$1, -4(%rbp)
.LBB76_12:                              # %if.end29
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-20(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -20(%rbp)
.LBB76_13:                              # %if.end30
                                        #   in Loop: Header=BB76_3 Depth=2
	cmpl	$0, -4(%rbp)
	jne	.LBB76_15
# %bb.14:                               # %if.then32
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$0, (%rax,%rcx)
	jmp	.LBB76_18
.LBB76_15:                              # %if.else
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-4(%rbp), %eax
	movq	-32(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movb	%al, (%rcx,%rdx)
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB76_17
# %bb.16:                               # %if.then44
                                        #   in Loop: Header=BB76_3 Depth=2
	movq	-32(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movb	$1, (%rax,%rcx)
.LBB76_17:                              # %if.end49
                                        #   in Loop: Header=BB76_3 Depth=2
	jmp	.LBB76_18
.LBB76_18:                              # %if.end50
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
# %bb.19:                               # %for.inc
                                        #   in Loop: Header=BB76_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB76_3
.LBB76_20:                              # %for.end
                                        #   in Loop: Header=BB76_1 Depth=1
	jmp	.LBB76_21
.LBB76_21:                              # %for.inc53
                                        #   in Loop: Header=BB76_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB76_1
.LBB76_22:                              # %for.end55
	cmpl	$495465726, -40(%rbp)   # imm = 0x1D8834FE
	jne	.LBB76_24
.LBB76_23:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_24:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_23
.Lfunc_end76:
	.size	Build_Status_Map.66, .Lfunc_end76-Build_Status_Map.66
	.cfi_endproc
                                        # -- End function
	.type	Get_Reference_Pixel.COEF,@object # @Get_Reference_Pixel.COEF
	.section	.rodata,"a",@progbits
	.p2align	4
Get_Reference_Pixel.COEF:
	.long	1                       # 0x1
	.long	4294967291              # 0xfffffffb
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	1                       # 0x1
	.size	Get_Reference_Pixel.COEF, 24

	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4

	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
