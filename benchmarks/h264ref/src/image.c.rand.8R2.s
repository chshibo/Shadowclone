	.text
	.file	"image.c"
	.globl	MbAffPostProc           # -- Begin function MbAffPostProc
	.p2align	4, 0x90
	.type	MbAffPostProc,@function
MbAffPostProc:                          # @MbAffPostProc
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB0_9
# %bb.1:                                # %func_MbAffPostProc.39
	callq	MbAffPostProc.39
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_2:                                # %func_MbAffPostProc.51
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.51
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_3:                                # %func_MbAffPostProc.75
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.75
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_4:                                # %func_MbAffPostProc.78
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.78
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_5:                                # %func_MbAffPostProc.103
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.103
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_6:                                # %func_MbAffPostProc.132
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.132
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_7:                                # %func_MbAffPostProc.147
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.147
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_8:                                # %func_MbAffPostProc.149
	.cfi_def_cfa %rbp, 16
	callq	MbAffPostProc.149
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB0_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB0_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB0_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB0_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB0_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB0_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB0_7
	jmp	.LBB0_8
.Lfunc_end0:
	.size	MbAffPostProc, .Lfunc_end0-MbAffPostProc
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture          # -- Begin function code_a_picture
	.p2align	4, 0x90
	.type	code_a_picture,@function
code_a_picture:                         # @code_a_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB1_9
# %bb.1:                                # %func_code_a_picture.95
	movq	%rbx, %rdi
	callq	code_a_picture.95
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_2:                                # %func_code_a_picture.135
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.135
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_3:                                # %func_code_a_picture.152
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.152
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_4:                                # %func_code_a_picture.175
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.175
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_5:                                # %func_code_a_picture.180
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.180
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_6:                                # %func_code_a_picture.182
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.182
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_7:                                # %func_code_a_picture.184
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.184
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_8:                                # %func_code_a_picture.187
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	code_a_picture.187
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB1_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB1_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB1_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB1_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB1_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB1_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB1_7
	jmp	.LBB1_8
.Lfunc_end1:
	.size	code_a_picture, .Lfunc_end1-code_a_picture
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame        # -- Begin function encode_one_frame
	.p2align	4, 0x90
	.type	encode_one_frame,@function
encode_one_frame:                       # @encode_one_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB2_9
# %bb.1:                                # %func_encode_one_frame.34
	callq	encode_one_frame.34
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_2:                                # %func_encode_one_frame.35
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.35
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_3:                                # %func_encode_one_frame.38
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.38
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_4:                                # %func_encode_one_frame.68
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.68
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_5:                                # %func_encode_one_frame.87
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.87
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_6:                                # %func_encode_one_frame.96
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.96
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_7:                                # %func_encode_one_frame.98
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.98
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_8:                                # %func_encode_one_frame.99
	.cfi_def_cfa %rbp, 16
	callq	encode_one_frame.99
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB2_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB2_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB2_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB2_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB2_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB2_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB2_7
	jmp	.LBB2_8
.Lfunc_end2:
	.size	encode_one_frame, .Lfunc_end2-encode_one_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame
	.type	ReadOneFrame,@function
ReadOneFrame:                           # @ReadOneFrame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r12d
	movl	%ecx, %r13d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r15d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB3_9
# %bb.1:                                # %func_ReadOneFrame.22
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	callq	ReadOneFrame.22
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_2:                                # %func_ReadOneFrame.36
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.36
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_3:                                # %func_ReadOneFrame.65
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.65
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_4:                                # %func_ReadOneFrame.97
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.97
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_5:                                # %func_ReadOneFrame.104
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.104
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_6:                                # %func_ReadOneFrame.116
	.cfi_def_cfa %rbp, 16
	movl	%r15d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r13d, %ecx
	movl	%r12d, %r8d
	callq	ReadOneFrame.116
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_7:                                # %func_ReadOneFrame.139
	.cfi_def_cfa %rbp, 16
	callq	ReadOneFrame.139
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_8:                                # %func_ReadOneFrame.162
	.cfi_def_cfa %rbp, 16
	callq	ReadOneFrame.162
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB3_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	cmpl	$1, %eax
	je	.LBB3_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB3_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB3_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB3_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB3_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r12d, %r8d
	movl	%r13d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r15d, %edi
	je	.LBB3_7
	jmp	.LBB3_8
.Lfunc_end3:
	.size	ReadOneFrame, .Lfunc_end3-ReadOneFrame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders
	.type	PaddAutoCropBorders,@function
PaddAutoCropBorders:                    # @PaddAutoCropBorders
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r9d, -44(%rbp)         # 4-byte Spill
	movl	%r8d, %r15d
	movl	%ecx, %r12d
	movl	%edx, %ebx
	movl	%esi, %r14d
	movl	%edi, %r13d
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB4_9
# %bb.1:                                # %func_PaddAutoCropBorders.20
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %eax
	movl	%eax, (%rsp)
	movl	24(%rbp), %eax
	movl	%eax, 8(%rsp)
	callq	PaddAutoCropBorders.20
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_2:                                # %func_PaddAutoCropBorders.46
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.46
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_3:                                # %func_PaddAutoCropBorders.54
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.54
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_4:                                # %func_PaddAutoCropBorders.70
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.70
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_5:                                # %func_PaddAutoCropBorders.74
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.74
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_6:                                # %func_PaddAutoCropBorders.101
	.cfi_def_cfa %rbp, 16
	movl	%r13d, %edi
	movl	%r14d, %esi
	movl	%ebx, %edx
	movl	%r12d, %ecx
	movl	%r15d, %r8d
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.101
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_7:                                # %func_PaddAutoCropBorders.106
	.cfi_def_cfa %rbp, 16
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.106
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_8:                                # %func_PaddAutoCropBorders.110
	.cfi_def_cfa %rbp, 16
	movl	%r11d, (%rsp)
	movl	%r10d, 8(%rsp)
	callq	PaddAutoCropBorders.110
	addq	$24, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB4_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	movl	-44(%rbp), %r9d         # 4-byte Reload
	movl	16(%rbp), %r11d
	movl	24(%rbp), %r10d
	cmpl	$1, %eax
	je	.LBB4_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB4_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB4_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB4_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB4_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	movl	%r15d, %r8d
	movl	%r12d, %ecx
	movl	%ebx, %edx
	movl	%r14d, %esi
	movl	%r13d, %edi
	je	.LBB4_7
	jmp	.LBB4_8
.Lfunc_end4:
	.size	PaddAutoCropBorders, .Lfunc_end4-PaddAutoCropBorders
	.cfi_endproc
                                        # -- End function
	.globl	field_picture           # -- Begin function field_picture
	.p2align	4, 0x90
	.type	field_picture,@function
field_picture:                          # @field_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movq	%rsi, %r14
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB5_9
# %bb.1:                                # %func_field_picture.58
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.58
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_2:                                # %func_field_picture.160
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.160
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_3:                                # %func_field_picture.166
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.166
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_4:                                # %func_field_picture.174
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.174
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_5:                                # %func_field_picture.176
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.176
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_6:                                # %func_field_picture.179
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.179
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_7:                                # %func_field_picture.181
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.181
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_8:                                # %func_field_picture.186
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r14, %rsi
	callq	field_picture.186
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB5_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB5_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB5_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB5_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB5_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB5_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB5_7
	jmp	.LBB5_8
.Lfunc_end5:
	.size	field_picture, .Lfunc_end5-field_picture
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture           # -- Begin function frame_picture
	.p2align	4, 0x90
	.type	frame_picture,@function
frame_picture:                          # @frame_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB6_2
# %bb.1:                                # %func_frame_picture.30
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	frame_picture.30
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB6_2:                                # %func_frame_picture.67
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	frame_picture.67
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end6:
	.size	frame_picture, .Lfunc_end6-frame_picture
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function picture_structure_decision
	.type	picture_structure_decision,@function
picture_structure_decision:             # @picture_structure_decision
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB7_9
# %bb.1:                                # %func_picture_structure_decision.6
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.6
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_2:                                # %func_picture_structure_decision.72
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.72
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_3:                                # %func_picture_structure_decision.120
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.120
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_4:                                # %func_picture_structure_decision.126
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.126
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_5:                                # %func_picture_structure_decision.129
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.129
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_6:                                # %func_picture_structure_decision.131
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.131
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_7:                                # %func_picture_structure_decision.141
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.141
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_8:                                # %func_picture_structure_decision.150
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	picture_structure_decision.150
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB7_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB7_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB7_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB7_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB7_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB7_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB7_7
	jmp	.LBB7_8
.Lfunc_end7:
	.size	picture_structure_decision, .Lfunc_end7-picture_structure_decision
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer
	.type	field_mode_buffer,@function
field_mode_buffer:                      # @field_mode_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	vmovss	%xmm2, -20(%rbp)        # 4-byte Spill
	vmovss	%xmm1, -16(%rbp)        # 4-byte Spill
	vmovss	%xmm0, -12(%rbp)        # 4-byte Spill
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB8_9
# %bb.1:                                # %func_field_mode_buffer.2
	movl	%ebx, %edi
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer.2
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_2:                                # %func_field_mode_buffer.53
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.53
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_3:                                # %func_field_mode_buffer.66
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.66
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_4:                                # %func_field_mode_buffer.102
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.102
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_5:                                # %func_field_mode_buffer.122
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.122
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_6:                                # %func_field_mode_buffer.155
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.155
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_7:                                # %func_field_mode_buffer.163
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.163
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_8:                                # %func_field_mode_buffer.165
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	field_mode_buffer.165
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB8_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	cmpl	$1, %eax
	je	.LBB8_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB8_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB8_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB8_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB8_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB8_7
	jmp	.LBB8_8
.Lfunc_end8:
	.size	field_mode_buffer, .Lfunc_end8-field_mode_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture
	.type	writeout_picture,@function
writeout_picture:                       # @writeout_picture
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB9_9
# %bb.1:                                # %func_writeout_picture.5
	movq	%rbx, %rdi
	callq	writeout_picture.5
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_2:                                # %func_writeout_picture.43
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.43
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_3:                                # %func_writeout_picture.73
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.73
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_4:                                # %func_writeout_picture.107
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.107
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_5:                                # %func_writeout_picture.128
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.128
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_6:                                # %func_writeout_picture.137
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.137
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_7:                                # %func_writeout_picture.142
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.142
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_8:                                # %func_writeout_picture.154
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	writeout_picture.154
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB9_9:                                # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB9_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB9_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB9_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB9_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB9_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB9_7
	jmp	.LBB9_8
.Lfunc_end9:
	.size	writeout_picture, .Lfunc_end9-writeout_picture
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer
	.type	frame_mode_buffer,@function
frame_mode_buffer:                      # @frame_mode_buffer
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$24, %rsp
	.cfi_offset %rbx, -24
	vmovss	%xmm2, -20(%rbp)        # 4-byte Spill
	vmovss	%xmm1, -16(%rbp)        # 4-byte Spill
	vmovss	%xmm0, -12(%rbp)        # 4-byte Spill
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB10_9
# %bb.1:                                # %func_frame_mode_buffer.48
	movl	%ebx, %edi
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer.48
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_2:                               # %func_frame_mode_buffer.57
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.57
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_3:                               # %func_frame_mode_buffer.76
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.76
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_4:                               # %func_frame_mode_buffer.115
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.115
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_5:                               # %func_frame_mode_buffer.140
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.140
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_6:                               # %func_frame_mode_buffer.146
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.146
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_7:                               # %func_frame_mode_buffer.156
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.156
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_8:                               # %func_frame_mode_buffer.167
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	frame_mode_buffer.167
	addq	$24, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB10_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	vmovss	-12(%rbp), %xmm0        # 4-byte Reload
                                        # xmm0 = mem[0],zero,zero,zero
	vmovss	-16(%rbp), %xmm1        # 4-byte Reload
                                        # xmm1 = mem[0],zero,zero,zero
	vmovss	-20(%rbp), %xmm2        # 4-byte Reload
                                        # xmm2 = mem[0],zero,zero,zero
	cmpl	$1, %eax
	je	.LBB10_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB10_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB10_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB10_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB10_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB10_7
	jmp	.LBB10_8
.Lfunc_end10:
	.size	frame_mode_buffer, .Lfunc_end10-frame_mode_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits
	.type	ReportNALNonVLCBits,@function
ReportNALNonVLCBits:                    # @ReportNALNonVLCBits
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB11_2
# %bb.1:                                # %func_ReportNALNonVLCBits.17
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportNALNonVLCBits.17
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB11_2:                               # %func_ReportNALNonVLCBits.40
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportNALNonVLCBits.40
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end11:
	.size	ReportNALNonVLCBits, .Lfunc_end11-ReportNALNonVLCBits
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe
	.type	ReportFirstframe,@function
ReportFirstframe:                       # @ReportFirstframe
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB12_7
# %bb.1:                                # %func_ReportFirstframe.69
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.69
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_2:                               # %func_ReportFirstframe.71
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.71
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_3:                               # %func_ReportFirstframe.83
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.83
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_4:                               # %func_ReportFirstframe.86
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.86
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_5:                               # %func_ReportFirstframe.114
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.114
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_6:                               # %func_ReportFirstframe.118
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportFirstframe.118
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB12_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB12_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB12_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB12_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB12_5
	jmp	.LBB12_6
.Lfunc_end12:
	.size	ReportFirstframe, .Lfunc_end12-ReportFirstframe
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra
	.type	ReportIntra,@function
ReportIntra:                            # @ReportIntra
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB13_2
# %bb.1:                                # %func_ReportIntra.21
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportIntra.21
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB13_2:                               # %func_ReportIntra.50
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportIntra.50
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end13:
	.size	ReportIntra, .Lfunc_end13-ReportIntra
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP
	.type	ReportSP,@function
ReportSP:                               # @ReportSP
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB14_2
# %bb.1:                                # %func_ReportSP.8
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportSP.8
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB14_2:                               # %func_ReportSP.18
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportSP.18
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end14:
	.size	ReportSP, .Lfunc_end14-ReportSP
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB
	.type	ReportRB,@function
ReportRB:                               # @ReportRB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB15_2
# %bb.1:                                # %func_ReportRB.13
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportRB.13
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB15_2:                               # %func_ReportRB.15
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportRB.15
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end15:
	.size	ReportRB, .Lfunc_end15-ReportRB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB
	.type	ReportB,@function
ReportB:                                # @ReportB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB16_2
# %bb.1:                                # %func_ReportB.7
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportB.7
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB16_2:                               # %func_ReportB.28
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportB.28
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end16:
	.size	ReportB, .Lfunc_end16-ReportB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP
	.type	ReportP,@function
ReportP:                                # @ReportP
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB17_2
# %bb.1:                                # %func_ReportP.23
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportP.23
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB17_2:                               # %func_ReportP.31
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	movl	%r14d, %esi
	callq	ReportP.31
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end17:
	.size	ReportP, .Lfunc_end17-ReportP
	.cfi_endproc
                                        # -- End function
	.globl	copy_params             # -- Begin function copy_params
	.p2align	4, 0x90
	.type	copy_params,@function
copy_params:                            # @copy_params
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	active_sps, %rax
	movl	1148(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6556(%rcx)
	movq	active_sps, %rax
	movl	1160(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6560(%rcx)
	movq	active_sps, %rax
	movl	32(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6552(%rcx)
	movq	active_sps, %rax
	cmpl	$0, 1160(%rax)
	je	.LBB18_2
# %bb.1:                                # %if.then
	movq	active_sps, %rax
	movl	1164(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6564(%rcx)
	movq	active_sps, %rax
	movl	1168(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6568(%rcx)
	movq	active_sps, %rax
	movl	1172(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6572(%rcx)
	movq	active_sps, %rax
	movl	1176(%rax), %eax
	movq	enc_picture, %rcx
	movl	%eax, 6576(%rcx)
	jmp	.LBB18_3
.LBB18_2:                               # %if.else
	movq	enc_picture, %rax
	movl	$0, 6564(%rax)
	movq	enc_picture, %rax
	movl	$0, 6568(%rax)
	movq	enc_picture, %rax
	movl	$0, 6572(%rax)
	movq	enc_picture, %rax
	movl	$0, 6576(%rax)
.LBB18_3:                               # %if.end
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end18:
	.size	copy_params, .Lfunc_end18-copy_params
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld
	.type	distortion_fld,@function
distortion_fld:                         # @distortion_fld
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movq	%rdx, %r14
	movq	%rsi, %r15
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB19_7
# %bb.1:                                # %func_distortion_fld.4
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.4
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_2:                               # %func_distortion_fld.44
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.44
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_3:                               # %func_distortion_fld.89
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.89
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_4:                               # %func_distortion_fld.90
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.90
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_5:                               # %func_distortion_fld.127
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.127
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_6:                               # %func_distortion_fld.161
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r15, %rsi
	movq	%r14, %rdx
	callq	distortion_fld.161
	addq	$8, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB19_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB19_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB19_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB19_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB19_5
	jmp	.LBB19_6
.Lfunc_end19:
	.size	distortion_fld, .Lfunc_end19-distortion_fld
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix      # -- Begin function UnifiedOneForthPix
	.p2align	4, 0x90
	.type	UnifiedOneForthPix,@function
UnifiedOneForthPix:                     # @UnifiedOneForthPix
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB20_9
# %bb.1:                                # %func_UnifiedOneForthPix.24
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.24
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_2:                               # %func_UnifiedOneForthPix.26
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.26
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_3:                               # %func_UnifiedOneForthPix.29
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.29
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_4:                               # %func_UnifiedOneForthPix.55
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.55
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_5:                               # %func_UnifiedOneForthPix.77
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.77
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_6:                               # %func_UnifiedOneForthPix.100
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.100
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_7:                               # %func_UnifiedOneForthPix.124
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.124
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_8:                               # %func_UnifiedOneForthPix.144
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	callq	UnifiedOneForthPix.144
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB20_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB20_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB20_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB20_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB20_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB20_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB20_7
	jmp	.LBB20_8
.Lfunc_end20:
	.size	UnifiedOneForthPix, .Lfunc_end20-UnifiedOneForthPix
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation
	.type	GenerateFullPelRepresentation,@function
GenerateFullPelRepresentation:          # @GenerateFullPelRepresentation
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r12
	pushq	%rbx
	.cfi_offset %rbx, -48
	.cfi_offset %r12, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%ecx, %r14d
	movl	%edx, %r15d
	movq	%rsi, %r12
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB21_9
# %bb.1:                                # %func_GenerateFullPelRepresentation.9
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.9
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_2:                               # %func_GenerateFullPelRepresentation.11
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.11
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_3:                               # %func_GenerateFullPelRepresentation.25
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.25
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_4:                               # %func_GenerateFullPelRepresentation.27
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.27
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_5:                               # %func_GenerateFullPelRepresentation.125
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.125
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_6:                               # %func_GenerateFullPelRepresentation.130
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.130
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_7:                               # %func_GenerateFullPelRepresentation.157
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.157
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_8:                               # %func_GenerateFullPelRepresentation.168
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r12, %rsi
	movl	%r15d, %edx
	movl	%r14d, %ecx
	callq	GenerateFullPelRepresentation.168
	popq	%rbx
	popq	%r12
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB21_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB21_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB21_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB21_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB21_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB21_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB21_7
	jmp	.LBB21_8
.Lfunc_end21:
	.size	GenerateFullPelRepresentation, .Lfunc_end21-GenerateFullPelRepresentation
	.cfi_endproc
                                        # -- End function
	.globl	dummy_slice_too_big     # -- Begin function dummy_slice_too_big
	.p2align	4, 0x90
	.type	dummy_slice_too_big,@function
dummy_slice_too_big:                    # @dummy_slice_too_big
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	xorl	%eax, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end22:
	.size	dummy_slice_too_big, .Lfunc_end22-dummy_slice_too_big
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data         # -- Begin function copy_rdopt_data
	.p2align	4, 0x90
	.type	copy_rdopt_data,@function
copy_rdopt_data:                        # @copy_rdopt_data
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -24
	movl	%edi, %ebx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB23_9
# %bb.1:                                # %func_copy_rdopt_data.10
	movl	%ebx, %edi
	callq	copy_rdopt_data.10
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_2:                               # %func_copy_rdopt_data.33
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.33
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_3:                               # %func_copy_rdopt_data.52
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.52
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_4:                               # %func_copy_rdopt_data.79
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.79
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_5:                               # %func_copy_rdopt_data.85
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.85
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_6:                               # %func_copy_rdopt_data.88
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.88
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_7:                               # %func_copy_rdopt_data.112
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.112
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_8:                               # %func_copy_rdopt_data.138
	.cfi_def_cfa %rbp, 16
	movl	%ebx, %edi
	callq	copy_rdopt_data.138
	addq	$8, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB23_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB23_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB23_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB23_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB23_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB23_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB23_7
	jmp	.LBB23_8
.Lfunc_end23:
	.size	copy_rdopt_data, .Lfunc_end23-copy_rdopt_data
	.cfi_endproc
                                        # -- End function
	.globl	buf2img                 # -- Begin function buf2img
	.p2align	4, 0x90
	.type	buf2img,@function
buf2img:                                # @buf2img
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	pushq	%rax
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	%r8d, %r14d
	movl	%ecx, %r15d
	movl	%edx, %r12d
	movq	%rsi, %r13
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB24_9
# %bb.1:                                # %func_buf2img.16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.16
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_2:                               # %func_buf2img.37
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.37
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_3:                               # %func_buf2img.91
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.91
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_4:                               # %func_buf2img.93
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.93
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_5:                               # %func_buf2img.109
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.109
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_6:                               # %func_buf2img.119
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.119
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_7:                               # %func_buf2img.133
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.133
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_8:                               # %func_buf2img.134
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movq	%r13, %rsi
	movl	%r12d, %edx
	movl	%r15d, %ecx
	movl	%r14d, %r8d
	callq	buf2img.134
	addq	$8, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB24_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB24_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB24_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB24_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB24_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB24_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB24_7
	jmp	.LBB24_8
.Lfunc_end24:
	.size	buf2img, .Lfunc_end24-buf2img
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit
	.type	writeUnit,@function
writeUnit:                              # @writeUnit
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r14
	pushq	%rbx
	.cfi_offset %rbx, -32
	.cfi_offset %r14, -24
	movl	%esi, %r14d
	movq	%rdi, %rbx
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB25_7
# %bb.1:                                # %func_writeUnit.41
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.41
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_2:                               # %func_writeUnit.81
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.81
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_3:                               # %func_writeUnit.108
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.108
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_4:                               # %func_writeUnit.123
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.123
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_5:                               # %func_writeUnit.151
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.151
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_6:                               # %func_writeUnit.172
	.cfi_def_cfa %rbp, 16
	movq	%rbx, %rdi
	movl	%r14d, %esi
	callq	writeUnit.172
	popq	%rbx
	popq	%r14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB25_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB25_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB25_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB25_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB25_5
	jmp	.LBB25_6
.Lfunc_end25:
	.size	writeUnit, .Lfunc_end25-writeUnit
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_frame
	.type	init_frame,@function
init_frame:                             # @init_frame
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB26_7
# %bb.1:                                # %func_init_frame.3
	callq	init_frame.3
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_2:                               # %func_init_frame.19
	.cfi_def_cfa %rbp, 16
	callq	init_frame.19
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_3:                               # %func_init_frame.42
	.cfi_def_cfa %rbp, 16
	callq	init_frame.42
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_4:                               # %func_init_frame.49
	.cfi_def_cfa %rbp, 16
	callq	init_frame.49
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_5:                               # %func_init_frame.59
	.cfi_def_cfa %rbp, 16
	callq	init_frame.59
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_6:                               # %func_init_frame.80
	.cfi_def_cfa %rbp, 16
	callq	init_frame.80
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB26_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB26_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB26_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB26_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB26_5
	jmp	.LBB26_6
.Lfunc_end26:
	.size	init_frame, .Lfunc_end26-init_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_dec_ref_pic_marking_buffer
	.type	init_dec_ref_pic_marking_buffer,@function
init_dec_ref_pic_marking_buffer:        # @init_dec_ref_pic_marking_buffer
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movq	$0, 72512(%rax)
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end27:
	.size	init_dec_ref_pic_marking_buffer, .Lfunc_end27-init_dec_ref_pic_marking_buffer
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function init_field
	.type	init_field,@function
init_field:                             # @init_field
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB28_7
# %bb.1:                                # %func_init_field.56
	callq	init_field.56
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_2:                               # %func_init_field.92
	.cfi_def_cfa %rbp, 16
	callq	init_field.92
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_3:                               # %func_init_field.136
	.cfi_def_cfa %rbp, 16
	callq	init_field.136
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_4:                               # %func_init_field.143
	.cfi_def_cfa %rbp, 16
	callq	init_field.143
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_5:                               # %func_init_field.153
	.cfi_def_cfa %rbp, 16
	callq	init_field.153
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_6:                               # %func_init_field.171
	.cfi_def_cfa %rbp, 16
	callq	init_field.171
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB28_7:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB28_2
# %bb.8:                                # %ctrl1
	cmpl	$2, %eax
	je	.LBB28_3
# %bb.9:                                # %ctrl2
	cmpl	$3, %eax
	je	.LBB28_4
# %bb.10:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB28_5
	jmp	.LBB28_6
.Lfunc_end28:
	.size	init_field, .Lfunc_end28-init_field
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_snr
	.type	find_snr,@function
find_snr:                               # @find_snr
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB29_9
# %bb.1:                                # %func_find_snr.32
	callq	find_snr.32
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_2:                               # %func_find_snr.117
	.cfi_def_cfa %rbp, 16
	callq	find_snr.117
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_3:                               # %func_find_snr.164
	.cfi_def_cfa %rbp, 16
	callq	find_snr.164
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_4:                               # %func_find_snr.173
	.cfi_def_cfa %rbp, 16
	callq	find_snr.173
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_5:                               # %func_find_snr.178
	.cfi_def_cfa %rbp, 16
	callq	find_snr.178
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_6:                               # %func_find_snr.183
	.cfi_def_cfa %rbp, 16
	callq	find_snr.183
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_7:                               # %func_find_snr.185
	.cfi_def_cfa %rbp, 16
	callq	find_snr.185
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_8:                               # %func_find_snr.188
	.cfi_def_cfa %rbp, 16
	callq	find_snr.188
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB29_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB29_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB29_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB29_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB29_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB29_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB29_7
	jmp	.LBB29_8
.Lfunc_end29:
	.size	find_snr, .Lfunc_end29-find_snr
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion
	.type	find_distortion,@function
find_distortion:                        # @find_distortion
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB30_9
# %bb.1:                                # %func_find_distortion.14
	callq	find_distortion.14
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_2:                               # %func_find_distortion.61
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.61
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_3:                               # %func_find_distortion.94
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.94
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_4:                               # %func_find_distortion.111
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.111
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_5:                               # %func_find_distortion.113
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.113
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_6:                               # %func_find_distortion.121
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.121
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_7:                               # %func_find_distortion.145
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.145
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_8:                               # %func_find_distortion.158
	.cfi_def_cfa %rbp, 16
	callq	find_distortion.158
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB30_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB30_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB30_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB30_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB30_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB30_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB30_7
	jmp	.LBB30_8
.Lfunc_end30:
	.size	find_distortion, .Lfunc_end30-find_distortion
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB
	.type	copy_motion_vectors_MB,@function
copy_motion_vectors_MB:                 # @copy_motion_vectors_MB
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB31_9
# %bb.1:                                # %func_copy_motion_vectors_MB.1
	callq	copy_motion_vectors_MB.1
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_2:                               # %func_copy_motion_vectors_MB.12
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.12
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_3:                               # %func_copy_motion_vectors_MB.47
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.47
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_4:                               # %func_copy_motion_vectors_MB.148
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.148
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_5:                               # %func_copy_motion_vectors_MB.159
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.159
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_6:                               # %func_copy_motion_vectors_MB.169
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.169
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_7:                               # %func_copy_motion_vectors_MB.170
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.170
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_8:                               # %func_copy_motion_vectors_MB.177
	.cfi_def_cfa %rbp, 16
	callq	copy_motion_vectors_MB.177
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB31_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB31_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB31_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB31_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB31_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB31_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB31_7
	jmp	.LBB31_8
.Lfunc_end31:
	.size	copy_motion_vectors_MB, .Lfunc_end31-copy_motion_vectors_MB
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function CalculateFrameNumber
	.type	CalculateFrameNumber,@function
CalculateFrameNumber:                   # @CalculateFrameNumber
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	je	.LBB32_5
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB32_3
# %bb.2:                                # %if.then2
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
	jmp	.LBB32_4
.LBB32_3:                               # %if.else
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
.LBB32_4:                               # %if.end
	jmp	.LBB32_9
.LBB32_5:                               # %if.else24
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, frame_no
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB32_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB32_8
# %bb.7:                                # %if.then35
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, frame_no
.LBB32_8:                               # %if.end37
	jmp	.LBB32_9
.LBB32_9:                               # %if.end38
	movl	frame_no, %eax
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end32:
	.size	CalculateFrameNumber, .Lfunc_end32-CalculateFrameNumber
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_frame
	.type	put_buffer_frame,@function
put_buffer_frame:                       # @put_buffer_frame
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end33:
	.size	put_buffer_frame, .Lfunc_end33-put_buffer_frame
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_top
	.type	put_buffer_top,@function
put_buffer_top:                         # @put_buffer_top
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movl	$0, 71796(%rax)
	movq	imgY_org_top, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_top, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end34:
	.size	put_buffer_top, .Lfunc_end34-put_buffer_top
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function put_buffer_bot
	.type	put_buffer_bot,@function
put_buffer_bot:                         # @put_buffer_bot
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	movq	img, %rax
	movl	$1, 71796(%rax)
	movq	imgY_org_bot, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_bot, %rax
	movq	%rax, imgUV_org
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.Lfunc_end35:
	.size	put_buffer_bot, .Lfunc_end35-put_buffer_bot
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding
	.type	rdPictureCoding,@function
rdPictureCoding:                        # @rdPictureCoding
	.cfi_startproc
# %bb.0:                                # %rand_bb
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	callq	get_urand
	cmpl	$0, %eax
	jne	.LBB36_9
# %bb.1:                                # %func_rdPictureCoding.45
	callq	rdPictureCoding.45
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_2:                               # %func_rdPictureCoding.60
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.60
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_3:                               # %func_rdPictureCoding.62
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.62
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_4:                               # %func_rdPictureCoding.63
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.63
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_5:                               # %func_rdPictureCoding.64
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.64
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_6:                               # %func_rdPictureCoding.82
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.82
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_7:                               # %func_rdPictureCoding.84
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.84
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_8:                               # %func_rdPictureCoding.105
	.cfi_def_cfa %rbp, 16
	callq	rdPictureCoding.105
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB36_9:                               # %ctrl0
	.cfi_def_cfa %rbp, 16
	cmpl	$1, %eax
	je	.LBB36_2
# %bb.10:                               # %ctrl1
	cmpl	$2, %eax
	je	.LBB36_3
# %bb.11:                               # %ctrl2
	cmpl	$3, %eax
	je	.LBB36_4
# %bb.12:                               # %ctrl3
	cmpl	$4, %eax
	je	.LBB36_5
# %bb.13:                               # %ctrl4
	cmpl	$5, %eax
	je	.LBB36_6
# %bb.14:                               # %ctrl5
	cmpl	$6, %eax
	je	.LBB36_7
	jmp	.LBB36_8
.Lfunc_end36:
	.size	rdPictureCoding, .Lfunc_end36-rdPictureCoding
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.1
	.type	copy_motion_vectors_MB.1,@function
copy_motion_vectors_MB.1:               # @copy_motion_vectors_MB.1
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1997797939, -20(%rbp)  # imm = 0x7713FA33
	movl	$0, -8(%rbp)
.LBB37_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB37_3 Depth 2
                                        #       Child Loop BB37_5 Depth 3
                                        #         Child Loop BB37_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB37_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	$0, -12(%rbp)
.LBB37_3:                               # %for.cond1
                                        #   Parent Loop BB37_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB37_5 Depth 3
                                        #         Child Loop BB37_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB37_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	$0, -4(%rbp)
.LBB37_5:                               # %for.cond4
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB37_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB37_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB37_5 Depth=3
	movl	$0, -16(%rbp)
.LBB37_7:                               # %for.cond7
                                        #   Parent Loop BB37_1 Depth=1
                                        #     Parent Loop BB37_3 Depth=2
                                        #       Parent Loop BB37_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -16(%rbp)
	jge	.LBB37_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB37_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB37_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB37_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB37_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB37_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB37_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB37_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB37_12:                              # %if.end
                                        #   in Loop: Header=BB37_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB37_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB37_7
.LBB37_14:                              # %for.end
                                        #   in Loop: Header=BB37_5 Depth=3
	jmp	.LBB37_15
.LBB37_15:                              # %for.inc359
                                        #   in Loop: Header=BB37_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB37_5
.LBB37_16:                              # %for.end361
                                        #   in Loop: Header=BB37_3 Depth=2
	jmp	.LBB37_17
.LBB37_17:                              # %for.inc362
                                        #   in Loop: Header=BB37_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB37_3
.LBB37_18:                              # %for.end364
                                        #   in Loop: Header=BB37_1 Depth=1
	jmp	.LBB37_19
.LBB37_19:                              # %for.inc365
                                        #   in Loop: Header=BB37_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB37_1
.LBB37_20:                              # %for.end367
	cmpl	$1997797939, -20(%rbp)  # imm = 0x7713FA33
	jne	.LBB37_22
.LBB37_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB37_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB37_21
.Lfunc_end37:
	.size	copy_motion_vectors_MB.1, .Lfunc_end37-copy_motion_vectors_MB.1
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.2
	.type	field_mode_buffer.2,@function
field_mode_buffer.2:                    # @field_mode_buffer.2
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1521782001, -8(%rbp)   # imm = 0x5AB48CF1
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -16(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1521782001, -8(%rbp)   # imm = 0x5AB48CF1
	jne	.LBB38_2
.LBB38_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB38_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB38_1
.Lfunc_end38:
	.size	field_mode_buffer.2, .Lfunc_end38-field_mode_buffer.2
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.3
.LCPI39_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.3,@function
init_frame.3:                           # @init_frame.3
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$545250758, -16(%rbp)   # imm = 0x207FDDC6
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB39_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB39_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB39_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB39_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_1
.LBB39_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB39_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB39_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB39_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB39_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB39_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB39_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB39_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB39_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB39_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB39_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB39_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB39_17
.LBB39_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB39_17:                              # %if.end32
	jmp	.LBB39_25
.LBB39_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB39_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB39_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB39_22
.LBB39_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB39_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB39_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB39_24:                              # %if.end50
	jmp	.LBB39_25
.LBB39_25:                              # %if.end51
	jmp	.LBB39_26
.LBB39_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB39_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB39_28:                              # %if.end62
	jmp	.LBB39_72
.LBB39_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB39_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB39_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB39_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB39_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB39_30
.LBB39_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB39_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB39_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB39_36:                              # %if.end102
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB39_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI39_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB39_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB39_40
# %bb.39:                               # %if.then116
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB39_41
.LBB39_40:                              # %if.else128
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB39_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB39_43
# %bb.42:                               # %if.then140
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB39_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB39_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB39_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB39_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB39_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB39_49
.LBB39_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB39_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB39_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB39_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB39_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB39_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB39_58
.LBB39_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB39_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB39_57
.LBB39_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB39_57:                              # %cond.end
.LBB39_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB39_66
.LBB39_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB39_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB39_65
.LBB39_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB39_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB39_64
.LBB39_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB39_64:                              # %cond.end209
.LBB39_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB39_66:                              # %if.end214
	jmp	.LBB39_67
.LBB39_67:                              # %if.end215
	jmp	.LBB39_71
.LBB39_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB39_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB39_70:                              # %if.end226
	jmp	.LBB39_71
.LBB39_71:                              # %if.end227
	jmp	.LBB39_72
.LBB39_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$545250758, -16(%rbp)   # imm = 0x207FDDC6
	jne	.LBB39_74
.LBB39_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB39_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB39_73
.Lfunc_end39:
	.size	init_frame.3, .Lfunc_end39-init_frame.3
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.4
	.type	distortion_fld.4,@function
distortion_fld.4:                       # @distortion_fld.4
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2007889358, -4(%rbp)   # imm = 0x77ADF5CE
	movq	%rdi, -24(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -16(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$2007889358, -4(%rbp)   # imm = 0x77ADF5CE
	jne	.LBB40_2
.LBB40_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB40_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB40_1
.Lfunc_end40:
	.size	distortion_fld.4, .Lfunc_end40-distortion_fld.4
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.5
	.type	writeout_picture.5,@function
writeout_picture.5:                     # @writeout_picture.5
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1530005390, -28(%rbp)  # imm = 0x5B32078E
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB41_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB41_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB41_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB41_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB41_3:                               # %for.cond1
                                        #   Parent Loop BB41_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB41_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB41_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB41_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB41_3
.LBB41_6:                               # %for.end
                                        #   in Loop: Header=BB41_1 Depth=1
	jmp	.LBB41_7
.LBB41_7:                               # %for.inc10
                                        #   in Loop: Header=BB41_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB41_1
.LBB41_8:                               # %for.end12
	cmpl	$1530005390, -28(%rbp)  # imm = 0x5B32078E
	jne	.LBB41_10
.LBB41_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB41_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB41_9
.Lfunc_end41:
	.size	writeout_picture.5, .Lfunc_end41-writeout_picture.5
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.6
.LCPI42_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI42_1:
	.quad	4611686018427387904     # double 2
.LCPI42_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.6,@function
picture_structure_decision.6:           # @picture_structure_decision.6
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI42_1(%rip), %xmm0  # xmm0 = mem[0],zero
	vmovsd	.LCPI42_2(%rip), %xmm1  # xmm1 = mem[0],zero
	movl	$368354677, -40(%rbp)   # imm = 0x15F4A575
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI42_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -44(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -28(%rbp)
	vmovss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-48(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-56(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$368354677, -40(%rbp)   # imm = 0x15F4A575
	jne	.LBB42_2
.LBB42_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB42_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB42_1
.Lfunc_end42:
	.size	picture_structure_decision.6, .Lfunc_end42-picture_structure_decision.6
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB.7
	.type	ReportB.7,@function
ReportB.7:                              # @ReportB.7
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$512179295, -16(%rbp)   # imm = 0x1E873C5F
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-20(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.12, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$512179295, -16(%rbp)   # imm = 0x1E873C5F
	jne	.LBB43_2
.LBB43_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB43_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB43_1
.Lfunc_end43:
	.size	ReportB.7, .Lfunc_end43-ReportB.7
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP.8
	.type	ReportSP.8,@function
ReportSP.8:                             # @ReportSP.8
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$688224303, -8(%rbp)    # imm = 0x2905782F
	movl	%edi, -12(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-12(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.10, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$688224303, -8(%rbp)    # imm = 0x2905782F
	jne	.LBB44_2
.LBB44_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB44_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB44_1
.Lfunc_end44:
	.size	ReportSP.8, .Lfunc_end44-ReportSP.8
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.9
	.type	GenerateFullPelRepresentation.9,@function
GenerateFullPelRepresentation.9:        # @GenerateFullPelRepresentation.9
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$669405705, -44(%rbp)   # imm = 0x27E65209
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -32(%rbp)
.LBB45_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB45_3 Depth 2
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB45_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	$0, -28(%rbp)
.LBB45_3:                               # %for.cond1
                                        #   Parent Loop BB45_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB45_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB45_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-32(%rbp), %r14d
	movl	-28(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-32(%rbp), %esi
	shll	$2, %esi
	movl	-28(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB45_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB45_3
.LBB45_6:                               # %for.end
                                        #   in Loop: Header=BB45_1 Depth=1
	jmp	.LBB45_7
.LBB45_7:                               # %for.inc5
                                        #   in Loop: Header=BB45_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB45_1
.LBB45_8:                               # %for.end7
	cmpl	$669405705, -44(%rbp)   # imm = 0x27E65209
	jne	.LBB45_10
.LBB45_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB45_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB45_9
.Lfunc_end45:
	.size	GenerateFullPelRepresentation.9, .Lfunc_end45-GenerateFullPelRepresentation.9
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.10      # -- Begin function copy_rdopt_data.10
	.p2align	4, 0x90
	.type	copy_rdopt_data.10,@function
copy_rdopt_data.10:                     # @copy_rdopt_data.10
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$964195475, -52(%rbp)   # imm = 0x39787493
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-48(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB46_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB46_4
.LBB46_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB46_4
.LBB46_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB46_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_7 Depth 2
                                        #       Child Loop BB46_9 Depth 3
                                        #         Child Loop BB46_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB46_5 Depth=1
	movl	$0, -8(%rbp)
.LBB46_7:                               # %for.cond17
                                        #   Parent Loop BB46_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_9 Depth 3
                                        #         Child Loop BB46_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB46_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB46_7 Depth=2
	movl	$0, -12(%rbp)
.LBB46_9:                               # %for.cond21
                                        #   Parent Loop BB46_5 Depth=1
                                        #     Parent Loop BB46_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB46_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB46_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB46_9 Depth=3
	movl	$0, -16(%rbp)
.LBB46_11:                              # %for.cond25
                                        #   Parent Loop BB46_5 Depth=1
                                        #     Parent Loop BB46_7 Depth=2
                                        #       Parent Loop BB46_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB46_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB46_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB46_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_11
.LBB46_14:                              # %for.end
                                        #   in Loop: Header=BB46_9 Depth=3
	jmp	.LBB46_15
.LBB46_15:                              # %for.inc46
                                        #   in Loop: Header=BB46_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_9
.LBB46_16:                              # %for.end48
                                        #   in Loop: Header=BB46_7 Depth=2
	jmp	.LBB46_17
.LBB46_17:                              # %for.inc49
                                        #   in Loop: Header=BB46_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_7
.LBB46_18:                              # %for.end51
                                        #   in Loop: Header=BB46_5 Depth=1
	jmp	.LBB46_19
.LBB46_19:                              # %for.inc52
                                        #   in Loop: Header=BB46_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_5
.LBB46_20:                              # %for.end54
	movl	$0, -4(%rbp)
.LBB46_21:                              # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_23 Depth 2
                                        #       Child Loop BB46_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB46_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB46_21 Depth=1
	movl	$0, -12(%rbp)
.LBB46_23:                              # %for.cond59
                                        #   Parent Loop BB46_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB46_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB46_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB46_23 Depth=2
	movl	$0, -16(%rbp)
.LBB46_25:                              # %for.cond63
                                        #   Parent Loop BB46_21 Depth=1
                                        #     Parent Loop BB46_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB46_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB46_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB46_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB46_25
.LBB46_28:                              # %for.end82
                                        #   in Loop: Header=BB46_23 Depth=2
	jmp	.LBB46_29
.LBB46_29:                              # %for.inc83
                                        #   in Loop: Header=BB46_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_23
.LBB46_30:                              # %for.end85
                                        #   in Loop: Header=BB46_21 Depth=1
	jmp	.LBB46_31
.LBB46_31:                              # %for.inc86
                                        #   in Loop: Header=BB46_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_21
.LBB46_32:                              # %for.end88
	movl	$0, -8(%rbp)
.LBB46_33:                              # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB46_33 Depth=1
	movl	$0, -4(%rbp)
.LBB46_35:                              # %for.cond93
                                        #   Parent Loop BB46_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB46_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB46_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB46_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB46_38:                              # %if.end
                                        #   in Loop: Header=BB46_35 Depth=2
	jmp	.LBB46_39
.LBB46_39:                              # %for.inc176
                                        #   in Loop: Header=BB46_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_35
.LBB46_40:                              # %for.end178
                                        #   in Loop: Header=BB46_33 Depth=1
	jmp	.LBB46_41
.LBB46_41:                              # %for.inc179
                                        #   in Loop: Header=BB46_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_33
.LBB46_42:                              # %for.end181
	movl	$0, -8(%rbp)
.LBB46_43:                              # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB46_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB46_43 Depth=1
	movl	$0, -4(%rbp)
.LBB46_45:                              # %for.cond186
                                        #   Parent Loop BB46_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB46_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB46_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB46_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_45
.LBB46_48:                              # %for.end203
                                        #   in Loop: Header=BB46_43 Depth=1
	jmp	.LBB46_49
.LBB46_49:                              # %for.inc204
                                        #   in Loop: Header=BB46_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_43
.LBB46_50:                              # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB46_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB46_52:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB46_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB46_52 Depth=1
	movl	$0, -4(%rbp)
.LBB46_54:                              # %for.cond214
                                        #   Parent Loop BB46_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB46_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB46_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB46_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_54
.LBB46_57:                              # %for.end247
                                        #   in Loop: Header=BB46_52 Depth=1
	jmp	.LBB46_58
.LBB46_58:                              # %for.inc248
                                        #   in Loop: Header=BB46_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_52
.LBB46_59:                              # %for.end250
	jmp	.LBB46_60
.LBB46_60:                              # %if.end251
	movl	$0, -4(%rbp)
.LBB46_61:                              # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB46_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB46_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB46_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_61
.LBB46_64:                              # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB46_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB46_66:                              # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB46_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB46_68:                              # %for.cond283
                                        #   Parent Loop BB46_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB46_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB46_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_68
.LBB46_71:                              # %for.end306
                                        #   in Loop: Header=BB46_66 Depth=1
	jmp	.LBB46_72
.LBB46_72:                              # %for.inc307
                                        #   in Loop: Header=BB46_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_66
.LBB46_73:                              # %for.end309
	jmp	.LBB46_98
.LBB46_74:                              # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB46_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB46_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB46_77:                              # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB46_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB46_79:                              # %for.cond324
                                        #   Parent Loop BB46_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB46_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB46_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_79
.LBB46_82:                              # %for.end341
                                        #   in Loop: Header=BB46_77 Depth=1
	jmp	.LBB46_83
.LBB46_83:                              # %for.inc342
                                        #   in Loop: Header=BB46_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_77
.LBB46_84:                              # %for.end344
	jmp	.LBB46_97
.LBB46_85:                              # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB46_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB46_96
.LBB46_87:                              # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB46_88:                              # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB46_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB46_90:                              # %for.cond359
                                        #   Parent Loop BB46_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB46_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB46_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB46_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB46_90
.LBB46_93:                              # %for.end384
                                        #   in Loop: Header=BB46_88 Depth=1
	jmp	.LBB46_94
.LBB46_94:                              # %for.inc385
                                        #   in Loop: Header=BB46_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_88
.LBB46_95:                              # %for.end387
	jmp	.LBB46_96
.LBB46_96:                              # %if.end388
	jmp	.LBB46_97
.LBB46_97:                              # %if.end389
	jmp	.LBB46_98
.LBB46_98:                              # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB46_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB46_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB46_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB46_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB46_103:                             # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB46_103 Depth=1
	movl	$0, -4(%rbp)
.LBB46_105:                             # %for.cond410
                                        #   Parent Loop BB46_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB46_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	je	.LBB46_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB46_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB46_109
.LBB46_108:                             # %if.else483
                                        #   in Loop: Header=BB46_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB46_109:                             # %if.end506
                                        #   in Loop: Header=BB46_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB46_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB46_105 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB46_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB46_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB46_113
.LBB46_112:                             # %if.else568
                                        #   in Loop: Header=BB46_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB46_113:                             # %if.end591
                                        #   in Loop: Header=BB46_105 Depth=2
	jmp	.LBB46_114
.LBB46_114:                             # %if.end592
                                        #   in Loop: Header=BB46_105 Depth=2
	jmp	.LBB46_115
.LBB46_115:                             # %for.inc593
                                        #   in Loop: Header=BB46_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_105
.LBB46_116:                             # %for.end595
                                        #   in Loop: Header=BB46_103 Depth=1
	jmp	.LBB46_117
.LBB46_117:                             # %for.inc596
                                        #   in Loop: Header=BB46_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_103
.LBB46_118:                             # %for.end598
	jmp	.LBB46_130
.LBB46_119:                             # %if.else599
	movl	$0, -8(%rbp)
.LBB46_120:                             # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB46_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB46_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB46_120 Depth=1
	movl	$0, -4(%rbp)
.LBB46_122:                             # %for.cond604
                                        #   Parent Loop BB46_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB46_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB46_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB46_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB46_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB46_125:                             # %if.end654
                                        #   in Loop: Header=BB46_122 Depth=2
	jmp	.LBB46_126
.LBB46_126:                             # %for.inc655
                                        #   in Loop: Header=BB46_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB46_122
.LBB46_127:                             # %for.end657
                                        #   in Loop: Header=BB46_120 Depth=1
	jmp	.LBB46_128
.LBB46_128:                             # %for.inc658
                                        #   in Loop: Header=BB46_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB46_120
.LBB46_129:                             # %for.end660
	jmp	.LBB46_130
.LBB46_130:                             # %if.end661
	jmp	.LBB46_131
.LBB46_131:                             # %if.end662
	cmpl	$964195475, -52(%rbp)   # imm = 0x39787493
	jne	.LBB46_133
.LBB46_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB46_133:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB46_132
.Lfunc_end46:
	.size	copy_rdopt_data.10, .Lfunc_end46-copy_rdopt_data.10
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.11
	.type	GenerateFullPelRepresentation.11,@function
GenerateFullPelRepresentation.11:       # @GenerateFullPelRepresentation.11
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1425863144, -44(%rbp)  # imm = 0x54FCF1E8
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB47_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB47_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB47_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	$0, -32(%rbp)
.LBB47_3:                               # %for.cond1
                                        #   Parent Loop BB47_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB47_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB47_3 Depth=2
	movq	-56(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-64(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB47_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB47_3
.LBB47_6:                               # %for.end
                                        #   in Loop: Header=BB47_1 Depth=1
	jmp	.LBB47_7
.LBB47_7:                               # %for.inc5
                                        #   in Loop: Header=BB47_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB47_1
.LBB47_8:                               # %for.end7
	cmpl	$1425863144, -44(%rbp)  # imm = 0x54FCF1E8
	jne	.LBB47_10
.LBB47_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB47_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB47_9
.Lfunc_end47:
	.size	GenerateFullPelRepresentation.11, .Lfunc_end47-GenerateFullPelRepresentation.11
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.12
	.type	copy_motion_vectors_MB.12,@function
copy_motion_vectors_MB.12:              # @copy_motion_vectors_MB.12
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1952525856, -20(%rbp)  # imm = 0x74612E20
	movl	$0, -16(%rbp)
.LBB48_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB48_3 Depth 2
                                        #       Child Loop BB48_5 Depth 3
                                        #         Child Loop BB48_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB48_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	$0, -12(%rbp)
.LBB48_3:                               # %for.cond1
                                        #   Parent Loop BB48_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB48_5 Depth 3
                                        #         Child Loop BB48_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB48_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	$0, -4(%rbp)
.LBB48_5:                               # %for.cond4
                                        #   Parent Loop BB48_1 Depth=1
                                        #     Parent Loop BB48_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB48_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB48_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB48_5 Depth=3
	movl	$0, -8(%rbp)
.LBB48_7:                               # %for.cond7
                                        #   Parent Loop BB48_1 Depth=1
                                        #     Parent Loop BB48_3 Depth=2
                                        #       Parent Loop BB48_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -8(%rbp)
	jge	.LBB48_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB48_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB48_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB48_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB48_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB48_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB48_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB48_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB48_12:                              # %if.end
                                        #   in Loop: Header=BB48_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB48_7 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB48_7
.LBB48_14:                              # %for.end
                                        #   in Loop: Header=BB48_5 Depth=3
	jmp	.LBB48_15
.LBB48_15:                              # %for.inc359
                                        #   in Loop: Header=BB48_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB48_5
.LBB48_16:                              # %for.end361
                                        #   in Loop: Header=BB48_3 Depth=2
	jmp	.LBB48_17
.LBB48_17:                              # %for.inc362
                                        #   in Loop: Header=BB48_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB48_3
.LBB48_18:                              # %for.end364
                                        #   in Loop: Header=BB48_1 Depth=1
	jmp	.LBB48_19
.LBB48_19:                              # %for.inc365
                                        #   in Loop: Header=BB48_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB48_1
.LBB48_20:                              # %for.end367
	cmpl	$1952525856, -20(%rbp)  # imm = 0x74612E20
	jne	.LBB48_22
.LBB48_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB48_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB48_21
.Lfunc_end48:
	.size	copy_motion_vectors_MB.12, .Lfunc_end48-copy_motion_vectors_MB.12
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB.13
	.type	ReportRB.13,@function
ReportRB.13:                            # @ReportRB.13
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$2020522401, -20(%rbp)  # imm = 0x786EB9A1
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-12(%rbp), %r9d
	movl	-16(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.11, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$2020522401, -20(%rbp)  # imm = 0x786EB9A1
	jne	.LBB49_2
.LBB49_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB49_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB49_1
.Lfunc_end49:
	.size	ReportRB.13, .Lfunc_end49-ReportRB.13
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.14
	.type	find_distortion.14,@function
find_distortion.14:                     # @find_distortion.14
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$814934539, -44(%rbp)   # imm = 0x3092EA0B
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB50_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB50_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_4 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB50_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	$0, -16(%rbp)
.LBB50_4:                               # %for.cond3
                                        #   Parent Loop BB50_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB50_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB50_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB50_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_4
.LBB50_7:                               # %for.end
                                        #   in Loop: Header=BB50_2 Depth=1
	jmp	.LBB50_8
.LBB50_8:                               # %for.inc17
                                        #   in Loop: Header=BB50_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_2
.LBB50_9:                               # %for.end19
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB50_19
# %bb.10:                               # %if.then22
	movl	$0, -12(%rbp)
.LBB50_11:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_13 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB50_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	$0, -16(%rbp)
.LBB50_13:                              # %for.cond27
                                        #   Parent Loop BB50_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB50_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB50_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB50_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_13
.LBB50_16:                              # %for.end71
                                        #   in Loop: Header=BB50_11 Depth=1
	jmp	.LBB50_17
.LBB50_17:                              # %for.inc72
                                        #   in Loop: Header=BB50_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_11
.LBB50_18:                              # %for.end74
	jmp	.LBB50_19
.LBB50_19:                              # %if.end
	jmp	.LBB50_39
.LBB50_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB50_21:                              # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_23 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB50_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB50_21 Depth=1
	movl	$0, -16(%rbp)
.LBB50_23:                              # %for.cond80
                                        #   Parent Loop BB50_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB50_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB50_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB50_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_23
.LBB50_26:                              # %for.end104
                                        #   in Loop: Header=BB50_21 Depth=1
	jmp	.LBB50_27
.LBB50_27:                              # %for.inc105
                                        #   in Loop: Header=BB50_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_21
.LBB50_28:                              # %for.end107
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB50_38
# %bb.29:                               # %if.then111
	movl	$0, -12(%rbp)
.LBB50_30:                              # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB50_32 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB50_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB50_30 Depth=1
	movl	$0, -16(%rbp)
.LBB50_32:                              # %for.cond117
                                        #   Parent Loop BB50_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB50_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB50_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB50_32 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB50_32
.LBB50_35:                              # %for.end163
                                        #   in Loop: Header=BB50_30 Depth=1
	jmp	.LBB50_36
.LBB50_36:                              # %for.inc164
                                        #   in Loop: Header=BB50_30 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB50_30
.LBB50_37:                              # %for.end166
	jmp	.LBB50_38
.LBB50_38:                              # %if.end167
	jmp	.LBB50_39
.LBB50_39:                              # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$814934539, -44(%rbp)   # imm = 0x3092EA0B
	jne	.LBB50_41
.LBB50_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB50_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB50_40
.Lfunc_end50:
	.size	find_distortion.14, .Lfunc_end50-find_distortion.14
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportRB.15
	.type	ReportRB.15,@function
ReportRB.15:                            # @ReportRB.15
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1641605673, -16(%rbp)  # imm = 0x61D8EA29
	movl	%edi, -20(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-20(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.11, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1641605673, -16(%rbp)  # imm = 0x61D8EA29
	jne	.LBB51_2
.LBB51_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB51_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB51_1
.Lfunc_end51:
	.size	ReportRB.15, .Lfunc_end51-ReportRB.15
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.16              # -- Begin function buf2img.16
	.p2align	4, 0x90
	.type	buf2img.16,@function
buf2img.16:                             # @buf2img.16
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$422602789, -60(%rbp)   # imm = 0x19306825
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB52_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB52_2:                               # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB52_35
# %bb.3:                                # %if.then2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB52_6
	jmp	.LBB52_4
.LBB52_4:                               # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB52_15
	jmp	.LBB52_5
.LBB52_5:                               # %if.then2
	subl	$4, %eax
	je	.LBB52_24
	jmp	.LBB52_33
.LBB52_6:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB52_7:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	$0, -8(%rbp)
.LBB52_9:                               # %for.cond5
                                        #   Parent Loop BB52_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB52_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB52_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB52_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_9
.LBB52_12:                              # %for.end
                                        #   in Loop: Header=BB52_7 Depth=1
	jmp	.LBB52_13
.LBB52_13:                              # %for.inc14
                                        #   in Loop: Header=BB52_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_7
.LBB52_14:                              # %for.end16
	jmp	.LBB52_34
.LBB52_15:                              # %sw.bb17
	movl	$0, -4(%rbp)
.LBB52_16:                              # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB52_16 Depth=1
	movl	$0, -8(%rbp)
.LBB52_18:                              # %for.cond22
                                        #   Parent Loop BB52_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB52_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB52_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB52_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_18
.LBB52_21:                              # %for.end38
                                        #   in Loop: Header=BB52_16 Depth=1
	jmp	.LBB52_22
.LBB52_22:                              # %for.inc39
                                        #   in Loop: Header=BB52_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_16
.LBB52_23:                              # %for.end41
	jmp	.LBB52_34
.LBB52_24:                              # %sw.bb42
	movl	$0, -4(%rbp)
.LBB52_25:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB52_25 Depth=1
	movl	$0, -8(%rbp)
.LBB52_27:                              # %for.cond47
                                        #   Parent Loop BB52_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB52_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB52_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB52_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_27
.LBB52_30:                              # %for.end74
                                        #   in Loop: Header=BB52_25 Depth=1
	jmp	.LBB52_31
.LBB52_31:                              # %for.inc75
                                        #   in Loop: Header=BB52_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_25
.LBB52_32:                              # %for.end77
	jmp	.LBB52_33
.LBB52_33:                              # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB52_34:                              # %sw.epilog
	jmp	.LBB52_44
.LBB52_35:                              # %if.else
	movl	$0, -4(%rbp)
.LBB52_36:                              # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB52_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB52_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB52_36 Depth=1
	movl	$0, -8(%rbp)
.LBB52_38:                              # %for.cond82
                                        #   Parent Loop BB52_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB52_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB52_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB52_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB52_38
.LBB52_41:                              # %for.end102
                                        #   in Loop: Header=BB52_36 Depth=1
	jmp	.LBB52_42
.LBB52_42:                              # %for.inc103
                                        #   in Loop: Header=BB52_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB52_36
.LBB52_43:                              # %for.end105
	jmp	.LBB52_44
.LBB52_44:                              # %if.end106
	cmpl	$422602789, -60(%rbp)   # imm = 0x19306825
	jne	.LBB52_46
.LBB52_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB52_46:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB52_45
.Lfunc_end52:
	.size	buf2img.16, .Lfunc_end52-buf2img.16
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits.17
	.type	ReportNALNonVLCBits.17,@function
ReportNALNonVLCBits.17:                 # @ReportNALNonVLCBits.17
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2114840847, -4(%rbp)   # imm = 0x7E0DE90F
	movl	%edi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	1492(%rax), %edx
	movabsq	$.L.str.5, %rdi
	movb	$0, %al
	callq	printf
	cmpl	$2114840847, -4(%rbp)   # imm = 0x7E0DE90F
	jne	.LBB53_2
.LBB53_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB53_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB53_1
.Lfunc_end53:
	.size	ReportNALNonVLCBits.17, .Lfunc_end53-ReportNALNonVLCBits.17
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportSP.18
	.type	ReportSP.18,@function
ReportSP.18:                            # @ReportSP.18
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1653842699, -12(%rbp)  # imm = 0x6293A30B
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.10, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1653842699, -12(%rbp)  # imm = 0x6293A30B
	jne	.LBB54_2
.LBB54_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB54_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB54_1
.Lfunc_end54:
	.size	ReportSP.18, .Lfunc_end54-ReportSP.18
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.19
.LCPI55_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.19,@function
init_frame.19:                          # @init_frame.19
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$558358728, -16(%rbp)   # imm = 0x2147E0C8
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB55_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB55_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB55_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB55_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_1
.LBB55_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB55_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB55_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB55_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB55_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB55_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB55_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB55_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB55_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB55_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB55_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB55_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB55_17
.LBB55_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB55_17:                              # %if.end32
	jmp	.LBB55_25
.LBB55_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB55_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB55_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB55_22
.LBB55_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB55_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB55_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB55_24:                              # %if.end50
	jmp	.LBB55_25
.LBB55_25:                              # %if.end51
	jmp	.LBB55_26
.LBB55_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB55_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB55_28:                              # %if.end62
	jmp	.LBB55_72
.LBB55_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB55_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB55_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB55_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB55_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB55_30
.LBB55_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB55_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB55_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB55_36:                              # %if.end102
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB55_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI55_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB55_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB55_40
# %bb.39:                               # %if.then116
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB55_41
.LBB55_40:                              # %if.else128
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB55_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB55_43
# %bb.42:                               # %if.then140
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB55_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB55_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB55_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB55_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB55_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB55_49
.LBB55_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB55_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB55_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB55_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB55_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB55_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB55_58
.LBB55_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB55_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB55_57
.LBB55_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB55_57:                              # %cond.end
.LBB55_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB55_66
.LBB55_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB55_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB55_65
.LBB55_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB55_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB55_64
.LBB55_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB55_64:                              # %cond.end209
.LBB55_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB55_66:                              # %if.end214
	jmp	.LBB55_67
.LBB55_67:                              # %if.end215
	jmp	.LBB55_71
.LBB55_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB55_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB55_70:                              # %if.end226
	jmp	.LBB55_71
.LBB55_71:                              # %if.end227
	jmp	.LBB55_72
.LBB55_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$558358728, -16(%rbp)   # imm = 0x2147E0C8
	jne	.LBB55_74
.LBB55_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB55_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB55_73
.Lfunc_end55:
	.size	init_frame.19, .Lfunc_end55-init_frame.19
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.20
	.type	PaddAutoCropBorders.20,@function
PaddAutoCropBorders.20:                 # @PaddAutoCropBorders.20
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1353840197, -32(%rbp)  # imm = 0x50B1F645
	movl	%edi, -28(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB56_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB56_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_3:                               # %for.cond1
                                        #   Parent Loop BB56_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB56_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB56_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB56_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_3
.LBB56_6:                               # %for.end
                                        #   in Loop: Header=BB56_1 Depth=1
	jmp	.LBB56_7
.LBB56_7:                               # %for.inc10
                                        #   in Loop: Header=BB56_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_1
.LBB56_8:                               # %for.end12
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_9:                               # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB56_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB56_9 Depth=1
	movl	$0, -8(%rbp)
.LBB56_11:                              # %for.cond16
                                        #   Parent Loop BB56_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB56_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB56_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB56_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_11
.LBB56_14:                              # %for.end30
                                        #   in Loop: Header=BB56_9 Depth=1
	jmp	.LBB56_15
.LBB56_15:                              # %for.inc31
                                        #   in Loop: Header=BB56_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_9
.LBB56_16:                              # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB56_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB56_18:                              # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB56_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB56_18 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB56_20:                              # %for.cond38
                                        #   Parent Loop BB56_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB56_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB56_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB56_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_20
.LBB56_23:                              # %for.end65
                                        #   in Loop: Header=BB56_18 Depth=1
	jmp	.LBB56_24
.LBB56_24:                              # %for.inc66
                                        #   in Loop: Header=BB56_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_18
.LBB56_25:                              # %for.end68
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB56_26:                              # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB56_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB56_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB56_26 Depth=1
	movl	$0, -8(%rbp)
.LBB56_28:                              # %for.cond72
                                        #   Parent Loop BB56_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB56_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB56_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB56_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB56_28
.LBB56_31:                              # %for.end99
                                        #   in Loop: Header=BB56_26 Depth=1
	jmp	.LBB56_32
.LBB56_32:                              # %for.inc100
                                        #   in Loop: Header=BB56_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB56_26
.LBB56_33:                              # %for.end102
	jmp	.LBB56_34
.LBB56_34:                              # %if.end
	cmpl	$1353840197, -32(%rbp)  # imm = 0x50B1F645
	jne	.LBB56_36
.LBB56_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB56_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB56_35
.Lfunc_end56:
	.size	PaddAutoCropBorders.20, .Lfunc_end56-PaddAutoCropBorders.20
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra.21
	.type	ReportIntra.21,@function
ReportIntra.21:                         # @ReportIntra.21
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$283246692, -12(%rbp)   # imm = 0x10E20064
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB57_2
# %bb.1:                                # %if.then
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	jmp	.LBB57_3
.LBB57_2:                               # %if.else
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.9, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
.LBB57_3:                               # %if.end
	cmpl	$283246692, -12(%rbp)   # imm = 0x10E20064
	jne	.LBB57_5
.LBB57_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB57_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB57_4
.Lfunc_end57:
	.size	ReportIntra.21, .Lfunc_end57-ReportIntra.21
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.22
	.type	ReadOneFrame.22,@function
ReadOneFrame.22:                        # @ReadOneFrame.22
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$1968506273, -72(%rbp)  # imm = 0x755505A1
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -36(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-40(%rbp), %eax
	imull	-44(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-28(%rbp), %eax
	imull	-36(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB58_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB58_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -32(%rbp)
	movl	-40(%rbp), %eax
	imull	-44(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB58_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB58_4:                               # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB58_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB58_6:                               # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB58_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB58_8:                               # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB58_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB58_10:                              # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB58_26
# %bb.11:                               # %if.then42
	cmpl	$0, -32(%rbp)
	je	.LBB58_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB58_13:                              # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB58_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB58_15:                              # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB58_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB58_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB58_18:                              # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -32(%rbp)
	je	.LBB58_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB58_20:                              # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB58_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB58_22:                              # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -32(%rbp)
	je	.LBB58_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB58_24:                              # %if.end85
	jmp	.LBB58_25
.LBB58_25:                              # %if.end86
	jmp	.LBB58_27
.LBB58_26:                              # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB58_27:                              # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$1968506273, -72(%rbp)  # imm = 0x755505A1
	jne	.LBB58_29
.LBB58_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB58_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB58_28
.Lfunc_end58:
	.size	ReadOneFrame.22, .Lfunc_end58-ReadOneFrame.22
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP.23
	.type	ReportP.23,@function
ReportP.23:                             # @ReportP.23
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1682371009, -12(%rbp)  # imm = 0x6446F1C1
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.13, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1682371009, -12(%rbp)  # imm = 0x6446F1C1
	jne	.LBB59_2
.LBB59_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB59_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB59_1
.Lfunc_end59:
	.size	ReportP.23, .Lfunc_end59-ReportP.23
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.24   # -- Begin function UnifiedOneForthPix.24
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.24,@function
UnifiedOneForthPix.24:                  # @UnifiedOneForthPix.24
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1503420224, -108(%rbp) # imm = 0x599C5F40
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB60_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB60_3
.LBB60_2:                               # %if.then
	jmp	.LBB60_266
.LBB60_3:                               # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB60_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB60_5:                               # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB60_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB60_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB60_11
.LBB60_8:                               # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB60_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB60_10:                              # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB60_11:                              # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB60_12:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB60_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB60_14:                              # %for.cond49
                                        #   Parent Loop BB60_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB60_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB60_18
.LBB60_17:                              # %cond.false
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-48(%rbp), %eax
.LBB60_18:                              # %cond.end
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_24
.LBB60_20:                              # %cond.false63
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB60_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB60_23
.LBB60_22:                              # %cond.false71
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-48(%rbp), %eax
.LBB60_23:                              # %cond.end72
                                        #   in Loop: Header=BB60_14 Depth=2
.LBB60_24:                              # %cond.end74
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB60_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB60_27
.LBB60_26:                              # %cond.false83
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %edx
.LBB60_27:                              # %cond.end84
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB60_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB60_33
.LBB60_29:                              # %cond.false89
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB60_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB60_32
.LBB60_31:                              # %cond.false97
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %edx
.LBB60_32:                              # %cond.end98
                                        #   in Loop: Header=BB60_14 Depth=2
.LBB60_33:                              # %cond.end100
                                        #   in Loop: Header=BB60_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB60_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB60_36
.LBB60_35:                              # %cond.false115
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB60_36:                              # %cond.end117
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB60_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB60_42
.LBB60_38:                              # %cond.false122
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB60_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB60_41
.LBB60_40:                              # %cond.false131
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB60_41:                              # %cond.end133
                                        #   in Loop: Header=BB60_14 Depth=2
.LBB60_42:                              # %cond.end135
                                        #   in Loop: Header=BB60_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB60_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB60_45
.LBB60_44:                              # %cond.false152
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB60_45:                              # %cond.end154
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB60_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB60_51
.LBB60_47:                              # %cond.false159
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB60_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB60_50
.LBB60_49:                              # %cond.false168
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB60_50:                              # %cond.end170
                                        #   in Loop: Header=BB60_14 Depth=2
.LBB60_51:                              # %cond.end172
                                        #   in Loop: Header=BB60_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB60_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB60_54
.LBB60_53:                              # %cond.false187
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB60_54:                              # %cond.end189
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB60_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB60_60
.LBB60_56:                              # %cond.false194
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB60_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB60_59
.LBB60_58:                              # %cond.false203
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB60_59:                              # %cond.end205
                                        #   in Loop: Header=BB60_14 Depth=2
.LBB60_60:                              # %cond.end207
                                        #   in Loop: Header=BB60_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB60_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB60_63
.LBB60_62:                              # %cond.false225
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB60_63:                              # %cond.end227
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB60_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB60_69
.LBB60_65:                              # %cond.false232
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB60_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB60_68
.LBB60_67:                              # %cond.false241
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB60_68:                              # %cond.end243
                                        #   in Loop: Header=BB60_14 Depth=2
.LBB60_69:                              # %cond.end245
                                        #   in Loop: Header=BB60_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB60_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB60_72
.LBB60_71:                              # %cond.false260
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB60_72:                              # %cond.end262
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB60_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB60_78
.LBB60_74:                              # %cond.false267
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB60_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB60_77
.LBB60_76:                              # %cond.false276
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB60_77:                              # %cond.end278
                                        #   in Loop: Header=BB60_14 Depth=2
.LBB60_78:                              # %cond.end280
                                        #   in Loop: Header=BB60_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB60_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB60_81
.LBB60_80:                              # %cond.false297
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB60_81:                              # %cond.end298
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB60_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB60_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB60_87
.LBB60_83:                              # %cond.false303
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB60_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB60_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB60_86
.LBB60_85:                              # %cond.false311
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB60_86:                              # %cond.end312
                                        #   in Loop: Header=BB60_14 Depth=2
.LBB60_87:                              # %cond.end314
                                        #   in Loop: Header=BB60_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB60_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB60_14
.LBB60_89:                              # %for.end
                                        #   in Loop: Header=BB60_12 Depth=1
	jmp	.LBB60_90
.LBB60_90:                              # %for.inc336
                                        #   in Loop: Header=BB60_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB60_12
.LBB60_91:                              # %for.end338
	movl	$0, -44(%rbp)
.LBB60_92:                              # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB60_92 Depth=1
	movl	$0, -48(%rbp)
.LBB60_94:                              # %for.cond346
                                        #   Parent Loop BB60_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB60_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB60_98
.LBB60_97:                              # %cond.false364
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB60_98:                              # %cond.end366
                                        #   in Loop: Header=BB60_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB60_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB60_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB60_101
.LBB60_100:                             # %cond.false378
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB60_101:                             # %cond.end380
                                        #   in Loop: Header=BB60_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB60_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB60_104
.LBB60_103:                             # %cond.false390
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB60_104:                             # %cond.end392
                                        #   in Loop: Header=BB60_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB60_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB60_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB60_107
.LBB60_106:                             # %cond.false405
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB60_107:                             # %cond.end407
                                        #   in Loop: Header=BB60_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB60_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB60_110
.LBB60_109:                             # %cond.false417
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB60_110:                             # %cond.end419
                                        #   in Loop: Header=BB60_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB60_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB60_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_113
.LBB60_112:                             # %cond.false442
                                        #   in Loop: Header=BB60_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB60_113:                             # %cond.end449
                                        #   in Loop: Header=BB60_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB60_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_119
.LBB60_115:                             # %cond.false454
                                        #   in Loop: Header=BB60_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB60_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB60_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_118
.LBB60_117:                             # %cond.false466
                                        #   in Loop: Header=BB60_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB60_118:                             # %cond.end473
                                        #   in Loop: Header=BB60_94 Depth=2
.LBB60_119:                             # %cond.end475
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB60_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB60_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_122
.LBB60_121:                             # %cond.false490
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB60_122:                             # %cond.end493
                                        #   in Loop: Header=BB60_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB60_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB60_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_128
.LBB60_124:                             # %cond.false498
                                        #   in Loop: Header=BB60_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB60_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB60_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_127
.LBB60_126:                             # %cond.false506
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB60_127:                             # %cond.end509
                                        #   in Loop: Header=BB60_94 Depth=2
.LBB60_128:                             # %cond.end511
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB60_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB60_94
.LBB60_130:                             # %for.end516
                                        #   in Loop: Header=BB60_92 Depth=1
	jmp	.LBB60_131
.LBB60_131:                             # %for.inc517
                                        #   in Loop: Header=BB60_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB60_92
.LBB60_132:                             # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -48(%rbp)
.LBB60_133:                             # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB60_133 Depth=1
	movl	$0, -44(%rbp)
.LBB60_135:                             # %for.cond533
                                        #   Parent Loop BB60_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB60_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB60_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_139
.LBB60_138:                             # %cond.false553
                                        #   in Loop: Header=BB60_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB60_139:                             # %cond.end555
                                        #   in Loop: Header=BB60_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB60_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB60_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_145
.LBB60_141:                             # %cond.false567
                                        #   in Loop: Header=BB60_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB60_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_144
.LBB60_143:                             # %cond.false579
                                        #   in Loop: Header=BB60_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB60_144:                             # %cond.end581
                                        #   in Loop: Header=BB60_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB60_145:                             # %cond.end589
                                        #   in Loop: Header=BB60_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB60_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_157
.LBB60_147:                             # %cond.false594
                                        #   in Loop: Header=BB60_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB60_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_150
.LBB60_149:                             # %cond.false607
                                        #   in Loop: Header=BB60_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB60_150:                             # %cond.end609
                                        #   in Loop: Header=BB60_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB60_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB60_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_156
.LBB60_152:                             # %cond.false621
                                        #   in Loop: Header=BB60_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB60_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_155
.LBB60_154:                             # %cond.false633
                                        #   in Loop: Header=BB60_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB60_155:                             # %cond.end635
                                        #   in Loop: Header=BB60_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB60_156:                             # %cond.end643
                                        #   in Loop: Header=BB60_135 Depth=2
.LBB60_157:                             # %cond.end645
                                        #   in Loop: Header=BB60_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB60_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB60_135
.LBB60_159:                             # %for.end650
                                        #   in Loop: Header=BB60_133 Depth=1
	jmp	.LBB60_160
.LBB60_160:                             # %for.inc651
                                        #   in Loop: Header=BB60_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB60_133
.LBB60_161:                             # %for.end653
	movl	$0, -44(%rbp)
.LBB60_162:                             # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB60_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB60_162 Depth=1
	movl	$0, -48(%rbp)
.LBB60_164:                             # %for.cond659
                                        #   Parent Loop BB60_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB60_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_169
.LBB60_168:                             # %cond.false681
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_169:                             # %cond.end683
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB60_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_175
.LBB60_171:                             # %cond.false696
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_174
.LBB60_173:                             # %cond.false707
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_174:                             # %cond.end709
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB60_175:                             # %cond.end718
                                        #   in Loop: Header=BB60_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB60_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_187
.LBB60_177:                             # %cond.false723
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_180
.LBB60_179:                             # %cond.false735
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_180:                             # %cond.end737
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB60_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_186
.LBB60_182:                             # %cond.false750
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_185
.LBB60_184:                             # %cond.false761
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_185:                             # %cond.end763
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB60_186:                             # %cond.end772
                                        #   in Loop: Header=BB60_164 Depth=2
.LBB60_187:                             # %cond.end774
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB60_261
.LBB60_188:                             # %if.else
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB60_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB60_192
.LBB60_190:                             # %lor.lhs.false783
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB60_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB60_226
.LBB60_192:                             # %if.then791
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_195
.LBB60_194:                             # %cond.false803
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB60_195:                             # %cond.end805
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_198
.LBB60_197:                             # %cond.false816
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_198:                             # %cond.end818
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB60_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_207
.LBB60_200:                             # %cond.false832
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_203
.LBB60_202:                             # %cond.false840
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB60_203:                             # %cond.end842
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_206
.LBB60_205:                             # %cond.false853
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_206:                             # %cond.end855
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB60_207:                             # %cond.end865
                                        #   in Loop: Header=BB60_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB60_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_225
.LBB60_209:                             # %cond.false870
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_212
.LBB60_211:                             # %cond.false879
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB60_212:                             # %cond.end881
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_215
.LBB60_214:                             # %cond.false892
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_215:                             # %cond.end894
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB60_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_224
.LBB60_217:                             # %cond.false908
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_220
.LBB60_219:                             # %cond.false916
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB60_220:                             # %cond.end918
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_223
.LBB60_222:                             # %cond.false929
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_223:                             # %cond.end931
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB60_224:                             # %cond.end941
                                        #   in Loop: Header=BB60_164 Depth=2
.LBB60_225:                             # %cond.end943
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB60_260
.LBB60_226:                             # %if.else946
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_229
.LBB60_228:                             # %cond.false962
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_229:                             # %cond.end964
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_232
.LBB60_231:                             # %cond.false973
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB60_232:                             # %cond.end975
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB60_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_241
.LBB60_234:                             # %cond.false987
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_237
.LBB60_236:                             # %cond.false999
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_237:                             # %cond.end1001
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_240
.LBB60_239:                             # %cond.false1010
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB60_240:                             # %cond.end1012
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB60_241:                             # %cond.end1020
                                        #   in Loop: Header=BB60_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB60_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB60_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB60_259
.LBB60_243:                             # %cond.false1025
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_246
.LBB60_245:                             # %cond.false1038
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_246:                             # %cond.end1040
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_249
.LBB60_248:                             # %cond.false1049
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB60_249:                             # %cond.end1051
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB60_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB60_258
.LBB60_251:                             # %cond.false1063
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB60_254
.LBB60_253:                             # %cond.false1075
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB60_254:                             # %cond.end1077
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB60_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB60_257
.LBB60_256:                             # %cond.false1086
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB60_257:                             # %cond.end1088
                                        #   in Loop: Header=BB60_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB60_258:                             # %cond.end1096
                                        #   in Loop: Header=BB60_164 Depth=2
.LBB60_259:                             # %cond.end1098
                                        #   in Loop: Header=BB60_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB60_260:                             # %if.end1101
                                        #   in Loop: Header=BB60_164 Depth=2
	jmp	.LBB60_261
.LBB60_261:                             # %if.end1102
                                        #   in Loop: Header=BB60_164 Depth=2
	jmp	.LBB60_262
.LBB60_262:                             # %for.inc1103
                                        #   in Loop: Header=BB60_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB60_164
.LBB60_263:                             # %for.end1105
                                        #   in Loop: Header=BB60_162 Depth=1
	jmp	.LBB60_264
.LBB60_264:                             # %for.inc1106
                                        #   in Loop: Header=BB60_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB60_162
.LBB60_265:                             # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB60_266:                             # %return
	cmpl	$1503420224, -108(%rbp) # imm = 0x599C5F40
	jne	.LBB60_268
.LBB60_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB60_268:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB60_267
.Lfunc_end60:
	.size	UnifiedOneForthPix.24, .Lfunc_end60-UnifiedOneForthPix.24
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.25
	.type	GenerateFullPelRepresentation.25,@function
GenerateFullPelRepresentation.25:       # @GenerateFullPelRepresentation.25
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1018470938, -44(%rbp)  # imm = 0x3CB4A21A
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -32(%rbp)
.LBB61_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB61_3 Depth 2
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB61_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	$0, -28(%rbp)
.LBB61_3:                               # %for.cond1
                                        #   Parent Loop BB61_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB61_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB61_3 Depth=2
	movq	-56(%rbp), %rbx
	movl	-32(%rbp), %r14d
	movl	-28(%rbp), %r15d
	movq	-64(%rbp), %rdi
	movl	-32(%rbp), %esi
	shll	$2, %esi
	movl	-28(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB61_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB61_3
.LBB61_6:                               # %for.end
                                        #   in Loop: Header=BB61_1 Depth=1
	jmp	.LBB61_7
.LBB61_7:                               # %for.inc5
                                        #   in Loop: Header=BB61_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB61_1
.LBB61_8:                               # %for.end7
	cmpl	$1018470938, -44(%rbp)  # imm = 0x3CB4A21A
	jne	.LBB61_10
.LBB61_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB61_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB61_9
.Lfunc_end61:
	.size	GenerateFullPelRepresentation.25, .Lfunc_end61-GenerateFullPelRepresentation.25
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.26   # -- Begin function UnifiedOneForthPix.26
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.26,@function
UnifiedOneForthPix.26:                  # @UnifiedOneForthPix.26
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1682352104, -108(%rbp) # imm = 0x6446A7E8
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB62_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB62_3
.LBB62_2:                               # %if.then
	jmp	.LBB62_266
.LBB62_3:                               # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB62_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB62_5:                               # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB62_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB62_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB62_11
.LBB62_8:                               # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB62_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB62_10:                              # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB62_11:                              # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB62_12:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB62_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB62_14:                              # %for.cond49
                                        #   Parent Loop BB62_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB62_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB62_18
.LBB62_17:                              # %cond.false
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-48(%rbp), %eax
.LBB62_18:                              # %cond.end
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB62_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB62_24
.LBB62_20:                              # %cond.false63
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB62_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB62_23
.LBB62_22:                              # %cond.false71
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-48(%rbp), %eax
.LBB62_23:                              # %cond.end72
                                        #   in Loop: Header=BB62_14 Depth=2
.LBB62_24:                              # %cond.end74
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB62_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB62_27
.LBB62_26:                              # %cond.false83
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %edx
.LBB62_27:                              # %cond.end84
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB62_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB62_33
.LBB62_29:                              # %cond.false89
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB62_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB62_32
.LBB62_31:                              # %cond.false97
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %edx
.LBB62_32:                              # %cond.end98
                                        #   in Loop: Header=BB62_14 Depth=2
.LBB62_33:                              # %cond.end100
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB62_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB62_36
.LBB62_35:                              # %cond.false115
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB62_36:                              # %cond.end117
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB62_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB62_42
.LBB62_38:                              # %cond.false122
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB62_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB62_41
.LBB62_40:                              # %cond.false131
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB62_41:                              # %cond.end133
                                        #   in Loop: Header=BB62_14 Depth=2
.LBB62_42:                              # %cond.end135
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB62_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB62_45
.LBB62_44:                              # %cond.false152
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB62_45:                              # %cond.end154
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB62_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB62_51
.LBB62_47:                              # %cond.false159
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB62_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB62_50
.LBB62_49:                              # %cond.false168
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB62_50:                              # %cond.end170
                                        #   in Loop: Header=BB62_14 Depth=2
.LBB62_51:                              # %cond.end172
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB62_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB62_54
.LBB62_53:                              # %cond.false187
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB62_54:                              # %cond.end189
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB62_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB62_60
.LBB62_56:                              # %cond.false194
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB62_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB62_59
.LBB62_58:                              # %cond.false203
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB62_59:                              # %cond.end205
                                        #   in Loop: Header=BB62_14 Depth=2
.LBB62_60:                              # %cond.end207
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB62_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB62_63
.LBB62_62:                              # %cond.false225
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB62_63:                              # %cond.end227
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB62_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB62_69
.LBB62_65:                              # %cond.false232
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB62_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB62_68
.LBB62_67:                              # %cond.false241
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB62_68:                              # %cond.end243
                                        #   in Loop: Header=BB62_14 Depth=2
.LBB62_69:                              # %cond.end245
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB62_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB62_72
.LBB62_71:                              # %cond.false260
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB62_72:                              # %cond.end262
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB62_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB62_78
.LBB62_74:                              # %cond.false267
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB62_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB62_77
.LBB62_76:                              # %cond.false276
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB62_77:                              # %cond.end278
                                        #   in Loop: Header=BB62_14 Depth=2
.LBB62_78:                              # %cond.end280
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB62_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB62_81
.LBB62_80:                              # %cond.false297
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB62_81:                              # %cond.end298
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB62_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB62_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB62_87
.LBB62_83:                              # %cond.false303
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB62_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB62_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB62_86
.LBB62_85:                              # %cond.false311
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB62_86:                              # %cond.end312
                                        #   in Loop: Header=BB62_14 Depth=2
.LBB62_87:                              # %cond.end314
                                        #   in Loop: Header=BB62_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB62_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB62_14
.LBB62_89:                              # %for.end
                                        #   in Loop: Header=BB62_12 Depth=1
	jmp	.LBB62_90
.LBB62_90:                              # %for.inc336
                                        #   in Loop: Header=BB62_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB62_12
.LBB62_91:                              # %for.end338
	movl	$0, -44(%rbp)
.LBB62_92:                              # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB62_92 Depth=1
	movl	$0, -48(%rbp)
.LBB62_94:                              # %for.cond346
                                        #   Parent Loop BB62_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB62_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB62_98
.LBB62_97:                              # %cond.false364
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB62_98:                              # %cond.end366
                                        #   in Loop: Header=BB62_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB62_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB62_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB62_101
.LBB62_100:                             # %cond.false378
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB62_101:                             # %cond.end380
                                        #   in Loop: Header=BB62_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB62_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB62_104
.LBB62_103:                             # %cond.false390
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB62_104:                             # %cond.end392
                                        #   in Loop: Header=BB62_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB62_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB62_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB62_107
.LBB62_106:                             # %cond.false405
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB62_107:                             # %cond.end407
                                        #   in Loop: Header=BB62_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB62_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB62_110
.LBB62_109:                             # %cond.false417
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB62_110:                             # %cond.end419
                                        #   in Loop: Header=BB62_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB62_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB62_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_113
.LBB62_112:                             # %cond.false442
                                        #   in Loop: Header=BB62_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB62_113:                             # %cond.end449
                                        #   in Loop: Header=BB62_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB62_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB62_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB62_119
.LBB62_115:                             # %cond.false454
                                        #   in Loop: Header=BB62_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB62_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB62_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_118
.LBB62_117:                             # %cond.false466
                                        #   in Loop: Header=BB62_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB62_118:                             # %cond.end473
                                        #   in Loop: Header=BB62_94 Depth=2
.LBB62_119:                             # %cond.end475
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB62_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB62_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_122
.LBB62_121:                             # %cond.false490
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB62_122:                             # %cond.end493
                                        #   in Loop: Header=BB62_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB62_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB62_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB62_128
.LBB62_124:                             # %cond.false498
                                        #   in Loop: Header=BB62_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB62_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB62_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_127
.LBB62_126:                             # %cond.false506
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB62_127:                             # %cond.end509
                                        #   in Loop: Header=BB62_94 Depth=2
.LBB62_128:                             # %cond.end511
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB62_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB62_94
.LBB62_130:                             # %for.end516
                                        #   in Loop: Header=BB62_92 Depth=1
	jmp	.LBB62_131
.LBB62_131:                             # %for.inc517
                                        #   in Loop: Header=BB62_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB62_92
.LBB62_132:                             # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB62_133:                             # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB62_133 Depth=1
	movl	$0, -44(%rbp)
.LBB62_135:                             # %for.cond533
                                        #   Parent Loop BB62_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB62_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB62_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_139
.LBB62_138:                             # %cond.false553
                                        #   in Loop: Header=BB62_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB62_139:                             # %cond.end555
                                        #   in Loop: Header=BB62_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB62_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB62_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_145
.LBB62_141:                             # %cond.false567
                                        #   in Loop: Header=BB62_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB62_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_144
.LBB62_143:                             # %cond.false579
                                        #   in Loop: Header=BB62_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB62_144:                             # %cond.end581
                                        #   in Loop: Header=BB62_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB62_145:                             # %cond.end589
                                        #   in Loop: Header=BB62_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB62_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB62_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB62_157
.LBB62_147:                             # %cond.false594
                                        #   in Loop: Header=BB62_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB62_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_150
.LBB62_149:                             # %cond.false607
                                        #   in Loop: Header=BB62_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB62_150:                             # %cond.end609
                                        #   in Loop: Header=BB62_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB62_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB62_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_156
.LBB62_152:                             # %cond.false621
                                        #   in Loop: Header=BB62_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB62_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_155
.LBB62_154:                             # %cond.false633
                                        #   in Loop: Header=BB62_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB62_155:                             # %cond.end635
                                        #   in Loop: Header=BB62_135 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB62_156:                             # %cond.end643
                                        #   in Loop: Header=BB62_135 Depth=2
.LBB62_157:                             # %cond.end645
                                        #   in Loop: Header=BB62_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB62_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB62_135
.LBB62_159:                             # %for.end650
                                        #   in Loop: Header=BB62_133 Depth=1
	jmp	.LBB62_160
.LBB62_160:                             # %for.inc651
                                        #   in Loop: Header=BB62_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB62_133
.LBB62_161:                             # %for.end653
	movl	$0, -44(%rbp)
.LBB62_162:                             # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB62_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB62_162 Depth=1
	movl	$0, -48(%rbp)
.LBB62_164:                             # %for.cond659
                                        #   Parent Loop BB62_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB62_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_169
.LBB62_168:                             # %cond.false681
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_169:                             # %cond.end683
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB62_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_175
.LBB62_171:                             # %cond.false696
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_174
.LBB62_173:                             # %cond.false707
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_174:                             # %cond.end709
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB62_175:                             # %cond.end718
                                        #   in Loop: Header=BB62_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB62_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB62_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB62_187
.LBB62_177:                             # %cond.false723
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_180
.LBB62_179:                             # %cond.false735
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_180:                             # %cond.end737
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB62_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_186
.LBB62_182:                             # %cond.false750
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_185
.LBB62_184:                             # %cond.false761
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_185:                             # %cond.end763
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB62_186:                             # %cond.end772
                                        #   in Loop: Header=BB62_164 Depth=2
.LBB62_187:                             # %cond.end774
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB62_261
.LBB62_188:                             # %if.else
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB62_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB62_192
.LBB62_190:                             # %lor.lhs.false783
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB62_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB62_226
.LBB62_192:                             # %if.then791
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_195
.LBB62_194:                             # %cond.false803
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB62_195:                             # %cond.end805
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_198
.LBB62_197:                             # %cond.false816
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_198:                             # %cond.end818
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB62_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_207
.LBB62_200:                             # %cond.false832
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_203
.LBB62_202:                             # %cond.false840
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB62_203:                             # %cond.end842
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_206
.LBB62_205:                             # %cond.false853
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_206:                             # %cond.end855
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB62_207:                             # %cond.end865
                                        #   in Loop: Header=BB62_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB62_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB62_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB62_225
.LBB62_209:                             # %cond.false870
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_212
.LBB62_211:                             # %cond.false879
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB62_212:                             # %cond.end881
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_215
.LBB62_214:                             # %cond.false892
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_215:                             # %cond.end894
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB62_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_224
.LBB62_217:                             # %cond.false908
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_220
.LBB62_219:                             # %cond.false916
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB62_220:                             # %cond.end918
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_223
.LBB62_222:                             # %cond.false929
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_223:                             # %cond.end931
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB62_224:                             # %cond.end941
                                        #   in Loop: Header=BB62_164 Depth=2
.LBB62_225:                             # %cond.end943
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB62_260
.LBB62_226:                             # %if.else946
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_229
.LBB62_228:                             # %cond.false962
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_229:                             # %cond.end964
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_232
.LBB62_231:                             # %cond.false973
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB62_232:                             # %cond.end975
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB62_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_241
.LBB62_234:                             # %cond.false987
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_237
.LBB62_236:                             # %cond.false999
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_237:                             # %cond.end1001
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_240
.LBB62_239:                             # %cond.false1010
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB62_240:                             # %cond.end1012
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB62_241:                             # %cond.end1020
                                        #   in Loop: Header=BB62_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB62_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB62_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB62_259
.LBB62_243:                             # %cond.false1025
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_246
.LBB62_245:                             # %cond.false1038
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_246:                             # %cond.end1040
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_249
.LBB62_248:                             # %cond.false1049
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB62_249:                             # %cond.end1051
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB62_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB62_258
.LBB62_251:                             # %cond.false1063
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB62_254
.LBB62_253:                             # %cond.false1075
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB62_254:                             # %cond.end1077
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB62_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB62_257
.LBB62_256:                             # %cond.false1086
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB62_257:                             # %cond.end1088
                                        #   in Loop: Header=BB62_164 Depth=2
	subl	$16, %edx
	movl	-56(%rbp), %ecx
	movl	-52(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB62_258:                             # %cond.end1096
                                        #   in Loop: Header=BB62_164 Depth=2
.LBB62_259:                             # %cond.end1098
                                        #   in Loop: Header=BB62_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB62_260:                             # %if.end1101
                                        #   in Loop: Header=BB62_164 Depth=2
	jmp	.LBB62_261
.LBB62_261:                             # %if.end1102
                                        #   in Loop: Header=BB62_164 Depth=2
	jmp	.LBB62_262
.LBB62_262:                             # %for.inc1103
                                        #   in Loop: Header=BB62_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB62_164
.LBB62_263:                             # %for.end1105
                                        #   in Loop: Header=BB62_162 Depth=1
	jmp	.LBB62_264
.LBB62_264:                             # %for.inc1106
                                        #   in Loop: Header=BB62_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB62_162
.LBB62_265:                             # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB62_266:                             # %return
	cmpl	$1682352104, -108(%rbp) # imm = 0x6446A7E8
	jne	.LBB62_268
.LBB62_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB62_268:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB62_267
.Lfunc_end62:
	.size	UnifiedOneForthPix.26, .Lfunc_end62-UnifiedOneForthPix.26
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.27
	.type	GenerateFullPelRepresentation.27,@function
GenerateFullPelRepresentation.27:       # @GenerateFullPelRepresentation.27
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1242307799, -44(%rbp)  # imm = 0x4A0C1CD7
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB63_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB63_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB63_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	$0, -32(%rbp)
.LBB63_3:                               # %for.cond1
                                        #   Parent Loop BB63_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB63_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB63_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB63_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB63_3
.LBB63_6:                               # %for.end
                                        #   in Loop: Header=BB63_1 Depth=1
	jmp	.LBB63_7
.LBB63_7:                               # %for.inc5
                                        #   in Loop: Header=BB63_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB63_1
.LBB63_8:                               # %for.end7
	cmpl	$1242307799, -44(%rbp)  # imm = 0x4A0C1CD7
	jne	.LBB63_10
.LBB63_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB63_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB63_9
.Lfunc_end63:
	.size	GenerateFullPelRepresentation.27, .Lfunc_end63-GenerateFullPelRepresentation.27
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportB.28
	.type	ReportB.28,@function
ReportB.28:                             # @ReportB.28
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	movl	$1832123442, -20(%rbp)  # imm = 0x6D33FC32
	movl	%edi, -12(%rbp)
	movl	%esi, -16(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	196(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-12(%rbp), %r9d
	movl	-16(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movq	img, %rdi
	movl	71996(%rdi), %ebx
	movabsq	$.L.str.12, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movl	%ebx, 24(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1832123442, -20(%rbp)  # imm = 0x6D33FC32
	jne	.LBB64_2
.LBB64_1:
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB64_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB64_1
.Lfunc_end64:
	.size	ReportB.28, .Lfunc_end64-ReportB.28
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.29   # -- Begin function UnifiedOneForthPix.29
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.29,@function
UnifiedOneForthPix.29:                  # @UnifiedOneForthPix.29
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$877231397, -108(%rbp)  # imm = 0x34497D25
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB65_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB65_3
.LBB65_2:                               # %if.then
	jmp	.LBB65_266
.LBB65_3:                               # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB65_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB65_5:                               # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB65_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB65_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB65_11
.LBB65_8:                               # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB65_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB65_10:                              # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB65_11:                              # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB65_12:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB65_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB65_14:                              # %for.cond49
                                        #   Parent Loop BB65_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB65_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB65_18
.LBB65_17:                              # %cond.false
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-48(%rbp), %eax
.LBB65_18:                              # %cond.end
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_24
.LBB65_20:                              # %cond.false63
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB65_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB65_23
.LBB65_22:                              # %cond.false71
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-48(%rbp), %eax
.LBB65_23:                              # %cond.end72
                                        #   in Loop: Header=BB65_14 Depth=2
.LBB65_24:                              # %cond.end74
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB65_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB65_27
.LBB65_26:                              # %cond.false83
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %edx
.LBB65_27:                              # %cond.end84
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB65_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB65_33
.LBB65_29:                              # %cond.false89
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB65_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB65_32
.LBB65_31:                              # %cond.false97
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %edx
.LBB65_32:                              # %cond.end98
                                        #   in Loop: Header=BB65_14 Depth=2
.LBB65_33:                              # %cond.end100
                                        #   in Loop: Header=BB65_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB65_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB65_36
.LBB65_35:                              # %cond.false115
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB65_36:                              # %cond.end117
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB65_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB65_42
.LBB65_38:                              # %cond.false122
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB65_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB65_41
.LBB65_40:                              # %cond.false131
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB65_41:                              # %cond.end133
                                        #   in Loop: Header=BB65_14 Depth=2
.LBB65_42:                              # %cond.end135
                                        #   in Loop: Header=BB65_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB65_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB65_45
.LBB65_44:                              # %cond.false152
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB65_45:                              # %cond.end154
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB65_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB65_51
.LBB65_47:                              # %cond.false159
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB65_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB65_50
.LBB65_49:                              # %cond.false168
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB65_50:                              # %cond.end170
                                        #   in Loop: Header=BB65_14 Depth=2
.LBB65_51:                              # %cond.end172
                                        #   in Loop: Header=BB65_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB65_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB65_54
.LBB65_53:                              # %cond.false187
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB65_54:                              # %cond.end189
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB65_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB65_60
.LBB65_56:                              # %cond.false194
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB65_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB65_59
.LBB65_58:                              # %cond.false203
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB65_59:                              # %cond.end205
                                        #   in Loop: Header=BB65_14 Depth=2
.LBB65_60:                              # %cond.end207
                                        #   in Loop: Header=BB65_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB65_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB65_63
.LBB65_62:                              # %cond.false225
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB65_63:                              # %cond.end227
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB65_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB65_69
.LBB65_65:                              # %cond.false232
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB65_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB65_68
.LBB65_67:                              # %cond.false241
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB65_68:                              # %cond.end243
                                        #   in Loop: Header=BB65_14 Depth=2
.LBB65_69:                              # %cond.end245
                                        #   in Loop: Header=BB65_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB65_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB65_72
.LBB65_71:                              # %cond.false260
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB65_72:                              # %cond.end262
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB65_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB65_78
.LBB65_74:                              # %cond.false267
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB65_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB65_77
.LBB65_76:                              # %cond.false276
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB65_77:                              # %cond.end278
                                        #   in Loop: Header=BB65_14 Depth=2
.LBB65_78:                              # %cond.end280
                                        #   in Loop: Header=BB65_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB65_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB65_81
.LBB65_80:                              # %cond.false297
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB65_81:                              # %cond.end298
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB65_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB65_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB65_87
.LBB65_83:                              # %cond.false303
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB65_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB65_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB65_86
.LBB65_85:                              # %cond.false311
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB65_86:                              # %cond.end312
                                        #   in Loop: Header=BB65_14 Depth=2
.LBB65_87:                              # %cond.end314
                                        #   in Loop: Header=BB65_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB65_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB65_14
.LBB65_89:                              # %for.end
                                        #   in Loop: Header=BB65_12 Depth=1
	jmp	.LBB65_90
.LBB65_90:                              # %for.inc336
                                        #   in Loop: Header=BB65_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB65_12
.LBB65_91:                              # %for.end338
	movl	$0, -44(%rbp)
.LBB65_92:                              # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB65_92 Depth=1
	movl	$0, -48(%rbp)
.LBB65_94:                              # %for.cond346
                                        #   Parent Loop BB65_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB65_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB65_98
.LBB65_97:                              # %cond.false364
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB65_98:                              # %cond.end366
                                        #   in Loop: Header=BB65_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB65_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB65_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB65_101
.LBB65_100:                             # %cond.false378
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB65_101:                             # %cond.end380
                                        #   in Loop: Header=BB65_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB65_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB65_104
.LBB65_103:                             # %cond.false390
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB65_104:                             # %cond.end392
                                        #   in Loop: Header=BB65_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB65_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB65_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB65_107
.LBB65_106:                             # %cond.false405
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB65_107:                             # %cond.end407
                                        #   in Loop: Header=BB65_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB65_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB65_110
.LBB65_109:                             # %cond.false417
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB65_110:                             # %cond.end419
                                        #   in Loop: Header=BB65_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB65_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB65_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_113
.LBB65_112:                             # %cond.false442
                                        #   in Loop: Header=BB65_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB65_113:                             # %cond.end449
                                        #   in Loop: Header=BB65_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB65_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_119
.LBB65_115:                             # %cond.false454
                                        #   in Loop: Header=BB65_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB65_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB65_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_118
.LBB65_117:                             # %cond.false466
                                        #   in Loop: Header=BB65_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB65_118:                             # %cond.end473
                                        #   in Loop: Header=BB65_94 Depth=2
.LBB65_119:                             # %cond.end475
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB65_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB65_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_122
.LBB65_121:                             # %cond.false490
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB65_122:                             # %cond.end493
                                        #   in Loop: Header=BB65_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB65_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB65_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_128
.LBB65_124:                             # %cond.false498
                                        #   in Loop: Header=BB65_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB65_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB65_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_127
.LBB65_126:                             # %cond.false506
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB65_127:                             # %cond.end509
                                        #   in Loop: Header=BB65_94 Depth=2
.LBB65_128:                             # %cond.end511
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB65_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB65_94
.LBB65_130:                             # %for.end516
                                        #   in Loop: Header=BB65_92 Depth=1
	jmp	.LBB65_131
.LBB65_131:                             # %for.inc517
                                        #   in Loop: Header=BB65_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB65_92
.LBB65_132:                             # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movl	$0, -48(%rbp)
.LBB65_133:                             # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB65_133 Depth=1
	movl	$0, -44(%rbp)
.LBB65_135:                             # %for.cond533
                                        #   Parent Loop BB65_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB65_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB65_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_139
.LBB65_138:                             # %cond.false553
                                        #   in Loop: Header=BB65_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB65_139:                             # %cond.end555
                                        #   in Loop: Header=BB65_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB65_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB65_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_145
.LBB65_141:                             # %cond.false567
                                        #   in Loop: Header=BB65_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB65_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_144
.LBB65_143:                             # %cond.false579
                                        #   in Loop: Header=BB65_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB65_144:                             # %cond.end581
                                        #   in Loop: Header=BB65_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB65_145:                             # %cond.end589
                                        #   in Loop: Header=BB65_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB65_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_157
.LBB65_147:                             # %cond.false594
                                        #   in Loop: Header=BB65_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB65_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_150
.LBB65_149:                             # %cond.false607
                                        #   in Loop: Header=BB65_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB65_150:                             # %cond.end609
                                        #   in Loop: Header=BB65_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB65_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB65_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_156
.LBB65_152:                             # %cond.false621
                                        #   in Loop: Header=BB65_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB65_135 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_155
.LBB65_154:                             # %cond.false633
                                        #   in Loop: Header=BB65_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB65_155:                             # %cond.end635
                                        #   in Loop: Header=BB65_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB65_156:                             # %cond.end643
                                        #   in Loop: Header=BB65_135 Depth=2
.LBB65_157:                             # %cond.end645
                                        #   in Loop: Header=BB65_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB65_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB65_135
.LBB65_159:                             # %for.end650
                                        #   in Loop: Header=BB65_133 Depth=1
	jmp	.LBB65_160
.LBB65_160:                             # %for.inc651
                                        #   in Loop: Header=BB65_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB65_133
.LBB65_161:                             # %for.end653
	movl	$0, -44(%rbp)
.LBB65_162:                             # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB65_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB65_162 Depth=1
	movl	$0, -48(%rbp)
.LBB65_164:                             # %for.cond659
                                        #   Parent Loop BB65_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB65_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_169
.LBB65_168:                             # %cond.false681
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_169:                             # %cond.end683
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB65_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_175
.LBB65_171:                             # %cond.false696
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_174
.LBB65_173:                             # %cond.false707
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_174:                             # %cond.end709
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB65_175:                             # %cond.end718
                                        #   in Loop: Header=BB65_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB65_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_187
.LBB65_177:                             # %cond.false723
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_180
.LBB65_179:                             # %cond.false735
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_180:                             # %cond.end737
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB65_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_186
.LBB65_182:                             # %cond.false750
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_185
.LBB65_184:                             # %cond.false761
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_185:                             # %cond.end763
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB65_186:                             # %cond.end772
                                        #   in Loop: Header=BB65_164 Depth=2
.LBB65_187:                             # %cond.end774
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB65_261
.LBB65_188:                             # %if.else
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB65_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB65_192
.LBB65_190:                             # %lor.lhs.false783
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB65_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB65_226
.LBB65_192:                             # %if.then791
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_195
.LBB65_194:                             # %cond.false803
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB65_195:                             # %cond.end805
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_198
.LBB65_197:                             # %cond.false816
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_198:                             # %cond.end818
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB65_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_207
.LBB65_200:                             # %cond.false832
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_203
.LBB65_202:                             # %cond.false840
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB65_203:                             # %cond.end842
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_206
.LBB65_205:                             # %cond.false853
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_206:                             # %cond.end855
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB65_207:                             # %cond.end865
                                        #   in Loop: Header=BB65_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB65_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_225
.LBB65_209:                             # %cond.false870
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_212
.LBB65_211:                             # %cond.false879
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB65_212:                             # %cond.end881
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_215
.LBB65_214:                             # %cond.false892
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_215:                             # %cond.end894
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB65_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_224
.LBB65_217:                             # %cond.false908
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_220
.LBB65_219:                             # %cond.false916
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB65_220:                             # %cond.end918
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_223
.LBB65_222:                             # %cond.false929
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_223:                             # %cond.end931
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB65_224:                             # %cond.end941
                                        #   in Loop: Header=BB65_164 Depth=2
.LBB65_225:                             # %cond.end943
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB65_260
.LBB65_226:                             # %if.else946
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_229
.LBB65_228:                             # %cond.false962
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_229:                             # %cond.end964
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_232
.LBB65_231:                             # %cond.false973
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB65_232:                             # %cond.end975
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB65_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_241
.LBB65_234:                             # %cond.false987
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_237
.LBB65_236:                             # %cond.false999
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_237:                             # %cond.end1001
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_240
.LBB65_239:                             # %cond.false1010
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB65_240:                             # %cond.end1012
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB65_241:                             # %cond.end1020
                                        #   in Loop: Header=BB65_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB65_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB65_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB65_259
.LBB65_243:                             # %cond.false1025
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_246
.LBB65_245:                             # %cond.false1038
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_246:                             # %cond.end1040
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_249
.LBB65_248:                             # %cond.false1049
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB65_249:                             # %cond.end1051
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB65_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB65_258
.LBB65_251:                             # %cond.false1063
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-72(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB65_254
.LBB65_253:                             # %cond.false1075
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB65_254:                             # %cond.end1077
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %esi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB65_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-68(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB65_257
.LBB65_256:                             # %cond.false1086
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB65_257:                             # %cond.end1088
                                        #   in Loop: Header=BB65_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB65_258:                             # %cond.end1096
                                        #   in Loop: Header=BB65_164 Depth=2
.LBB65_259:                             # %cond.end1098
                                        #   in Loop: Header=BB65_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB65_260:                             # %if.end1101
                                        #   in Loop: Header=BB65_164 Depth=2
	jmp	.LBB65_261
.LBB65_261:                             # %if.end1102
                                        #   in Loop: Header=BB65_164 Depth=2
	jmp	.LBB65_262
.LBB65_262:                             # %for.inc1103
                                        #   in Loop: Header=BB65_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB65_164
.LBB65_263:                             # %for.end1105
                                        #   in Loop: Header=BB65_162 Depth=1
	jmp	.LBB65_264
.LBB65_264:                             # %for.inc1106
                                        #   in Loop: Header=BB65_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB65_162
.LBB65_265:                             # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB65_266:                             # %return
	cmpl	$877231397, -108(%rbp)  # imm = 0x34497D25
	jne	.LBB65_268
.LBB65_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB65_268:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB65_267
.Lfunc_end65:
	.size	UnifiedOneForthPix.29, .Lfunc_end65-UnifiedOneForthPix.29
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture.30        # -- Begin function frame_picture.30
	.p2align	4, 0x90
	.type	frame_picture.30,@function
frame_picture.30:                       # @frame_picture.30
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$153735598, -16(%rbp)   # imm = 0x929D1AE
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	$0, 28(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	cmpl	$2, -12(%rbp)
	jne	.LBB66_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture3
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture3, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture3, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB66_6
.LBB66_2:                               # %if.else
	cmpl	$1, -12(%rbp)
	jne	.LBB66_4
# %bb.3:                                # %if.then9
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture2
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture2, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB66_5
.LBB66_4:                               # %if.else35
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
.LBB66_5:                               # %if.end
	jmp	.LBB66_6
.LBB66_6:                               # %if.end61
	movq	stats, %rax
	movl	$0, 1468(%rax)
	movq	stats, %rax
	addq	$1468, %rax             # imm = 0x5BC
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	$0, 71800(%rax)
	movq	-8(%rbp), %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB66_8
# %bb.7:                                # %if.then66
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 812(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
.LBB66_8:                               # %if.end67
	cmpl	$153735598, -16(%rbp)   # imm = 0x929D1AE
	jne	.LBB66_10
.LBB66_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB66_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB66_9
.Lfunc_end66:
	.size	frame_picture.30, .Lfunc_end66-frame_picture.30
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportP.31
	.type	ReportP.31,@function
ReportP.31:                             # @ReportP.31
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1343487177, -8(%rbp)   # imm = 0x5013FCC9
	movl	%edi, -4(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	active_pps, %rax
	movl	192(%rax), %ecx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rdi
	movl	71800(%rdi), %edi
	cmpl	$0, %edi
	movabsq	$.L.str.7, %rdi
	movabsq	$.L.str.8, %rax
	cmovneq	%rdi, %rax
	movl	intras, %r11d
	movabsq	$.L.str.13, %rdi
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	cmpl	$1343487177, -8(%rbp)   # imm = 0x5013FCC9
	jne	.LBB67_2
.LBB67_1:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB67_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB67_1
.Lfunc_end67:
	.size	ReportP.31, .Lfunc_end67-ReportP.31
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.32
.LCPI68_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.32,@function
find_snr.32:                            # @find_snr.32
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1892286511, -44(%rbp)  # imm = 0x70CA002F
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB68_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB68_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_4 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB68_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	$0, -8(%rbp)
.LBB68_4:                               # %for.cond8
                                        #   Parent Loop BB68_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB68_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB68_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB68_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_4
.LBB68_7:                               # %for.end
                                        #   in Loop: Header=BB68_2 Depth=1
	jmp	.LBB68_8
.LBB68_8:                               # %for.inc22
                                        #   in Loop: Header=BB68_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_2
.LBB68_9:                               # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB68_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB68_11:                              # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_13 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB68_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB68_11 Depth=1
	movl	$0, -8(%rbp)
.LBB68_13:                              # %for.cond33
                                        #   Parent Loop BB68_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB68_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB68_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB68_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_13
.LBB68_16:                              # %for.end76
                                        #   in Loop: Header=BB68_11 Depth=1
	jmp	.LBB68_17
.LBB68_17:                              # %for.inc77
                                        #   in Loop: Header=BB68_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_11
.LBB68_18:                              # %for.end79
	jmp	.LBB68_19
.LBB68_19:                              # %if.end
	jmp	.LBB68_41
.LBB68_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB68_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB68_22:                              # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB68_23:                              # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_25 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB68_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	$0, -8(%rbp)
.LBB68_25:                              # %for.cond89
                                        #   Parent Loop BB68_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB68_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB68_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB68_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_25
.LBB68_28:                              # %for.end112
                                        #   in Loop: Header=BB68_23 Depth=1
	jmp	.LBB68_29
.LBB68_29:                              # %for.inc113
                                        #   in Loop: Header=BB68_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_23
.LBB68_30:                              # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB68_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB68_32:                              # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB68_34 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB68_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	$0, -8(%rbp)
.LBB68_34:                              # %for.cond125
                                        #   Parent Loop BB68_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB68_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB68_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB68_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB68_34
.LBB68_37:                              # %for.end169
                                        #   in Loop: Header=BB68_32 Depth=1
	jmp	.LBB68_38
.LBB68_38:                              # %for.inc170
                                        #   in Loop: Header=BB68_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB68_32
.LBB68_39:                              # %for.end172
	jmp	.LBB68_40
.LBB68_40:                              # %if.end173
	jmp	.LBB68_41
.LBB68_41:                              # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB68_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB68_43:                              # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB68_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB68_45:                              # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB68_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB68_47:                              # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB68_52
# %bb.48:                               # %if.then189
	movl	-52(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-48(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI68_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB68_50
# %bb.49:                               # %if.then199
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI68_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI68_0(%rip), %xmm1  # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB68_51
.LBB68_50:                              # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB68_51:                              # %if.end219
	jmp	.LBB68_52
.LBB68_52:                              # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB68_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB68_55
.LBB68_54:                              # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB68_55:                              # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB68_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB68_61
.LBB68_57:                              # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB68_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB68_60
.LBB68_59:                              # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB68_60:                              # %if.end394
	jmp	.LBB68_61
.LBB68_61:                              # %if.end395
	cmpl	$1892286511, -44(%rbp)  # imm = 0x70CA002F
	jne	.LBB68_63
.LBB68_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB68_63:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB68_62
.Lfunc_end68:
	.size	find_snr.32, .Lfunc_end68-find_snr.32
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.33      # -- Begin function copy_rdopt_data.33
	.p2align	4, 0x90
	.type	copy_rdopt_data.33,@function
copy_rdopt_data.33:                     # @copy_rdopt_data.33
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2116339055, -48(%rbp)  # imm = 0x7E24C56F
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB69_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB69_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB69_4
.LBB69_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB69_4
.LBB69_4:                               # %cond.end
	movl	%ecx, -44(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB69_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_7 Depth 2
                                        #       Child Loop BB69_9 Depth 3
                                        #         Child Loop BB69_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB69_5 Depth=1
	movl	$0, -8(%rbp)
.LBB69_7:                               # %for.cond17
                                        #   Parent Loop BB69_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_9 Depth 3
                                        #         Child Loop BB69_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB69_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB69_7 Depth=2
	movl	$0, -12(%rbp)
.LBB69_9:                               # %for.cond21
                                        #   Parent Loop BB69_5 Depth=1
                                        #     Parent Loop BB69_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB69_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB69_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB69_9 Depth=3
	movl	$0, -16(%rbp)
.LBB69_11:                              # %for.cond25
                                        #   Parent Loop BB69_5 Depth=1
                                        #     Parent Loop BB69_7 Depth=2
                                        #       Parent Loop BB69_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB69_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB69_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB69_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_11
.LBB69_14:                              # %for.end
                                        #   in Loop: Header=BB69_9 Depth=3
	jmp	.LBB69_15
.LBB69_15:                              # %for.inc46
                                        #   in Loop: Header=BB69_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_9
.LBB69_16:                              # %for.end48
                                        #   in Loop: Header=BB69_7 Depth=2
	jmp	.LBB69_17
.LBB69_17:                              # %for.inc49
                                        #   in Loop: Header=BB69_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_7
.LBB69_18:                              # %for.end51
                                        #   in Loop: Header=BB69_5 Depth=1
	jmp	.LBB69_19
.LBB69_19:                              # %for.inc52
                                        #   in Loop: Header=BB69_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_5
.LBB69_20:                              # %for.end54
	movl	$0, -4(%rbp)
.LBB69_21:                              # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_23 Depth 2
                                        #       Child Loop BB69_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB69_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB69_21 Depth=1
	movl	$0, -12(%rbp)
.LBB69_23:                              # %for.cond59
                                        #   Parent Loop BB69_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB69_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB69_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB69_23 Depth=2
	movl	$0, -16(%rbp)
.LBB69_25:                              # %for.cond63
                                        #   Parent Loop BB69_21 Depth=1
                                        #     Parent Loop BB69_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB69_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB69_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB69_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB69_25
.LBB69_28:                              # %for.end82
                                        #   in Loop: Header=BB69_23 Depth=2
	jmp	.LBB69_29
.LBB69_29:                              # %for.inc83
                                        #   in Loop: Header=BB69_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_23
.LBB69_30:                              # %for.end85
                                        #   in Loop: Header=BB69_21 Depth=1
	jmp	.LBB69_31
.LBB69_31:                              # %for.inc86
                                        #   in Loop: Header=BB69_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_21
.LBB69_32:                              # %for.end88
	movl	$0, -8(%rbp)
.LBB69_33:                              # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB69_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB69_33 Depth=1
	movl	$0, -4(%rbp)
.LBB69_35:                              # %for.cond93
                                        #   Parent Loop BB69_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB69_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB69_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB69_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB69_38:                              # %if.end
                                        #   in Loop: Header=BB69_35 Depth=2
	jmp	.LBB69_39
.LBB69_39:                              # %for.inc176
                                        #   in Loop: Header=BB69_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_35
.LBB69_40:                              # %for.end178
                                        #   in Loop: Header=BB69_33 Depth=1
	jmp	.LBB69_41
.LBB69_41:                              # %for.inc179
                                        #   in Loop: Header=BB69_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_33
.LBB69_42:                              # %for.end181
	movl	$0, -8(%rbp)
.LBB69_43:                              # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB69_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB69_43 Depth=1
	movl	$0, -4(%rbp)
.LBB69_45:                              # %for.cond186
                                        #   Parent Loop BB69_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB69_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB69_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB69_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_45
.LBB69_48:                              # %for.end203
                                        #   in Loop: Header=BB69_43 Depth=1
	jmp	.LBB69_49
.LBB69_49:                              # %for.inc204
                                        #   in Loop: Header=BB69_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_43
.LBB69_50:                              # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB69_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB69_52:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB69_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB69_52 Depth=1
	movl	$0, -4(%rbp)
.LBB69_54:                              # %for.cond214
                                        #   Parent Loop BB69_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB69_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB69_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB69_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_54
.LBB69_57:                              # %for.end247
                                        #   in Loop: Header=BB69_52 Depth=1
	jmp	.LBB69_58
.LBB69_58:                              # %for.inc248
                                        #   in Loop: Header=BB69_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_52
.LBB69_59:                              # %for.end250
	jmp	.LBB69_60
.LBB69_60:                              # %if.end251
	movl	$0, -4(%rbp)
.LBB69_61:                              # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB69_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB69_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB69_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_61
.LBB69_64:                              # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB69_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB69_66:                              # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB69_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB69_68:                              # %for.cond283
                                        #   Parent Loop BB69_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB69_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB69_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_68
.LBB69_71:                              # %for.end306
                                        #   in Loop: Header=BB69_66 Depth=1
	jmp	.LBB69_72
.LBB69_72:                              # %for.inc307
                                        #   in Loop: Header=BB69_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_66
.LBB69_73:                              # %for.end309
	jmp	.LBB69_98
.LBB69_74:                              # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB69_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB69_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB69_77:                              # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB69_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB69_79:                              # %for.cond324
                                        #   Parent Loop BB69_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB69_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB69_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_79
.LBB69_82:                              # %for.end341
                                        #   in Loop: Header=BB69_77 Depth=1
	jmp	.LBB69_83
.LBB69_83:                              # %for.inc342
                                        #   in Loop: Header=BB69_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_77
.LBB69_84:                              # %for.end344
	jmp	.LBB69_97
.LBB69_85:                              # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB69_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB69_96
.LBB69_87:                              # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB69_88:                              # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB69_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB69_90:                              # %for.cond359
                                        #   Parent Loop BB69_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB69_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB69_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB69_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB69_90
.LBB69_93:                              # %for.end384
                                        #   in Loop: Header=BB69_88 Depth=1
	jmp	.LBB69_94
.LBB69_94:                              # %for.inc385
                                        #   in Loop: Header=BB69_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_88
.LBB69_95:                              # %for.end387
	jmp	.LBB69_96
.LBB69_96:                              # %if.end388
	jmp	.LBB69_97
.LBB69_97:                              # %if.end389
	jmp	.LBB69_98
.LBB69_98:                              # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB69_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB69_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB69_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB69_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB69_103:                             # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB69_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB69_103 Depth=1
	movl	$0, -4(%rbp)
.LBB69_105:                             # %for.cond410
                                        #   Parent Loop BB69_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB69_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	je	.LBB69_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB69_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB69_109
.LBB69_108:                             # %if.else483
                                        #   in Loop: Header=BB69_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB69_109:                             # %if.end506
                                        #   in Loop: Header=BB69_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB69_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB69_105 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB69_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB69_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB69_113
.LBB69_112:                             # %if.else568
                                        #   in Loop: Header=BB69_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB69_113:                             # %if.end591
                                        #   in Loop: Header=BB69_105 Depth=2
	jmp	.LBB69_114
.LBB69_114:                             # %if.end592
                                        #   in Loop: Header=BB69_105 Depth=2
	jmp	.LBB69_115
.LBB69_115:                             # %for.inc593
                                        #   in Loop: Header=BB69_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_105
.LBB69_116:                             # %for.end595
                                        #   in Loop: Header=BB69_103 Depth=1
	jmp	.LBB69_117
.LBB69_117:                             # %for.inc596
                                        #   in Loop: Header=BB69_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_103
.LBB69_118:                             # %for.end598
	jmp	.LBB69_130
.LBB69_119:                             # %if.else599
	movl	$0, -8(%rbp)
.LBB69_120:                             # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB69_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB69_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB69_120 Depth=1
	movl	$0, -4(%rbp)
.LBB69_122:                             # %for.cond604
                                        #   Parent Loop BB69_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB69_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB69_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB69_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB69_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB69_125:                             # %if.end654
                                        #   in Loop: Header=BB69_122 Depth=2
	jmp	.LBB69_126
.LBB69_126:                             # %for.inc655
                                        #   in Loop: Header=BB69_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB69_122
.LBB69_127:                             # %for.end657
                                        #   in Loop: Header=BB69_120 Depth=1
	jmp	.LBB69_128
.LBB69_128:                             # %for.inc658
                                        #   in Loop: Header=BB69_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB69_120
.LBB69_129:                             # %for.end660
	jmp	.LBB69_130
.LBB69_130:                             # %if.end661
	jmp	.LBB69_131
.LBB69_131:                             # %if.end662
	cmpl	$2116339055, -48(%rbp)  # imm = 0x7E24C56F
	jne	.LBB69_133
.LBB69_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB69_133:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB69_132
.Lfunc_end69:
	.size	copy_rdopt_data.33, .Lfunc_end69-copy_rdopt_data.33
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.34     # -- Begin function encode_one_frame.34
	.p2align	4, 0x90
	.type	encode_one_frame.34,@function
encode_one_frame.34:                    # @encode_one_frame.34
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$2083353804, -24(%rbp)  # imm = 0x7C2D74CC
	movl	$0, -44(%rbp)
	movl	$0, -56(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm0, -36(%rbp)
	vmovss	%xmm0, -32(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-112(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB70_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB70_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB70_3:                               # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -28(%rbp)
	movl	-28(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB70_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB70_9
.LBB70_5:                               # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB70_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB70_8
.LBB70_7:                               # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB70_8:                               # %if.end21
	jmp	.LBB70_9
.LBB70_9:                               # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB70_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB70_38
.LBB70_11:                              # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB70_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB70_13:                              # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB70_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB70_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB70_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB70_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB70_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB70_20
.LBB70_19:                              # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB70_20:                              # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB70_21:                              # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB70_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB70_23:                              # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB70_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB70_25:                              # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB70_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB70_29
.LBB70_27:                              # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB70_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB70_29:                              # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB70_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB70_31:                              # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB70_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -64(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -68(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB70_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB70_35
.LBB70_34:                              # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB70_35:                              # %if.end89
	jmp	.LBB70_37
.LBB70_36:                              # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB70_37:                              # %if.end92
	jmp	.LBB70_38
.LBB70_38:                              # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB70_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB70_41
.LBB70_40:                              # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB70_41:                              # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB70_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB70_43:                              # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB70_45
# %bb.44:                               # %if.then109
	movl	-56(%rbp), %edi
	vmovss	-52(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-32(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB70_54
.LBB70_45:                              # %if.else112
	movl	-44(%rbp), %edi
	vmovss	-60(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-40(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB70_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB70_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB70_53
.LBB70_48:                              # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB70_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB70_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB70_52
.LBB70_51:                              # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB70_52:                              # %if.end130
	jmp	.LBB70_53
.LBB70_53:                              # %if.end131
	jmp	.LBB70_54
.LBB70_54:                              # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB70_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB70_56:                              # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB70_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB70_58:                              # %if.end138
	cmpq	$0, frame_pic
	je	.LBB70_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB70_60:                              # %if.end141
	cmpq	$0, top_pic
	je	.LBB70_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB70_62:                              # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB70_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB70_64:                              # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB70_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB70_66:                              # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-128(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-120(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-104(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB70_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB70_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB70_70
.LBB70_69:                              # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB70_70:                              # %if.end171
	jmp	.LBB70_81
.LBB70_71:                              # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB70_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB70_80
.LBB70_73:                              # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB70_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB70_79
.LBB70_75:                              # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB70_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB70_78
.LBB70_77:                              # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB70_78:                              # %if.end187
	jmp	.LBB70_79
.LBB70_79:                              # %if.end188
	jmp	.LBB70_80
.LBB70_80:                              # %if.end189
	jmp	.LBB70_81
.LBB70_81:                              # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB70_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB70_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB70_85
.LBB70_84:                              # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB70_85:                              # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB70_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB70_88
.LBB70_87:                              # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB70_88:                              # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB70_89:                              # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB70_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB70_91:                              # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB70_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB70_110
.LBB70_93:                              # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB70_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB70_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB70_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB70_98
.LBB70_97:                              # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB70_98:                              # %if.end239
	jmp	.LBB70_99
.LBB70_99:                              # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB70_104
	jmp	.LBB70_100
.LBB70_100:                             # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB70_102
	jmp	.LBB70_101
.LBB70_101:                             # %if.end240
	subl	$3, %eax
	je	.LBB70_103
	jmp	.LBB70_108
.LBB70_102:                             # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB70_109
.LBB70_103:                             # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB70_109
.LBB70_104:                             # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB70_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB70_107
.LBB70_106:                             # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB70_107:                             # %if.end261
	jmp	.LBB70_109
.LBB70_108:                             # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB70_109:                             # %sw.epilog
	jmp	.LBB70_110
.LBB70_110:                             # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB70_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB70_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB70_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB70_119
.LBB70_114:                             # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB70_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB70_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB70_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB70_118:                             # %if.end292
	jmp	.LBB70_119
.LBB70_119:                             # %if.end293
	jmp	.LBB70_120
.LBB70_120:                             # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB70_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB70_123
.LBB70_122:                             # %if.else301
	movl	$1, -20(%rbp)
.LBB70_123:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$2083353804, -24(%rbp)  # imm = 0x7C2D74CC
	jne	.LBB70_125
.LBB70_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB70_125:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB70_124
.Lfunc_end70:
	.size	encode_one_frame.34, .Lfunc_end70-encode_one_frame.34
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.35     # -- Begin function encode_one_frame.35
	.p2align	4, 0x90
	.type	encode_one_frame.35,@function
encode_one_frame.35:                    # @encode_one_frame.35
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1435061211, -52(%rbp)  # imm = 0x55894BDB
	movl	$0, -48(%rbp)
	movl	$0, -40(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -36(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -60(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB71_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB71_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB71_3:                               # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -56(%rbp)
	movl	-56(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB71_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB71_9
.LBB71_5:                               # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB71_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB71_8
.LBB71_7:                               # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB71_8:                               # %if.end21
	jmp	.LBB71_9
.LBB71_9:                               # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB71_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB71_38
.LBB71_11:                              # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB71_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB71_13:                              # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB71_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB71_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB71_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB71_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB71_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB71_20
.LBB71_19:                              # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB71_20:                              # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB71_21:                              # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB71_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB71_23:                              # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB71_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB71_25:                              # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB71_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB71_29
.LBB71_27:                              # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB71_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB71_29:                              # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB71_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB71_31:                              # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB71_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -68(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB71_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB71_35
.LBB71_34:                              # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB71_35:                              # %if.end89
	jmp	.LBB71_37
.LBB71_36:                              # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB71_37:                              # %if.end92
	jmp	.LBB71_38
.LBB71_38:                              # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB71_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB71_41
.LBB71_40:                              # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB71_41:                              # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB71_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB71_43:                              # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB71_45
# %bb.44:                               # %if.then109
	movl	-40(%rbp), %edi
	vmovss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-24(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-60(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB71_54
.LBB71_45:                              # %if.else112
	movl	-48(%rbp), %edi
	vmovss	-64(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB71_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB71_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB71_53
.LBB71_48:                              # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB71_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB71_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB71_52
.LBB71_51:                              # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB71_52:                              # %if.end130
	jmp	.LBB71_53
.LBB71_53:                              # %if.end131
	jmp	.LBB71_54
.LBB71_54:                              # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB71_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB71_56:                              # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB71_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB71_58:                              # %if.end138
	cmpq	$0, frame_pic
	je	.LBB71_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB71_60:                              # %if.end141
	cmpq	$0, top_pic
	je	.LBB71_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB71_62:                              # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB71_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB71_64:                              # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB71_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB71_66:                              # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB71_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB71_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB71_70
.LBB71_69:                              # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB71_70:                              # %if.end171
	jmp	.LBB71_81
.LBB71_71:                              # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB71_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB71_80
.LBB71_73:                              # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB71_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB71_79
.LBB71_75:                              # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB71_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB71_78
.LBB71_77:                              # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB71_78:                              # %if.end187
	jmp	.LBB71_79
.LBB71_79:                              # %if.end188
	jmp	.LBB71_80
.LBB71_80:                              # %if.end189
	jmp	.LBB71_81
.LBB71_81:                              # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB71_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB71_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB71_85
.LBB71_84:                              # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB71_85:                              # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB71_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB71_88
.LBB71_87:                              # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB71_88:                              # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB71_89:                              # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB71_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB71_91:                              # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB71_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB71_110
.LBB71_93:                              # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB71_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB71_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB71_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB71_98
.LBB71_97:                              # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB71_98:                              # %if.end239
	jmp	.LBB71_99
.LBB71_99:                              # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB71_104
	jmp	.LBB71_100
.LBB71_100:                             # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB71_102
	jmp	.LBB71_101
.LBB71_101:                             # %if.end240
	subl	$3, %eax
	je	.LBB71_103
	jmp	.LBB71_108
.LBB71_102:                             # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB71_109
.LBB71_103:                             # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB71_109
.LBB71_104:                             # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB71_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB71_107
.LBB71_106:                             # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB71_107:                             # %if.end261
	jmp	.LBB71_109
.LBB71_108:                             # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB71_109:                             # %sw.epilog
	jmp	.LBB71_110
.LBB71_110:                             # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB71_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB71_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB71_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB71_119
.LBB71_114:                             # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB71_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB71_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB71_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB71_118:                             # %if.end292
	jmp	.LBB71_119
.LBB71_119:                             # %if.end293
	jmp	.LBB71_120
.LBB71_120:                             # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB71_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB71_123
.LBB71_122:                             # %if.else301
	movl	$1, -20(%rbp)
.LBB71_123:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$1435061211, -52(%rbp)  # imm = 0x55894BDB
	jne	.LBB71_125
.LBB71_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB71_125:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB71_124
.Lfunc_end71:
	.size	encode_one_frame.35, .Lfunc_end71-encode_one_frame.35
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.36
	.type	ReadOneFrame.36,@function
ReadOneFrame.36:                        # @ReadOneFrame.36
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$1803238155, -72(%rbp)  # imm = 0x6B7B3B0B
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -40(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -32(%rbp)
	movl	%r9d, -44(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-40(%rbp), %eax
	imull	-28(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-32(%rbp), %eax
	imull	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB72_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB72_2:                               # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -36(%rbp)
	movl	-40(%rbp), %eax
	imull	-28(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB72_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB72_4:                               # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB72_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB72_6:                               # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB72_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB72_8:                               # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB72_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB72_10:                              # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB72_26
# %bb.11:                               # %if.then42
	cmpl	$0, -36(%rbp)
	je	.LBB72_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB72_13:                              # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB72_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB72_15:                              # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-40(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB72_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB72_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB72_18:                              # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -36(%rbp)
	je	.LBB72_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB72_20:                              # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB72_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB72_22:                              # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -36(%rbp)
	je	.LBB72_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB72_24:                              # %if.end85
	jmp	.LBB72_25
.LBB72_25:                              # %if.end86
	jmp	.LBB72_27
.LBB72_26:                              # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB72_27:                              # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$1803238155, -72(%rbp)  # imm = 0x6B7B3B0B
	jne	.LBB72_29
.LBB72_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB72_29:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB72_28
.Lfunc_end72:
	.size	ReadOneFrame.36, .Lfunc_end72-ReadOneFrame.36
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.37              # -- Begin function buf2img.37
	.p2align	4, 0x90
	.type	buf2img.37,@function
buf2img.37:                             # @buf2img.37
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$309104469, -60(%rbp)   # imm = 0x126C8F55
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB73_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB73_2:                               # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB73_35
# %bb.3:                                # %if.then2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB73_6
	jmp	.LBB73_4
.LBB73_4:                               # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB73_15
	jmp	.LBB73_5
.LBB73_5:                               # %if.then2
	subl	$4, %eax
	je	.LBB73_24
	jmp	.LBB73_33
.LBB73_6:                               # %sw.bb
	movl	$0, -4(%rbp)
.LBB73_7:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB73_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB73_7 Depth=1
	movl	$0, -8(%rbp)
.LBB73_9:                               # %for.cond5
                                        #   Parent Loop BB73_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB73_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB73_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB73_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_9
.LBB73_12:                              # %for.end
                                        #   in Loop: Header=BB73_7 Depth=1
	jmp	.LBB73_13
.LBB73_13:                              # %for.inc14
                                        #   in Loop: Header=BB73_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_7
.LBB73_14:                              # %for.end16
	jmp	.LBB73_34
.LBB73_15:                              # %sw.bb17
	movl	$0, -4(%rbp)
.LBB73_16:                              # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB73_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB73_16 Depth=1
	movl	$0, -8(%rbp)
.LBB73_18:                              # %for.cond22
                                        #   Parent Loop BB73_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB73_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB73_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB73_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_18
.LBB73_21:                              # %for.end38
                                        #   in Loop: Header=BB73_16 Depth=1
	jmp	.LBB73_22
.LBB73_22:                              # %for.inc39
                                        #   in Loop: Header=BB73_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_16
.LBB73_23:                              # %for.end41
	jmp	.LBB73_34
.LBB73_24:                              # %sw.bb42
	movl	$0, -4(%rbp)
.LBB73_25:                              # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB73_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB73_25 Depth=1
	movl	$0, -8(%rbp)
.LBB73_27:                              # %for.cond47
                                        #   Parent Loop BB73_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB73_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB73_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB73_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_27
.LBB73_30:                              # %for.end74
                                        #   in Loop: Header=BB73_25 Depth=1
	jmp	.LBB73_31
.LBB73_31:                              # %for.inc75
                                        #   in Loop: Header=BB73_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_25
.LBB73_32:                              # %for.end77
	jmp	.LBB73_33
.LBB73_33:                              # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB73_34:                              # %sw.epilog
	jmp	.LBB73_44
.LBB73_35:                              # %if.else
	movl	$0, -4(%rbp)
.LBB73_36:                              # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB73_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB73_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB73_36 Depth=1
	movl	$0, -8(%rbp)
.LBB73_38:                              # %for.cond82
                                        #   Parent Loop BB73_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB73_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB73_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB73_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB73_38
.LBB73_41:                              # %for.end102
                                        #   in Loop: Header=BB73_36 Depth=1
	jmp	.LBB73_42
.LBB73_42:                              # %for.inc103
                                        #   in Loop: Header=BB73_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB73_36
.LBB73_43:                              # %for.end105
	jmp	.LBB73_44
.LBB73_44:                              # %if.end106
	cmpl	$309104469, -60(%rbp)   # imm = 0x126C8F55
	jne	.LBB73_46
.LBB73_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB73_46:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB73_45
.Lfunc_end73:
	.size	buf2img.37, .Lfunc_end73-buf2img.37
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.38     # -- Begin function encode_one_frame.38
	.p2align	4, 0x90
	.type	encode_one_frame.38,@function
encode_one_frame.38:                    # @encode_one_frame.38
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$682525157, -68(%rbp)   # imm = 0x28AE81E5
	movl	$0, -40(%rbp)
	movl	$0, -60(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -36(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -64(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB74_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB74_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB74_3:                               # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB74_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB74_9
.LBB74_5:                               # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB74_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB74_8
.LBB74_7:                               # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB74_8:                               # %if.end21
	jmp	.LBB74_9
.LBB74_9:                               # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB74_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB74_38
.LBB74_11:                              # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB74_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB74_13:                              # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB74_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB74_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB74_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB74_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB74_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB74_20
.LBB74_19:                              # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB74_20:                              # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB74_21:                              # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB74_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB74_23:                              # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB74_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB74_25:                              # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB74_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB74_29
.LBB74_27:                              # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB74_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB74_29:                              # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB74_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB74_31:                              # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB74_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -56(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -24(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB74_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB74_35
.LBB74_34:                              # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB74_35:                              # %if.end89
	jmp	.LBB74_37
.LBB74_36:                              # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB74_37:                              # %if.end92
	jmp	.LBB74_38
.LBB74_38:                              # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB74_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB74_41
.LBB74_40:                              # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB74_41:                              # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB74_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB74_43:                              # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB74_45
# %bb.44:                               # %if.then109
	movl	-60(%rbp), %edi
	vmovss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-64(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB74_54
.LBB74_45:                              # %if.else112
	movl	-40(%rbp), %edi
	vmovss	-36(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-32(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB74_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB74_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB74_53
.LBB74_48:                              # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB74_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB74_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB74_52
.LBB74_51:                              # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB74_52:                              # %if.end130
	jmp	.LBB74_53
.LBB74_53:                              # %if.end131
	jmp	.LBB74_54
.LBB74_54:                              # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB74_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB74_56:                              # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB74_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB74_58:                              # %if.end138
	cmpq	$0, frame_pic
	je	.LBB74_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB74_60:                              # %if.end141
	cmpq	$0, top_pic
	je	.LBB74_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB74_62:                              # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB74_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB74_64:                              # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB74_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB74_66:                              # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB74_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB74_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB74_70
.LBB74_69:                              # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB74_70:                              # %if.end171
	jmp	.LBB74_81
.LBB74_71:                              # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB74_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB74_80
.LBB74_73:                              # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB74_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB74_79
.LBB74_75:                              # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB74_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB74_78
.LBB74_77:                              # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB74_78:                              # %if.end187
	jmp	.LBB74_79
.LBB74_79:                              # %if.end188
	jmp	.LBB74_80
.LBB74_80:                              # %if.end189
	jmp	.LBB74_81
.LBB74_81:                              # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB74_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB74_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB74_85
.LBB74_84:                              # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB74_85:                              # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB74_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB74_88
.LBB74_87:                              # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB74_88:                              # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB74_89:                              # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB74_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB74_91:                              # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB74_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB74_110
.LBB74_93:                              # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB74_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB74_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB74_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB74_98
.LBB74_97:                              # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB74_98:                              # %if.end239
	jmp	.LBB74_99
.LBB74_99:                              # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB74_104
	jmp	.LBB74_100
.LBB74_100:                             # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB74_102
	jmp	.LBB74_101
.LBB74_101:                             # %if.end240
	subl	$3, %eax
	je	.LBB74_103
	jmp	.LBB74_108
.LBB74_102:                             # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB74_109
.LBB74_103:                             # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB74_109
.LBB74_104:                             # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB74_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB74_107
.LBB74_106:                             # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB74_107:                             # %if.end261
	jmp	.LBB74_109
.LBB74_108:                             # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB74_109:                             # %sw.epilog
	jmp	.LBB74_110
.LBB74_110:                             # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB74_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB74_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB74_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB74_119
.LBB74_114:                             # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB74_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB74_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB74_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB74_118:                             # %if.end292
	jmp	.LBB74_119
.LBB74_119:                             # %if.end293
	jmp	.LBB74_120
.LBB74_120:                             # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB74_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB74_123
.LBB74_122:                             # %if.else301
	movl	$1, -20(%rbp)
.LBB74_123:                             # %return
	movl	-20(%rbp), %ebx
	cmpl	$682525157, -68(%rbp)   # imm = 0x28AE81E5
	jne	.LBB74_125
.LBB74_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB74_125:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB74_124
.Lfunc_end74:
	.size	encode_one_frame.38, .Lfunc_end74-encode_one_frame.38
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.39        # -- Begin function MbAffPostProc.39
	.p2align	4, 0x90
	.type	MbAffPostProc.39,@function
MbAffPostProc.39:                       # @MbAffPostProc.39
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$935115425, -44(%rbp)   # imm = 0x37BCBAA1
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB75_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB75_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_5 Depth 2
                                        #       Child Loop BB75_7 Depth 3
                                        #     Child Loop BB75_13 Depth 2
                                        #       Child Loop BB75_15 Depth 3
                                        #     Child Loop BB75_21 Depth 2
                                        #       Child Loop BB75_23 Depth 3
                                        #         Child Loop BB75_25 Depth 4
                                        #       Child Loop BB75_31 Depth 3
                                        #         Child Loop BB75_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB75_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB75_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB75_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB75_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB75_5:                               # %for.cond5
                                        #   Parent Loop BB75_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB75_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB75_5 Depth=2
	movl	$0, -4(%rbp)
.LBB75_7:                               # %for.cond8
                                        #   Parent Loop BB75_2 Depth=1
                                        #     Parent Loop BB75_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB75_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB75_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB75_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_7
.LBB75_10:                              # %for.end
                                        #   in Loop: Header=BB75_5 Depth=2
	jmp	.LBB75_11
.LBB75_11:                              # %for.inc20
                                        #   in Loop: Header=BB75_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_5
.LBB75_12:                              # %for.end22
                                        #   in Loop: Header=BB75_2 Depth=1
	movl	$0, -8(%rbp)
.LBB75_13:                              # %for.cond23
                                        #   Parent Loop BB75_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB75_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB75_13 Depth=2
	movl	$0, -4(%rbp)
.LBB75_15:                              # %for.cond26
                                        #   Parent Loop BB75_2 Depth=1
                                        #     Parent Loop BB75_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB75_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB75_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB75_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_15
.LBB75_18:                              # %for.end54
                                        #   in Loop: Header=BB75_13 Depth=2
	jmp	.LBB75_19
.LBB75_19:                              # %for.inc55
                                        #   in Loop: Header=BB75_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_13
.LBB75_20:                              # %for.end57
                                        #   in Loop: Header=BB75_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB75_21:                              # %for.cond61
                                        #   Parent Loop BB75_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_23 Depth 3
                                        #         Child Loop BB75_25 Depth 4
                                        #       Child Loop BB75_31 Depth 3
                                        #         Child Loop BB75_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB75_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB75_21 Depth=2
	movl	$0, -8(%rbp)
.LBB75_23:                              # %for.cond64
                                        #   Parent Loop BB75_2 Depth=1
                                        #     Parent Loop BB75_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB75_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB75_23 Depth=3
	movl	$0, -4(%rbp)
.LBB75_25:                              # %for.cond69
                                        #   Parent Loop BB75_2 Depth=1
                                        #     Parent Loop BB75_21 Depth=2
                                        #       Parent Loop BB75_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB75_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB75_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB75_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_25
.LBB75_28:                              # %for.end87
                                        #   in Loop: Header=BB75_23 Depth=3
	jmp	.LBB75_29
.LBB75_29:                              # %for.inc88
                                        #   in Loop: Header=BB75_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_23
.LBB75_30:                              # %for.end90
                                        #   in Loop: Header=BB75_21 Depth=2
	movl	$0, -8(%rbp)
.LBB75_31:                              # %for.cond91
                                        #   Parent Loop BB75_2 Depth=1
                                        #     Parent Loop BB75_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB75_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB75_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB75_31 Depth=3
	movl	$0, -4(%rbp)
.LBB75_33:                              # %for.cond95
                                        #   Parent Loop BB75_2 Depth=1
                                        #     Parent Loop BB75_21 Depth=2
                                        #       Parent Loop BB75_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB75_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB75_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB75_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_33
.LBB75_36:                              # %for.end130
                                        #   in Loop: Header=BB75_31 Depth=3
	jmp	.LBB75_37
.LBB75_37:                              # %for.inc131
                                        #   in Loop: Header=BB75_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_31
.LBB75_38:                              # %for.end133
                                        #   in Loop: Header=BB75_21 Depth=2
	jmp	.LBB75_39
.LBB75_39:                              # %for.inc134
                                        #   in Loop: Header=BB75_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB75_21
.LBB75_40:                              # %for.end136
                                        #   in Loop: Header=BB75_2 Depth=1
	jmp	.LBB75_41
.LBB75_41:                              # %if.end
                                        #   in Loop: Header=BB75_2 Depth=1
	jmp	.LBB75_42
.LBB75_42:                              # %for.inc137
                                        #   in Loop: Header=BB75_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_2
.LBB75_43:                              # %for.end139
	jmp	.LBB75_67
.LBB75_44:                              # %if.else
	movl	$0, -20(%rbp)
.LBB75_45:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB75_48 Depth 2
                                        #       Child Loop BB75_50 Depth 3
                                        #     Child Loop BB75_56 Depth 2
                                        #       Child Loop BB75_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB75_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB75_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB75_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB75_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB75_48:                              # %for.cond149
                                        #   Parent Loop BB75_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB75_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB75_48 Depth=2
	movl	$0, -4(%rbp)
.LBB75_50:                              # %for.cond152
                                        #   Parent Loop BB75_45 Depth=1
                                        #     Parent Loop BB75_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB75_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB75_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB75_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_50
.LBB75_53:                              # %for.end167
                                        #   in Loop: Header=BB75_48 Depth=2
	jmp	.LBB75_54
.LBB75_54:                              # %for.inc168
                                        #   in Loop: Header=BB75_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_48
.LBB75_55:                              # %for.end170
                                        #   in Loop: Header=BB75_45 Depth=1
	movl	$0, -8(%rbp)
.LBB75_56:                              # %for.cond171
                                        #   Parent Loop BB75_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB75_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB75_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB75_56 Depth=2
	movl	$0, -4(%rbp)
.LBB75_58:                              # %for.cond174
                                        #   Parent Loop BB75_45 Depth=1
                                        #     Parent Loop BB75_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB75_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB75_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB75_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB75_58
.LBB75_61:                              # %for.end203
                                        #   in Loop: Header=BB75_56 Depth=2
	jmp	.LBB75_62
.LBB75_62:                              # %for.inc204
                                        #   in Loop: Header=BB75_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB75_56
.LBB75_63:                              # %for.end206
                                        #   in Loop: Header=BB75_45 Depth=1
	jmp	.LBB75_64
.LBB75_64:                              # %if.end207
                                        #   in Loop: Header=BB75_45 Depth=1
	jmp	.LBB75_65
.LBB75_65:                              # %for.inc208
                                        #   in Loop: Header=BB75_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB75_45
.LBB75_66:                              # %for.end210
	jmp	.LBB75_67
.LBB75_67:                              # %if.end211
	cmpl	$935115425, -44(%rbp)   # imm = 0x37BCBAA1
	jne	.LBB75_69
.LBB75_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB75_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB75_68
.Lfunc_end75:
	.size	MbAffPostProc.39, .Lfunc_end75-MbAffPostProc.39
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportNALNonVLCBits.40
	.type	ReportNALNonVLCBits.40,@function
ReportNALNonVLCBits.40:                 # @ReportNALNonVLCBits.40
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$935498566, -4(%rbp)    # imm = 0x37C29346
	movl	%edi, -12(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	1492(%rax), %edx
	movabsq	$.L.str.5, %rdi
	movb	$0, %al
	callq	printf
	cmpl	$935498566, -4(%rbp)    # imm = 0x37C29346
	jne	.LBB76_2
.LBB76_1:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB76_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB76_1
.Lfunc_end76:
	.size	ReportNALNonVLCBits.40, .Lfunc_end76-ReportNALNonVLCBits.40
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.41
	.type	writeUnit.41,@function
writeUnit.41:                           # @writeUnit.41
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1220211261, -16(%rbp)  # imm = 0x48BAF23D
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB77_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB77_18
.LBB77_2:                               # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB77_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB77_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB77_6
.LBB77_5:                               # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB77_6:                               # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB77_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB77_9
.LBB77_8:                               # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB77_9:                               # %if.end21
	jmp	.LBB77_17
.LBB77_10:                              # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB77_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB77_13
.LBB77_12:                              # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB77_13:                              # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB77_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB77_16
.LBB77_15:                              # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB77_16:                              # %if.end39
	jmp	.LBB77_17
.LBB77_17:                              # %if.end40
	jmp	.LBB77_18
.LBB77_18:                              # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1220211261, -16(%rbp)  # imm = 0x48BAF23D
	jne	.LBB77_20
.LBB77_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB77_20:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB77_19
.Lfunc_end77:
	.size	writeUnit.41, .Lfunc_end77-writeUnit.41
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.42
.LCPI78_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.42,@function
init_frame.42:                          # @init_frame.42
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$430828976, -16(%rbp)   # imm = 0x19ADEDB0
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB78_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB78_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB78_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB78_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_1
.LBB78_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB78_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB78_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB78_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB78_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB78_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB78_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB78_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB78_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB78_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB78_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB78_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB78_17
.LBB78_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB78_17:                              # %if.end32
	jmp	.LBB78_25
.LBB78_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB78_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB78_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB78_22
.LBB78_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB78_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB78_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB78_24:                              # %if.end50
	jmp	.LBB78_25
.LBB78_25:                              # %if.end51
	jmp	.LBB78_26
.LBB78_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB78_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB78_28:                              # %if.end62
	jmp	.LBB78_72
.LBB78_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB78_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB78_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB78_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB78_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB78_30
.LBB78_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB78_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB78_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB78_36:                              # %if.end102
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB78_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI78_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB78_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB78_40
# %bb.39:                               # %if.then116
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB78_41
.LBB78_40:                              # %if.else128
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB78_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB78_43
# %bb.42:                               # %if.then140
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB78_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB78_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB78_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB78_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB78_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB78_49
.LBB78_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB78_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB78_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB78_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB78_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB78_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB78_58
.LBB78_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB78_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB78_57
.LBB78_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB78_57:                              # %cond.end
.LBB78_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB78_66
.LBB78_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB78_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB78_65
.LBB78_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB78_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB78_64
.LBB78_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB78_64:                              # %cond.end209
.LBB78_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB78_66:                              # %if.end214
	jmp	.LBB78_67
.LBB78_67:                              # %if.end215
	jmp	.LBB78_71
.LBB78_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB78_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB78_70:                              # %if.end226
	jmp	.LBB78_71
.LBB78_71:                              # %if.end227
	jmp	.LBB78_72
.LBB78_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$430828976, -16(%rbp)   # imm = 0x19ADEDB0
	jne	.LBB78_74
.LBB78_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB78_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB78_73
.Lfunc_end78:
	.size	init_frame.42, .Lfunc_end78-init_frame.42
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.43
	.type	writeout_picture.43,@function
writeout_picture.43:                    # @writeout_picture.43
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$79603917, -28(%rbp)    # imm = 0x4BEA8CD
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB79_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB79_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB79_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB79_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB79_3:                               # %for.cond1
                                        #   Parent Loop BB79_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB79_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB79_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB79_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB79_3
.LBB79_6:                               # %for.end
                                        #   in Loop: Header=BB79_1 Depth=1
	jmp	.LBB79_7
.LBB79_7:                               # %for.inc10
                                        #   in Loop: Header=BB79_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB79_1
.LBB79_8:                               # %for.end12
	cmpl	$79603917, -28(%rbp)    # imm = 0x4BEA8CD
	jne	.LBB79_10
.LBB79_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB79_10:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB79_9
.Lfunc_end79:
	.size	writeout_picture.43, .Lfunc_end79-writeout_picture.43
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.44
	.type	distortion_fld.44,@function
distortion_fld.44:                      # @distortion_fld.44
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1001768555, -4(%rbp)   # imm = 0x3BB5C66B
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$1001768555, -4(%rbp)   # imm = 0x3BB5C66B
	jne	.LBB80_2
.LBB80_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB80_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB80_1
.Lfunc_end80:
	.size	distortion_fld.44, .Lfunc_end80-distortion_fld.44
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.45
	.type	rdPictureCoding.45,@function
rdPictureCoding.45:                     # @rdPictureCoding.45
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$416132536, -24(%rbp)   # imm = 0x18CDADB8
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB81_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB81_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB81_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB81_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB81_6
.LBB81_5:                               # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB81_6:                               # %if.end
	jmp	.LBB81_8
.LBB81_7:                               # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB81_8:                               # %if.end10
	jmp	.LBB81_10
.LBB81_9:                               # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB81_10:                              # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB81_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB81_13
.LBB81_12:                              # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB81_13:                              # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB81_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB81_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB81_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB81_18
.LBB81_17:                              # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB81_18:                              # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB81_20
.LBB81_19:                              # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB81_20:                              # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB81_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB81_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB81_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB81_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB81_26
.LBB81_25:                              # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB81_26:                              # %if.end53
	jmp	.LBB81_34
.LBB81_27:                              # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB81_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB81_33
.LBB81_29:                              # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB81_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB81_32
.LBB81_31:                              # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB81_32:                              # %if.end66
	jmp	.LBB81_33
.LBB81_33:                              # %if.end67
	jmp	.LBB81_34
.LBB81_34:                              # %if.end68
	jmp	.LBB81_36
.LBB81_35:                              # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB81_36:                              # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB81_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB81_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB81_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB81_40:                              # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB81_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB81_46
.LBB81_42:                              # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB81_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB81_45
.LBB81_44:                              # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB81_45:                              # %if.end98
	jmp	.LBB81_46
.LBB81_46:                              # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB81_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB81_51
.LBB81_48:                              # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB81_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB81_50:                              # %if.end111
	jmp	.LBB81_51
.LBB81_51:                              # %if.end112
	cmpl	$416132536, -24(%rbp)   # imm = 0x18CDADB8
	jne	.LBB81_53
.LBB81_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB81_53:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB81_52
.Lfunc_end81:
	.size	rdPictureCoding.45, .Lfunc_end81-rdPictureCoding.45
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.46
	.type	PaddAutoCropBorders.46,@function
PaddAutoCropBorders.46:                 # @PaddAutoCropBorders.46
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1544624510, -32(%rbp)  # imm = 0x5C11197E
	movl	%edi, -24(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB82_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB82_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_3:                               # %for.cond1
                                        #   Parent Loop BB82_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB82_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB82_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB82_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_3
.LBB82_6:                               # %for.end
                                        #   in Loop: Header=BB82_1 Depth=1
	jmp	.LBB82_7
.LBB82_7:                               # %for.inc10
                                        #   in Loop: Header=BB82_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_1
.LBB82_8:                               # %for.end12
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_9:                               # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB82_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB82_9 Depth=1
	movl	$0, -4(%rbp)
.LBB82_11:                              # %for.cond16
                                        #   Parent Loop BB82_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB82_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB82_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB82_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_11
.LBB82_14:                              # %for.end30
                                        #   in Loop: Header=BB82_9 Depth=1
	jmp	.LBB82_15
.LBB82_15:                              # %for.inc31
                                        #   in Loop: Header=BB82_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_9
.LBB82_16:                              # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB82_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB82_18:                              # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB82_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB82_18 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB82_20:                              # %for.cond38
                                        #   Parent Loop BB82_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB82_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB82_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB82_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_20
.LBB82_23:                              # %for.end65
                                        #   in Loop: Header=BB82_18 Depth=1
	jmp	.LBB82_24
.LBB82_24:                              # %for.inc66
                                        #   in Loop: Header=BB82_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_18
.LBB82_25:                              # %for.end68
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB82_26:                              # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB82_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB82_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB82_26 Depth=1
	movl	$0, -4(%rbp)
.LBB82_28:                              # %for.cond72
                                        #   Parent Loop BB82_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB82_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB82_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB82_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB82_28
.LBB82_31:                              # %for.end99
                                        #   in Loop: Header=BB82_26 Depth=1
	jmp	.LBB82_32
.LBB82_32:                              # %for.inc100
                                        #   in Loop: Header=BB82_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB82_26
.LBB82_33:                              # %for.end102
	jmp	.LBB82_34
.LBB82_34:                              # %if.end
	cmpl	$1544624510, -32(%rbp)  # imm = 0x5C11197E
	jne	.LBB82_36
.LBB82_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB82_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB82_35
.Lfunc_end82:
	.size	PaddAutoCropBorders.46, .Lfunc_end82-PaddAutoCropBorders.46
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.47
	.type	copy_motion_vectors_MB.47,@function
copy_motion_vectors_MB.47:              # @copy_motion_vectors_MB.47
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$747193088, -20(%rbp)   # imm = 0x2C894300
	movl	$0, -8(%rbp)
.LBB83_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB83_3 Depth 2
                                        #       Child Loop BB83_5 Depth 3
                                        #         Child Loop BB83_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB83_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	$0, -12(%rbp)
.LBB83_3:                               # %for.cond1
                                        #   Parent Loop BB83_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB83_5 Depth 3
                                        #         Child Loop BB83_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB83_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	$0, -4(%rbp)
.LBB83_5:                               # %for.cond4
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB83_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB83_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB83_5 Depth=3
	movl	$0, -16(%rbp)
.LBB83_7:                               # %for.cond7
                                        #   Parent Loop BB83_1 Depth=1
                                        #     Parent Loop BB83_3 Depth=2
                                        #       Parent Loop BB83_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -16(%rbp)
	jge	.LBB83_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB83_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB83_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB83_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB83_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB83_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB83_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB83_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB83_12:                              # %if.end
                                        #   in Loop: Header=BB83_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB83_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB83_7
.LBB83_14:                              # %for.end
                                        #   in Loop: Header=BB83_5 Depth=3
	jmp	.LBB83_15
.LBB83_15:                              # %for.inc359
                                        #   in Loop: Header=BB83_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB83_5
.LBB83_16:                              # %for.end361
                                        #   in Loop: Header=BB83_3 Depth=2
	jmp	.LBB83_17
.LBB83_17:                              # %for.inc362
                                        #   in Loop: Header=BB83_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB83_3
.LBB83_18:                              # %for.end364
                                        #   in Loop: Header=BB83_1 Depth=1
	jmp	.LBB83_19
.LBB83_19:                              # %for.inc365
                                        #   in Loop: Header=BB83_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB83_1
.LBB83_20:                              # %for.end367
	cmpl	$747193088, -20(%rbp)   # imm = 0x2C894300
	jne	.LBB83_22
.LBB83_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB83_22:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB83_21
.Lfunc_end83:
	.size	copy_motion_vectors_MB.47, .Lfunc_end83-copy_motion_vectors_MB.47
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.48
	.type	frame_mode_buffer.48,@function
frame_mode_buffer.48:                   # @frame_mode_buffer.48
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$807793987, -16(%rbp)   # imm = 0x3025F543
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB84_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB84_3
.LBB84_2:                               # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB84_3:                               # %if.end
	cmpl	$807793987, -16(%rbp)   # imm = 0x3025F543
	jne	.LBB84_5
.LBB84_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB84_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB84_4
.Lfunc_end84:
	.size	frame_mode_buffer.48, .Lfunc_end84-frame_mode_buffer.48
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.49
.LCPI85_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.49,@function
init_frame.49:                          # @init_frame.49
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1994588820, -16(%rbp)  # imm = 0x76E30294
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB85_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB85_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB85_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB85_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_1
.LBB85_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB85_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB85_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB85_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB85_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB85_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB85_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB85_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB85_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB85_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB85_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB85_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB85_17
.LBB85_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB85_17:                              # %if.end32
	jmp	.LBB85_25
.LBB85_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB85_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB85_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB85_22
.LBB85_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB85_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB85_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB85_24:                              # %if.end50
	jmp	.LBB85_25
.LBB85_25:                              # %if.end51
	jmp	.LBB85_26
.LBB85_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB85_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB85_28:                              # %if.end62
	jmp	.LBB85_72
.LBB85_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB85_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB85_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB85_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB85_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB85_30
.LBB85_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB85_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB85_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB85_36:                              # %if.end102
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB85_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI85_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB85_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB85_40
# %bb.39:                               # %if.then116
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB85_41
.LBB85_40:                              # %if.else128
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB85_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB85_43
# %bb.42:                               # %if.then140
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB85_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB85_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB85_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB85_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB85_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB85_49
.LBB85_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB85_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB85_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB85_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB85_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB85_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB85_58
.LBB85_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB85_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB85_57
.LBB85_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB85_57:                              # %cond.end
.LBB85_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB85_66
.LBB85_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB85_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB85_65
.LBB85_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB85_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB85_64
.LBB85_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB85_64:                              # %cond.end209
.LBB85_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB85_66:                              # %if.end214
	jmp	.LBB85_67
.LBB85_67:                              # %if.end215
	jmp	.LBB85_71
.LBB85_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB85_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB85_70:                              # %if.end226
	jmp	.LBB85_71
.LBB85_71:                              # %if.end227
	jmp	.LBB85_72
.LBB85_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$1994588820, -16(%rbp)  # imm = 0x76E30294
	jne	.LBB85_74
.LBB85_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB85_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB85_73
.Lfunc_end85:
	.size	init_frame.49, .Lfunc_end85-init_frame.49
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportIntra.50
	.type	ReportIntra.50,@function
ReportIntra.50:                         # @ReportIntra.50
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2123847254, -12(%rbp)  # imm = 0x7E975656
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$1, 4(%rax)
	jne	.LBB86_2
# %bb.1:                                # %if.then
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	jmp	.LBB86_3
.LBB86_2:                               # %if.else
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.9, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
.LBB86_3:                               # %if.end
	cmpl	$2123847254, -12(%rbp)  # imm = 0x7E975656
	jne	.LBB86_5
.LBB86_4:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB86_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB86_4
.Lfunc_end86:
	.size	ReportIntra.50, .Lfunc_end86-ReportIntra.50
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.51        # -- Begin function MbAffPostProc.51
	.p2align	4, 0x90
	.type	MbAffPostProc.51,@function
MbAffPostProc.51:                       # @MbAffPostProc.51
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$1971957092, -44(%rbp)  # imm = 0x7589AD64
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB87_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB87_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_5 Depth 2
                                        #       Child Loop BB87_7 Depth 3
                                        #     Child Loop BB87_13 Depth 2
                                        #       Child Loop BB87_15 Depth 3
                                        #     Child Loop BB87_21 Depth 2
                                        #       Child Loop BB87_23 Depth 3
                                        #         Child Loop BB87_25 Depth 4
                                        #       Child Loop BB87_31 Depth 3
                                        #         Child Loop BB87_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB87_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB87_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB87_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB87_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB87_5:                               # %for.cond5
                                        #   Parent Loop BB87_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB87_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB87_5 Depth=2
	movl	$0, -4(%rbp)
.LBB87_7:                               # %for.cond8
                                        #   Parent Loop BB87_2 Depth=1
                                        #     Parent Loop BB87_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB87_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB87_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB87_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_7
.LBB87_10:                              # %for.end
                                        #   in Loop: Header=BB87_5 Depth=2
	jmp	.LBB87_11
.LBB87_11:                              # %for.inc20
                                        #   in Loop: Header=BB87_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_5
.LBB87_12:                              # %for.end22
                                        #   in Loop: Header=BB87_2 Depth=1
	movl	$0, -8(%rbp)
.LBB87_13:                              # %for.cond23
                                        #   Parent Loop BB87_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB87_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB87_13 Depth=2
	movl	$0, -4(%rbp)
.LBB87_15:                              # %for.cond26
                                        #   Parent Loop BB87_2 Depth=1
                                        #     Parent Loop BB87_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB87_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB87_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB87_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_15
.LBB87_18:                              # %for.end54
                                        #   in Loop: Header=BB87_13 Depth=2
	jmp	.LBB87_19
.LBB87_19:                              # %for.inc55
                                        #   in Loop: Header=BB87_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_13
.LBB87_20:                              # %for.end57
                                        #   in Loop: Header=BB87_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB87_21:                              # %for.cond61
                                        #   Parent Loop BB87_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_23 Depth 3
                                        #         Child Loop BB87_25 Depth 4
                                        #       Child Loop BB87_31 Depth 3
                                        #         Child Loop BB87_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB87_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB87_21 Depth=2
	movl	$0, -8(%rbp)
.LBB87_23:                              # %for.cond64
                                        #   Parent Loop BB87_2 Depth=1
                                        #     Parent Loop BB87_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB87_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB87_23 Depth=3
	movl	$0, -4(%rbp)
.LBB87_25:                              # %for.cond69
                                        #   Parent Loop BB87_2 Depth=1
                                        #     Parent Loop BB87_21 Depth=2
                                        #       Parent Loop BB87_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB87_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB87_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB87_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_25
.LBB87_28:                              # %for.end87
                                        #   in Loop: Header=BB87_23 Depth=3
	jmp	.LBB87_29
.LBB87_29:                              # %for.inc88
                                        #   in Loop: Header=BB87_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_23
.LBB87_30:                              # %for.end90
                                        #   in Loop: Header=BB87_21 Depth=2
	movl	$0, -8(%rbp)
.LBB87_31:                              # %for.cond91
                                        #   Parent Loop BB87_2 Depth=1
                                        #     Parent Loop BB87_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB87_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB87_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB87_31 Depth=3
	movl	$0, -4(%rbp)
.LBB87_33:                              # %for.cond95
                                        #   Parent Loop BB87_2 Depth=1
                                        #     Parent Loop BB87_21 Depth=2
                                        #       Parent Loop BB87_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB87_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB87_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB87_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_33
.LBB87_36:                              # %for.end130
                                        #   in Loop: Header=BB87_31 Depth=3
	jmp	.LBB87_37
.LBB87_37:                              # %for.inc131
                                        #   in Loop: Header=BB87_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_31
.LBB87_38:                              # %for.end133
                                        #   in Loop: Header=BB87_21 Depth=2
	jmp	.LBB87_39
.LBB87_39:                              # %for.inc134
                                        #   in Loop: Header=BB87_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB87_21
.LBB87_40:                              # %for.end136
                                        #   in Loop: Header=BB87_2 Depth=1
	jmp	.LBB87_41
.LBB87_41:                              # %if.end
                                        #   in Loop: Header=BB87_2 Depth=1
	jmp	.LBB87_42
.LBB87_42:                              # %for.inc137
                                        #   in Loop: Header=BB87_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_2
.LBB87_43:                              # %for.end139
	jmp	.LBB87_67
.LBB87_44:                              # %if.else
	movl	$0, -20(%rbp)
.LBB87_45:                              # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB87_48 Depth 2
                                        #       Child Loop BB87_50 Depth 3
                                        #     Child Loop BB87_56 Depth 2
                                        #       Child Loop BB87_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB87_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB87_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB87_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB87_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB87_48:                              # %for.cond149
                                        #   Parent Loop BB87_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB87_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB87_48 Depth=2
	movl	$0, -4(%rbp)
.LBB87_50:                              # %for.cond152
                                        #   Parent Loop BB87_45 Depth=1
                                        #     Parent Loop BB87_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB87_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB87_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB87_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_50
.LBB87_53:                              # %for.end167
                                        #   in Loop: Header=BB87_48 Depth=2
	jmp	.LBB87_54
.LBB87_54:                              # %for.inc168
                                        #   in Loop: Header=BB87_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_48
.LBB87_55:                              # %for.end170
                                        #   in Loop: Header=BB87_45 Depth=1
	movl	$0, -8(%rbp)
.LBB87_56:                              # %for.cond171
                                        #   Parent Loop BB87_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB87_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB87_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB87_56 Depth=2
	movl	$0, -4(%rbp)
.LBB87_58:                              # %for.cond174
                                        #   Parent Loop BB87_45 Depth=1
                                        #     Parent Loop BB87_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB87_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB87_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB87_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB87_58
.LBB87_61:                              # %for.end203
                                        #   in Loop: Header=BB87_56 Depth=2
	jmp	.LBB87_62
.LBB87_62:                              # %for.inc204
                                        #   in Loop: Header=BB87_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB87_56
.LBB87_63:                              # %for.end206
                                        #   in Loop: Header=BB87_45 Depth=1
	jmp	.LBB87_64
.LBB87_64:                              # %if.end207
                                        #   in Loop: Header=BB87_45 Depth=1
	jmp	.LBB87_65
.LBB87_65:                              # %for.inc208
                                        #   in Loop: Header=BB87_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB87_45
.LBB87_66:                              # %for.end210
	jmp	.LBB87_67
.LBB87_67:                              # %if.end211
	cmpl	$1971957092, -44(%rbp)  # imm = 0x7589AD64
	jne	.LBB87_69
.LBB87_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB87_69:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB87_68
.Lfunc_end87:
	.size	MbAffPostProc.51, .Lfunc_end87-MbAffPostProc.51
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.52      # -- Begin function copy_rdopt_data.52
	.p2align	4, 0x90
	.type	copy_rdopt_data.52,@function
copy_rdopt_data.52:                     # @copy_rdopt_data.52
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$577181369, -48(%rbp)   # imm = 0x226716B9
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB88_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB88_4
.LBB88_3:                               # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB88_4
.LBB88_4:                               # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB88_5:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_7 Depth 2
                                        #       Child Loop BB88_9 Depth 3
                                        #         Child Loop BB88_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	$0, -8(%rbp)
.LBB88_7:                               # %for.cond17
                                        #   Parent Loop BB88_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_9 Depth 3
                                        #         Child Loop BB88_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB88_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB88_7 Depth=2
	movl	$0, -12(%rbp)
.LBB88_9:                               # %for.cond21
                                        #   Parent Loop BB88_5 Depth=1
                                        #     Parent Loop BB88_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB88_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB88_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB88_9 Depth=3
	movl	$0, -16(%rbp)
.LBB88_11:                              # %for.cond25
                                        #   Parent Loop BB88_5 Depth=1
                                        #     Parent Loop BB88_7 Depth=2
                                        #       Parent Loop BB88_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB88_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB88_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB88_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_11
.LBB88_14:                              # %for.end
                                        #   in Loop: Header=BB88_9 Depth=3
	jmp	.LBB88_15
.LBB88_15:                              # %for.inc46
                                        #   in Loop: Header=BB88_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_9
.LBB88_16:                              # %for.end48
                                        #   in Loop: Header=BB88_7 Depth=2
	jmp	.LBB88_17
.LBB88_17:                              # %for.inc49
                                        #   in Loop: Header=BB88_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_7
.LBB88_18:                              # %for.end51
                                        #   in Loop: Header=BB88_5 Depth=1
	jmp	.LBB88_19
.LBB88_19:                              # %for.inc52
                                        #   in Loop: Header=BB88_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_5
.LBB88_20:                              # %for.end54
	movl	$0, -4(%rbp)
.LBB88_21:                              # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_23 Depth 2
                                        #       Child Loop BB88_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB88_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB88_21 Depth=1
	movl	$0, -12(%rbp)
.LBB88_23:                              # %for.cond59
                                        #   Parent Loop BB88_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB88_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB88_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB88_23 Depth=2
	movl	$0, -16(%rbp)
.LBB88_25:                              # %for.cond63
                                        #   Parent Loop BB88_21 Depth=1
                                        #     Parent Loop BB88_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB88_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB88_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB88_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB88_25
.LBB88_28:                              # %for.end82
                                        #   in Loop: Header=BB88_23 Depth=2
	jmp	.LBB88_29
.LBB88_29:                              # %for.inc83
                                        #   in Loop: Header=BB88_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_23
.LBB88_30:                              # %for.end85
                                        #   in Loop: Header=BB88_21 Depth=1
	jmp	.LBB88_31
.LBB88_31:                              # %for.inc86
                                        #   in Loop: Header=BB88_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_21
.LBB88_32:                              # %for.end88
	movl	$0, -8(%rbp)
.LBB88_33:                              # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB88_33 Depth=1
	movl	$0, -4(%rbp)
.LBB88_35:                              # %for.cond93
                                        #   Parent Loop BB88_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB88_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB88_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB88_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB88_38:                              # %if.end
                                        #   in Loop: Header=BB88_35 Depth=2
	jmp	.LBB88_39
.LBB88_39:                              # %for.inc176
                                        #   in Loop: Header=BB88_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_35
.LBB88_40:                              # %for.end178
                                        #   in Loop: Header=BB88_33 Depth=1
	jmp	.LBB88_41
.LBB88_41:                              # %for.inc179
                                        #   in Loop: Header=BB88_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_33
.LBB88_42:                              # %for.end181
	movl	$0, -8(%rbp)
.LBB88_43:                              # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB88_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB88_43 Depth=1
	movl	$0, -4(%rbp)
.LBB88_45:                              # %for.cond186
                                        #   Parent Loop BB88_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB88_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB88_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB88_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_45
.LBB88_48:                              # %for.end203
                                        #   in Loop: Header=BB88_43 Depth=1
	jmp	.LBB88_49
.LBB88_49:                              # %for.inc204
                                        #   in Loop: Header=BB88_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_43
.LBB88_50:                              # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB88_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB88_52:                              # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB88_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB88_52 Depth=1
	movl	$0, -4(%rbp)
.LBB88_54:                              # %for.cond214
                                        #   Parent Loop BB88_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB88_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB88_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB88_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_54
.LBB88_57:                              # %for.end247
                                        #   in Loop: Header=BB88_52 Depth=1
	jmp	.LBB88_58
.LBB88_58:                              # %for.inc248
                                        #   in Loop: Header=BB88_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_52
.LBB88_59:                              # %for.end250
	jmp	.LBB88_60
.LBB88_60:                              # %if.end251
	movl	$0, -4(%rbp)
.LBB88_61:                              # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB88_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB88_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB88_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_61
.LBB88_64:                              # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB88_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB88_66:                              # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB88_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB88_68:                              # %for.cond283
                                        #   Parent Loop BB88_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB88_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB88_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_68
.LBB88_71:                              # %for.end306
                                        #   in Loop: Header=BB88_66 Depth=1
	jmp	.LBB88_72
.LBB88_72:                              # %for.inc307
                                        #   in Loop: Header=BB88_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_66
.LBB88_73:                              # %for.end309
	jmp	.LBB88_98
.LBB88_74:                              # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB88_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB88_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB88_77:                              # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB88_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB88_79:                              # %for.cond324
                                        #   Parent Loop BB88_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB88_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB88_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_79
.LBB88_82:                              # %for.end341
                                        #   in Loop: Header=BB88_77 Depth=1
	jmp	.LBB88_83
.LBB88_83:                              # %for.inc342
                                        #   in Loop: Header=BB88_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_77
.LBB88_84:                              # %for.end344
	jmp	.LBB88_97
.LBB88_85:                              # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB88_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB88_96
.LBB88_87:                              # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB88_88:                              # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB88_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB88_90:                              # %for.cond359
                                        #   Parent Loop BB88_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB88_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB88_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB88_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB88_90
.LBB88_93:                              # %for.end384
                                        #   in Loop: Header=BB88_88 Depth=1
	jmp	.LBB88_94
.LBB88_94:                              # %for.inc385
                                        #   in Loop: Header=BB88_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_88
.LBB88_95:                              # %for.end387
	jmp	.LBB88_96
.LBB88_96:                              # %if.end388
	jmp	.LBB88_97
.LBB88_97:                              # %if.end389
	jmp	.LBB88_98
.LBB88_98:                              # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB88_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB88_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB88_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB88_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB88_103:                             # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB88_103 Depth=1
	movl	$0, -4(%rbp)
.LBB88_105:                             # %for.cond410
                                        #   Parent Loop BB88_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB88_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB88_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB88_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB88_109
.LBB88_108:                             # %if.else483
                                        #   in Loop: Header=BB88_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB88_109:                             # %if.end506
                                        #   in Loop: Header=BB88_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB88_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB88_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB88_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB88_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB88_113
.LBB88_112:                             # %if.else568
                                        #   in Loop: Header=BB88_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB88_113:                             # %if.end591
                                        #   in Loop: Header=BB88_105 Depth=2
	jmp	.LBB88_114
.LBB88_114:                             # %if.end592
                                        #   in Loop: Header=BB88_105 Depth=2
	jmp	.LBB88_115
.LBB88_115:                             # %for.inc593
                                        #   in Loop: Header=BB88_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_105
.LBB88_116:                             # %for.end595
                                        #   in Loop: Header=BB88_103 Depth=1
	jmp	.LBB88_117
.LBB88_117:                             # %for.inc596
                                        #   in Loop: Header=BB88_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_103
.LBB88_118:                             # %for.end598
	jmp	.LBB88_130
.LBB88_119:                             # %if.else599
	movl	$0, -8(%rbp)
.LBB88_120:                             # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB88_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB88_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB88_120 Depth=1
	movl	$0, -4(%rbp)
.LBB88_122:                             # %for.cond604
                                        #   Parent Loop BB88_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB88_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB88_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB88_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB88_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB88_125:                             # %if.end654
                                        #   in Loop: Header=BB88_122 Depth=2
	jmp	.LBB88_126
.LBB88_126:                             # %for.inc655
                                        #   in Loop: Header=BB88_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB88_122
.LBB88_127:                             # %for.end657
                                        #   in Loop: Header=BB88_120 Depth=1
	jmp	.LBB88_128
.LBB88_128:                             # %for.inc658
                                        #   in Loop: Header=BB88_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB88_120
.LBB88_129:                             # %for.end660
	jmp	.LBB88_130
.LBB88_130:                             # %if.end661
	jmp	.LBB88_131
.LBB88_131:                             # %if.end662
	cmpl	$577181369, -48(%rbp)   # imm = 0x226716B9
	jne	.LBB88_133
.LBB88_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB88_133:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB88_132
.Lfunc_end88:
	.size	copy_rdopt_data.52, .Lfunc_end88-copy_rdopt_data.52
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.53
	.type	field_mode_buffer.53,@function
field_mode_buffer.53:                   # @field_mode_buffer.53
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$955195536, -4(%rbp)    # imm = 0x38EF2090
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -16(%rbp)
	callq	put_buffer_frame
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$955195536, -4(%rbp)    # imm = 0x38EF2090
	jne	.LBB89_2
.LBB89_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB89_2:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB89_1
.Lfunc_end89:
	.size	field_mode_buffer.53, .Lfunc_end89-field_mode_buffer.53
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.54
	.type	PaddAutoCropBorders.54,@function
PaddAutoCropBorders.54:                 # @PaddAutoCropBorders.54
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1517063961, -36(%rbp)  # imm = 0x5A6C8F19
	movl	%edi, -28(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB90_1:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB90_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_3:                               # %for.cond1
                                        #   Parent Loop BB90_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB90_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB90_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB90_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_3
.LBB90_6:                               # %for.end
                                        #   in Loop: Header=BB90_1 Depth=1
	jmp	.LBB90_7
.LBB90_7:                               # %for.inc10
                                        #   in Loop: Header=BB90_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_1
.LBB90_8:                               # %for.end12
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB90_9:                               # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB90_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB90_9 Depth=1
	movl	$0, -4(%rbp)
.LBB90_11:                              # %for.cond16
                                        #   Parent Loop BB90_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB90_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB90_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB90_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_11
.LBB90_14:                              # %for.end30
                                        #   in Loop: Header=BB90_9 Depth=1
	jmp	.LBB90_15
.LBB90_15:                              # %for.inc31
                                        #   in Loop: Header=BB90_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_9
.LBB90_16:                              # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB90_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB90_18:                              # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB90_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB90_18 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB90_20:                              # %for.cond38
                                        #   Parent Loop BB90_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB90_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB90_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB90_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_20
.LBB90_23:                              # %for.end65
                                        #   in Loop: Header=BB90_18 Depth=1
	jmp	.LBB90_24
.LBB90_24:                              # %for.inc66
                                        #   in Loop: Header=BB90_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_18
.LBB90_25:                              # %for.end68
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB90_26:                              # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB90_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB90_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB90_26 Depth=1
	movl	$0, -4(%rbp)
.LBB90_28:                              # %for.cond72
                                        #   Parent Loop BB90_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB90_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB90_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB90_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB90_28
.LBB90_31:                              # %for.end99
                                        #   in Loop: Header=BB90_26 Depth=1
	jmp	.LBB90_32
.LBB90_32:                              # %for.inc100
                                        #   in Loop: Header=BB90_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB90_26
.LBB90_33:                              # %for.end102
	jmp	.LBB90_34
.LBB90_34:                              # %if.end
	cmpl	$1517063961, -36(%rbp)  # imm = 0x5A6C8F19
	jne	.LBB90_36
.LBB90_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB90_36:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB90_35
.Lfunc_end90:
	.size	PaddAutoCropBorders.54, .Lfunc_end90-PaddAutoCropBorders.54
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.55   # -- Begin function UnifiedOneForthPix.55
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.55,@function
UnifiedOneForthPix.55:                  # @UnifiedOneForthPix.55
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$956168560, -108(%rbp)  # imm = 0x38FDF970
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB91_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB91_3
.LBB91_2:                               # %if.then
	jmp	.LBB91_266
.LBB91_3:                               # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB91_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB91_5:                               # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB91_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB91_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB91_11
.LBB91_8:                               # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB91_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB91_10:                              # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB91_11:                              # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB91_12:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB91_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB91_14:                              # %for.cond49
                                        #   Parent Loop BB91_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB91_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB91_18
.LBB91_17:                              # %cond.false
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-48(%rbp), %eax
.LBB91_18:                              # %cond.end
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB91_24
.LBB91_20:                              # %cond.false63
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB91_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB91_23
.LBB91_22:                              # %cond.false71
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-48(%rbp), %eax
.LBB91_23:                              # %cond.end72
                                        #   in Loop: Header=BB91_14 Depth=2
.LBB91_24:                              # %cond.end74
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB91_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB91_27
.LBB91_26:                              # %cond.false83
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %edx
.LBB91_27:                              # %cond.end84
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB91_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB91_33
.LBB91_29:                              # %cond.false89
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB91_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB91_32
.LBB91_31:                              # %cond.false97
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %edx
.LBB91_32:                              # %cond.end98
                                        #   in Loop: Header=BB91_14 Depth=2
.LBB91_33:                              # %cond.end100
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB91_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB91_36
.LBB91_35:                              # %cond.false115
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB91_36:                              # %cond.end117
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB91_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB91_42
.LBB91_38:                              # %cond.false122
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB91_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB91_41
.LBB91_40:                              # %cond.false131
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB91_41:                              # %cond.end133
                                        #   in Loop: Header=BB91_14 Depth=2
.LBB91_42:                              # %cond.end135
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB91_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB91_45
.LBB91_44:                              # %cond.false152
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB91_45:                              # %cond.end154
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB91_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB91_51
.LBB91_47:                              # %cond.false159
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB91_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB91_50
.LBB91_49:                              # %cond.false168
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB91_50:                              # %cond.end170
                                        #   in Loop: Header=BB91_14 Depth=2
.LBB91_51:                              # %cond.end172
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB91_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB91_54
.LBB91_53:                              # %cond.false187
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB91_54:                              # %cond.end189
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB91_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB91_60
.LBB91_56:                              # %cond.false194
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB91_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB91_59
.LBB91_58:                              # %cond.false203
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB91_59:                              # %cond.end205
                                        #   in Loop: Header=BB91_14 Depth=2
.LBB91_60:                              # %cond.end207
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB91_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB91_63
.LBB91_62:                              # %cond.false225
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB91_63:                              # %cond.end227
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB91_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB91_69
.LBB91_65:                              # %cond.false232
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB91_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB91_68
.LBB91_67:                              # %cond.false241
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB91_68:                              # %cond.end243
                                        #   in Loop: Header=BB91_14 Depth=2
.LBB91_69:                              # %cond.end245
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB91_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB91_72
.LBB91_71:                              # %cond.false260
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB91_72:                              # %cond.end262
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB91_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB91_78
.LBB91_74:                              # %cond.false267
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB91_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB91_77
.LBB91_76:                              # %cond.false276
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB91_77:                              # %cond.end278
                                        #   in Loop: Header=BB91_14 Depth=2
.LBB91_78:                              # %cond.end280
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB91_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB91_81
.LBB91_80:                              # %cond.false297
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB91_81:                              # %cond.end298
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB91_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB91_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB91_87
.LBB91_83:                              # %cond.false303
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB91_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB91_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB91_86
.LBB91_85:                              # %cond.false311
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB91_86:                              # %cond.end312
                                        #   in Loop: Header=BB91_14 Depth=2
.LBB91_87:                              # %cond.end314
                                        #   in Loop: Header=BB91_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB91_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB91_14
.LBB91_89:                              # %for.end
                                        #   in Loop: Header=BB91_12 Depth=1
	jmp	.LBB91_90
.LBB91_90:                              # %for.inc336
                                        #   in Loop: Header=BB91_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB91_12
.LBB91_91:                              # %for.end338
	movl	$0, -44(%rbp)
.LBB91_92:                              # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB91_92 Depth=1
	movl	$0, -48(%rbp)
.LBB91_94:                              # %for.cond346
                                        #   Parent Loop BB91_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB91_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB91_98
.LBB91_97:                              # %cond.false364
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB91_98:                              # %cond.end366
                                        #   in Loop: Header=BB91_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB91_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB91_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB91_101
.LBB91_100:                             # %cond.false378
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB91_101:                             # %cond.end380
                                        #   in Loop: Header=BB91_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB91_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB91_104
.LBB91_103:                             # %cond.false390
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB91_104:                             # %cond.end392
                                        #   in Loop: Header=BB91_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB91_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB91_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB91_107
.LBB91_106:                             # %cond.false405
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB91_107:                             # %cond.end407
                                        #   in Loop: Header=BB91_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB91_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB91_110
.LBB91_109:                             # %cond.false417
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB91_110:                             # %cond.end419
                                        #   in Loop: Header=BB91_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB91_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB91_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_113
.LBB91_112:                             # %cond.false442
                                        #   in Loop: Header=BB91_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB91_113:                             # %cond.end449
                                        #   in Loop: Header=BB91_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB91_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB91_119
.LBB91_115:                             # %cond.false454
                                        #   in Loop: Header=BB91_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB91_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB91_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_118
.LBB91_117:                             # %cond.false466
                                        #   in Loop: Header=BB91_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB91_118:                             # %cond.end473
                                        #   in Loop: Header=BB91_94 Depth=2
.LBB91_119:                             # %cond.end475
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB91_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB91_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_122
.LBB91_121:                             # %cond.false490
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB91_122:                             # %cond.end493
                                        #   in Loop: Header=BB91_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB91_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB91_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB91_128
.LBB91_124:                             # %cond.false498
                                        #   in Loop: Header=BB91_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB91_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB91_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_127
.LBB91_126:                             # %cond.false506
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB91_127:                             # %cond.end509
                                        #   in Loop: Header=BB91_94 Depth=2
.LBB91_128:                             # %cond.end511
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB91_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB91_94
.LBB91_130:                             # %for.end516
                                        #   in Loop: Header=BB91_92 Depth=1
	jmp	.LBB91_131
.LBB91_131:                             # %for.inc517
                                        #   in Loop: Header=BB91_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB91_92
.LBB91_132:                             # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB91_133:                             # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB91_133 Depth=1
	movl	$0, -44(%rbp)
.LBB91_135:                             # %for.cond533
                                        #   Parent Loop BB91_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB91_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB91_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_139
.LBB91_138:                             # %cond.false553
                                        #   in Loop: Header=BB91_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB91_139:                             # %cond.end555
                                        #   in Loop: Header=BB91_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB91_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB91_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_145
.LBB91_141:                             # %cond.false567
                                        #   in Loop: Header=BB91_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB91_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_144
.LBB91_143:                             # %cond.false579
                                        #   in Loop: Header=BB91_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB91_144:                             # %cond.end581
                                        #   in Loop: Header=BB91_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB91_145:                             # %cond.end589
                                        #   in Loop: Header=BB91_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB91_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB91_157
.LBB91_147:                             # %cond.false594
                                        #   in Loop: Header=BB91_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB91_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_150
.LBB91_149:                             # %cond.false607
                                        #   in Loop: Header=BB91_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB91_150:                             # %cond.end609
                                        #   in Loop: Header=BB91_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB91_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB91_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_156
.LBB91_152:                             # %cond.false621
                                        #   in Loop: Header=BB91_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB91_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_155
.LBB91_154:                             # %cond.false633
                                        #   in Loop: Header=BB91_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB91_155:                             # %cond.end635
                                        #   in Loop: Header=BB91_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB91_156:                             # %cond.end643
                                        #   in Loop: Header=BB91_135 Depth=2
.LBB91_157:                             # %cond.end645
                                        #   in Loop: Header=BB91_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB91_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB91_135
.LBB91_159:                             # %for.end650
                                        #   in Loop: Header=BB91_133 Depth=1
	jmp	.LBB91_160
.LBB91_160:                             # %for.inc651
                                        #   in Loop: Header=BB91_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB91_133
.LBB91_161:                             # %for.end653
	movl	$0, -44(%rbp)
.LBB91_162:                             # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB91_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB91_162 Depth=1
	movl	$0, -48(%rbp)
.LBB91_164:                             # %for.cond659
                                        #   Parent Loop BB91_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB91_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_169
.LBB91_168:                             # %cond.false681
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_169:                             # %cond.end683
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB91_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_175
.LBB91_171:                             # %cond.false696
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_174
.LBB91_173:                             # %cond.false707
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_174:                             # %cond.end709
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB91_175:                             # %cond.end718
                                        #   in Loop: Header=BB91_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB91_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB91_187
.LBB91_177:                             # %cond.false723
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_180
.LBB91_179:                             # %cond.false735
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_180:                             # %cond.end737
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB91_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_186
.LBB91_182:                             # %cond.false750
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_185
.LBB91_184:                             # %cond.false761
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_185:                             # %cond.end763
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB91_186:                             # %cond.end772
                                        #   in Loop: Header=BB91_164 Depth=2
.LBB91_187:                             # %cond.end774
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB91_261
.LBB91_188:                             # %if.else
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB91_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB91_192
.LBB91_190:                             # %lor.lhs.false783
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB91_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB91_226
.LBB91_192:                             # %if.then791
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_195
.LBB91_194:                             # %cond.false803
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB91_195:                             # %cond.end805
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_198
.LBB91_197:                             # %cond.false816
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_198:                             # %cond.end818
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB91_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_207
.LBB91_200:                             # %cond.false832
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_203
.LBB91_202:                             # %cond.false840
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB91_203:                             # %cond.end842
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_206
.LBB91_205:                             # %cond.false853
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_206:                             # %cond.end855
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB91_207:                             # %cond.end865
                                        #   in Loop: Header=BB91_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB91_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB91_225
.LBB91_209:                             # %cond.false870
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_212
.LBB91_211:                             # %cond.false879
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB91_212:                             # %cond.end881
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_215
.LBB91_214:                             # %cond.false892
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_215:                             # %cond.end894
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB91_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_224
.LBB91_217:                             # %cond.false908
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_220
.LBB91_219:                             # %cond.false916
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB91_220:                             # %cond.end918
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_223
.LBB91_222:                             # %cond.false929
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_223:                             # %cond.end931
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB91_224:                             # %cond.end941
                                        #   in Loop: Header=BB91_164 Depth=2
.LBB91_225:                             # %cond.end943
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB91_260
.LBB91_226:                             # %if.else946
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_229
.LBB91_228:                             # %cond.false962
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_229:                             # %cond.end964
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_232
.LBB91_231:                             # %cond.false973
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB91_232:                             # %cond.end975
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB91_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_241
.LBB91_234:                             # %cond.false987
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_237
.LBB91_236:                             # %cond.false999
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_237:                             # %cond.end1001
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_240
.LBB91_239:                             # %cond.false1010
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB91_240:                             # %cond.end1012
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB91_241:                             # %cond.end1020
                                        #   in Loop: Header=BB91_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB91_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB91_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB91_259
.LBB91_243:                             # %cond.false1025
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_246
.LBB91_245:                             # %cond.false1038
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_246:                             # %cond.end1040
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_249
.LBB91_248:                             # %cond.false1049
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB91_249:                             # %cond.end1051
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB91_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB91_258
.LBB91_251:                             # %cond.false1063
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB91_254
.LBB91_253:                             # %cond.false1075
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB91_254:                             # %cond.end1077
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB91_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB91_257
.LBB91_256:                             # %cond.false1086
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB91_257:                             # %cond.end1088
                                        #   in Loop: Header=BB91_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB91_258:                             # %cond.end1096
                                        #   in Loop: Header=BB91_164 Depth=2
.LBB91_259:                             # %cond.end1098
                                        #   in Loop: Header=BB91_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB91_260:                             # %if.end1101
                                        #   in Loop: Header=BB91_164 Depth=2
	jmp	.LBB91_261
.LBB91_261:                             # %if.end1102
                                        #   in Loop: Header=BB91_164 Depth=2
	jmp	.LBB91_262
.LBB91_262:                             # %for.inc1103
                                        #   in Loop: Header=BB91_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB91_164
.LBB91_263:                             # %for.end1105
                                        #   in Loop: Header=BB91_162 Depth=1
	jmp	.LBB91_264
.LBB91_264:                             # %for.inc1106
                                        #   in Loop: Header=BB91_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB91_162
.LBB91_265:                             # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB91_266:                             # %return
	cmpl	$956168560, -108(%rbp)  # imm = 0x38FDF970
	jne	.LBB91_268
.LBB91_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB91_268:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB91_267
.Lfunc_end91:
	.size	UnifiedOneForthPix.55, .Lfunc_end91-UnifiedOneForthPix.55
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.56
.LCPI92_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.56,@function
init_field.56:                          # @init_field.56
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$628928471, -16(%rbp)   # imm = 0x257CAFD7
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB92_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB92_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB92_3:                               # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB92_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB92_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB92_6:                               # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB92_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB92_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB92_9:                               # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB92_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB92_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB92_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB92_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB92_15
.LBB92_14:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB92_15:                              # %if.end38
	jmp	.LBB92_23
.LBB92_16:                              # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB92_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB92_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB92_20
.LBB92_19:                              # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB92_20:                              # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB92_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB92_22:                              # %if.end56
	jmp	.LBB92_23
.LBB92_23:                              # %if.end57
	jmp	.LBB92_24
.LBB92_24:                              # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB92_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB92_26:                              # %if.end66
	jmp	.LBB92_77
.LBB92_27:                              # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB92_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB92_29:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB92_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB92_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB92_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_29
.LBB92_32:                              # %for.end
	jmp	.LBB92_38
.LBB92_33:                              # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB92_34:                              # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB92_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB92_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB92_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB92_34
.LBB92_37:                              # %for.end134
	jmp	.LBB92_38
.LBB92_38:                              # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB92_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB92_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB92_41:                              # %if.end147
	vmovsd	.LCPI92_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB92_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI92_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB92_43:                              # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB92_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI92_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB92_46
.LBB92_45:                              # %if.else174
	vmovsd	.LCPI92_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB92_46:                              # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB92_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB92_48:                              # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB92_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB92_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB92_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB92_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB92_54
.LBB92_53:                              # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB92_54:                              # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB92_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB92_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB92_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB92_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB92_63
.LBB92_59:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB92_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB92_62
.LBB92_61:                              # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB92_62:                              # %cond.end
.LBB92_63:                              # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB92_71
.LBB92_64:                              # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB92_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB92_70
.LBB92_66:                              # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB92_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB92_69
.LBB92_68:                              # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB92_69:                              # %cond.end256
.LBB92_70:                              # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB92_71:                              # %if.end261
	jmp	.LBB92_72
.LBB92_72:                              # %if.end262
	jmp	.LBB92_76
.LBB92_73:                              # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB92_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB92_75:                              # %if.end273
	jmp	.LBB92_76
.LBB92_76:                              # %if.end274
	jmp	.LBB92_77
.LBB92_77:                              # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$628928471, -16(%rbp)   # imm = 0x257CAFD7
	jne	.LBB92_79
.LBB92_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB92_79:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB92_78
.Lfunc_end92:
	.size	init_field.56, .Lfunc_end92-init_field.56
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.57
	.type	frame_mode_buffer.57,@function
frame_mode_buffer.57:                   # @frame_mode_buffer.57
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$40459197, -16(%rbp)    # imm = 0x2695BBD
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB93_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB93_3
.LBB93_2:                               # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB93_3:                               # %if.end
	cmpl	$40459197, -16(%rbp)    # imm = 0x2695BBD
	jne	.LBB93_5
.LBB93_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB93_5:                               # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB93_4
.Lfunc_end93:
	.size	frame_mode_buffer.57, .Lfunc_end93-frame_mode_buffer.57
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.58        # -- Begin function field_picture.58
	.p2align	4, 0x90
	.type	field_picture.58,@function
field_picture.58:                       # @field_picture.58
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1407221767, -16(%rbp)  # imm = 0x53E08007
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB94_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB94_2:                               # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB94_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB94_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB94_6
.LBB94_5:                               # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB94_6:                               # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB94_7:                               # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB94_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB94_9:                               # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB94_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB94_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB94_12:                              # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB94_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB94_14:                              # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB94_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB94_16:                              # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$1407221767, -16(%rbp)  # imm = 0x53E08007
	jne	.LBB94_18
.LBB94_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB94_18:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB94_17
.Lfunc_end94:
	.size	field_picture.58, .Lfunc_end94-field_picture.58
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.59
.LCPI95_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.59,@function
init_frame.59:                          # @init_frame.59
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$499380870, -16(%rbp)   # imm = 0x1DC3F286
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB95_1:                               # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB95_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB95_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB95_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_1
.LBB95_4:                               # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB95_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB95_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB95_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB95_8:                               # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB95_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB95_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB95_11:                              # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB95_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB95_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB95_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB95_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB95_17
.LBB95_16:                              # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB95_17:                              # %if.end32
	jmp	.LBB95_25
.LBB95_18:                              # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB95_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB95_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB95_22
.LBB95_21:                              # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB95_22:                              # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB95_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB95_24:                              # %if.end50
	jmp	.LBB95_25
.LBB95_25:                              # %if.end51
	jmp	.LBB95_26
.LBB95_26:                              # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB95_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB95_28:                              # %if.end62
	jmp	.LBB95_72
.LBB95_29:                              # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	-12(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB95_30:                              # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB95_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB95_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB95_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB95_30
.LBB95_33:                              # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB95_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB95_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -8(%rbp)
	movl	-8(%rbp), %eax
	subl	-12(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB95_36:                              # %if.end102
	vmovsd	.LCPI95_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB95_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI95_0(%rip), %xmm0  # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB95_38:                              # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB95_40
# %bb.39:                               # %if.then116
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB95_41
.LBB95_40:                              # %if.else128
	movl	-12(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB95_41:                              # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-8(%rbp), %eax
	jl	.LBB95_43
# %bb.42:                               # %if.then140
	movl	-8(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB95_43:                              # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB95_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB95_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB95_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB95_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB95_49
.LBB95_48:                              # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB95_49:                              # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB95_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB95_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB95_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB95_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB95_58
.LBB95_54:                              # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB95_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB95_57
.LBB95_56:                              # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB95_57:                              # %cond.end
.LBB95_58:                              # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB95_66
.LBB95_59:                              # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB95_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB95_65
.LBB95_61:                              # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB95_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB95_64
.LBB95_63:                              # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB95_64:                              # %cond.end209
.LBB95_65:                              # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB95_66:                              # %if.end214
	jmp	.LBB95_67
.LBB95_67:                              # %if.end215
	jmp	.LBB95_71
.LBB95_68:                              # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB95_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB95_70:                              # %if.end226
	jmp	.LBB95_71
.LBB95_71:                              # %if.end227
	jmp	.LBB95_72
.LBB95_72:                              # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$499380870, -16(%rbp)   # imm = 0x1DC3F286
	jne	.LBB95_74
.LBB95_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB95_74:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB95_73
.Lfunc_end95:
	.size	init_frame.59, .Lfunc_end95-init_frame.59
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.60
	.type	rdPictureCoding.60,@function
rdPictureCoding.60:                     # @rdPictureCoding.60
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1681880075, -24(%rbp)  # imm = 0x643F740B
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB96_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB96_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB96_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB96_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB96_6
.LBB96_5:                               # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB96_6:                               # %if.end
	jmp	.LBB96_8
.LBB96_7:                               # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB96_8:                               # %if.end10
	jmp	.LBB96_10
.LBB96_9:                               # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB96_10:                              # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB96_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB96_13
.LBB96_12:                              # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB96_13:                              # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB96_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB96_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB96_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB96_18
.LBB96_17:                              # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB96_18:                              # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB96_20
.LBB96_19:                              # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB96_20:                              # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB96_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB96_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB96_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB96_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB96_26
.LBB96_25:                              # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB96_26:                              # %if.end53
	jmp	.LBB96_34
.LBB96_27:                              # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB96_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB96_33
.LBB96_29:                              # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB96_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB96_32
.LBB96_31:                              # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB96_32:                              # %if.end66
	jmp	.LBB96_33
.LBB96_33:                              # %if.end67
	jmp	.LBB96_34
.LBB96_34:                              # %if.end68
	jmp	.LBB96_36
.LBB96_35:                              # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB96_36:                              # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB96_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB96_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB96_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB96_40:                              # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB96_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB96_46
.LBB96_42:                              # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB96_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB96_45
.LBB96_44:                              # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB96_45:                              # %if.end98
	jmp	.LBB96_46
.LBB96_46:                              # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB96_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB96_51
.LBB96_48:                              # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB96_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB96_50:                              # %if.end111
	jmp	.LBB96_51
.LBB96_51:                              # %if.end112
	cmpl	$1681880075, -24(%rbp)  # imm = 0x643F740B
	jne	.LBB96_53
.LBB96_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB96_53:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB96_52
.Lfunc_end96:
	.size	rdPictureCoding.60, .Lfunc_end96-rdPictureCoding.60
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.61
	.type	find_distortion.61,@function
find_distortion.61:                     # @find_distortion.61
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$2028966444, -44(%rbp)  # imm = 0x78EF922C
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB97_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB97_2:                               # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_4 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB97_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB97_2 Depth=1
	movl	$0, -16(%rbp)
.LBB97_4:                               # %for.cond3
                                        #   Parent Loop BB97_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB97_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB97_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB97_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_4
.LBB97_7:                               # %for.end
                                        #   in Loop: Header=BB97_2 Depth=1
	jmp	.LBB97_8
.LBB97_8:                               # %for.inc17
                                        #   in Loop: Header=BB97_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_2
.LBB97_9:                               # %for.end19
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB97_19
# %bb.10:                               # %if.then22
	movl	$0, -12(%rbp)
.LBB97_11:                              # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_13 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB97_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB97_11 Depth=1
	movl	$0, -16(%rbp)
.LBB97_13:                              # %for.cond27
                                        #   Parent Loop BB97_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB97_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB97_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB97_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_13
.LBB97_16:                              # %for.end71
                                        #   in Loop: Header=BB97_11 Depth=1
	jmp	.LBB97_17
.LBB97_17:                              # %for.inc72
                                        #   in Loop: Header=BB97_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_11
.LBB97_18:                              # %for.end74
	jmp	.LBB97_19
.LBB97_19:                              # %if.end
	jmp	.LBB97_39
.LBB97_20:                              # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -12(%rbp)
.LBB97_21:                              # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_23 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB97_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	$0, -16(%rbp)
.LBB97_23:                              # %for.cond80
                                        #   Parent Loop BB97_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB97_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB97_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB97_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_23
.LBB97_26:                              # %for.end104
                                        #   in Loop: Header=BB97_21 Depth=1
	jmp	.LBB97_27
.LBB97_27:                              # %for.inc105
                                        #   in Loop: Header=BB97_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_21
.LBB97_28:                              # %for.end107
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB97_38
# %bb.29:                               # %if.then111
	movl	$0, -12(%rbp)
.LBB97_30:                              # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB97_32 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB97_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB97_30 Depth=1
	movl	$0, -16(%rbp)
.LBB97_32:                              # %for.cond117
                                        #   Parent Loop BB97_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB97_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB97_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB97_32 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB97_32
.LBB97_35:                              # %for.end163
                                        #   in Loop: Header=BB97_30 Depth=1
	jmp	.LBB97_36
.LBB97_36:                              # %for.inc164
                                        #   in Loop: Header=BB97_30 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB97_30
.LBB97_37:                              # %for.end166
	jmp	.LBB97_38
.LBB97_38:                              # %if.end167
	jmp	.LBB97_39
.LBB97_39:                              # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$2028966444, -44(%rbp)  # imm = 0x78EF922C
	jne	.LBB97_41
.LBB97_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB97_41:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB97_40
.Lfunc_end97:
	.size	find_distortion.61, .Lfunc_end97-find_distortion.61
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.62
	.type	rdPictureCoding.62,@function
rdPictureCoding.62:                     # @rdPictureCoding.62
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1087250580, -24(%rbp)  # imm = 0x40CE2094
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB98_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB98_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB98_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB98_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB98_6
.LBB98_5:                               # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB98_6:                               # %if.end
	jmp	.LBB98_8
.LBB98_7:                               # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB98_8:                               # %if.end10
	jmp	.LBB98_10
.LBB98_9:                               # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB98_10:                              # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB98_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB98_13
.LBB98_12:                              # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB98_13:                              # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB98_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB98_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB98_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB98_18
.LBB98_17:                              # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB98_18:                              # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB98_20
.LBB98_19:                              # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB98_20:                              # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB98_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB98_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB98_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB98_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB98_26
.LBB98_25:                              # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB98_26:                              # %if.end53
	jmp	.LBB98_34
.LBB98_27:                              # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB98_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB98_33
.LBB98_29:                              # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB98_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB98_32
.LBB98_31:                              # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB98_32:                              # %if.end66
	jmp	.LBB98_33
.LBB98_33:                              # %if.end67
	jmp	.LBB98_34
.LBB98_34:                              # %if.end68
	jmp	.LBB98_36
.LBB98_35:                              # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB98_36:                              # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB98_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB98_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB98_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB98_40:                              # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB98_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB98_46
.LBB98_42:                              # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB98_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB98_45
.LBB98_44:                              # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB98_45:                              # %if.end98
	jmp	.LBB98_46
.LBB98_46:                              # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB98_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB98_51
.LBB98_48:                              # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB98_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB98_50:                              # %if.end111
	jmp	.LBB98_51
.LBB98_51:                              # %if.end112
	cmpl	$1087250580, -24(%rbp)  # imm = 0x40CE2094
	jne	.LBB98_53
.LBB98_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB98_53:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB98_52
.Lfunc_end98:
	.size	rdPictureCoding.62, .Lfunc_end98-rdPictureCoding.62
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.63
	.type	rdPictureCoding.63,@function
rdPictureCoding.63:                     # @rdPictureCoding.63
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1981214876, -24(%rbp)  # imm = 0x7616F09C
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB99_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB99_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB99_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB99_6
.LBB99_5:                               # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB99_6:                               # %if.end
	jmp	.LBB99_8
.LBB99_7:                               # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB99_8:                               # %if.end10
	jmp	.LBB99_10
.LBB99_9:                               # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB99_10:                              # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB99_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB99_13
.LBB99_12:                              # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB99_13:                              # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB99_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB99_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB99_18
.LBB99_17:                              # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB99_18:                              # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB99_20
.LBB99_19:                              # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB99_20:                              # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB99_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB99_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB99_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB99_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB99_26
.LBB99_25:                              # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB99_26:                              # %if.end53
	jmp	.LBB99_34
.LBB99_27:                              # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB99_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB99_33
.LBB99_29:                              # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB99_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB99_32
.LBB99_31:                              # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB99_32:                              # %if.end66
	jmp	.LBB99_33
.LBB99_33:                              # %if.end67
	jmp	.LBB99_34
.LBB99_34:                              # %if.end68
	jmp	.LBB99_36
.LBB99_35:                              # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB99_36:                              # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB99_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB99_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB99_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB99_40:                              # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB99_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB99_46
.LBB99_42:                              # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB99_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB99_45
.LBB99_44:                              # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB99_45:                              # %if.end98
	jmp	.LBB99_46
.LBB99_46:                              # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB99_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB99_51
.LBB99_48:                              # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB99_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB99_50:                              # %if.end111
	jmp	.LBB99_51
.LBB99_51:                              # %if.end112
	cmpl	$1981214876, -24(%rbp)  # imm = 0x7616F09C
	jne	.LBB99_53
.LBB99_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB99_53:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB99_52
.Lfunc_end99:
	.size	rdPictureCoding.63, .Lfunc_end99-rdPictureCoding.63
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.64
	.type	rdPictureCoding.64,@function
rdPictureCoding.64:                     # @rdPictureCoding.64
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1193328181, -24(%rbp)  # imm = 0x4720BE35
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB100_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB100_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB100_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB100_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB100_6
.LBB100_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB100_6:                              # %if.end
	jmp	.LBB100_8
.LBB100_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB100_8:                              # %if.end10
	jmp	.LBB100_10
.LBB100_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB100_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB100_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB100_13
.LBB100_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB100_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB100_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB100_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB100_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB100_18
.LBB100_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB100_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB100_20
.LBB100_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB100_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB100_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB100_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB100_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB100_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB100_26
.LBB100_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB100_26:                             # %if.end53
	jmp	.LBB100_34
.LBB100_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB100_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB100_33
.LBB100_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB100_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB100_32
.LBB100_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB100_32:                             # %if.end66
	jmp	.LBB100_33
.LBB100_33:                             # %if.end67
	jmp	.LBB100_34
.LBB100_34:                             # %if.end68
	jmp	.LBB100_36
.LBB100_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB100_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB100_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB100_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB100_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB100_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB100_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB100_46
.LBB100_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB100_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB100_45
.LBB100_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB100_45:                             # %if.end98
	jmp	.LBB100_46
.LBB100_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB100_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB100_51
.LBB100_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB100_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB100_50:                             # %if.end111
	jmp	.LBB100_51
.LBB100_51:                             # %if.end112
	cmpl	$1193328181, -24(%rbp)  # imm = 0x4720BE35
	jne	.LBB100_53
.LBB100_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB100_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB100_52
.Lfunc_end100:
	.size	rdPictureCoding.64, .Lfunc_end100-rdPictureCoding.64
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.65
	.type	ReadOneFrame.65,@function
ReadOneFrame.65:                        # @ReadOneFrame.65
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$954308610, -72(%rbp)   # imm = 0x38E19802
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-28(%rbp), %eax
	imull	-32(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-36(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-68(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB101_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB101_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	imull	-32(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB101_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB101_4:                              # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB101_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB101_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB101_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB101_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB101_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB101_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB101_26
# %bb.11:                               # %if.then42
	cmpl	$0, -44(%rbp)
	je	.LBB101_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB101_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB101_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB101_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB101_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB101_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB101_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB101_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB101_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB101_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB101_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB101_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB101_24:                             # %if.end85
	jmp	.LBB101_25
.LBB101_25:                             # %if.end86
	jmp	.LBB101_27
.LBB101_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB101_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$954308610, -72(%rbp)   # imm = 0x38E19802
	jne	.LBB101_29
.LBB101_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB101_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB101_28
.Lfunc_end101:
	.size	ReadOneFrame.65, .Lfunc_end101-ReadOneFrame.65
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.66
	.type	field_mode_buffer.66,@function
field_mode_buffer.66:                   # @field_mode_buffer.66
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1426266691, -12(%rbp)  # imm = 0x55031A43
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -16(%rbp)
	callq	put_buffer_frame
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1426266691, -12(%rbp)  # imm = 0x55031A43
	jne	.LBB102_2
.LBB102_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB102_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB102_1
.Lfunc_end102:
	.size	field_mode_buffer.66, .Lfunc_end102-field_mode_buffer.66
	.cfi_endproc
                                        # -- End function
	.globl	frame_picture.67        # -- Begin function frame_picture.67
	.p2align	4, 0x90
	.type	frame_picture.67,@function
frame_picture.67:                       # @frame_picture.67
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1260325616, -16(%rbp)  # imm = 0x4B1F0AF0
	movq	%rdi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	$0, 28(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	cmpl	$2, -12(%rbp)
	jne	.LBB103_2
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture3
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture3, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture3, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture3, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB103_6
.LBB103_2:                              # %if.else
	cmpl	$1, -12(%rbp)
	jne	.LBB103_4
# %bb.3:                                # %if.then9
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture2
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture2, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture2, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	callq	copy_params
	jmp	.LBB103_5
.LBB103_4:                              # %if.else35
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_frame_picture
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 8(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 12(%rcx)
	movq	img, %rax
	movl	72456(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_frame_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_frame_picture, %rax
	movl	$1, 6412(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	setne	%al
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movl	%eax, 72400(%rcx)
	movq	enc_frame_picture, %rcx
	movl	%eax, 6416(%rcx)
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
.LBB103_5:                              # %if.end
	jmp	.LBB103_6
.LBB103_6:                              # %if.end61
	movq	stats, %rax
	movl	$0, 1468(%rax)
	movq	stats, %rax
	addq	$1468, %rax             # imm = 0x5BC
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	$0, 71800(%rax)
	movq	-8(%rbp), %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	jne	.LBB103_8
# %bb.7:                                # %if.then66
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 812(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-8(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
.LBB103_8:                              # %if.end67
	cmpl	$1260325616, -16(%rbp)  # imm = 0x4B1F0AF0
	jne	.LBB103_10
.LBB103_9:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB103_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB103_9
.Lfunc_end103:
	.size	frame_picture.67, .Lfunc_end103-frame_picture.67
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.68     # -- Begin function encode_one_frame.68
	.p2align	4, 0x90
	.type	encode_one_frame.68,@function
encode_one_frame.68:                    # @encode_one_frame.68
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1236334770, -32(%rbp)  # imm = 0x49B0F8B2
	movl	$0, -40(%rbp)
	movl	$0, -28(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -52(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -68(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-112(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB104_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB104_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB104_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB104_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB104_9
.LBB104_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB104_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB104_8
.LBB104_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB104_8:                              # %if.end21
	jmp	.LBB104_9
.LBB104_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB104_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB104_38
.LBB104_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB104_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB104_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB104_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB104_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB104_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB104_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB104_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB104_20
.LBB104_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB104_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB104_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB104_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB104_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB104_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB104_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB104_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB104_29
.LBB104_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB104_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB104_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB104_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB104_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB104_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -48(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -52(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB104_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB104_35
.LBB104_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB104_35:                             # %if.end89
	jmp	.LBB104_37
.LBB104_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB104_37:                             # %if.end92
	jmp	.LBB104_38
.LBB104_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB104_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB104_41
.LBB104_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB104_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB104_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB104_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB104_45
# %bb.44:                               # %if.then109
	movl	-28(%rbp), %edi
	vmovss	-64(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-68(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB104_54
.LBB104_45:                             # %if.else112
	movl	-40(%rbp), %edi
	vmovss	-60(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-56(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-24(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB104_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB104_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB104_53
.LBB104_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB104_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB104_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB104_52
.LBB104_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB104_52:                             # %if.end130
	jmp	.LBB104_53
.LBB104_53:                             # %if.end131
	jmp	.LBB104_54
.LBB104_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB104_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB104_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB104_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB104_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB104_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB104_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB104_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB104_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB104_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB104_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB104_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB104_66:                             # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-128(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-120(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-104(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB104_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB104_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB104_70
.LBB104_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB104_70:                             # %if.end171
	jmp	.LBB104_81
.LBB104_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB104_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB104_80
.LBB104_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB104_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB104_79
.LBB104_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB104_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB104_78
.LBB104_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB104_78:                             # %if.end187
	jmp	.LBB104_79
.LBB104_79:                             # %if.end188
	jmp	.LBB104_80
.LBB104_80:                             # %if.end189
	jmp	.LBB104_81
.LBB104_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB104_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB104_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB104_85
.LBB104_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB104_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB104_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB104_88
.LBB104_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB104_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB104_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB104_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB104_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB104_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB104_110
.LBB104_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB104_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB104_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB104_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB104_98
.LBB104_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB104_98:                             # %if.end239
	jmp	.LBB104_99
.LBB104_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB104_104
	jmp	.LBB104_100
.LBB104_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB104_102
	jmp	.LBB104_101
.LBB104_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB104_103
	jmp	.LBB104_108
.LBB104_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB104_109
.LBB104_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB104_109
.LBB104_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB104_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB104_107
.LBB104_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB104_107:                            # %if.end261
	jmp	.LBB104_109
.LBB104_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB104_109:                            # %sw.epilog
	jmp	.LBB104_110
.LBB104_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB104_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB104_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB104_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB104_119
.LBB104_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB104_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB104_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB104_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB104_118:                            # %if.end292
	jmp	.LBB104_119
.LBB104_119:                            # %if.end293
	jmp	.LBB104_120
.LBB104_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB104_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB104_123
.LBB104_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB104_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$1236334770, -32(%rbp)  # imm = 0x49B0F8B2
	jne	.LBB104_125
.LBB104_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB104_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB104_124
.Lfunc_end104:
	.size	encode_one_frame.68, .Lfunc_end104-encode_one_frame.68
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.69
	.type	ReportFirstframe.69,@function
ReportFirstframe.69:                    # @ReportFirstframe.69
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1040514515, -8(%rbp)   # imm = 0x3E04FDD3
	movl	%edi, -16(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-16(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB105_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB105_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB105_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB105_5
.LBB105_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -4(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB105_5:                              # %if.end
	jmp	.LBB105_6
.LBB105_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$1040514515, -8(%rbp)   # imm = 0x3E04FDD3
	jne	.LBB105_8
.LBB105_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB105_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB105_7
.Lfunc_end105:
	.size	ReportFirstframe.69, .Lfunc_end105-ReportFirstframe.69
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.70
	.type	PaddAutoCropBorders.70,@function
PaddAutoCropBorders.70:                 # @PaddAutoCropBorders.70
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$659169098, -36(%rbp)   # imm = 0x274A1F4A
	movl	%edi, -32(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -12(%rbp)
	movl	$0, -4(%rbp)
.LBB106_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB106_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-32(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_3:                              # %for.cond1
                                        #   Parent Loop BB106_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB106_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB106_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB106_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_3
.LBB106_6:                              # %for.end
                                        #   in Loop: Header=BB106_1 Depth=1
	jmp	.LBB106_7
.LBB106_7:                              # %for.inc10
                                        #   in Loop: Header=BB106_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_1
.LBB106_8:                              # %for.end12
	movl	-20(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB106_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB106_9 Depth=1
	movl	$0, -8(%rbp)
.LBB106_11:                             # %for.cond16
                                        #   Parent Loop BB106_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB106_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB106_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB106_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_11
.LBB106_14:                             # %for.end30
                                        #   in Loop: Header=BB106_9 Depth=1
	jmp	.LBB106_15
.LBB106_15:                             # %for.inc31
                                        #   in Loop: Header=BB106_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_9
.LBB106_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB106_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB106_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB106_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB106_18 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB106_20:                             # %for.cond38
                                        #   Parent Loop BB106_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB106_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB106_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB106_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_20
.LBB106_23:                             # %for.end65
                                        #   in Loop: Header=BB106_18 Depth=1
	jmp	.LBB106_24
.LBB106_24:                             # %for.inc66
                                        #   in Loop: Header=BB106_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_18
.LBB106_25:                             # %for.end68
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB106_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB106_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB106_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB106_26 Depth=1
	movl	$0, -8(%rbp)
.LBB106_28:                             # %for.cond72
                                        #   Parent Loop BB106_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB106_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB106_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB106_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB106_28
.LBB106_31:                             # %for.end99
                                        #   in Loop: Header=BB106_26 Depth=1
	jmp	.LBB106_32
.LBB106_32:                             # %for.inc100
                                        #   in Loop: Header=BB106_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB106_26
.LBB106_33:                             # %for.end102
	jmp	.LBB106_34
.LBB106_34:                             # %if.end
	cmpl	$659169098, -36(%rbp)   # imm = 0x274A1F4A
	jne	.LBB106_36
.LBB106_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB106_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB106_35
.Lfunc_end106:
	.size	PaddAutoCropBorders.70, .Lfunc_end106-PaddAutoCropBorders.70
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.71
	.type	ReportFirstframe.71,@function
ReportFirstframe.71:                    # @ReportFirstframe.71
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$481436772, -12(%rbp)   # imm = 0x1CB22464
	movl	%edi, -8(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB107_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB107_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB107_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB107_5
.LBB107_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB107_5:                              # %if.end
	jmp	.LBB107_6
.LBB107_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$481436772, -12(%rbp)   # imm = 0x1CB22464
	jne	.LBB107_8
.LBB107_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB107_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB107_7
.Lfunc_end107:
	.size	ReportFirstframe.71, .Lfunc_end107-ReportFirstframe.71
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.72
.LCPI108_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI108_1:
	.quad	4611686018427387904     # double 2
.LCPI108_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.72,@function
picture_structure_decision.72:          # @picture_structure_decision.72
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI108_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI108_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$449716428, -44(%rbp)   # imm = 0x1ACE20CC
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI108_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-36(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -48(%rbp)
	vmovss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-40(%rbp), %edi
	movl	-48(%rbp), %esi
	vmovsd	-56(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$449716428, -44(%rbp)   # imm = 0x1ACE20CC
	jne	.LBB108_2
.LBB108_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB108_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB108_1
.Lfunc_end108:
	.size	picture_structure_decision.72, .Lfunc_end108-picture_structure_decision.72
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.73
	.type	writeout_picture.73,@function
writeout_picture.73:                    # @writeout_picture.73
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2137702859, -28(%rbp)  # imm = 0x7F6AC1CB
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB109_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB109_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB109_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB109_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB109_3:                              # %for.cond1
                                        #   Parent Loop BB109_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB109_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB109_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB109_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB109_3
.LBB109_6:                              # %for.end
                                        #   in Loop: Header=BB109_1 Depth=1
	jmp	.LBB109_7
.LBB109_7:                              # %for.inc10
                                        #   in Loop: Header=BB109_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB109_1
.LBB109_8:                              # %for.end12
	cmpl	$2137702859, -28(%rbp)  # imm = 0x7F6AC1CB
	jne	.LBB109_10
.LBB109_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB109_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB109_9
.Lfunc_end109:
	.size	writeout_picture.73, .Lfunc_end109-writeout_picture.73
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.74
	.type	PaddAutoCropBorders.74,@function
PaddAutoCropBorders.74:                 # @PaddAutoCropBorders.74
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$934054220, -28(%rbp)   # imm = 0x37AC894C
	movl	%edi, -36(%rbp)
	movl	%esi, -20(%rbp)
	movl	%edx, -16(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -24(%rbp)
	movl	%r9d, -12(%rbp)
	movl	$0, -8(%rbp)
.LBB110_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB110_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_3:                              # %for.cond1
                                        #   Parent Loop BB110_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB110_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB110_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB110_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_3
.LBB110_6:                              # %for.end
                                        #   in Loop: Header=BB110_1 Depth=1
	jmp	.LBB110_7
.LBB110_7:                              # %for.inc10
                                        #   in Loop: Header=BB110_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_1
.LBB110_8:                              # %for.end12
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB110_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB110_9 Depth=1
	movl	$0, -4(%rbp)
.LBB110_11:                             # %for.cond16
                                        #   Parent Loop BB110_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB110_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB110_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB110_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_11
.LBB110_14:                             # %for.end30
                                        #   in Loop: Header=BB110_9 Depth=1
	jmp	.LBB110_15
.LBB110_15:                             # %for.inc31
                                        #   in Loop: Header=BB110_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_9
.LBB110_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB110_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB110_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB110_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB110_18 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB110_20:                             # %for.cond38
                                        #   Parent Loop BB110_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB110_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB110_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB110_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_20
.LBB110_23:                             # %for.end65
                                        #   in Loop: Header=BB110_18 Depth=1
	jmp	.LBB110_24
.LBB110_24:                             # %for.inc66
                                        #   in Loop: Header=BB110_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_18
.LBB110_25:                             # %for.end68
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB110_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB110_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB110_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB110_26 Depth=1
	movl	$0, -4(%rbp)
.LBB110_28:                             # %for.cond72
                                        #   Parent Loop BB110_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB110_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB110_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB110_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB110_28
.LBB110_31:                             # %for.end99
                                        #   in Loop: Header=BB110_26 Depth=1
	jmp	.LBB110_32
.LBB110_32:                             # %for.inc100
                                        #   in Loop: Header=BB110_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB110_26
.LBB110_33:                             # %for.end102
	jmp	.LBB110_34
.LBB110_34:                             # %if.end
	cmpl	$934054220, -28(%rbp)   # imm = 0x37AC894C
	jne	.LBB110_36
.LBB110_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB110_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB110_35
.Lfunc_end110:
	.size	PaddAutoCropBorders.74, .Lfunc_end110-PaddAutoCropBorders.74
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.75        # -- Begin function MbAffPostProc.75
	.p2align	4, 0x90
	.type	MbAffPostProc.75,@function
MbAffPostProc.75:                       # @MbAffPostProc.75
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$1736136476, -44(%rbp)  # imm = 0x677B571C
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB111_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB111_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_5 Depth 2
                                        #       Child Loop BB111_7 Depth 3
                                        #     Child Loop BB111_13 Depth 2
                                        #       Child Loop BB111_15 Depth 3
                                        #     Child Loop BB111_21 Depth 2
                                        #       Child Loop BB111_23 Depth 3
                                        #         Child Loop BB111_25 Depth 4
                                        #       Child Loop BB111_31 Depth 3
                                        #         Child Loop BB111_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB111_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB111_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB111_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB111_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB111_5:                              # %for.cond5
                                        #   Parent Loop BB111_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB111_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB111_5 Depth=2
	movl	$0, -4(%rbp)
.LBB111_7:                              # %for.cond8
                                        #   Parent Loop BB111_2 Depth=1
                                        #     Parent Loop BB111_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB111_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB111_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB111_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_7
.LBB111_10:                             # %for.end
                                        #   in Loop: Header=BB111_5 Depth=2
	jmp	.LBB111_11
.LBB111_11:                             # %for.inc20
                                        #   in Loop: Header=BB111_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_5
.LBB111_12:                             # %for.end22
                                        #   in Loop: Header=BB111_2 Depth=1
	movl	$0, -8(%rbp)
.LBB111_13:                             # %for.cond23
                                        #   Parent Loop BB111_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB111_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB111_13 Depth=2
	movl	$0, -4(%rbp)
.LBB111_15:                             # %for.cond26
                                        #   Parent Loop BB111_2 Depth=1
                                        #     Parent Loop BB111_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB111_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB111_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB111_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_15
.LBB111_18:                             # %for.end54
                                        #   in Loop: Header=BB111_13 Depth=2
	jmp	.LBB111_19
.LBB111_19:                             # %for.inc55
                                        #   in Loop: Header=BB111_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_13
.LBB111_20:                             # %for.end57
                                        #   in Loop: Header=BB111_2 Depth=1
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB111_21:                             # %for.cond61
                                        #   Parent Loop BB111_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_23 Depth 3
                                        #         Child Loop BB111_25 Depth 4
                                        #       Child Loop BB111_31 Depth 3
                                        #         Child Loop BB111_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB111_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB111_21 Depth=2
	movl	$0, -8(%rbp)
.LBB111_23:                             # %for.cond64
                                        #   Parent Loop BB111_2 Depth=1
                                        #     Parent Loop BB111_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB111_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB111_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB111_23 Depth=3
	movl	$0, -4(%rbp)
.LBB111_25:                             # %for.cond69
                                        #   Parent Loop BB111_2 Depth=1
                                        #     Parent Loop BB111_21 Depth=2
                                        #       Parent Loop BB111_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB111_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB111_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB111_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_25
.LBB111_28:                             # %for.end87
                                        #   in Loop: Header=BB111_23 Depth=3
	jmp	.LBB111_29
.LBB111_29:                             # %for.inc88
                                        #   in Loop: Header=BB111_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_23
.LBB111_30:                             # %for.end90
                                        #   in Loop: Header=BB111_21 Depth=2
	movl	$0, -8(%rbp)
.LBB111_31:                             # %for.cond91
                                        #   Parent Loop BB111_2 Depth=1
                                        #     Parent Loop BB111_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB111_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB111_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB111_31 Depth=3
	movl	$0, -4(%rbp)
.LBB111_33:                             # %for.cond95
                                        #   Parent Loop BB111_2 Depth=1
                                        #     Parent Loop BB111_21 Depth=2
                                        #       Parent Loop BB111_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB111_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB111_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB111_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_33
.LBB111_36:                             # %for.end130
                                        #   in Loop: Header=BB111_31 Depth=3
	jmp	.LBB111_37
.LBB111_37:                             # %for.inc131
                                        #   in Loop: Header=BB111_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_31
.LBB111_38:                             # %for.end133
                                        #   in Loop: Header=BB111_21 Depth=2
	jmp	.LBB111_39
.LBB111_39:                             # %for.inc134
                                        #   in Loop: Header=BB111_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB111_21
.LBB111_40:                             # %for.end136
                                        #   in Loop: Header=BB111_2 Depth=1
	jmp	.LBB111_41
.LBB111_41:                             # %if.end
                                        #   in Loop: Header=BB111_2 Depth=1
	jmp	.LBB111_42
.LBB111_42:                             # %for.inc137
                                        #   in Loop: Header=BB111_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_2
.LBB111_43:                             # %for.end139
	jmp	.LBB111_67
.LBB111_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB111_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB111_48 Depth 2
                                        #       Child Loop BB111_50 Depth 3
                                        #     Child Loop BB111_56 Depth 2
                                        #       Child Loop BB111_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB111_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB111_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB111_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB111_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB111_48:                             # %for.cond149
                                        #   Parent Loop BB111_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB111_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB111_48 Depth=2
	movl	$0, -4(%rbp)
.LBB111_50:                             # %for.cond152
                                        #   Parent Loop BB111_45 Depth=1
                                        #     Parent Loop BB111_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB111_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB111_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB111_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_50
.LBB111_53:                             # %for.end167
                                        #   in Loop: Header=BB111_48 Depth=2
	jmp	.LBB111_54
.LBB111_54:                             # %for.inc168
                                        #   in Loop: Header=BB111_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_48
.LBB111_55:                             # %for.end170
                                        #   in Loop: Header=BB111_45 Depth=1
	movl	$0, -8(%rbp)
.LBB111_56:                             # %for.cond171
                                        #   Parent Loop BB111_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB111_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB111_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB111_56 Depth=2
	movl	$0, -4(%rbp)
.LBB111_58:                             # %for.cond174
                                        #   Parent Loop BB111_45 Depth=1
                                        #     Parent Loop BB111_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB111_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB111_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB111_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB111_58
.LBB111_61:                             # %for.end203
                                        #   in Loop: Header=BB111_56 Depth=2
	jmp	.LBB111_62
.LBB111_62:                             # %for.inc204
                                        #   in Loop: Header=BB111_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB111_56
.LBB111_63:                             # %for.end206
                                        #   in Loop: Header=BB111_45 Depth=1
	jmp	.LBB111_64
.LBB111_64:                             # %if.end207
                                        #   in Loop: Header=BB111_45 Depth=1
	jmp	.LBB111_65
.LBB111_65:                             # %for.inc208
                                        #   in Loop: Header=BB111_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB111_45
.LBB111_66:                             # %for.end210
	jmp	.LBB111_67
.LBB111_67:                             # %if.end211
	cmpl	$1736136476, -44(%rbp)  # imm = 0x677B571C
	jne	.LBB111_69
.LBB111_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB111_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB111_68
.Lfunc_end111:
	.size	MbAffPostProc.75, .Lfunc_end111-MbAffPostProc.75
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.76
	.type	frame_mode_buffer.76,@function
frame_mode_buffer.76:                   # @frame_mode_buffer.76
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$766016771, -16(%rbp)   # imm = 0x2DA87D03
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB112_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB112_3
.LBB112_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB112_3:                              # %if.end
	cmpl	$766016771, -16(%rbp)   # imm = 0x2DA87D03
	jne	.LBB112_5
.LBB112_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB112_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB112_4
.Lfunc_end112:
	.size	frame_mode_buffer.76, .Lfunc_end112-frame_mode_buffer.76
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.77   # -- Begin function UnifiedOneForthPix.77
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.77,@function
UnifiedOneForthPix.77:                  # @UnifiedOneForthPix.77
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$458931787, -108(%rbp)  # imm = 0x1B5ABE4B
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB113_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB113_3
.LBB113_2:                              # %if.then
	jmp	.LBB113_266
.LBB113_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB113_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB113_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB113_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB113_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB113_11
.LBB113_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB113_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB113_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB113_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB113_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB113_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB113_14:                             # %for.cond49
                                        #   Parent Loop BB113_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB113_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB113_18
.LBB113_17:                             # %cond.false
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-48(%rbp), %eax
.LBB113_18:                             # %cond.end
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_24
.LBB113_20:                             # %cond.false63
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB113_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB113_23
.LBB113_22:                             # %cond.false71
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-48(%rbp), %eax
.LBB113_23:                             # %cond.end72
                                        #   in Loop: Header=BB113_14 Depth=2
.LBB113_24:                             # %cond.end74
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB113_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB113_27
.LBB113_26:                             # %cond.false83
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %edx
.LBB113_27:                             # %cond.end84
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB113_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB113_33
.LBB113_29:                             # %cond.false89
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB113_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB113_32
.LBB113_31:                             # %cond.false97
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %edx
.LBB113_32:                             # %cond.end98
                                        #   in Loop: Header=BB113_14 Depth=2
.LBB113_33:                             # %cond.end100
                                        #   in Loop: Header=BB113_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB113_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB113_36
.LBB113_35:                             # %cond.false115
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB113_36:                             # %cond.end117
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB113_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB113_42
.LBB113_38:                             # %cond.false122
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB113_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB113_41
.LBB113_40:                             # %cond.false131
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB113_41:                             # %cond.end133
                                        #   in Loop: Header=BB113_14 Depth=2
.LBB113_42:                             # %cond.end135
                                        #   in Loop: Header=BB113_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB113_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB113_45
.LBB113_44:                             # %cond.false152
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB113_45:                             # %cond.end154
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB113_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB113_51
.LBB113_47:                             # %cond.false159
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB113_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB113_50
.LBB113_49:                             # %cond.false168
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB113_50:                             # %cond.end170
                                        #   in Loop: Header=BB113_14 Depth=2
.LBB113_51:                             # %cond.end172
                                        #   in Loop: Header=BB113_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB113_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB113_54
.LBB113_53:                             # %cond.false187
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB113_54:                             # %cond.end189
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB113_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB113_60
.LBB113_56:                             # %cond.false194
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB113_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB113_59
.LBB113_58:                             # %cond.false203
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB113_59:                             # %cond.end205
                                        #   in Loop: Header=BB113_14 Depth=2
.LBB113_60:                             # %cond.end207
                                        #   in Loop: Header=BB113_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB113_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB113_63
.LBB113_62:                             # %cond.false225
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB113_63:                             # %cond.end227
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB113_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB113_69
.LBB113_65:                             # %cond.false232
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB113_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB113_68
.LBB113_67:                             # %cond.false241
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB113_68:                             # %cond.end243
                                        #   in Loop: Header=BB113_14 Depth=2
.LBB113_69:                             # %cond.end245
                                        #   in Loop: Header=BB113_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB113_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB113_72
.LBB113_71:                             # %cond.false260
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB113_72:                             # %cond.end262
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB113_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB113_78
.LBB113_74:                             # %cond.false267
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB113_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB113_77
.LBB113_76:                             # %cond.false276
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB113_77:                             # %cond.end278
                                        #   in Loop: Header=BB113_14 Depth=2
.LBB113_78:                             # %cond.end280
                                        #   in Loop: Header=BB113_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB113_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB113_81
.LBB113_80:                             # %cond.false297
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB113_81:                             # %cond.end298
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB113_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB113_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB113_87
.LBB113_83:                             # %cond.false303
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB113_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB113_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB113_86
.LBB113_85:                             # %cond.false311
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB113_86:                             # %cond.end312
                                        #   in Loop: Header=BB113_14 Depth=2
.LBB113_87:                             # %cond.end314
                                        #   in Loop: Header=BB113_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB113_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB113_14
.LBB113_89:                             # %for.end
                                        #   in Loop: Header=BB113_12 Depth=1
	jmp	.LBB113_90
.LBB113_90:                             # %for.inc336
                                        #   in Loop: Header=BB113_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB113_12
.LBB113_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB113_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB113_92 Depth=1
	movl	$0, -48(%rbp)
.LBB113_94:                             # %for.cond346
                                        #   Parent Loop BB113_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB113_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB113_98
.LBB113_97:                             # %cond.false364
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB113_98:                             # %cond.end366
                                        #   in Loop: Header=BB113_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB113_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB113_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB113_101
.LBB113_100:                            # %cond.false378
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB113_101:                            # %cond.end380
                                        #   in Loop: Header=BB113_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB113_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB113_104
.LBB113_103:                            # %cond.false390
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB113_104:                            # %cond.end392
                                        #   in Loop: Header=BB113_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB113_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB113_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB113_107
.LBB113_106:                            # %cond.false405
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB113_107:                            # %cond.end407
                                        #   in Loop: Header=BB113_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB113_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB113_110
.LBB113_109:                            # %cond.false417
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB113_110:                            # %cond.end419
                                        #   in Loop: Header=BB113_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB113_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB113_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_113
.LBB113_112:                            # %cond.false442
                                        #   in Loop: Header=BB113_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB113_113:                            # %cond.end449
                                        #   in Loop: Header=BB113_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB113_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_119
.LBB113_115:                            # %cond.false454
                                        #   in Loop: Header=BB113_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB113_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB113_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_118
.LBB113_117:                            # %cond.false466
                                        #   in Loop: Header=BB113_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB113_118:                            # %cond.end473
                                        #   in Loop: Header=BB113_94 Depth=2
.LBB113_119:                            # %cond.end475
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB113_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB113_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_122
.LBB113_121:                            # %cond.false490
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB113_122:                            # %cond.end493
                                        #   in Loop: Header=BB113_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB113_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB113_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_128
.LBB113_124:                            # %cond.false498
                                        #   in Loop: Header=BB113_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB113_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB113_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_127
.LBB113_126:                            # %cond.false506
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB113_127:                            # %cond.end509
                                        #   in Loop: Header=BB113_94 Depth=2
.LBB113_128:                            # %cond.end511
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB113_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB113_94
.LBB113_130:                            # %for.end516
                                        #   in Loop: Header=BB113_92 Depth=1
	jmp	.LBB113_131
.LBB113_131:                            # %for.inc517
                                        #   in Loop: Header=BB113_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB113_92
.LBB113_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB113_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB113_133 Depth=1
	movl	$0, -44(%rbp)
.LBB113_135:                            # %for.cond533
                                        #   Parent Loop BB113_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB113_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB113_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_139
.LBB113_138:                            # %cond.false553
                                        #   in Loop: Header=BB113_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB113_139:                            # %cond.end555
                                        #   in Loop: Header=BB113_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB113_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB113_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_145
.LBB113_141:                            # %cond.false567
                                        #   in Loop: Header=BB113_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB113_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_144
.LBB113_143:                            # %cond.false579
                                        #   in Loop: Header=BB113_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB113_144:                            # %cond.end581
                                        #   in Loop: Header=BB113_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB113_145:                            # %cond.end589
                                        #   in Loop: Header=BB113_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB113_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_157
.LBB113_147:                            # %cond.false594
                                        #   in Loop: Header=BB113_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB113_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_150
.LBB113_149:                            # %cond.false607
                                        #   in Loop: Header=BB113_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB113_150:                            # %cond.end609
                                        #   in Loop: Header=BB113_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB113_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB113_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_156
.LBB113_152:                            # %cond.false621
                                        #   in Loop: Header=BB113_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB113_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_155
.LBB113_154:                            # %cond.false633
                                        #   in Loop: Header=BB113_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB113_155:                            # %cond.end635
                                        #   in Loop: Header=BB113_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB113_156:                            # %cond.end643
                                        #   in Loop: Header=BB113_135 Depth=2
.LBB113_157:                            # %cond.end645
                                        #   in Loop: Header=BB113_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB113_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB113_135
.LBB113_159:                            # %for.end650
                                        #   in Loop: Header=BB113_133 Depth=1
	jmp	.LBB113_160
.LBB113_160:                            # %for.inc651
                                        #   in Loop: Header=BB113_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB113_133
.LBB113_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB113_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB113_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB113_162 Depth=1
	movl	$0, -48(%rbp)
.LBB113_164:                            # %for.cond659
                                        #   Parent Loop BB113_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB113_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_169
.LBB113_168:                            # %cond.false681
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_169:                            # %cond.end683
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB113_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_175
.LBB113_171:                            # %cond.false696
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_174
.LBB113_173:                            # %cond.false707
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_174:                            # %cond.end709
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB113_175:                            # %cond.end718
                                        #   in Loop: Header=BB113_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB113_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_187
.LBB113_177:                            # %cond.false723
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_180
.LBB113_179:                            # %cond.false735
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_180:                            # %cond.end737
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB113_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_186
.LBB113_182:                            # %cond.false750
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_185
.LBB113_184:                            # %cond.false761
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_185:                            # %cond.end763
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB113_186:                            # %cond.end772
                                        #   in Loop: Header=BB113_164 Depth=2
.LBB113_187:                            # %cond.end774
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB113_261
.LBB113_188:                            # %if.else
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB113_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB113_192
.LBB113_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB113_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB113_226
.LBB113_192:                            # %if.then791
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_195
.LBB113_194:                            # %cond.false803
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB113_195:                            # %cond.end805
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_198
.LBB113_197:                            # %cond.false816
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_198:                            # %cond.end818
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB113_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_207
.LBB113_200:                            # %cond.false832
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_203
.LBB113_202:                            # %cond.false840
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB113_203:                            # %cond.end842
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_206
.LBB113_205:                            # %cond.false853
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_206:                            # %cond.end855
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB113_207:                            # %cond.end865
                                        #   in Loop: Header=BB113_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB113_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_225
.LBB113_209:                            # %cond.false870
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_212
.LBB113_211:                            # %cond.false879
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB113_212:                            # %cond.end881
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_215
.LBB113_214:                            # %cond.false892
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_215:                            # %cond.end894
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB113_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_224
.LBB113_217:                            # %cond.false908
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_220
.LBB113_219:                            # %cond.false916
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB113_220:                            # %cond.end918
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_223
.LBB113_222:                            # %cond.false929
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_223:                            # %cond.end931
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB113_224:                            # %cond.end941
                                        #   in Loop: Header=BB113_164 Depth=2
.LBB113_225:                            # %cond.end943
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB113_260
.LBB113_226:                            # %if.else946
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_229
.LBB113_228:                            # %cond.false962
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_229:                            # %cond.end964
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_232
.LBB113_231:                            # %cond.false973
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB113_232:                            # %cond.end975
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB113_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_241
.LBB113_234:                            # %cond.false987
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_237
.LBB113_236:                            # %cond.false999
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_237:                            # %cond.end1001
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_240
.LBB113_239:                            # %cond.false1010
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB113_240:                            # %cond.end1012
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB113_241:                            # %cond.end1020
                                        #   in Loop: Header=BB113_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB113_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB113_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB113_259
.LBB113_243:                            # %cond.false1025
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_246
.LBB113_245:                            # %cond.false1038
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_246:                            # %cond.end1040
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_249
.LBB113_248:                            # %cond.false1049
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB113_249:                            # %cond.end1051
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB113_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB113_258
.LBB113_251:                            # %cond.false1063
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB113_254
.LBB113_253:                            # %cond.false1075
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB113_254:                            # %cond.end1077
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB113_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB113_257
.LBB113_256:                            # %cond.false1086
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB113_257:                            # %cond.end1088
                                        #   in Loop: Header=BB113_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB113_258:                            # %cond.end1096
                                        #   in Loop: Header=BB113_164 Depth=2
.LBB113_259:                            # %cond.end1098
                                        #   in Loop: Header=BB113_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB113_260:                            # %if.end1101
                                        #   in Loop: Header=BB113_164 Depth=2
	jmp	.LBB113_261
.LBB113_261:                            # %if.end1102
                                        #   in Loop: Header=BB113_164 Depth=2
	jmp	.LBB113_262
.LBB113_262:                            # %for.inc1103
                                        #   in Loop: Header=BB113_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB113_164
.LBB113_263:                            # %for.end1105
                                        #   in Loop: Header=BB113_162 Depth=1
	jmp	.LBB113_264
.LBB113_264:                            # %for.inc1106
                                        #   in Loop: Header=BB113_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB113_162
.LBB113_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB113_266:                            # %return
	cmpl	$458931787, -108(%rbp)  # imm = 0x1B5ABE4B
	jne	.LBB113_268
.LBB113_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB113_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB113_267
.Lfunc_end113:
	.size	UnifiedOneForthPix.77, .Lfunc_end113-UnifiedOneForthPix.77
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.78        # -- Begin function MbAffPostProc.78
	.p2align	4, 0x90
	.type	MbAffPostProc.78,@function
MbAffPostProc.78:                       # @MbAffPostProc.78
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$923881391, -44(%rbp)   # imm = 0x37114FAF
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB114_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB114_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_5 Depth 2
                                        #       Child Loop BB114_7 Depth 3
                                        #     Child Loop BB114_13 Depth 2
                                        #       Child Loop BB114_15 Depth 3
                                        #     Child Loop BB114_21 Depth 2
                                        #       Child Loop BB114_23 Depth 3
                                        #         Child Loop BB114_25 Depth 4
                                        #       Child Loop BB114_31 Depth 3
                                        #         Child Loop BB114_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB114_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB114_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB114_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB114_5:                              # %for.cond5
                                        #   Parent Loop BB114_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB114_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB114_5 Depth=2
	movl	$0, -4(%rbp)
.LBB114_7:                              # %for.cond8
                                        #   Parent Loop BB114_2 Depth=1
                                        #     Parent Loop BB114_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB114_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB114_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB114_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_7
.LBB114_10:                             # %for.end
                                        #   in Loop: Header=BB114_5 Depth=2
	jmp	.LBB114_11
.LBB114_11:                             # %for.inc20
                                        #   in Loop: Header=BB114_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_5
.LBB114_12:                             # %for.end22
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	$0, -8(%rbp)
.LBB114_13:                             # %for.cond23
                                        #   Parent Loop BB114_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB114_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB114_13 Depth=2
	movl	$0, -4(%rbp)
.LBB114_15:                             # %for.cond26
                                        #   Parent Loop BB114_2 Depth=1
                                        #     Parent Loop BB114_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB114_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB114_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB114_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_15
.LBB114_18:                             # %for.end54
                                        #   in Loop: Header=BB114_13 Depth=2
	jmp	.LBB114_19
.LBB114_19:                             # %for.inc55
                                        #   in Loop: Header=BB114_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_13
.LBB114_20:                             # %for.end57
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB114_21:                             # %for.cond61
                                        #   Parent Loop BB114_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_23 Depth 3
                                        #         Child Loop BB114_25 Depth 4
                                        #       Child Loop BB114_31 Depth 3
                                        #         Child Loop BB114_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB114_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB114_21 Depth=2
	movl	$0, -8(%rbp)
.LBB114_23:                             # %for.cond64
                                        #   Parent Loop BB114_2 Depth=1
                                        #     Parent Loop BB114_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB114_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB114_23 Depth=3
	movl	$0, -4(%rbp)
.LBB114_25:                             # %for.cond69
                                        #   Parent Loop BB114_2 Depth=1
                                        #     Parent Loop BB114_21 Depth=2
                                        #       Parent Loop BB114_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB114_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB114_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB114_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_25
.LBB114_28:                             # %for.end87
                                        #   in Loop: Header=BB114_23 Depth=3
	jmp	.LBB114_29
.LBB114_29:                             # %for.inc88
                                        #   in Loop: Header=BB114_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_23
.LBB114_30:                             # %for.end90
                                        #   in Loop: Header=BB114_21 Depth=2
	movl	$0, -8(%rbp)
.LBB114_31:                             # %for.cond91
                                        #   Parent Loop BB114_2 Depth=1
                                        #     Parent Loop BB114_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB114_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB114_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB114_31 Depth=3
	movl	$0, -4(%rbp)
.LBB114_33:                             # %for.cond95
                                        #   Parent Loop BB114_2 Depth=1
                                        #     Parent Loop BB114_21 Depth=2
                                        #       Parent Loop BB114_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB114_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB114_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB114_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_33
.LBB114_36:                             # %for.end130
                                        #   in Loop: Header=BB114_31 Depth=3
	jmp	.LBB114_37
.LBB114_37:                             # %for.inc131
                                        #   in Loop: Header=BB114_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_31
.LBB114_38:                             # %for.end133
                                        #   in Loop: Header=BB114_21 Depth=2
	jmp	.LBB114_39
.LBB114_39:                             # %for.inc134
                                        #   in Loop: Header=BB114_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB114_21
.LBB114_40:                             # %for.end136
                                        #   in Loop: Header=BB114_2 Depth=1
	jmp	.LBB114_41
.LBB114_41:                             # %if.end
                                        #   in Loop: Header=BB114_2 Depth=1
	jmp	.LBB114_42
.LBB114_42:                             # %for.inc137
                                        #   in Loop: Header=BB114_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB114_2
.LBB114_43:                             # %for.end139
	jmp	.LBB114_67
.LBB114_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB114_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB114_48 Depth 2
                                        #       Child Loop BB114_50 Depth 3
                                        #     Child Loop BB114_56 Depth 2
                                        #       Child Loop BB114_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB114_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB114_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB114_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB114_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB114_48:                             # %for.cond149
                                        #   Parent Loop BB114_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB114_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB114_48 Depth=2
	movl	$0, -4(%rbp)
.LBB114_50:                             # %for.cond152
                                        #   Parent Loop BB114_45 Depth=1
                                        #     Parent Loop BB114_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB114_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB114_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB114_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_50
.LBB114_53:                             # %for.end167
                                        #   in Loop: Header=BB114_48 Depth=2
	jmp	.LBB114_54
.LBB114_54:                             # %for.inc168
                                        #   in Loop: Header=BB114_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_48
.LBB114_55:                             # %for.end170
                                        #   in Loop: Header=BB114_45 Depth=1
	movl	$0, -8(%rbp)
.LBB114_56:                             # %for.cond171
                                        #   Parent Loop BB114_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB114_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB114_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB114_56 Depth=2
	movl	$0, -4(%rbp)
.LBB114_58:                             # %for.cond174
                                        #   Parent Loop BB114_45 Depth=1
                                        #     Parent Loop BB114_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB114_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB114_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB114_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB114_58
.LBB114_61:                             # %for.end203
                                        #   in Loop: Header=BB114_56 Depth=2
	jmp	.LBB114_62
.LBB114_62:                             # %for.inc204
                                        #   in Loop: Header=BB114_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB114_56
.LBB114_63:                             # %for.end206
                                        #   in Loop: Header=BB114_45 Depth=1
	jmp	.LBB114_64
.LBB114_64:                             # %if.end207
                                        #   in Loop: Header=BB114_45 Depth=1
	jmp	.LBB114_65
.LBB114_65:                             # %for.inc208
                                        #   in Loop: Header=BB114_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB114_45
.LBB114_66:                             # %for.end210
	jmp	.LBB114_67
.LBB114_67:                             # %if.end211
	cmpl	$923881391, -44(%rbp)   # imm = 0x37114FAF
	jne	.LBB114_69
.LBB114_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB114_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB114_68
.Lfunc_end114:
	.size	MbAffPostProc.78, .Lfunc_end114-MbAffPostProc.78
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.79      # -- Begin function copy_rdopt_data.79
	.p2align	4, 0x90
	.type	copy_rdopt_data.79,@function
copy_rdopt_data.79:                     # @copy_rdopt_data.79
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1071382609, -48(%rbp)  # imm = 0x3FDC0051
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB115_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB115_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB115_4
.LBB115_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB115_4
.LBB115_4:                              # %cond.end
	movl	%ecx, -44(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB115_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_7 Depth 2
                                        #       Child Loop BB115_9 Depth 3
                                        #         Child Loop BB115_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB115_5 Depth=1
	movl	$0, -8(%rbp)
.LBB115_7:                              # %for.cond17
                                        #   Parent Loop BB115_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_9 Depth 3
                                        #         Child Loop BB115_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB115_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB115_7 Depth=2
	movl	$0, -12(%rbp)
.LBB115_9:                              # %for.cond21
                                        #   Parent Loop BB115_5 Depth=1
                                        #     Parent Loop BB115_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB115_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB115_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB115_9 Depth=3
	movl	$0, -16(%rbp)
.LBB115_11:                             # %for.cond25
                                        #   Parent Loop BB115_5 Depth=1
                                        #     Parent Loop BB115_7 Depth=2
                                        #       Parent Loop BB115_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB115_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB115_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB115_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_11
.LBB115_14:                             # %for.end
                                        #   in Loop: Header=BB115_9 Depth=3
	jmp	.LBB115_15
.LBB115_15:                             # %for.inc46
                                        #   in Loop: Header=BB115_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_9
.LBB115_16:                             # %for.end48
                                        #   in Loop: Header=BB115_7 Depth=2
	jmp	.LBB115_17
.LBB115_17:                             # %for.inc49
                                        #   in Loop: Header=BB115_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_7
.LBB115_18:                             # %for.end51
                                        #   in Loop: Header=BB115_5 Depth=1
	jmp	.LBB115_19
.LBB115_19:                             # %for.inc52
                                        #   in Loop: Header=BB115_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_5
.LBB115_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB115_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_23 Depth 2
                                        #       Child Loop BB115_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB115_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB115_21 Depth=1
	movl	$0, -12(%rbp)
.LBB115_23:                             # %for.cond59
                                        #   Parent Loop BB115_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB115_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB115_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB115_23 Depth=2
	movl	$0, -16(%rbp)
.LBB115_25:                             # %for.cond63
                                        #   Parent Loop BB115_21 Depth=1
                                        #     Parent Loop BB115_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB115_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB115_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB115_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB115_25
.LBB115_28:                             # %for.end82
                                        #   in Loop: Header=BB115_23 Depth=2
	jmp	.LBB115_29
.LBB115_29:                             # %for.inc83
                                        #   in Loop: Header=BB115_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_23
.LBB115_30:                             # %for.end85
                                        #   in Loop: Header=BB115_21 Depth=1
	jmp	.LBB115_31
.LBB115_31:                             # %for.inc86
                                        #   in Loop: Header=BB115_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_21
.LBB115_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB115_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB115_33 Depth=1
	movl	$0, -4(%rbp)
.LBB115_35:                             # %for.cond93
                                        #   Parent Loop BB115_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB115_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB115_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB115_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB115_38:                             # %if.end
                                        #   in Loop: Header=BB115_35 Depth=2
	jmp	.LBB115_39
.LBB115_39:                             # %for.inc176
                                        #   in Loop: Header=BB115_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_35
.LBB115_40:                             # %for.end178
                                        #   in Loop: Header=BB115_33 Depth=1
	jmp	.LBB115_41
.LBB115_41:                             # %for.inc179
                                        #   in Loop: Header=BB115_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_33
.LBB115_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB115_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB115_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB115_43 Depth=1
	movl	$0, -4(%rbp)
.LBB115_45:                             # %for.cond186
                                        #   Parent Loop BB115_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB115_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB115_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB115_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_45
.LBB115_48:                             # %for.end203
                                        #   in Loop: Header=BB115_43 Depth=1
	jmp	.LBB115_49
.LBB115_49:                             # %for.inc204
                                        #   in Loop: Header=BB115_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_43
.LBB115_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB115_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB115_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB115_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB115_52 Depth=1
	movl	$0, -4(%rbp)
.LBB115_54:                             # %for.cond214
                                        #   Parent Loop BB115_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB115_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB115_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB115_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_54
.LBB115_57:                             # %for.end247
                                        #   in Loop: Header=BB115_52 Depth=1
	jmp	.LBB115_58
.LBB115_58:                             # %for.inc248
                                        #   in Loop: Header=BB115_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_52
.LBB115_59:                             # %for.end250
	jmp	.LBB115_60
.LBB115_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB115_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB115_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB115_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB115_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_61
.LBB115_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB115_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB115_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB115_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB115_68:                             # %for.cond283
                                        #   Parent Loop BB115_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB115_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB115_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_68
.LBB115_71:                             # %for.end306
                                        #   in Loop: Header=BB115_66 Depth=1
	jmp	.LBB115_72
.LBB115_72:                             # %for.inc307
                                        #   in Loop: Header=BB115_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_66
.LBB115_73:                             # %for.end309
	jmp	.LBB115_98
.LBB115_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB115_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB115_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB115_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB115_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB115_79:                             # %for.cond324
                                        #   Parent Loop BB115_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB115_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB115_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_79
.LBB115_82:                             # %for.end341
                                        #   in Loop: Header=BB115_77 Depth=1
	jmp	.LBB115_83
.LBB115_83:                             # %for.inc342
                                        #   in Loop: Header=BB115_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_77
.LBB115_84:                             # %for.end344
	jmp	.LBB115_97
.LBB115_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB115_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB115_96
.LBB115_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB115_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB115_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB115_90:                             # %for.cond359
                                        #   Parent Loop BB115_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB115_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB115_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB115_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB115_90
.LBB115_93:                             # %for.end384
                                        #   in Loop: Header=BB115_88 Depth=1
	jmp	.LBB115_94
.LBB115_94:                             # %for.inc385
                                        #   in Loop: Header=BB115_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_88
.LBB115_95:                             # %for.end387
	jmp	.LBB115_96
.LBB115_96:                             # %if.end388
	jmp	.LBB115_97
.LBB115_97:                             # %if.end389
	jmp	.LBB115_98
.LBB115_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB115_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB115_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB115_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB115_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB115_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB115_103 Depth=1
	movl	$0, -4(%rbp)
.LBB115_105:                            # %for.cond410
                                        #   Parent Loop BB115_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB115_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	je	.LBB115_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB115_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB115_109
.LBB115_108:                            # %if.else483
                                        #   in Loop: Header=BB115_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB115_109:                            # %if.end506
                                        #   in Loop: Header=BB115_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB115_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB115_105 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB115_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB115_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB115_113
.LBB115_112:                            # %if.else568
                                        #   in Loop: Header=BB115_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB115_113:                            # %if.end591
                                        #   in Loop: Header=BB115_105 Depth=2
	jmp	.LBB115_114
.LBB115_114:                            # %if.end592
                                        #   in Loop: Header=BB115_105 Depth=2
	jmp	.LBB115_115
.LBB115_115:                            # %for.inc593
                                        #   in Loop: Header=BB115_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_105
.LBB115_116:                            # %for.end595
                                        #   in Loop: Header=BB115_103 Depth=1
	jmp	.LBB115_117
.LBB115_117:                            # %for.inc596
                                        #   in Loop: Header=BB115_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_103
.LBB115_118:                            # %for.end598
	jmp	.LBB115_130
.LBB115_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB115_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB115_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB115_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB115_120 Depth=1
	movl	$0, -4(%rbp)
.LBB115_122:                            # %for.cond604
                                        #   Parent Loop BB115_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB115_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB115_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB115_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB115_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB115_125:                            # %if.end654
                                        #   in Loop: Header=BB115_122 Depth=2
	jmp	.LBB115_126
.LBB115_126:                            # %for.inc655
                                        #   in Loop: Header=BB115_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB115_122
.LBB115_127:                            # %for.end657
                                        #   in Loop: Header=BB115_120 Depth=1
	jmp	.LBB115_128
.LBB115_128:                            # %for.inc658
                                        #   in Loop: Header=BB115_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB115_120
.LBB115_129:                            # %for.end660
	jmp	.LBB115_130
.LBB115_130:                            # %if.end661
	jmp	.LBB115_131
.LBB115_131:                            # %if.end662
	cmpl	$1071382609, -48(%rbp)  # imm = 0x3FDC0051
	jne	.LBB115_133
.LBB115_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB115_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB115_132
.Lfunc_end115:
	.size	copy_rdopt_data.79, .Lfunc_end115-copy_rdopt_data.79
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_frame.80
.LCPI116_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_frame.80,@function
init_frame.80:                          # @init_frame.80
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$2006677246, -16(%rbp)  # imm = 0x779B76FE
	movq	last_P_no_frm, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movl	$0, -4(%rbp)
.LBB116_1:                              # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %esi
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %edi
	idivl	%edi
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	idivl	%edi
	imull	%eax, %ecx
	cmpl	%ecx, %esi
	jge	.LBB116_4
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB116_1 Depth=1
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movl	$-1, 4(%rax)
# %bb.3:                                # %for.inc
                                        #   in Loop: Header=BB116_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_1
.LBB116_4:                              # %for.end
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB116_29
# %bb.5:                                # %if.then
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	input, %rdx
	movl	20(%rdx), %edx
	addl	$1, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	movl	71876(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71880(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71876(%rcx)
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB116_8
# %bb.6:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB116_8
# %bb.7:                                # %if.then10
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB116_8:                              # %if.end
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	je	.LBB116_11
# %bb.9:                                # %land.lhs.true16
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB116_11
# %bb.10:                               # %if.then18
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_frm
.LBB116_11:                             # %if.end20
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB116_26
# %bb.12:                               # %if.then22
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB116_18
# %bb.13:                               # %if.then24
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB116_16
# %bb.14:                               # %land.lhs.true26
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB116_16
# %bb.15:                               # %if.then30
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB116_17
.LBB116_16:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_17:                             # %if.end32
	jmp	.LBB116_25
.LBB116_18:                             # %if.else33
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB116_21
# %bb.19:                               # %land.lhs.true36
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB116_21
# %bb.20:                               # %if.then40
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB116_22
.LBB116_21:                             # %if.else42
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_22:                             # %if.end44
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB116_24
# %bb.23:                               # %if.then47
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB116_24:                             # %if.end50
	jmp	.LBB116_25
.LBB116_25:                             # %if.end51
	jmp	.LBB116_26
.LBB116_26:                             # %if.end52
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB116_28
# %bb.27:                               # %if.then54
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB116_28:                             # %if.end62
	jmp	.LBB116_72
.LBB116_29:                             # %if.else63
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	subl	$1, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -8(%rbp)
	movl	start_tr_in_this_IGOP, %eax
	movq	img, %rcx
	movl	(%rcx), %ecx
	subl	start_frame_no_in_this_IGOP, %ecx
	movq	img, %rdx
	imull	71904(%rdx), %ecx
	addl	%ecx, %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	$1, -4(%rbp)
.LBB116_30:                             # %for.cond78
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jge	.LBB116_33
# %bb.31:                               # %for.body80
                                        #   in Loop: Header=BB116_30 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.32:                               # %for.inc88
                                        #   in Loop: Header=BB116_30 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB116_30
.LBB116_33:                             # %for.end90
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB116_36
# %bb.34:                               # %land.lhs.true93
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB116_36
# %bb.35:                               # %if.then98
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB116_36:                             # %if.end102
	vmovsd	.LCPI116_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB116_38
# %bb.37:                               # %if.then111
	vmovsd	.LCPI116_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB116_38:                             # %if.end113
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB116_40
# %bb.39:                               # %if.then116
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB116_41
.LBB116_40:                             # %if.else128
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vmovsd	71896(%rcx), %xmm0      # xmm0 = mem[0],zero
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB116_41:                             # %if.end136
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB116_43
# %bb.42:                               # %if.then140
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB116_43:                             # %if.end143
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB116_68
# %bb.44:                               # %land.lhs.true146
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB116_68
# %bb.45:                               # %if.then150
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB116_48
# %bb.46:                               # %land.lhs.true154
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB116_48
# %bb.47:                               # %if.then159
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB116_49
.LBB116_48:                             # %if.else161
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_49:                             # %if.end163
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB116_67
# %bb.50:                               # %if.then165
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB116_59
# %bb.51:                               # %land.lhs.true169
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB116_59
# %bb.52:                               # %if.then174
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB116_54
# %bb.53:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB116_58
.LBB116_54:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB116_56
# %bb.55:                               # %cond.true184
	movl	$51, %eax
	jmp	.LBB116_57
.LBB116_56:                             # %cond.false185
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB116_57:                             # %cond.end
.LBB116_58:                             # %cond.end189
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB116_66
.LBB116_59:                             # %if.else192
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB116_61
# %bb.60:                               # %cond.true197
	xorl	%eax, %eax
	jmp	.LBB116_65
.LBB116_61:                             # %cond.false198
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB116_63
# %bb.62:                               # %cond.true204
	movl	$51, %eax
	jmp	.LBB116_64
.LBB116_63:                             # %cond.false205
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB116_64:                             # %cond.end209
.LBB116_65:                             # %cond.end211
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_66:                             # %if.end214
	jmp	.LBB116_67
.LBB116_67:                             # %if.end215
	jmp	.LBB116_71
.LBB116_68:                             # %if.else216
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB116_70
# %bb.69:                               # %if.then220
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB116_70:                             # %if.end226
	jmp	.LBB116_71
.LBB116_71:                             # %if.end227
	jmp	.LBB116_72
.LBB116_72:                             # %if.end228
	movq	img, %rax
	movl	72384(%rax), %edi
	callq	UpdateSubseqInfo
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	movl	$4294967295, %ecx       # imm = 0xFFFFFFFF
	callq	UpdateSceneInformation
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	$0, 72504(%rax)
	movq	img, %rax
	movl	$0, 72508(%rax)
	callq	init_dec_ref_pic_marking_buffer
	cmpl	$2006677246, -16(%rbp)  # imm = 0x779B76FE
	jne	.LBB116_74
.LBB116_73:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB116_74:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB116_73
.Lfunc_end116:
	.size	init_frame.80, .Lfunc_end116-init_frame.80
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.81
	.type	writeUnit.81,@function
writeUnit.81:                           # @writeUnit.81
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2093535673, -16(%rbp)  # imm = 0x7CC8D1B9
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB117_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB117_18
.LBB117_2:                              # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB117_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB117_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB117_6
.LBB117_5:                              # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB117_6:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB117_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB117_9
.LBB117_8:                              # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB117_9:                              # %if.end21
	jmp	.LBB117_17
.LBB117_10:                             # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB117_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB117_13
.LBB117_12:                             # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB117_13:                             # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB117_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB117_16
.LBB117_15:                             # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB117_16:                             # %if.end39
	jmp	.LBB117_17
.LBB117_17:                             # %if.end40
	jmp	.LBB117_18
.LBB117_18:                             # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$2093535673, -16(%rbp)  # imm = 0x7CC8D1B9
	jne	.LBB117_20
.LBB117_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB117_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB117_19
.Lfunc_end117:
	.size	writeUnit.81, .Lfunc_end117-writeUnit.81
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.82
	.type	rdPictureCoding.82,@function
rdPictureCoding.82:                     # @rdPictureCoding.82
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2014942207, -24(%rbp)  # imm = 0x781993FF
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB118_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB118_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB118_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB118_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB118_6
.LBB118_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB118_6:                              # %if.end
	jmp	.LBB118_8
.LBB118_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB118_8:                              # %if.end10
	jmp	.LBB118_10
.LBB118_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB118_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB118_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB118_13
.LBB118_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB118_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB118_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB118_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB118_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB118_18
.LBB118_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB118_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB118_20
.LBB118_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB118_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB118_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB118_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB118_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB118_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB118_26
.LBB118_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB118_26:                             # %if.end53
	jmp	.LBB118_34
.LBB118_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB118_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB118_33
.LBB118_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB118_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB118_32
.LBB118_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB118_32:                             # %if.end66
	jmp	.LBB118_33
.LBB118_33:                             # %if.end67
	jmp	.LBB118_34
.LBB118_34:                             # %if.end68
	jmp	.LBB118_36
.LBB118_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB118_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB118_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB118_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB118_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB118_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB118_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB118_46
.LBB118_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB118_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB118_45
.LBB118_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB118_45:                             # %if.end98
	jmp	.LBB118_46
.LBB118_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB118_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB118_51
.LBB118_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB118_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB118_50:                             # %if.end111
	jmp	.LBB118_51
.LBB118_51:                             # %if.end112
	cmpl	$2014942207, -24(%rbp)  # imm = 0x781993FF
	jne	.LBB118_53
.LBB118_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB118_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB118_52
.Lfunc_end118:
	.size	rdPictureCoding.82, .Lfunc_end118-rdPictureCoding.82
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.83
	.type	ReportFirstframe.83,@function
ReportFirstframe.83:                    # @ReportFirstframe.83
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$296155538, -16(%rbp)   # imm = 0x11A6F992
	movl	%edi, -4(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB119_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB119_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB119_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB119_5
.LBB119_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -8(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB119_5:                              # %if.end
	jmp	.LBB119_6
.LBB119_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$296155538, -16(%rbp)   # imm = 0x11A6F992
	jne	.LBB119_8
.LBB119_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB119_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB119_7
.Lfunc_end119:
	.size	ReportFirstframe.83, .Lfunc_end119-ReportFirstframe.83
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.84
	.type	rdPictureCoding.84,@function
rdPictureCoding.84:                     # @rdPictureCoding.84
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$30617409, -24(%rbp)    # imm = 0x1D32F41
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -20(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB120_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB120_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB120_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB120_6
.LBB120_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB120_6:                              # %if.end
	jmp	.LBB120_8
.LBB120_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB120_8:                              # %if.end10
	jmp	.LBB120_10
.LBB120_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB120_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB120_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB120_13
.LBB120_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB120_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB120_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB120_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB120_18
.LBB120_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB120_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB120_20
.LBB120_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB120_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB120_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB120_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB120_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB120_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB120_26
.LBB120_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB120_26:                             # %if.end53
	jmp	.LBB120_34
.LBB120_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB120_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB120_33
.LBB120_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB120_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB120_32
.LBB120_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB120_32:                             # %if.end66
	jmp	.LBB120_33
.LBB120_33:                             # %if.end67
	jmp	.LBB120_34
.LBB120_34:                             # %if.end68
	jmp	.LBB120_36
.LBB120_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB120_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB120_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB120_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB120_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB120_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB120_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB120_46
.LBB120_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB120_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB120_45
.LBB120_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB120_45:                             # %if.end98
	jmp	.LBB120_46
.LBB120_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB120_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB120_51
.LBB120_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB120_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB120_50:                             # %if.end111
	jmp	.LBB120_51
.LBB120_51:                             # %if.end112
	cmpl	$30617409, -24(%rbp)    # imm = 0x1D32F41
	jne	.LBB120_53
.LBB120_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB120_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB120_52
.Lfunc_end120:
	.size	rdPictureCoding.84, .Lfunc_end120-rdPictureCoding.84
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.85      # -- Begin function copy_rdopt_data.85
	.p2align	4, 0x90
	.type	copy_rdopt_data.85,@function
copy_rdopt_data.85:                     # @copy_rdopt_data.85
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1575415629, -48(%rbp)  # imm = 0x5DE6EF4D
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB121_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB121_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB121_4
.LBB121_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB121_4
.LBB121_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB121_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_7 Depth 2
                                        #       Child Loop BB121_9 Depth 3
                                        #         Child Loop BB121_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB121_5 Depth=1
	movl	$0, -8(%rbp)
.LBB121_7:                              # %for.cond17
                                        #   Parent Loop BB121_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_9 Depth 3
                                        #         Child Loop BB121_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB121_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB121_7 Depth=2
	movl	$0, -12(%rbp)
.LBB121_9:                              # %for.cond21
                                        #   Parent Loop BB121_5 Depth=1
                                        #     Parent Loop BB121_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB121_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB121_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB121_9 Depth=3
	movl	$0, -16(%rbp)
.LBB121_11:                             # %for.cond25
                                        #   Parent Loop BB121_5 Depth=1
                                        #     Parent Loop BB121_7 Depth=2
                                        #       Parent Loop BB121_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB121_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB121_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB121_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_11
.LBB121_14:                             # %for.end
                                        #   in Loop: Header=BB121_9 Depth=3
	jmp	.LBB121_15
.LBB121_15:                             # %for.inc46
                                        #   in Loop: Header=BB121_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_9
.LBB121_16:                             # %for.end48
                                        #   in Loop: Header=BB121_7 Depth=2
	jmp	.LBB121_17
.LBB121_17:                             # %for.inc49
                                        #   in Loop: Header=BB121_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_7
.LBB121_18:                             # %for.end51
                                        #   in Loop: Header=BB121_5 Depth=1
	jmp	.LBB121_19
.LBB121_19:                             # %for.inc52
                                        #   in Loop: Header=BB121_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_5
.LBB121_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB121_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_23 Depth 2
                                        #       Child Loop BB121_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB121_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB121_21 Depth=1
	movl	$0, -12(%rbp)
.LBB121_23:                             # %for.cond59
                                        #   Parent Loop BB121_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB121_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB121_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB121_23 Depth=2
	movl	$0, -16(%rbp)
.LBB121_25:                             # %for.cond63
                                        #   Parent Loop BB121_21 Depth=1
                                        #     Parent Loop BB121_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB121_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB121_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB121_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB121_25
.LBB121_28:                             # %for.end82
                                        #   in Loop: Header=BB121_23 Depth=2
	jmp	.LBB121_29
.LBB121_29:                             # %for.inc83
                                        #   in Loop: Header=BB121_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_23
.LBB121_30:                             # %for.end85
                                        #   in Loop: Header=BB121_21 Depth=1
	jmp	.LBB121_31
.LBB121_31:                             # %for.inc86
                                        #   in Loop: Header=BB121_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_21
.LBB121_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB121_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB121_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB121_33 Depth=1
	movl	$0, -4(%rbp)
.LBB121_35:                             # %for.cond93
                                        #   Parent Loop BB121_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB121_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB121_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB121_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB121_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB121_38:                             # %if.end
                                        #   in Loop: Header=BB121_35 Depth=2
	jmp	.LBB121_39
.LBB121_39:                             # %for.inc176
                                        #   in Loop: Header=BB121_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_35
.LBB121_40:                             # %for.end178
                                        #   in Loop: Header=BB121_33 Depth=1
	jmp	.LBB121_41
.LBB121_41:                             # %for.inc179
                                        #   in Loop: Header=BB121_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_33
.LBB121_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB121_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB121_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB121_43 Depth=1
	movl	$0, -4(%rbp)
.LBB121_45:                             # %for.cond186
                                        #   Parent Loop BB121_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB121_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB121_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB121_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_45
.LBB121_48:                             # %for.end203
                                        #   in Loop: Header=BB121_43 Depth=1
	jmp	.LBB121_49
.LBB121_49:                             # %for.inc204
                                        #   in Loop: Header=BB121_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_43
.LBB121_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB121_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB121_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB121_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB121_52 Depth=1
	movl	$0, -4(%rbp)
.LBB121_54:                             # %for.cond214
                                        #   Parent Loop BB121_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB121_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB121_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB121_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_54
.LBB121_57:                             # %for.end247
                                        #   in Loop: Header=BB121_52 Depth=1
	jmp	.LBB121_58
.LBB121_58:                             # %for.inc248
                                        #   in Loop: Header=BB121_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_52
.LBB121_59:                             # %for.end250
	jmp	.LBB121_60
.LBB121_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB121_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB121_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB121_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB121_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_61
.LBB121_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB121_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB121_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB121_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB121_68:                             # %for.cond283
                                        #   Parent Loop BB121_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB121_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB121_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_68
.LBB121_71:                             # %for.end306
                                        #   in Loop: Header=BB121_66 Depth=1
	jmp	.LBB121_72
.LBB121_72:                             # %for.inc307
                                        #   in Loop: Header=BB121_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_66
.LBB121_73:                             # %for.end309
	jmp	.LBB121_98
.LBB121_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB121_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB121_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB121_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB121_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB121_79:                             # %for.cond324
                                        #   Parent Loop BB121_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB121_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB121_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_79
.LBB121_82:                             # %for.end341
                                        #   in Loop: Header=BB121_77 Depth=1
	jmp	.LBB121_83
.LBB121_83:                             # %for.inc342
                                        #   in Loop: Header=BB121_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_77
.LBB121_84:                             # %for.end344
	jmp	.LBB121_97
.LBB121_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB121_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB121_96
.LBB121_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB121_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB121_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB121_90:                             # %for.cond359
                                        #   Parent Loop BB121_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB121_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB121_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB121_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB121_90
.LBB121_93:                             # %for.end384
                                        #   in Loop: Header=BB121_88 Depth=1
	jmp	.LBB121_94
.LBB121_94:                             # %for.inc385
                                        #   in Loop: Header=BB121_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_88
.LBB121_95:                             # %for.end387
	jmp	.LBB121_96
.LBB121_96:                             # %if.end388
	jmp	.LBB121_97
.LBB121_97:                             # %if.end389
	jmp	.LBB121_98
.LBB121_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB121_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB121_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB121_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB121_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB121_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB121_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB121_103 Depth=1
	movl	$0, -4(%rbp)
.LBB121_105:                            # %for.cond410
                                        #   Parent Loop BB121_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB121_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB121_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB121_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB121_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB121_109
.LBB121_108:                            # %if.else483
                                        #   in Loop: Header=BB121_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB121_109:                            # %if.end506
                                        #   in Loop: Header=BB121_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB121_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB121_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB121_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB121_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB121_113
.LBB121_112:                            # %if.else568
                                        #   in Loop: Header=BB121_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB121_113:                            # %if.end591
                                        #   in Loop: Header=BB121_105 Depth=2
	jmp	.LBB121_114
.LBB121_114:                            # %if.end592
                                        #   in Loop: Header=BB121_105 Depth=2
	jmp	.LBB121_115
.LBB121_115:                            # %for.inc593
                                        #   in Loop: Header=BB121_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_105
.LBB121_116:                            # %for.end595
                                        #   in Loop: Header=BB121_103 Depth=1
	jmp	.LBB121_117
.LBB121_117:                            # %for.inc596
                                        #   in Loop: Header=BB121_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_103
.LBB121_118:                            # %for.end598
	jmp	.LBB121_130
.LBB121_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB121_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB121_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB121_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB121_120 Depth=1
	movl	$0, -4(%rbp)
.LBB121_122:                            # %for.cond604
                                        #   Parent Loop BB121_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB121_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB121_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB121_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB121_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB121_125:                            # %if.end654
                                        #   in Loop: Header=BB121_122 Depth=2
	jmp	.LBB121_126
.LBB121_126:                            # %for.inc655
                                        #   in Loop: Header=BB121_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB121_122
.LBB121_127:                            # %for.end657
                                        #   in Loop: Header=BB121_120 Depth=1
	jmp	.LBB121_128
.LBB121_128:                            # %for.inc658
                                        #   in Loop: Header=BB121_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB121_120
.LBB121_129:                            # %for.end660
	jmp	.LBB121_130
.LBB121_130:                            # %if.end661
	jmp	.LBB121_131
.LBB121_131:                            # %if.end662
	cmpl	$1575415629, -48(%rbp)  # imm = 0x5DE6EF4D
	jne	.LBB121_133
.LBB121_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB121_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB121_132
.Lfunc_end121:
	.size	copy_rdopt_data.85, .Lfunc_end121-copy_rdopt_data.85
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.86
	.type	ReportFirstframe.86,@function
ReportFirstframe.86:                    # @ReportFirstframe.86
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$2042000887, -16(%rbp)  # imm = 0x79B675F7
	movl	%edi, -8(%rbp)
	movl	%esi, -12(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-8(%rbp), %r9d
	movl	-12(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB122_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB122_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB122_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB122_5
.LBB122_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -4(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB122_5:                              # %if.end
	jmp	.LBB122_6
.LBB122_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$2042000887, -16(%rbp)  # imm = 0x79B675F7
	jne	.LBB122_8
.LBB122_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB122_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB122_7
.Lfunc_end122:
	.size	ReportFirstframe.86, .Lfunc_end122-ReportFirstframe.86
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.87     # -- Begin function encode_one_frame.87
	.p2align	4, 0x90
	.type	encode_one_frame.87,@function
encode_one_frame.87:                    # @encode_one_frame.87
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1391338626, -56(%rbp)  # imm = 0x52EE2482
	movl	$0, -52(%rbp)
	movl	$0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -68(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-112(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB123_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB123_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB123_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -36(%rbp)
	movl	-36(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB123_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB123_9
.LBB123_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB123_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB123_8
.LBB123_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB123_8:                              # %if.end21
	jmp	.LBB123_9
.LBB123_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB123_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB123_38
.LBB123_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB123_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB123_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB123_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB123_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB123_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB123_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB123_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB123_20
.LBB123_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB123_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB123_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB123_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB123_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB123_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB123_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB123_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB123_29
.LBB123_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB123_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB123_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB123_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB123_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB123_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -44(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -64(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB123_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB123_35
.LBB123_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB123_35:                             # %if.end89
	jmp	.LBB123_37
.LBB123_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB123_37:                             # %if.end92
	jmp	.LBB123_38
.LBB123_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB123_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB123_41
.LBB123_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB123_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB123_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB123_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB123_45
# %bb.44:                               # %if.then109
	movl	-24(%rbp), %edi
	vmovss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-68(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB123_54
.LBB123_45:                             # %if.else112
	movl	-52(%rbp), %edi
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-60(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB123_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB123_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB123_53
.LBB123_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB123_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB123_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB123_52
.LBB123_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB123_52:                             # %if.end130
	jmp	.LBB123_53
.LBB123_53:                             # %if.end131
	jmp	.LBB123_54
.LBB123_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB123_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB123_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB123_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB123_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB123_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB123_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB123_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB123_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB123_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB123_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB123_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB123_66:                             # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-128(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-120(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-104(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB123_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB123_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB123_70
.LBB123_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB123_70:                             # %if.end171
	jmp	.LBB123_81
.LBB123_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB123_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB123_80
.LBB123_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB123_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB123_79
.LBB123_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB123_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB123_78
.LBB123_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB123_78:                             # %if.end187
	jmp	.LBB123_79
.LBB123_79:                             # %if.end188
	jmp	.LBB123_80
.LBB123_80:                             # %if.end189
	jmp	.LBB123_81
.LBB123_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB123_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB123_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB123_85
.LBB123_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB123_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB123_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB123_88
.LBB123_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB123_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB123_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB123_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB123_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB123_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB123_110
.LBB123_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB123_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB123_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB123_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB123_98
.LBB123_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB123_98:                             # %if.end239
	jmp	.LBB123_99
.LBB123_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB123_104
	jmp	.LBB123_100
.LBB123_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB123_102
	jmp	.LBB123_101
.LBB123_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB123_103
	jmp	.LBB123_108
.LBB123_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB123_109
.LBB123_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB123_109
.LBB123_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB123_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB123_107
.LBB123_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB123_107:                            # %if.end261
	jmp	.LBB123_109
.LBB123_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB123_109:                            # %sw.epilog
	jmp	.LBB123_110
.LBB123_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB123_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB123_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB123_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB123_119
.LBB123_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB123_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB123_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB123_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB123_118:                            # %if.end292
	jmp	.LBB123_119
.LBB123_119:                            # %if.end293
	jmp	.LBB123_120
.LBB123_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB123_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB123_123
.LBB123_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB123_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$1391338626, -56(%rbp)  # imm = 0x52EE2482
	jne	.LBB123_125
.LBB123_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB123_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB123_124
.Lfunc_end123:
	.size	encode_one_frame.87, .Lfunc_end123-encode_one_frame.87
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.88      # -- Begin function copy_rdopt_data.88
	.p2align	4, 0x90
	.type	copy_rdopt_data.88,@function
copy_rdopt_data.88:                     # @copy_rdopt_data.88
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$251198975, -48(%rbp)   # imm = 0xEF8FDFF
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB124_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB124_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB124_4
.LBB124_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB124_4
.LBB124_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB124_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_7 Depth 2
                                        #       Child Loop BB124_9 Depth 3
                                        #         Child Loop BB124_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB124_5 Depth=1
	movl	$0, -8(%rbp)
.LBB124_7:                              # %for.cond17
                                        #   Parent Loop BB124_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_9 Depth 3
                                        #         Child Loop BB124_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB124_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB124_7 Depth=2
	movl	$0, -12(%rbp)
.LBB124_9:                              # %for.cond21
                                        #   Parent Loop BB124_5 Depth=1
                                        #     Parent Loop BB124_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB124_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB124_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB124_9 Depth=3
	movl	$0, -16(%rbp)
.LBB124_11:                             # %for.cond25
                                        #   Parent Loop BB124_5 Depth=1
                                        #     Parent Loop BB124_7 Depth=2
                                        #       Parent Loop BB124_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB124_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB124_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB124_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_11
.LBB124_14:                             # %for.end
                                        #   in Loop: Header=BB124_9 Depth=3
	jmp	.LBB124_15
.LBB124_15:                             # %for.inc46
                                        #   in Loop: Header=BB124_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_9
.LBB124_16:                             # %for.end48
                                        #   in Loop: Header=BB124_7 Depth=2
	jmp	.LBB124_17
.LBB124_17:                             # %for.inc49
                                        #   in Loop: Header=BB124_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_7
.LBB124_18:                             # %for.end51
                                        #   in Loop: Header=BB124_5 Depth=1
	jmp	.LBB124_19
.LBB124_19:                             # %for.inc52
                                        #   in Loop: Header=BB124_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_5
.LBB124_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB124_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_23 Depth 2
                                        #       Child Loop BB124_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB124_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB124_21 Depth=1
	movl	$0, -12(%rbp)
.LBB124_23:                             # %for.cond59
                                        #   Parent Loop BB124_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB124_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB124_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB124_23 Depth=2
	movl	$0, -16(%rbp)
.LBB124_25:                             # %for.cond63
                                        #   Parent Loop BB124_21 Depth=1
                                        #     Parent Loop BB124_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB124_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB124_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB124_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB124_25
.LBB124_28:                             # %for.end82
                                        #   in Loop: Header=BB124_23 Depth=2
	jmp	.LBB124_29
.LBB124_29:                             # %for.inc83
                                        #   in Loop: Header=BB124_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_23
.LBB124_30:                             # %for.end85
                                        #   in Loop: Header=BB124_21 Depth=1
	jmp	.LBB124_31
.LBB124_31:                             # %for.inc86
                                        #   in Loop: Header=BB124_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_21
.LBB124_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB124_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB124_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB124_33 Depth=1
	movl	$0, -4(%rbp)
.LBB124_35:                             # %for.cond93
                                        #   Parent Loop BB124_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB124_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB124_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB124_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB124_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB124_38:                             # %if.end
                                        #   in Loop: Header=BB124_35 Depth=2
	jmp	.LBB124_39
.LBB124_39:                             # %for.inc176
                                        #   in Loop: Header=BB124_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_35
.LBB124_40:                             # %for.end178
                                        #   in Loop: Header=BB124_33 Depth=1
	jmp	.LBB124_41
.LBB124_41:                             # %for.inc179
                                        #   in Loop: Header=BB124_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_33
.LBB124_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB124_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB124_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB124_43 Depth=1
	movl	$0, -4(%rbp)
.LBB124_45:                             # %for.cond186
                                        #   Parent Loop BB124_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB124_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB124_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB124_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_45
.LBB124_48:                             # %for.end203
                                        #   in Loop: Header=BB124_43 Depth=1
	jmp	.LBB124_49
.LBB124_49:                             # %for.inc204
                                        #   in Loop: Header=BB124_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_43
.LBB124_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB124_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB124_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB124_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB124_52 Depth=1
	movl	$0, -4(%rbp)
.LBB124_54:                             # %for.cond214
                                        #   Parent Loop BB124_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB124_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB124_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB124_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_54
.LBB124_57:                             # %for.end247
                                        #   in Loop: Header=BB124_52 Depth=1
	jmp	.LBB124_58
.LBB124_58:                             # %for.inc248
                                        #   in Loop: Header=BB124_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_52
.LBB124_59:                             # %for.end250
	jmp	.LBB124_60
.LBB124_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB124_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB124_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB124_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB124_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_61
.LBB124_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB124_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB124_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB124_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB124_68:                             # %for.cond283
                                        #   Parent Loop BB124_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB124_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB124_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_68
.LBB124_71:                             # %for.end306
                                        #   in Loop: Header=BB124_66 Depth=1
	jmp	.LBB124_72
.LBB124_72:                             # %for.inc307
                                        #   in Loop: Header=BB124_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_66
.LBB124_73:                             # %for.end309
	jmp	.LBB124_98
.LBB124_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB124_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB124_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB124_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB124_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB124_79:                             # %for.cond324
                                        #   Parent Loop BB124_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB124_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB124_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_79
.LBB124_82:                             # %for.end341
                                        #   in Loop: Header=BB124_77 Depth=1
	jmp	.LBB124_83
.LBB124_83:                             # %for.inc342
                                        #   in Loop: Header=BB124_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_77
.LBB124_84:                             # %for.end344
	jmp	.LBB124_97
.LBB124_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB124_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB124_96
.LBB124_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB124_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB124_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB124_90:                             # %for.cond359
                                        #   Parent Loop BB124_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB124_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB124_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB124_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB124_90
.LBB124_93:                             # %for.end384
                                        #   in Loop: Header=BB124_88 Depth=1
	jmp	.LBB124_94
.LBB124_94:                             # %for.inc385
                                        #   in Loop: Header=BB124_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_88
.LBB124_95:                             # %for.end387
	jmp	.LBB124_96
.LBB124_96:                             # %if.end388
	jmp	.LBB124_97
.LBB124_97:                             # %if.end389
	jmp	.LBB124_98
.LBB124_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB124_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB124_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB124_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB124_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB124_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB124_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB124_103 Depth=1
	movl	$0, -4(%rbp)
.LBB124_105:                            # %for.cond410
                                        #   Parent Loop BB124_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB124_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB124_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB124_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB124_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB124_109
.LBB124_108:                            # %if.else483
                                        #   in Loop: Header=BB124_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB124_109:                            # %if.end506
                                        #   in Loop: Header=BB124_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB124_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB124_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB124_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB124_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB124_113
.LBB124_112:                            # %if.else568
                                        #   in Loop: Header=BB124_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB124_113:                            # %if.end591
                                        #   in Loop: Header=BB124_105 Depth=2
	jmp	.LBB124_114
.LBB124_114:                            # %if.end592
                                        #   in Loop: Header=BB124_105 Depth=2
	jmp	.LBB124_115
.LBB124_115:                            # %for.inc593
                                        #   in Loop: Header=BB124_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_105
.LBB124_116:                            # %for.end595
                                        #   in Loop: Header=BB124_103 Depth=1
	jmp	.LBB124_117
.LBB124_117:                            # %for.inc596
                                        #   in Loop: Header=BB124_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_103
.LBB124_118:                            # %for.end598
	jmp	.LBB124_130
.LBB124_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB124_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB124_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB124_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB124_120 Depth=1
	movl	$0, -4(%rbp)
.LBB124_122:                            # %for.cond604
                                        #   Parent Loop BB124_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB124_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB124_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB124_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB124_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB124_125:                            # %if.end654
                                        #   in Loop: Header=BB124_122 Depth=2
	jmp	.LBB124_126
.LBB124_126:                            # %for.inc655
                                        #   in Loop: Header=BB124_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB124_122
.LBB124_127:                            # %for.end657
                                        #   in Loop: Header=BB124_120 Depth=1
	jmp	.LBB124_128
.LBB124_128:                            # %for.inc658
                                        #   in Loop: Header=BB124_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB124_120
.LBB124_129:                            # %for.end660
	jmp	.LBB124_130
.LBB124_130:                            # %if.end661
	jmp	.LBB124_131
.LBB124_131:                            # %if.end662
	cmpl	$251198975, -48(%rbp)   # imm = 0xEF8FDFF
	jne	.LBB124_133
.LBB124_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB124_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB124_132
.Lfunc_end124:
	.size	copy_rdopt_data.88, .Lfunc_end124-copy_rdopt_data.88
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.89
	.type	distortion_fld.89,@function
distortion_fld.89:                      # @distortion_fld.89
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$704241775, -4(%rbp)    # imm = 0x29F9E06F
	movq	%rdi, -32(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$704241775, -4(%rbp)    # imm = 0x29F9E06F
	jne	.LBB125_2
.LBB125_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB125_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB125_1
.Lfunc_end125:
	.size	distortion_fld.89, .Lfunc_end125-distortion_fld.89
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.90
	.type	distortion_fld.90,@function
distortion_fld.90:                      # @distortion_fld.90
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1152243247, -4(%rbp)   # imm = 0x44ADD62F
	movq	%rdi, -16(%rbp)
	movq	%rsi, -32(%rbp)
	movq	%rdx, -24(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$1152243247, -4(%rbp)   # imm = 0x44ADD62F
	jne	.LBB126_2
.LBB126_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB126_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB126_1
.Lfunc_end126:
	.size	distortion_fld.90, .Lfunc_end126-distortion_fld.90
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.91              # -- Begin function buf2img.91
	.p2align	4, 0x90
	.type	buf2img.91,@function
buf2img.91:                             # @buf2img.91
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1848975275, -60(%rbp)  # imm = 0x6E351FAB
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB127_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB127_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB127_35
# %bb.3:                                # %if.then2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB127_6
	jmp	.LBB127_4
.LBB127_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB127_15
	jmp	.LBB127_5
.LBB127_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB127_24
	jmp	.LBB127_33
.LBB127_6:                              # %sw.bb
	movl	$0, -8(%rbp)
.LBB127_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_9 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB127_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB127_7 Depth=1
	movl	$0, -4(%rbp)
.LBB127_9:                              # %for.cond5
                                        #   Parent Loop BB127_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB127_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB127_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB127_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_9
.LBB127_12:                             # %for.end
                                        #   in Loop: Header=BB127_7 Depth=1
	jmp	.LBB127_13
.LBB127_13:                             # %for.inc14
                                        #   in Loop: Header=BB127_7 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_7
.LBB127_14:                             # %for.end16
	jmp	.LBB127_34
.LBB127_15:                             # %sw.bb17
	movl	$0, -8(%rbp)
.LBB127_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB127_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB127_16 Depth=1
	movl	$0, -4(%rbp)
.LBB127_18:                             # %for.cond22
                                        #   Parent Loop BB127_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB127_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB127_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB127_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_18
.LBB127_21:                             # %for.end38
                                        #   in Loop: Header=BB127_16 Depth=1
	jmp	.LBB127_22
.LBB127_22:                             # %for.inc39
                                        #   in Loop: Header=BB127_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_16
.LBB127_23:                             # %for.end41
	jmp	.LBB127_34
.LBB127_24:                             # %sw.bb42
	movl	$0, -8(%rbp)
.LBB127_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_27 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB127_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB127_25 Depth=1
	movl	$0, -4(%rbp)
.LBB127_27:                             # %for.cond47
                                        #   Parent Loop BB127_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB127_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB127_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB127_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_27
.LBB127_30:                             # %for.end74
                                        #   in Loop: Header=BB127_25 Depth=1
	jmp	.LBB127_31
.LBB127_31:                             # %for.inc75
                                        #   in Loop: Header=BB127_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_25
.LBB127_32:                             # %for.end77
	jmp	.LBB127_33
.LBB127_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB127_34:                             # %sw.epilog
	jmp	.LBB127_44
.LBB127_35:                             # %if.else
	movl	$0, -8(%rbp)
.LBB127_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB127_38 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB127_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB127_36 Depth=1
	movl	$0, -4(%rbp)
.LBB127_38:                             # %for.cond82
                                        #   Parent Loop BB127_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB127_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB127_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB127_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB127_38
.LBB127_41:                             # %for.end102
                                        #   in Loop: Header=BB127_36 Depth=1
	jmp	.LBB127_42
.LBB127_42:                             # %for.inc103
                                        #   in Loop: Header=BB127_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB127_36
.LBB127_43:                             # %for.end105
	jmp	.LBB127_44
.LBB127_44:                             # %if.end106
	cmpl	$1848975275, -60(%rbp)  # imm = 0x6E351FAB
	jne	.LBB127_46
.LBB127_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB127_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB127_45
.Lfunc_end127:
	.size	buf2img.91, .Lfunc_end127-buf2img.91
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.92
.LCPI128_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.92,@function
init_field.92:                          # @init_field.92
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$507546212, -16(%rbp)   # imm = 0x1E408A64
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB128_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB128_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB128_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB128_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB128_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB128_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB128_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB128_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB128_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB128_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB128_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB128_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB128_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB128_15
.LBB128_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB128_15:                             # %if.end38
	jmp	.LBB128_23
.LBB128_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB128_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB128_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB128_20
.LBB128_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB128_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB128_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB128_22:                             # %if.end56
	jmp	.LBB128_23
.LBB128_23:                             # %if.end57
	jmp	.LBB128_24
.LBB128_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB128_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB128_26:                             # %if.end66
	jmp	.LBB128_77
.LBB128_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB128_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB128_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB128_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB128_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB128_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_29
.LBB128_32:                             # %for.end
	jmp	.LBB128_38
.LBB128_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB128_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB128_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB128_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB128_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB128_34
.LBB128_37:                             # %for.end134
	jmp	.LBB128_38
.LBB128_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB128_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB128_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB128_41:                             # %if.end147
	vmovsd	.LCPI128_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB128_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI128_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB128_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB128_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI128_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB128_46
.LBB128_45:                             # %if.else174
	vmovsd	.LCPI128_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB128_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB128_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB128_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB128_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB128_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB128_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB128_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB128_54
.LBB128_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB128_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB128_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB128_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB128_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB128_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB128_63
.LBB128_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB128_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB128_62
.LBB128_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB128_62:                             # %cond.end
.LBB128_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB128_71
.LBB128_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB128_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB128_70
.LBB128_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB128_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB128_69
.LBB128_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB128_69:                             # %cond.end256
.LBB128_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB128_71:                             # %if.end261
	jmp	.LBB128_72
.LBB128_72:                             # %if.end262
	jmp	.LBB128_76
.LBB128_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB128_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB128_75:                             # %if.end273
	jmp	.LBB128_76
.LBB128_76:                             # %if.end274
	jmp	.LBB128_77
.LBB128_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$507546212, -16(%rbp)   # imm = 0x1E408A64
	jne	.LBB128_79
.LBB128_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB128_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB128_78
.Lfunc_end128:
	.size	init_field.92, .Lfunc_end128-init_field.92
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.93              # -- Begin function buf2img.93
	.p2align	4, 0x90
	.type	buf2img.93,@function
buf2img.93:                             # @buf2img.93
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1534928520, -60(%rbp)  # imm = 0x5B7D2688
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB129_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB129_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB129_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB129_6
	jmp	.LBB129_4
.LBB129_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB129_15
	jmp	.LBB129_5
.LBB129_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB129_24
	jmp	.LBB129_33
.LBB129_6:                              # %sw.bb
	movl	$0, -8(%rbp)
.LBB129_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_9 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB129_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB129_7 Depth=1
	movl	$0, -4(%rbp)
.LBB129_9:                              # %for.cond5
                                        #   Parent Loop BB129_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB129_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB129_9 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB129_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_9
.LBB129_12:                             # %for.end
                                        #   in Loop: Header=BB129_7 Depth=1
	jmp	.LBB129_13
.LBB129_13:                             # %for.inc14
                                        #   in Loop: Header=BB129_7 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_7
.LBB129_14:                             # %for.end16
	jmp	.LBB129_34
.LBB129_15:                             # %sw.bb17
	movl	$0, -8(%rbp)
.LBB129_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB129_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB129_16 Depth=1
	movl	$0, -4(%rbp)
.LBB129_18:                             # %for.cond22
                                        #   Parent Loop BB129_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB129_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB129_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB129_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_18
.LBB129_21:                             # %for.end38
                                        #   in Loop: Header=BB129_16 Depth=1
	jmp	.LBB129_22
.LBB129_22:                             # %for.inc39
                                        #   in Loop: Header=BB129_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_16
.LBB129_23:                             # %for.end41
	jmp	.LBB129_34
.LBB129_24:                             # %sw.bb42
	movl	$0, -8(%rbp)
.LBB129_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_27 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB129_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB129_25 Depth=1
	movl	$0, -4(%rbp)
.LBB129_27:                             # %for.cond47
                                        #   Parent Loop BB129_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB129_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB129_27 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-48(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-48(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-48(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB129_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_27
.LBB129_30:                             # %for.end74
                                        #   in Loop: Header=BB129_25 Depth=1
	jmp	.LBB129_31
.LBB129_31:                             # %for.inc75
                                        #   in Loop: Header=BB129_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_25
.LBB129_32:                             # %for.end77
	jmp	.LBB129_33
.LBB129_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB129_34:                             # %sw.epilog
	jmp	.LBB129_44
.LBB129_35:                             # %if.else
	movl	$0, -8(%rbp)
.LBB129_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB129_38 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB129_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB129_36 Depth=1
	movl	$0, -4(%rbp)
.LBB129_38:                             # %for.cond82
                                        #   Parent Loop BB129_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB129_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB129_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-56(%rbp), %rsi
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB129_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB129_38
.LBB129_41:                             # %for.end102
                                        #   in Loop: Header=BB129_36 Depth=1
	jmp	.LBB129_42
.LBB129_42:                             # %for.inc103
                                        #   in Loop: Header=BB129_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB129_36
.LBB129_43:                             # %for.end105
	jmp	.LBB129_44
.LBB129_44:                             # %if.end106
	cmpl	$1534928520, -60(%rbp)  # imm = 0x5B7D2688
	jne	.LBB129_46
.LBB129_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB129_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB129_45
.Lfunc_end129:
	.size	buf2img.93, .Lfunc_end129-buf2img.93
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.94
	.type	find_distortion.94,@function
find_distortion.94:                     # @find_distortion.94
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$236313402, -44(%rbp)   # imm = 0xE15DB3A
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB130_20
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB130_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB130_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB130_2 Depth=1
	movl	$0, -12(%rbp)
.LBB130_4:                              # %for.cond3
                                        #   Parent Loop BB130_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB130_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB130_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB130_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB130_4
.LBB130_7:                              # %for.end
                                        #   in Loop: Header=BB130_2 Depth=1
	jmp	.LBB130_8
.LBB130_8:                              # %for.inc17
                                        #   in Loop: Header=BB130_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB130_2
.LBB130_9:                              # %for.end19
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB130_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB130_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB130_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB130_11 Depth=1
	movl	$0, -12(%rbp)
.LBB130_13:                             # %for.cond27
                                        #   Parent Loop BB130_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB130_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB130_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB130_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB130_13
.LBB130_16:                             # %for.end71
                                        #   in Loop: Header=BB130_11 Depth=1
	jmp	.LBB130_17
.LBB130_17:                             # %for.inc72
                                        #   in Loop: Header=BB130_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB130_11
.LBB130_18:                             # %for.end74
	jmp	.LBB130_19
.LBB130_19:                             # %if.end
	jmp	.LBB130_39
.LBB130_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB130_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB130_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB130_21 Depth=1
	movl	$0, -12(%rbp)
.LBB130_23:                             # %for.cond80
                                        #   Parent Loop BB130_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB130_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB130_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB130_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB130_23
.LBB130_26:                             # %for.end104
                                        #   in Loop: Header=BB130_21 Depth=1
	jmp	.LBB130_27
.LBB130_27:                             # %for.inc105
                                        #   in Loop: Header=BB130_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB130_21
.LBB130_28:                             # %for.end107
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB130_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB130_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB130_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB130_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB130_30 Depth=1
	movl	$0, -12(%rbp)
.LBB130_32:                             # %for.cond117
                                        #   Parent Loop BB130_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB130_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB130_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB130_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB130_32
.LBB130_35:                             # %for.end163
                                        #   in Loop: Header=BB130_30 Depth=1
	jmp	.LBB130_36
.LBB130_36:                             # %for.inc164
                                        #   in Loop: Header=BB130_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB130_30
.LBB130_37:                             # %for.end166
	jmp	.LBB130_38
.LBB130_38:                             # %if.end167
	jmp	.LBB130_39
.LBB130_39:                             # %if.end168
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$236313402, -44(%rbp)   # imm = 0xE15DB3A
	jne	.LBB130_41
.LBB130_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB130_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB130_40
.Lfunc_end130:
	.size	find_distortion.94, .Lfunc_end130-find_distortion.94
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.95       # -- Begin function code_a_picture.95
	.p2align	4, 0x90
	.type	code_a_picture.95,@function
code_a_picture.95:                      # @code_a_picture.95
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1461149980, -28(%rbp)  # imm = 0x5717611C
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB131_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB131_8
.LBB131_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB131_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB131_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB131_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB131_7
.LBB131_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB131_7:                              # %land.end
.LBB131_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB131_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB131_10:                             # %if.end
	jmp	.LBB131_11
.LBB131_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB131_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB131_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB131_11 Depth=1
	jmp	.LBB131_13
.LBB131_13:                             # %while.cond15
                                        #   Parent Loop BB131_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB131_14
	jmp	.LBB131_15
.LBB131_14:                             # %while.body19
                                        #   in Loop: Header=BB131_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB131_13
.LBB131_15:                             # %while.end
                                        #   in Loop: Header=BB131_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB131_11
.LBB131_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB131_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB131_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB131_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB131_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB131_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB131_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB131_19
.LBB131_22:                             # %for.end
	jmp	.LBB131_23
.LBB131_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB131_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB131_25:                             # %if.end34
	cmpl	$1461149980, -28(%rbp)  # imm = 0x5717611C
	jne	.LBB131_27
.LBB131_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB131_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB131_26
.Lfunc_end131:
	.size	code_a_picture.95, .Lfunc_end131-code_a_picture.95
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.96     # -- Begin function encode_one_frame.96
	.p2align	4, 0x90
	.type	encode_one_frame.96,@function
encode_one_frame.96:                    # @encode_one_frame.96
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1721554945, -36(%rbp)  # imm = 0x669CD801
	movl	$0, -56(%rbp)
	movl	$0, -48(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -68(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -60(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB132_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB132_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB132_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB132_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB132_9
.LBB132_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB132_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB132_8
.LBB132_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB132_8:                              # %if.end21
	jmp	.LBB132_9
.LBB132_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB132_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB132_38
.LBB132_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB132_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB132_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB132_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB132_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB132_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB132_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB132_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB132_20
.LBB132_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB132_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB132_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB132_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB132_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB132_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB132_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB132_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB132_29
.LBB132_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB132_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB132_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB132_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB132_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB132_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB132_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB132_35
.LBB132_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB132_35:                             # %if.end89
	jmp	.LBB132_37
.LBB132_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB132_37:                             # %if.end92
	jmp	.LBB132_38
.LBB132_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB132_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB132_41
.LBB132_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB132_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB132_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB132_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB132_45
# %bb.44:                               # %if.then109
	movl	-48(%rbp), %edi
	vmovss	-64(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-24(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-60(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB132_54
.LBB132_45:                             # %if.else112
	movl	-56(%rbp), %edi
	vmovss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-68(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB132_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB132_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB132_53
.LBB132_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB132_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB132_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB132_52
.LBB132_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB132_52:                             # %if.end130
	jmp	.LBB132_53
.LBB132_53:                             # %if.end131
	jmp	.LBB132_54
.LBB132_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB132_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB132_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB132_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB132_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB132_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB132_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB132_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB132_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB132_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB132_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB132_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB132_66:                             # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB132_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB132_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB132_70
.LBB132_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB132_70:                             # %if.end171
	jmp	.LBB132_81
.LBB132_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB132_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB132_80
.LBB132_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB132_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB132_79
.LBB132_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB132_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB132_78
.LBB132_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB132_78:                             # %if.end187
	jmp	.LBB132_79
.LBB132_79:                             # %if.end188
	jmp	.LBB132_80
.LBB132_80:                             # %if.end189
	jmp	.LBB132_81
.LBB132_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB132_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB132_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB132_85
.LBB132_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB132_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB132_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB132_88
.LBB132_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB132_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB132_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB132_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB132_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB132_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB132_110
.LBB132_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB132_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB132_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB132_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB132_98
.LBB132_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB132_98:                             # %if.end239
	jmp	.LBB132_99
.LBB132_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB132_104
	jmp	.LBB132_100
.LBB132_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB132_102
	jmp	.LBB132_101
.LBB132_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB132_103
	jmp	.LBB132_108
.LBB132_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB132_109
.LBB132_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB132_109
.LBB132_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB132_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB132_107
.LBB132_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB132_107:                            # %if.end261
	jmp	.LBB132_109
.LBB132_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB132_109:                            # %sw.epilog
	jmp	.LBB132_110
.LBB132_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB132_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB132_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB132_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB132_119
.LBB132_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB132_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB132_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB132_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB132_118:                            # %if.end292
	jmp	.LBB132_119
.LBB132_119:                            # %if.end293
	jmp	.LBB132_120
.LBB132_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB132_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB132_123
.LBB132_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB132_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$1721554945, -36(%rbp)  # imm = 0x669CD801
	jne	.LBB132_125
.LBB132_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB132_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB132_124
.Lfunc_end132:
	.size	encode_one_frame.96, .Lfunc_end132-encode_one_frame.96
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.97
	.type	ReadOneFrame.97,@function
ReadOneFrame.97:                        # @ReadOneFrame.97
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$769416863, -68(%rbp)   # imm = 0x2DDC5E9F
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -36(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-28(%rbp), %eax
	imull	-32(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-44(%rbp), %eax
	imull	-36(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-72(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB133_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB133_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	imull	-32(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB133_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB133_4:                              # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB133_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB133_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB133_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB133_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB133_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB133_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB133_26
# %bb.11:                               # %if.then42
	cmpl	$0, -40(%rbp)
	je	.LBB133_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB133_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB133_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB133_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB133_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB133_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB133_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -40(%rbp)
	je	.LBB133_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB133_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB133_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB133_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -40(%rbp)
	je	.LBB133_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB133_24:                             # %if.end85
	jmp	.LBB133_25
.LBB133_25:                             # %if.end86
	jmp	.LBB133_27
.LBB133_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB133_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$769416863, -68(%rbp)   # imm = 0x2DDC5E9F
	jne	.LBB133_29
.LBB133_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB133_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB133_28
.Lfunc_end133:
	.size	ReadOneFrame.97, .Lfunc_end133-ReadOneFrame.97
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.98     # -- Begin function encode_one_frame.98
	.p2align	4, 0x90
	.type	encode_one_frame.98,@function
encode_one_frame.98:                    # @encode_one_frame.98
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$544295049, -36(%rbp)   # imm = 0x20714889
	movl	$0, -68(%rbp)
	movl	$0, -24(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -40(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -60(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -48(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB134_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB134_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB134_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -52(%rbp)
	movl	-52(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB134_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB134_9
.LBB134_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB134_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB134_8
.LBB134_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB134_8:                              # %if.end21
	jmp	.LBB134_9
.LBB134_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB134_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB134_38
.LBB134_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB134_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB134_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB134_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB134_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB134_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB134_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB134_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB134_20
.LBB134_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB134_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB134_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB134_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB134_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB134_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB134_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB134_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB134_29
.LBB134_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB134_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB134_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB134_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB134_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB134_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -44(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB134_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB134_35
.LBB134_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB134_35:                             # %if.end89
	jmp	.LBB134_37
.LBB134_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB134_37:                             # %if.end92
	jmp	.LBB134_38
.LBB134_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB134_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB134_41
.LBB134_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB134_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB134_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB134_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB134_45
# %bb.44:                               # %if.then109
	movl	-24(%rbp), %edi
	vmovss	-60(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-64(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-48(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB134_54
.LBB134_45:                             # %if.else112
	movl	-68(%rbp), %edi
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-56(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB134_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB134_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB134_53
.LBB134_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB134_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB134_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB134_52
.LBB134_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB134_52:                             # %if.end130
	jmp	.LBB134_53
.LBB134_53:                             # %if.end131
	jmp	.LBB134_54
.LBB134_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB134_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB134_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB134_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB134_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB134_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB134_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB134_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB134_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB134_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB134_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB134_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB134_66:                             # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB134_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB134_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB134_70
.LBB134_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB134_70:                             # %if.end171
	jmp	.LBB134_81
.LBB134_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB134_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB134_80
.LBB134_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB134_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB134_79
.LBB134_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB134_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB134_78
.LBB134_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB134_78:                             # %if.end187
	jmp	.LBB134_79
.LBB134_79:                             # %if.end188
	jmp	.LBB134_80
.LBB134_80:                             # %if.end189
	jmp	.LBB134_81
.LBB134_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB134_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB134_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB134_85
.LBB134_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB134_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB134_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB134_88
.LBB134_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB134_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB134_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB134_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB134_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB134_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB134_110
.LBB134_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB134_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB134_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB134_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB134_98
.LBB134_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB134_98:                             # %if.end239
	jmp	.LBB134_99
.LBB134_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB134_104
	jmp	.LBB134_100
.LBB134_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB134_102
	jmp	.LBB134_101
.LBB134_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB134_103
	jmp	.LBB134_108
.LBB134_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB134_109
.LBB134_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB134_109
.LBB134_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB134_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB134_107
.LBB134_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB134_107:                            # %if.end261
	jmp	.LBB134_109
.LBB134_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB134_109:                            # %sw.epilog
	jmp	.LBB134_110
.LBB134_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB134_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB134_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB134_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB134_119
.LBB134_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB134_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB134_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB134_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB134_118:                            # %if.end292
	jmp	.LBB134_119
.LBB134_119:                            # %if.end293
	jmp	.LBB134_120
.LBB134_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB134_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB134_123
.LBB134_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB134_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$544295049, -36(%rbp)   # imm = 0x20714889
	jne	.LBB134_125
.LBB134_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB134_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB134_124
.Lfunc_end134:
	.size	encode_one_frame.98, .Lfunc_end134-encode_one_frame.98
	.cfi_endproc
                                        # -- End function
	.globl	encode_one_frame.99     # -- Begin function encode_one_frame.99
	.p2align	4, 0x90
	.type	encode_one_frame.99,@function
encode_one_frame.99:                    # @encode_one_frame.99
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$136, %rsp
	.cfi_offset %rbx, -24
	movl	$1882658092, -40(%rbp)  # imm = 0x7037152C
	movl	$0, -60(%rbp)
	movl	$0, -52(%rbp)
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, -48(%rbp)
	vmovss	%xmm0, -28(%rbp)
	vmovss	%xmm0, -32(%rbp)
	vmovss	%xmm0, -24(%rbp)
	vmovss	%xmm0, -56(%rbp)
	vmovss	%xmm0, -64(%rbp)
	vmovss	%xmm0, -44(%rbp)
	vmovss	%xmm0, -36(%rbp)
	movl	$0, -16(%rbp)
	movl	$0, me_time
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture
	movq	$0, enc_frame_picture2
	movq	$0, enc_frame_picture3
	leaq	-128(%rbp), %rdi
	callq	ftime
	leaq	-88(%rbp), %rdi
	callq	time
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	input, %rax
	cmpl	$0, 56(%rax)
	je	.LBB135_3
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB135_3
# %bb.2:                                # %if.then
	xorl	%edi, %edi
	xorl	%esi, %esi
	callq	write_PPS
	movq	stats, %rcx
	movl	%eax, 1492(%rcx)
	movq	stats, %rax
	movl	1492(%rax), %eax
	movq	stats, %rcx
	addl	1488(%rcx), %eax
	movl	%eax, 1488(%rcx)
.LBB135_3:                              # %if.end
	callq	put_buffer_frame
	callq	init_frame
	callq	CalculateFrameNumber
	movl	%eax, -68(%rbp)
	movl	-68(%rbp), %edi
	movq	input, %rax
	movl	220(%rax), %esi
	movq	input, %rax
	movl	64(%rax), %edx
	movq	input, %rax
	movl	68(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	callq	ReadOneFrame
	movq	input, %rax
	movl	64(%rax), %edi
	movq	input, %rax
	movl	68(%rax), %esi
	movq	img, %rax
	movl	52(%rax), %edx
	movq	img, %rax
	movl	60(%rax), %ecx
	movq	input, %rax
	movl	3308(%rax), %r8d
	movq	input, %rax
	movl	3304(%rax), %r9d
	movq	img, %rax
	movl	56(%rax), %eax
	movq	img, %rbx
	movl	64(%rbx), %ebx
	movl	%eax, (%rsp)
	movl	%ebx, 8(%rsp)
	callq	PaddAutoCropBorders
	movq	input, %rax
	movl	1248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71996(%rcx)
	movq	input, %rax
	movl	2928(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71984(%rcx)
	movq	input, %rax
	movl	2932(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71988(%rcx)
	movq	input, %rax
	movl	2936(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71992(%rcx)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB135_5
# %bb.4:                                # %if.then14
	movl	Bframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Bframe_ctr
	jmp	.LBB135_9
.LBB135_5:                              # %if.else
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB135_7
# %bb.6:                                # %if.then17
	movl	Iframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Iframe_ctr
	jmp	.LBB135_8
.LBB135_7:                              # %if.else19
	movl	Pframe_ctr, %eax
	addl	$1, %eax
	movl	%eax, Pframe_ctr
.LBB135_8:                              # %if.end21
	jmp	.LBB135_9
.LBB135_9:                              # %if.end22
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB135_11
# %bb.10:                               # %if.then24
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	img, %rax
	movl	$1, 71800(%rax)
	jmp	.LBB135_38
.LBB135_11:                             # %if.else25
	movq	img, %rax
	movl	$0, 72600(%rax)
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB135_13
# %bb.12:                               # %if.then28
	movl	$1, mb_adaptive
.LBB135_13:                             # %if.end29
	movq	img, %rax
	movl	$0, 72444(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB135_21
# %bb.14:                               # %if.then32
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB135_19
# %bb.15:                               # %land.lhs.true35
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	cmpl	72608(%rcx), %eax
	jge	.LBB135_19
# %bb.16:                               # %land.lhs.true37
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB135_19
# %bb.17:                               # %land.lhs.true40
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB135_19
# %bb.18:                               # %if.then42
	movq	input, %rax
	movl	3248(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	jmp	.LBB135_20
.LBB135_19:                             # %if.else44
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
.LBB135_20:                             # %if.end47
	movl	$1, %edi
	xorl	%esi, %esi
	movl	$1, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -92(%rbp)
	movl	$0, QP
.LBB135_21:                             # %if.end50
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB135_23
# %bb.22:                               # %if.then52
	movq	img, %rax
	movl	$0, 72596(%rax)
.LBB135_23:                             # %if.end53
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB135_25
# %bb.24:                               # %if.then55
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB135_25:                             # %if.end56
	movq	frame_pic, %rdi
	xorl	%esi, %esi
	callq	frame_picture
	movq	input, %rax
	cmpl	$0, 1300(%rax)
	jne	.LBB135_27
# %bb.26:                               # %lor.lhs.false
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB135_29
.LBB135_27:                             # %land.lhs.true60
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB135_29
# %bb.28:                               # %if.then62
	callq	rdPictureCoding
.LBB135_29:                             # %if.end63
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB135_31
# %bb.30:                               # %if.then66
	movl	$0, mb_adaptive
.LBB135_31:                             # %if.end67
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB135_36
# %bb.32:                               # %if.then70
	movq	img, %rax
	movl	$1, 72600(%rax)
	movq	img, %rax
	movl	$0, 72624(%rax)
	movq	img, %rax
	movl	$0, 72628(%rax)
	movq	img, %rax
	movl	$1, 72444(%rax)
	movq	top_pic, %rdi
	movq	bottom_pic, %rsi
	callq	field_picture
	movq	top_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	top_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	top_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -56(%rbp)
	movq	frame_pic, %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	frame_pic, %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	frame_pic, %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -48(%rbp)
	movq	frame_pic, %rdi
	movq	top_pic, %rsi
	movq	bottom_pic, %rdx
	callq	picture_structure_decision
	movq	img, %rcx
	movl	%eax, 71800(%rcx)
	movq	img, %rax
	movl	71800(%rax), %edi
	callq	update_field_frame_contexts
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	jne	.LBB135_34
# %bb.33:                               # %if.then86
	movq	img, %rax
	movl	$1, 72604(%rax)
	jmp	.LBB135_35
.LBB135_34:                             # %if.else87
	movq	img, %rax
	movl	$0, 72604(%rax)
.LBB135_35:                             # %if.end89
	jmp	.LBB135_37
.LBB135_36:                             # %if.else90
	movq	img, %rax
	movl	$0, 71800(%rax)
.LBB135_37:                             # %if.end92
	jmp	.LBB135_38
.LBB135_38:                             # %if.end93
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB135_40
# %bb.39:                               # %if.then96
	movq	stats, %rax
	movl	1472(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
	jmp	.LBB135_41
.LBB135_40:                             # %if.else98
	movq	stats, %rax
	movl	1468(%rax), %eax
	movq	stats, %rcx
	addl	28(%rcx), %eax
	movl	%eax, 28(%rcx)
.LBB135_41:                             # %if.end101
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB135_43
# %bb.42:                               # %if.then104
	movq	img, %rax
	movl	71800(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71872(%rcx)
.LBB135_43:                             # %if.end106
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB135_45
# %bb.44:                               # %if.then109
	movl	-52(%rbp), %edi
	vmovss	-64(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	field_mode_buffer
	movq	top_pic, %rdi
	callq	writeout_picture
	movq	bottom_pic, %rdi
	callq	writeout_picture
	jmp	.LBB135_54
.LBB135_45:                             # %if.else112
	movl	-60(%rbp), %edi
	vmovss	-28(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-32(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	vmovss	-24(%rbp), %xmm2        # xmm2 = mem[0],zero,zero,zero
	callq	frame_mode_buffer
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB135_48
# %bb.46:                               # %land.lhs.true115
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB135_48
# %bb.47:                               # %if.then118
	movq	frame_pic3, %rdi
	callq	writeout_picture
	jmp	.LBB135_53
.LBB135_48:                             # %if.else120
	movq	input, %rax
	cmpl	$0, 1296(%rax)
	je	.LBB135_51
# %bb.49:                               # %land.lhs.true123
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB135_51
# %bb.50:                               # %if.then126
	movq	frame_pic2, %rdi
	callq	writeout_picture
	jmp	.LBB135_52
.LBB135_51:                             # %if.else128
	movq	frame_pic, %rdi
	callq	writeout_picture
.LBB135_52:                             # %if.end130
	jmp	.LBB135_53
.LBB135_53:                             # %if.end131
	jmp	.LBB135_54
.LBB135_54:                             # %if.end132
	cmpq	$0, frame_pic3
	je	.LBB135_56
# %bb.55:                               # %if.then134
	movq	frame_pic3, %rdi
	callq	free_slice_list
.LBB135_56:                             # %if.end135
	cmpq	$0, frame_pic2
	je	.LBB135_58
# %bb.57:                               # %if.then137
	movq	frame_pic2, %rdi
	callq	free_slice_list
.LBB135_58:                             # %if.end138
	cmpq	$0, frame_pic
	je	.LBB135_60
# %bb.59:                               # %if.then140
	movq	frame_pic, %rdi
	callq	free_slice_list
.LBB135_60:                             # %if.end141
	cmpq	$0, top_pic
	je	.LBB135_62
# %bb.61:                               # %if.then143
	movq	top_pic, %rdi
	callq	free_slice_list
.LBB135_62:                             # %if.end144
	cmpq	$0, bottom_pic
	je	.LBB135_64
# %bb.63:                               # %if.then146
	movq	bottom_pic, %rdi
	callq	free_slice_list
.LBB135_64:                             # %if.end147
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB135_66
# %bb.65:                               # %if.then150
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	movl	-16(%rbp), %edi
	callq	rc_update_pict_frame
.LBB135_66:                             # %if.end151
	callq	find_snr
	leaq	-80(%rbp), %rdi
	callq	time
	leaq	-112(%rbp), %rdi
	callq	ftime
	imulq	$1000, -80(%rbp), %rax  # imm = 0x3E8
	movzwl	-104(%rbp), %ecx
	addq	%rcx, %rax
	imulq	$1000, -88(%rbp), %rcx  # imm = 0x3E8
	movzwl	-120(%rbp), %edx
	addq	%rdx, %rcx
	subq	%rcx, %rax
	movl	%eax, -12(%rbp)
	movl	tot_time, %eax
	addl	-12(%rbp), %eax
	movl	%eax, tot_time
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB135_71
# %bb.67:                               # %if.then166
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB135_69
# %bb.68:                               # %if.then169
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	jmp	.LBB135_70
.LBB135_69:                             # %if.else170
	movq	enc_frame_picture, %rdi
	callq	replace_top_pic_with_frame
	movq	enc_bottom_picture, %rdi
	callq	free_storable_picture
.LBB135_70:                             # %if.end171
	jmp	.LBB135_81
.LBB135_71:                             # %if.else172
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB135_73
# %bb.72:                               # %if.then175
	movq	enc_bottom_picture, %rdi
	callq	store_picture_in_dpb
	jmp	.LBB135_80
.LBB135_73:                             # %if.else176
	movq	img, %rax
	cmpl	$2, 71804(%rax)
	jne	.LBB135_75
# %bb.74:                               # %if.then180
	movq	enc_frame_picture3, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	jmp	.LBB135_79
.LBB135_75:                             # %if.else181
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB135_77
# %bb.76:                               # %if.then185
	movq	enc_frame_picture2, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
	jmp	.LBB135_78
.LBB135_77:                             # %if.else186
	movq	enc_frame_picture, %rdi
	callq	store_picture_in_dpb
	movq	enc_frame_picture2, %rdi
	callq	free_storable_picture
	movq	enc_frame_picture3, %rdi
	callq	free_storable_picture
.LBB135_78:                             # %if.end187
	jmp	.LBB135_79
.LBB135_79:                             # %if.end188
	jmp	.LBB135_80
.LBB135_80:                             # %if.end189
	jmp	.LBB135_81
.LBB135_81:                             # %if.end190
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	cltq
	movq	total_frame_buffer, %rcx
	movq	%rax, Bit_Buffer(,%rcx,8)
	movq	total_frame_buffer, %rax
	addq	$1, %rax
	movq	%rax, total_frame_buffer
	movq	img, %rax
	cmpl	$2, 72404(%rax)
	jne	.LBB135_89
# %bb.82:                               # %if.then198
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jne	.LBB135_84
# %bb.83:                               # %if.then200
	movl	encode_one_frame.consecutive_non_reference_pictures, %eax
	addl	$1, %eax
	movl	%eax, encode_one_frame.consecutive_non_reference_pictures
	jmp	.LBB135_85
.LBB135_84:                             # %if.else202
	movl	$0, encode_one_frame.consecutive_non_reference_pictures
.LBB135_85:                             # %if.end203
	movl	frame_no, %eax
	cmpl	encode_one_frame.prev_frame_no, %eax
	jl	.LBB135_87
# %bb.86:                               # %lor.lhs.false206
	cmpl	$1, encode_one_frame.consecutive_non_reference_pictures
	jle	.LBB135_88
.LBB135_87:                             # %if.then209
	movabsq	$.L.str, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB135_88:                             # %if.end210
	movl	frame_no, %eax
	movl	%eax, encode_one_frame.prev_frame_no
.LBB135_89:                             # %if.end211
	movq	stats, %rax
	cmpl	$0, 1492(%rax)
	je	.LBB135_91
# %bb.90:                               # %if.then215
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportNALNonVLCBits
.LBB135_91:                             # %if.end216
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB135_93
# %bb.92:                               # %if.then221
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportFirstframe
	jmp	.LBB135_110
.LBB135_93:                             # %if.else222
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB135_99
# %bb.94:                               # %if.then225
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB135_97
# %bb.95:                               # %land.lhs.true228
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB135_97
# %bb.96:                               # %if.then231
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB135_98
.LBB135_97:                             # %if.else235
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Pprev_bits, %eax
	movl	%eax, -16(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Pprev_bits
.LBB135_98:                             # %if.end239
	jmp	.LBB135_99
.LBB135_99:                             # %if.end240
	movq	img(%rip), %rax
	movl	24(%rax), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB135_104
	jmp	.LBB135_100
.LBB135_100:                            # %if.end240
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB135_102
	jmp	.LBB135_101
.LBB135_101:                            # %if.end240
	subl	$3, %eax
	je	.LBB135_103
	jmp	.LBB135_108
.LBB135_102:                            # %sw.bb
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	704(%rcx), %eax
	movl	%eax, 704(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportIntra
	jmp	.LBB135_109
.LBB135_103:                            # %sw.bb246
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportSP
	jmp	.LBB135_109
.LBB135_104:                            # %sw.bb251
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	712(%rcx), %eax
	movl	%eax, 712(%rcx)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	jle	.LBB135_106
# %bb.105:                              # %if.then259
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportRB
	jmp	.LBB135_107
.LBB135_106:                            # %if.else260
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportB
.LBB135_107:                            # %if.end261
	jmp	.LBB135_109
.LBB135_108:                            # %sw.default
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movq	stats, %rcx
	addl	708(%rcx), %eax
	movl	%eax, 708(%rcx)
	movl	-12(%rbp), %edi
	movl	me_time, %esi
	callq	ReportP
.LBB135_109:                            # %sw.epilog
	jmp	.LBB135_110
.LBB135_110:                            # %if.end267
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 20(%rcx)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB135_120
# %bb.111:                              # %if.then272
	movl	-16(%rbp), %edi
	callq	rc_update_pict
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB135_114
# %bb.112:                              # %land.lhs.true276
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	je	.LBB135_114
# %bb.113:                              # %if.then279
	movb	$0, %al
	callq	updateRCModel
	jmp	.LBB135_119
.LBB135_114:                            # %if.else280
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB135_118
# %bb.115:                              # %land.lhs.true284
	movq	active_sps, %rax
	cmpl	$0, 1148(%rax)
	jne	.LBB135_118
# %bb.116:                              # %land.lhs.true287
	movq	img, %rax
	cmpl	$0, 72612(%rax)
	jne	.LBB135_118
# %bb.117:                              # %if.then291
	movb	$0, %al
	callq	updateRCModel
.LBB135_118:                            # %if.end292
	jmp	.LBB135_119
.LBB135_119:                            # %if.end293
	jmp	.LBB135_120
.LBB135_120:                            # %if.end294
	movq	stats, %rax
	movl	$0, 1492(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB135_122
# %bb.121:                              # %if.then300
	movl	$0, -20(%rbp)
	jmp	.LBB135_123
.LBB135_122:                            # %if.else301
	movl	$1, -20(%rbp)
.LBB135_123:                            # %return
	movl	-20(%rbp), %ebx
	cmpl	$1882658092, -40(%rbp)  # imm = 0x7037152C
	jne	.LBB135_125
.LBB135_124:
	movl	%ebx, %eax
	addq	$136, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB135_125:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB135_124
.Lfunc_end135:
	.size	encode_one_frame.99, .Lfunc_end135-encode_one_frame.99
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.100  # -- Begin function UnifiedOneForthPix.100
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.100,@function
UnifiedOneForthPix.100:                 # @UnifiedOneForthPix.100
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1667822670, -108(%rbp) # imm = 0x6368F44E
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB136_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB136_3
.LBB136_2:                              # %if.then
	jmp	.LBB136_266
.LBB136_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB136_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB136_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB136_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB136_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB136_11
.LBB136_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB136_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB136_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB136_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB136_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB136_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB136_14:                             # %for.cond49
                                        #   Parent Loop BB136_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB136_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB136_18
.LBB136_17:                             # %cond.false
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-48(%rbp), %eax
.LBB136_18:                             # %cond.end
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB136_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_24
.LBB136_20:                             # %cond.false63
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB136_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB136_23
.LBB136_22:                             # %cond.false71
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-48(%rbp), %eax
.LBB136_23:                             # %cond.end72
                                        #   in Loop: Header=BB136_14 Depth=2
.LBB136_24:                             # %cond.end74
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB136_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB136_27
.LBB136_26:                             # %cond.false83
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %edx
.LBB136_27:                             # %cond.end84
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB136_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB136_33
.LBB136_29:                             # %cond.false89
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB136_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB136_32
.LBB136_31:                             # %cond.false97
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %edx
.LBB136_32:                             # %cond.end98
                                        #   in Loop: Header=BB136_14 Depth=2
.LBB136_33:                             # %cond.end100
                                        #   in Loop: Header=BB136_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB136_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB136_36
.LBB136_35:                             # %cond.false115
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB136_36:                             # %cond.end117
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB136_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB136_42
.LBB136_38:                             # %cond.false122
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB136_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB136_41
.LBB136_40:                             # %cond.false131
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB136_41:                             # %cond.end133
                                        #   in Loop: Header=BB136_14 Depth=2
.LBB136_42:                             # %cond.end135
                                        #   in Loop: Header=BB136_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB136_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB136_45
.LBB136_44:                             # %cond.false152
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB136_45:                             # %cond.end154
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB136_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB136_51
.LBB136_47:                             # %cond.false159
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB136_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB136_50
.LBB136_49:                             # %cond.false168
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB136_50:                             # %cond.end170
                                        #   in Loop: Header=BB136_14 Depth=2
.LBB136_51:                             # %cond.end172
                                        #   in Loop: Header=BB136_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB136_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB136_54
.LBB136_53:                             # %cond.false187
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB136_54:                             # %cond.end189
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB136_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB136_60
.LBB136_56:                             # %cond.false194
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB136_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB136_59
.LBB136_58:                             # %cond.false203
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB136_59:                             # %cond.end205
                                        #   in Loop: Header=BB136_14 Depth=2
.LBB136_60:                             # %cond.end207
                                        #   in Loop: Header=BB136_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB136_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB136_63
.LBB136_62:                             # %cond.false225
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB136_63:                             # %cond.end227
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB136_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB136_69
.LBB136_65:                             # %cond.false232
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB136_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB136_68
.LBB136_67:                             # %cond.false241
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB136_68:                             # %cond.end243
                                        #   in Loop: Header=BB136_14 Depth=2
.LBB136_69:                             # %cond.end245
                                        #   in Loop: Header=BB136_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB136_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB136_72
.LBB136_71:                             # %cond.false260
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB136_72:                             # %cond.end262
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB136_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB136_78
.LBB136_74:                             # %cond.false267
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB136_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB136_77
.LBB136_76:                             # %cond.false276
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB136_77:                             # %cond.end278
                                        #   in Loop: Header=BB136_14 Depth=2
.LBB136_78:                             # %cond.end280
                                        #   in Loop: Header=BB136_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB136_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB136_81
.LBB136_80:                             # %cond.false297
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB136_81:                             # %cond.end298
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB136_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB136_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB136_87
.LBB136_83:                             # %cond.false303
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB136_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB136_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB136_86
.LBB136_85:                             # %cond.false311
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB136_86:                             # %cond.end312
                                        #   in Loop: Header=BB136_14 Depth=2
.LBB136_87:                             # %cond.end314
                                        #   in Loop: Header=BB136_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB136_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB136_14
.LBB136_89:                             # %for.end
                                        #   in Loop: Header=BB136_12 Depth=1
	jmp	.LBB136_90
.LBB136_90:                             # %for.inc336
                                        #   in Loop: Header=BB136_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB136_12
.LBB136_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB136_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB136_92 Depth=1
	movl	$0, -48(%rbp)
.LBB136_94:                             # %for.cond346
                                        #   Parent Loop BB136_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB136_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB136_98
.LBB136_97:                             # %cond.false364
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB136_98:                             # %cond.end366
                                        #   in Loop: Header=BB136_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB136_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB136_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB136_101
.LBB136_100:                            # %cond.false378
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB136_101:                            # %cond.end380
                                        #   in Loop: Header=BB136_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB136_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB136_104
.LBB136_103:                            # %cond.false390
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB136_104:                            # %cond.end392
                                        #   in Loop: Header=BB136_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB136_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB136_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB136_107
.LBB136_106:                            # %cond.false405
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB136_107:                            # %cond.end407
                                        #   in Loop: Header=BB136_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB136_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB136_110
.LBB136_109:                            # %cond.false417
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB136_110:                            # %cond.end419
                                        #   in Loop: Header=BB136_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB136_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB136_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_113
.LBB136_112:                            # %cond.false442
                                        #   in Loop: Header=BB136_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB136_113:                            # %cond.end449
                                        #   in Loop: Header=BB136_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB136_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB136_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_119
.LBB136_115:                            # %cond.false454
                                        #   in Loop: Header=BB136_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB136_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB136_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_118
.LBB136_117:                            # %cond.false466
                                        #   in Loop: Header=BB136_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB136_118:                            # %cond.end473
                                        #   in Loop: Header=BB136_94 Depth=2
.LBB136_119:                            # %cond.end475
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB136_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB136_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_122
.LBB136_121:                            # %cond.false490
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB136_122:                            # %cond.end493
                                        #   in Loop: Header=BB136_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB136_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB136_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_128
.LBB136_124:                            # %cond.false498
                                        #   in Loop: Header=BB136_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB136_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB136_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_127
.LBB136_126:                            # %cond.false506
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB136_127:                            # %cond.end509
                                        #   in Loop: Header=BB136_94 Depth=2
.LBB136_128:                            # %cond.end511
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB136_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB136_94
.LBB136_130:                            # %for.end516
                                        #   in Loop: Header=BB136_92 Depth=1
	jmp	.LBB136_131
.LBB136_131:                            # %for.inc517
                                        #   in Loop: Header=BB136_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB136_92
.LBB136_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB136_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB136_133 Depth=1
	movl	$0, -44(%rbp)
.LBB136_135:                            # %for.cond533
                                        #   Parent Loop BB136_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB136_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB136_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_139
.LBB136_138:                            # %cond.false553
                                        #   in Loop: Header=BB136_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB136_139:                            # %cond.end555
                                        #   in Loop: Header=BB136_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB136_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB136_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_145
.LBB136_141:                            # %cond.false567
                                        #   in Loop: Header=BB136_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB136_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_144
.LBB136_143:                            # %cond.false579
                                        #   in Loop: Header=BB136_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB136_144:                            # %cond.end581
                                        #   in Loop: Header=BB136_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB136_145:                            # %cond.end589
                                        #   in Loop: Header=BB136_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB136_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB136_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_157
.LBB136_147:                            # %cond.false594
                                        #   in Loop: Header=BB136_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB136_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_150
.LBB136_149:                            # %cond.false607
                                        #   in Loop: Header=BB136_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB136_150:                            # %cond.end609
                                        #   in Loop: Header=BB136_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB136_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB136_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_156
.LBB136_152:                            # %cond.false621
                                        #   in Loop: Header=BB136_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB136_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_155
.LBB136_154:                            # %cond.false633
                                        #   in Loop: Header=BB136_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB136_155:                            # %cond.end635
                                        #   in Loop: Header=BB136_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB136_156:                            # %cond.end643
                                        #   in Loop: Header=BB136_135 Depth=2
.LBB136_157:                            # %cond.end645
                                        #   in Loop: Header=BB136_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB136_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB136_135
.LBB136_159:                            # %for.end650
                                        #   in Loop: Header=BB136_133 Depth=1
	jmp	.LBB136_160
.LBB136_160:                            # %for.inc651
                                        #   in Loop: Header=BB136_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB136_133
.LBB136_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB136_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB136_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB136_162 Depth=1
	movl	$0, -48(%rbp)
.LBB136_164:                            # %for.cond659
                                        #   Parent Loop BB136_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB136_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_169
.LBB136_168:                            # %cond.false681
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_169:                            # %cond.end683
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB136_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_175
.LBB136_171:                            # %cond.false696
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_174
.LBB136_173:                            # %cond.false707
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_174:                            # %cond.end709
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB136_175:                            # %cond.end718
                                        #   in Loop: Header=BB136_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB136_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB136_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_187
.LBB136_177:                            # %cond.false723
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_180
.LBB136_179:                            # %cond.false735
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_180:                            # %cond.end737
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB136_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_186
.LBB136_182:                            # %cond.false750
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_185
.LBB136_184:                            # %cond.false761
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_185:                            # %cond.end763
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB136_186:                            # %cond.end772
                                        #   in Loop: Header=BB136_164 Depth=2
.LBB136_187:                            # %cond.end774
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB136_261
.LBB136_188:                            # %if.else
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB136_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB136_192
.LBB136_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB136_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB136_226
.LBB136_192:                            # %if.then791
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_195
.LBB136_194:                            # %cond.false803
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB136_195:                            # %cond.end805
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_198
.LBB136_197:                            # %cond.false816
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_198:                            # %cond.end818
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB136_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_207
.LBB136_200:                            # %cond.false832
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_203
.LBB136_202:                            # %cond.false840
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB136_203:                            # %cond.end842
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_206
.LBB136_205:                            # %cond.false853
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_206:                            # %cond.end855
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB136_207:                            # %cond.end865
                                        #   in Loop: Header=BB136_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB136_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB136_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_225
.LBB136_209:                            # %cond.false870
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_212
.LBB136_211:                            # %cond.false879
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB136_212:                            # %cond.end881
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_215
.LBB136_214:                            # %cond.false892
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_215:                            # %cond.end894
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB136_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_224
.LBB136_217:                            # %cond.false908
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_220
.LBB136_219:                            # %cond.false916
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB136_220:                            # %cond.end918
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_223
.LBB136_222:                            # %cond.false929
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_223:                            # %cond.end931
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB136_224:                            # %cond.end941
                                        #   in Loop: Header=BB136_164 Depth=2
.LBB136_225:                            # %cond.end943
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB136_260
.LBB136_226:                            # %if.else946
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_229
.LBB136_228:                            # %cond.false962
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_229:                            # %cond.end964
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_232
.LBB136_231:                            # %cond.false973
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB136_232:                            # %cond.end975
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB136_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_241
.LBB136_234:                            # %cond.false987
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_237
.LBB136_236:                            # %cond.false999
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_237:                            # %cond.end1001
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_240
.LBB136_239:                            # %cond.false1010
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB136_240:                            # %cond.end1012
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB136_241:                            # %cond.end1020
                                        #   in Loop: Header=BB136_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB136_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB136_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB136_259
.LBB136_243:                            # %cond.false1025
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_246
.LBB136_245:                            # %cond.false1038
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_246:                            # %cond.end1040
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_249
.LBB136_248:                            # %cond.false1049
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB136_249:                            # %cond.end1051
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB136_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB136_258
.LBB136_251:                            # %cond.false1063
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB136_254
.LBB136_253:                            # %cond.false1075
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB136_254:                            # %cond.end1077
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB136_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB136_257
.LBB136_256:                            # %cond.false1086
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB136_257:                            # %cond.end1088
                                        #   in Loop: Header=BB136_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB136_258:                            # %cond.end1096
                                        #   in Loop: Header=BB136_164 Depth=2
.LBB136_259:                            # %cond.end1098
                                        #   in Loop: Header=BB136_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB136_260:                            # %if.end1101
                                        #   in Loop: Header=BB136_164 Depth=2
	jmp	.LBB136_261
.LBB136_261:                            # %if.end1102
                                        #   in Loop: Header=BB136_164 Depth=2
	jmp	.LBB136_262
.LBB136_262:                            # %for.inc1103
                                        #   in Loop: Header=BB136_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB136_164
.LBB136_263:                            # %for.end1105
                                        #   in Loop: Header=BB136_162 Depth=1
	jmp	.LBB136_264
.LBB136_264:                            # %for.inc1106
                                        #   in Loop: Header=BB136_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB136_162
.LBB136_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB136_266:                            # %return
	cmpl	$1667822670, -108(%rbp) # imm = 0x6368F44E
	jne	.LBB136_268
.LBB136_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB136_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB136_267
.Lfunc_end136:
	.size	UnifiedOneForthPix.100, .Lfunc_end136-UnifiedOneForthPix.100
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.101
	.type	PaddAutoCropBorders.101,@function
PaddAutoCropBorders.101:                # @PaddAutoCropBorders.101
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1781897552, -36(%rbp)  # imm = 0x6A359950
	movl	%edi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB137_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB137_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_3:                              # %for.cond1
                                        #   Parent Loop BB137_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB137_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB137_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB137_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_3
.LBB137_6:                              # %for.end
                                        #   in Loop: Header=BB137_1 Depth=1
	jmp	.LBB137_7
.LBB137_7:                              # %for.inc10
                                        #   in Loop: Header=BB137_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_1
.LBB137_8:                              # %for.end12
	movl	-12(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB137_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB137_9 Depth=1
	movl	$0, -4(%rbp)
.LBB137_11:                             # %for.cond16
                                        #   Parent Loop BB137_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB137_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB137_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB137_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_11
.LBB137_14:                             # %for.end30
                                        #   in Loop: Header=BB137_9 Depth=1
	jmp	.LBB137_15
.LBB137_15:                             # %for.inc31
                                        #   in Loop: Header=BB137_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_9
.LBB137_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB137_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB137_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB137_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB137_18 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB137_20:                             # %for.cond38
                                        #   Parent Loop BB137_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB137_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB137_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB137_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_20
.LBB137_23:                             # %for.end65
                                        #   in Loop: Header=BB137_18 Depth=1
	jmp	.LBB137_24
.LBB137_24:                             # %for.inc66
                                        #   in Loop: Header=BB137_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_18
.LBB137_25:                             # %for.end68
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB137_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB137_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB137_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB137_26 Depth=1
	movl	$0, -4(%rbp)
.LBB137_28:                             # %for.cond72
                                        #   Parent Loop BB137_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB137_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB137_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB137_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB137_28
.LBB137_31:                             # %for.end99
                                        #   in Loop: Header=BB137_26 Depth=1
	jmp	.LBB137_32
.LBB137_32:                             # %for.inc100
                                        #   in Loop: Header=BB137_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB137_26
.LBB137_33:                             # %for.end102
	jmp	.LBB137_34
.LBB137_34:                             # %if.end
	cmpl	$1781897552, -36(%rbp)  # imm = 0x6A359950
	jne	.LBB137_36
.LBB137_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB137_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB137_35
.Lfunc_end137:
	.size	PaddAutoCropBorders.101, .Lfunc_end137-PaddAutoCropBorders.101
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.102
	.type	field_mode_buffer.102,@function
field_mode_buffer.102:                  # @field_mode_buffer.102
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$8218982, -16(%rbp)     # imm = 0x7D6966
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$8218982, -16(%rbp)     # imm = 0x7D6966
	jne	.LBB138_2
.LBB138_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB138_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB138_1
.Lfunc_end138:
	.size	field_mode_buffer.102, .Lfunc_end138-field_mode_buffer.102
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.103       # -- Begin function MbAffPostProc.103
	.p2align	4, 0x90
	.type	MbAffPostProc.103,@function
MbAffPostProc.103:                      # @MbAffPostProc.103
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$536449950, -44(%rbp)   # imm = 0x1FF9939E
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB139_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB139_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_5 Depth 2
                                        #       Child Loop BB139_7 Depth 3
                                        #     Child Loop BB139_13 Depth 2
                                        #       Child Loop BB139_15 Depth 3
                                        #     Child Loop BB139_21 Depth 2
                                        #       Child Loop BB139_23 Depth 3
                                        #         Child Loop BB139_25 Depth 4
                                        #       Child Loop BB139_31 Depth 3
                                        #         Child Loop BB139_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB139_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB139_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB139_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB139_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB139_5:                              # %for.cond5
                                        #   Parent Loop BB139_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB139_7 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB139_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB139_5 Depth=2
	movl	$0, -8(%rbp)
.LBB139_7:                              # %for.cond8
                                        #   Parent Loop BB139_2 Depth=1
                                        #     Parent Loop BB139_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB139_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB139_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB139_7 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_7
.LBB139_10:                             # %for.end
                                        #   in Loop: Header=BB139_5 Depth=2
	jmp	.LBB139_11
.LBB139_11:                             # %for.inc20
                                        #   in Loop: Header=BB139_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_5
.LBB139_12:                             # %for.end22
                                        #   in Loop: Header=BB139_2 Depth=1
	movl	$0, -4(%rbp)
.LBB139_13:                             # %for.cond23
                                        #   Parent Loop BB139_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB139_15 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB139_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB139_13 Depth=2
	movl	$0, -8(%rbp)
.LBB139_15:                             # %for.cond26
                                        #   Parent Loop BB139_2 Depth=1
                                        #     Parent Loop BB139_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB139_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB139_15 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB139_15 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_15
.LBB139_18:                             # %for.end54
                                        #   in Loop: Header=BB139_13 Depth=2
	jmp	.LBB139_19
.LBB139_19:                             # %for.inc55
                                        #   in Loop: Header=BB139_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_13
.LBB139_20:                             # %for.end57
                                        #   in Loop: Header=BB139_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB139_21:                             # %for.cond61
                                        #   Parent Loop BB139_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB139_23 Depth 3
                                        #         Child Loop BB139_25 Depth 4
                                        #       Child Loop BB139_31 Depth 3
                                        #         Child Loop BB139_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB139_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB139_21 Depth=2
	movl	$0, -4(%rbp)
.LBB139_23:                             # %for.cond64
                                        #   Parent Loop BB139_2 Depth=1
                                        #     Parent Loop BB139_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB139_25 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB139_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB139_23 Depth=3
	movl	$0, -8(%rbp)
.LBB139_25:                             # %for.cond69
                                        #   Parent Loop BB139_2 Depth=1
                                        #     Parent Loop BB139_21 Depth=2
                                        #       Parent Loop BB139_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB139_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB139_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB139_25 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_25
.LBB139_28:                             # %for.end87
                                        #   in Loop: Header=BB139_23 Depth=3
	jmp	.LBB139_29
.LBB139_29:                             # %for.inc88
                                        #   in Loop: Header=BB139_23 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_23
.LBB139_30:                             # %for.end90
                                        #   in Loop: Header=BB139_21 Depth=2
	movl	$0, -4(%rbp)
.LBB139_31:                             # %for.cond91
                                        #   Parent Loop BB139_2 Depth=1
                                        #     Parent Loop BB139_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB139_33 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB139_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB139_31 Depth=3
	movl	$0, -8(%rbp)
.LBB139_33:                             # %for.cond95
                                        #   Parent Loop BB139_2 Depth=1
                                        #     Parent Loop BB139_21 Depth=2
                                        #       Parent Loop BB139_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB139_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB139_33 Depth=4
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB139_33 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_33
.LBB139_36:                             # %for.end130
                                        #   in Loop: Header=BB139_31 Depth=3
	jmp	.LBB139_37
.LBB139_37:                             # %for.inc131
                                        #   in Loop: Header=BB139_31 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_31
.LBB139_38:                             # %for.end133
                                        #   in Loop: Header=BB139_21 Depth=2
	jmp	.LBB139_39
.LBB139_39:                             # %for.inc134
                                        #   in Loop: Header=BB139_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB139_21
.LBB139_40:                             # %for.end136
                                        #   in Loop: Header=BB139_2 Depth=1
	jmp	.LBB139_41
.LBB139_41:                             # %if.end
                                        #   in Loop: Header=BB139_2 Depth=1
	jmp	.LBB139_42
.LBB139_42:                             # %for.inc137
                                        #   in Loop: Header=BB139_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB139_2
.LBB139_43:                             # %for.end139
	jmp	.LBB139_67
.LBB139_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB139_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB139_48 Depth 2
                                        #       Child Loop BB139_50 Depth 3
                                        #     Child Loop BB139_56 Depth 2
                                        #       Child Loop BB139_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB139_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB139_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB139_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB139_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB139_48:                             # %for.cond149
                                        #   Parent Loop BB139_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB139_50 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB139_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB139_48 Depth=2
	movl	$0, -8(%rbp)
.LBB139_50:                             # %for.cond152
                                        #   Parent Loop BB139_45 Depth=1
                                        #     Parent Loop BB139_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB139_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB139_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB139_50 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_50
.LBB139_53:                             # %for.end167
                                        #   in Loop: Header=BB139_48 Depth=2
	jmp	.LBB139_54
.LBB139_54:                             # %for.inc168
                                        #   in Loop: Header=BB139_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_48
.LBB139_55:                             # %for.end170
                                        #   in Loop: Header=BB139_45 Depth=1
	movl	$0, -4(%rbp)
.LBB139_56:                             # %for.cond171
                                        #   Parent Loop BB139_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB139_58 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB139_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB139_56 Depth=2
	movl	$0, -8(%rbp)
.LBB139_58:                             # %for.cond174
                                        #   Parent Loop BB139_45 Depth=1
                                        #     Parent Loop BB139_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB139_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB139_58 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB139_58 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB139_58
.LBB139_61:                             # %for.end203
                                        #   in Loop: Header=BB139_56 Depth=2
	jmp	.LBB139_62
.LBB139_62:                             # %for.inc204
                                        #   in Loop: Header=BB139_56 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB139_56
.LBB139_63:                             # %for.end206
                                        #   in Loop: Header=BB139_45 Depth=1
	jmp	.LBB139_64
.LBB139_64:                             # %if.end207
                                        #   in Loop: Header=BB139_45 Depth=1
	jmp	.LBB139_65
.LBB139_65:                             # %for.inc208
                                        #   in Loop: Header=BB139_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB139_45
.LBB139_66:                             # %for.end210
	jmp	.LBB139_67
.LBB139_67:                             # %if.end211
	cmpl	$536449950, -44(%rbp)   # imm = 0x1FF9939E
	jne	.LBB139_69
.LBB139_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB139_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB139_68
.Lfunc_end139:
	.size	MbAffPostProc.103, .Lfunc_end139-MbAffPostProc.103
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.104
	.type	ReadOneFrame.104,@function
ReadOneFrame.104:                       # @ReadOneFrame.104
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$1954288758, -72(%rbp)  # imm = 0x747C1476
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -36(%rbp)
	movl	%r8d, -32(%rbp)
	movl	%r9d, -44(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-28(%rbp), %eax
	imull	-36(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-32(%rbp), %eax
	imull	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-68(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB140_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB140_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -40(%rbp)
	movl	-28(%rbp), %eax
	imull	-36(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB140_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB140_4:                              # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB140_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB140_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB140_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB140_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB140_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB140_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB140_26
# %bb.11:                               # %if.then42
	cmpl	$0, -40(%rbp)
	je	.LBB140_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB140_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB140_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB140_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-36(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB140_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB140_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB140_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -40(%rbp)
	je	.LBB140_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB140_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB140_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB140_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -40(%rbp)
	je	.LBB140_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB140_24:                             # %if.end85
	jmp	.LBB140_25
.LBB140_25:                             # %if.end86
	jmp	.LBB140_27
.LBB140_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB140_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$1954288758, -72(%rbp)  # imm = 0x747C1476
	jne	.LBB140_29
.LBB140_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB140_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB140_28
.Lfunc_end140:
	.size	ReadOneFrame.104, .Lfunc_end140-ReadOneFrame.104
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function rdPictureCoding.105
	.type	rdPictureCoding.105,@function
rdPictureCoding.105:                    # @rdPictureCoding.105
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1757191279, -24(%rbp)  # imm = 0x68BC9C6F
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -4(%rbp)
	movl	intras, %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -16(%rbp)
	movl	$0, -8(%rbp)
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB141_9
# %bb.1:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB141_9
# %bb.2:                                # %if.then
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB141_7
# %bb.3:                                # %if.then5
	xorl	%edi, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB141_5
# %bb.4:                                # %if.then7
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB141_6
.LBB141_5:                              # %if.else
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB141_6:                              # %if.end
	jmp	.LBB141_8
.LBB141_7:                              # %if.else9
	movabsq	$PicParSet, %rax
	addq	$480, %rax              # imm = 0x1E0
	movq	%rax, active_pps
.LBB141_8:                              # %if.end10
	jmp	.LBB141_10
.LBB141_9:                              # %if.else11
	movq	img, %rax
	movl	40(%rax), %ecx
	subl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB141_10:                             # %if.end14
	movq	active_pps, %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movl	40(%rax), %eax
	movl	%eax, -20(%rbp)
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB141_12
# %bb.11:                               # %if.then17
	movq	img, %rax
	movl	$0, 71804(%rax)
	movq	$0, enc_frame_picture2
	jmp	.LBB141_13
.LBB141_12:                             # %if.else18
	movq	frame_pic2, %rdi
	movl	$1, %esi
	callq	frame_picture
	movq	frame_pic, %rdi
	movq	frame_pic2, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
.LBB141_13:                             # %if.end21
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB141_19
# %bb.14:                               # %if.then24
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB141_17
# %bb.15:                               # %land.lhs.true27
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB141_17
# %bb.16:                               # %if.then30
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	jmp	.LBB141_18
.LBB141_17:                             # %if.else32
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB141_18:                             # %if.end34
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB141_20
.LBB141_19:                             # %if.else35
	movl	intras, %eax
	movl	%eax, -12(%rbp)
.LBB141_20:                             # %if.end36
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB141_35
# %bb.21:                               # %land.lhs.true39
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB141_35
# %bb.22:                               # %if.then42
	movl	$0, -8(%rbp)
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB141_27
# %bb.23:                               # %if.then46
	movl	$1, %edi
	callq	test_wp_P_slice
	cmpl	$1, %eax
	jne	.LBB141_25
# %bb.24:                               # %if.then49
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB141_26
.LBB141_25:                             # %if.else50
	movq	input, %rax
	movl	1304(%rax), %eax
	movl	%eax, -8(%rbp)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movq	img, %rax
	movl	40(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 40(%rax)
.LBB141_26:                             # %if.end53
	jmp	.LBB141_34
.LBB141_27:                             # %if.else54
	xorl	%edi, %edi
	callq	test_wp_B_slice
	cmpl	$1, %eax
	jne	.LBB141_29
# %bb.28:                               # %if.then57
	movabsq	$PicParSet, %rax
	addq	$240, %rax
	movq	%rax, active_pps
	jmp	.LBB141_33
.LBB141_29:                             # %if.else58
	movq	input, %rax
	movl	1308(%rax), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB141_31
# %bb.30:                               # %if.then60
	movl	-4(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB141_32
.LBB141_31:                             # %if.else63
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB141_32:                             # %if.end66
	jmp	.LBB141_33
.LBB141_33:                             # %if.end67
	jmp	.LBB141_34
.LBB141_34:                             # %if.end68
	jmp	.LBB141_36
.LBB141_35:                             # %if.else69
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB141_36:                             # %if.end72
	movq	img, %rax
	cmpl	$0, 24(%rax)
	jne	.LBB141_40
# %bb.37:                               # %land.lhs.true75
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB141_40
# %bb.38:                               # %land.lhs.true78
	imull	$100, intras, %eax
	movq	img, %rcx
	xorl	%edx, %edx
	divl	72488(%rcx)
	cmpl	$75, %eax
	jb	.LBB141_40
# %bb.39:                               # %if.then80
	movq	img, %rax
	movl	$2, 24(%rax)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
.LBB141_40:                             # %if.end82
	movq	img, %rax
	movl	$0, 72624(%rax)
	cmpl	$0, -8(%rbp)
	je	.LBB141_42
# %bb.41:                               # %if.then85
	movq	$0, enc_frame_picture3
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB141_46
.LBB141_42:                             # %if.else87
	movq	frame_pic3, %rdi
	movl	$2, %esi
	callq	frame_picture
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB141_44
# %bb.43:                               # %if.then90
	movq	frame_pic, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	shll	$1, %eax
	movq	img, %rcx
	movl	%eax, 71804(%rcx)
	jmp	.LBB141_45
.LBB141_44:                             # %if.else94
	movq	frame_pic2, %rdi
	movq	frame_pic3, %rsi
	movl	-4(%rbp), %edx
	callq	picture_coding_decision
	movq	img, %rcx
	addl	71804(%rcx), %eax
	movl	%eax, 71804(%rcx)
.LBB141_45:                             # %if.end98
	jmp	.LBB141_46
.LBB141_46:                             # %if.end99
	movq	img, %rax
	cmpl	$0, 71804(%rax)
	jne	.LBB141_48
# %bb.47:                               # %if.then102
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movabsq	$PicParSet, %rax
	movq	%rax, active_pps
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
	jmp	.LBB141_51
.LBB141_48:                             # %if.else105
	movq	img, %rax
	cmpl	$1, 71804(%rax)
	jne	.LBB141_50
# %bb.49:                               # %if.then108
	movq	enc_frame_picture2, %rax
	movq	%rax, enc_picture
	movl	-16(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 24(%rcx)
	movq	-32(%rbp), %rax
	movq	%rax, active_pps
	movl	-20(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movl	-12(%rbp), %eax
	movl	%eax, intras
.LBB141_50:                             # %if.end111
	jmp	.LBB141_51
.LBB141_51:                             # %if.end112
	cmpl	$1757191279, -24(%rbp)  # imm = 0x68BC9C6F
	jne	.LBB141_53
.LBB141_52:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB141_53:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB141_52
.Lfunc_end141:
	.size	rdPictureCoding.105, .Lfunc_end141-rdPictureCoding.105
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.106
	.type	PaddAutoCropBorders.106,@function
PaddAutoCropBorders.106:                # @PaddAutoCropBorders.106
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1149778412, -32(%rbp)  # imm = 0x448839EC
	movl	%edi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movl	%edx, -20(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB142_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_3 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB142_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB142_1 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB142_3:                              # %for.cond1
                                        #   Parent Loop BB142_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB142_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB142_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB142_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB142_3
.LBB142_6:                              # %for.end
                                        #   in Loop: Header=BB142_1 Depth=1
	jmp	.LBB142_7
.LBB142_7:                              # %for.inc10
                                        #   in Loop: Header=BB142_1 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_1
.LBB142_8:                              # %for.end12
	movl	-12(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB142_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_11 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-28(%rbp), %eax
	jge	.LBB142_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB142_9 Depth=1
	movl	$0, -8(%rbp)
.LBB142_11:                             # %for.cond16
                                        #   Parent Loop BB142_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB142_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB142_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB142_11 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB142_11
.LBB142_14:                             # %for.end30
                                        #   in Loop: Header=BB142_9 Depth=1
	jmp	.LBB142_15
.LBB142_15:                             # %for.inc31
                                        #   in Loop: Header=BB142_9 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_9
.LBB142_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB142_34
# %bb.17:                               # %if.then
	movl	$0, -4(%rbp)
.LBB142_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_20 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB142_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB142_18 Depth=1
	movl	-36(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB142_20:                             # %for.cond38
                                        #   Parent Loop BB142_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB142_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB142_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB142_20 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB142_20
.LBB142_23:                             # %for.end65
                                        #   in Loop: Header=BB142_18 Depth=1
	jmp	.LBB142_24
.LBB142_24:                             # %for.inc66
                                        #   in Loop: Header=BB142_18 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_18
.LBB142_25:                             # %for.end68
	movl	-16(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB142_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB142_28 Depth 2
	movl	-4(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB142_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB142_26 Depth=1
	movl	$0, -8(%rbp)
.LBB142_28:                             # %for.cond72
                                        #   Parent Loop BB142_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB142_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB142_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB142_28 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB142_28
.LBB142_31:                             # %for.end99
                                        #   in Loop: Header=BB142_26 Depth=1
	jmp	.LBB142_32
.LBB142_32:                             # %for.inc100
                                        #   in Loop: Header=BB142_26 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB142_26
.LBB142_33:                             # %for.end102
	jmp	.LBB142_34
.LBB142_34:                             # %if.end
	cmpl	$1149778412, -32(%rbp)  # imm = 0x448839EC
	jne	.LBB142_36
.LBB142_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB142_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB142_35
.Lfunc_end142:
	.size	PaddAutoCropBorders.106, .Lfunc_end142-PaddAutoCropBorders.106
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.107
	.type	writeout_picture.107,@function
writeout_picture.107:                   # @writeout_picture.107
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1569643943, -28(%rbp)  # imm = 0x5D8EDDA7
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB143_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB143_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB143_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB143_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB143_3:                              # %for.cond1
                                        #   Parent Loop BB143_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB143_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB143_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB143_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB143_3
.LBB143_6:                              # %for.end
                                        #   in Loop: Header=BB143_1 Depth=1
	jmp	.LBB143_7
.LBB143_7:                              # %for.inc10
                                        #   in Loop: Header=BB143_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB143_1
.LBB143_8:                              # %for.end12
	cmpl	$1569643943, -28(%rbp)  # imm = 0x5D8EDDA7
	jne	.LBB143_10
.LBB143_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB143_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB143_9
.Lfunc_end143:
	.size	writeout_picture.107, .Lfunc_end143-writeout_picture.107
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.108
	.type	writeUnit.108,@function
writeUnit.108:                          # @writeUnit.108
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1454829560, -16(%rbp)  # imm = 0x56B6EFF8
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB144_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB144_18
.LBB144_2:                              # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB144_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB144_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB144_6
.LBB144_5:                              # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB144_6:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB144_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB144_9
.LBB144_8:                              # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB144_9:                              # %if.end21
	jmp	.LBB144_17
.LBB144_10:                             # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB144_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB144_13
.LBB144_12:                             # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB144_13:                             # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB144_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB144_16
.LBB144_15:                             # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB144_16:                             # %if.end39
	jmp	.LBB144_17
.LBB144_17:                             # %if.end40
	jmp	.LBB144_18
.LBB144_18:                             # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1454829560, -16(%rbp)  # imm = 0x56B6EFF8
	jne	.LBB144_20
.LBB144_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB144_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB144_19
.Lfunc_end144:
	.size	writeUnit.108, .Lfunc_end144-writeUnit.108
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.109             # -- Begin function buf2img.109
	.p2align	4, 0x90
	.type	buf2img.109,@function
buf2img.109:                            # @buf2img.109
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$3387750, -60(%rbp)     # imm = 0x33B166
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB145_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB145_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB145_35
# %bb.3:                                # %if.then2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB145_6
	jmp	.LBB145_4
.LBB145_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB145_15
	jmp	.LBB145_5
.LBB145_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB145_24
	jmp	.LBB145_33
.LBB145_6:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB145_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB145_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB145_7 Depth=1
	movl	$0, -8(%rbp)
.LBB145_9:                              # %for.cond5
                                        #   Parent Loop BB145_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB145_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB145_9 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB145_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB145_9
.LBB145_12:                             # %for.end
                                        #   in Loop: Header=BB145_7 Depth=1
	jmp	.LBB145_13
.LBB145_13:                             # %for.inc14
                                        #   in Loop: Header=BB145_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB145_7
.LBB145_14:                             # %for.end16
	jmp	.LBB145_34
.LBB145_15:                             # %sw.bb17
	movl	$0, -4(%rbp)
.LBB145_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB145_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB145_16 Depth=1
	movl	$0, -8(%rbp)
.LBB145_18:                             # %for.cond22
                                        #   Parent Loop BB145_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB145_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB145_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB145_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB145_18
.LBB145_21:                             # %for.end38
                                        #   in Loop: Header=BB145_16 Depth=1
	jmp	.LBB145_22
.LBB145_22:                             # %for.inc39
                                        #   in Loop: Header=BB145_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB145_16
.LBB145_23:                             # %for.end41
	jmp	.LBB145_34
.LBB145_24:                             # %sw.bb42
	movl	$0, -4(%rbp)
.LBB145_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB145_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB145_25 Depth=1
	movl	$0, -8(%rbp)
.LBB145_27:                             # %for.cond47
                                        #   Parent Loop BB145_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB145_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB145_27 Depth=2
	movq	-56(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-48(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-48(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-48(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB145_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB145_27
.LBB145_30:                             # %for.end74
                                        #   in Loop: Header=BB145_25 Depth=1
	jmp	.LBB145_31
.LBB145_31:                             # %for.inc75
                                        #   in Loop: Header=BB145_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB145_25
.LBB145_32:                             # %for.end77
	jmp	.LBB145_33
.LBB145_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB145_34:                             # %sw.epilog
	jmp	.LBB145_44
.LBB145_35:                             # %if.else
	movl	$0, -4(%rbp)
.LBB145_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB145_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB145_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB145_36 Depth=1
	movl	$0, -8(%rbp)
.LBB145_38:                             # %for.cond82
                                        #   Parent Loop BB145_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB145_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB145_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-56(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB145_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB145_38
.LBB145_41:                             # %for.end102
                                        #   in Loop: Header=BB145_36 Depth=1
	jmp	.LBB145_42
.LBB145_42:                             # %for.inc103
                                        #   in Loop: Header=BB145_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB145_36
.LBB145_43:                             # %for.end105
	jmp	.LBB145_44
.LBB145_44:                             # %if.end106
	cmpl	$3387750, -60(%rbp)     # imm = 0x33B166
	jne	.LBB145_46
.LBB145_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB145_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB145_45
.Lfunc_end145:
	.size	buf2img.109, .Lfunc_end145-buf2img.109
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function PaddAutoCropBorders.110
	.type	PaddAutoCropBorders.110,@function
PaddAutoCropBorders.110:                # @PaddAutoCropBorders.110
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	24(%rbp), %eax
	movl	16(%rbp), %eax
	movl	$1359902014, -36(%rbp)  # imm = 0x510E753E
	movl	%edi, -24(%rbp)
	movl	%esi, -16(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -32(%rbp)
	movl	%r8d, -28(%rbp)
	movl	%r9d, -20(%rbp)
	movl	$0, -8(%rbp)
.LBB146_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_3 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-16(%rbp), %eax
	jge	.LBB146_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB146_1 Depth=1
	movl	-24(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB146_3:                              # %for.cond1
                                        #   Parent Loop BB146_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB146_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB146_3 Depth=2
	movq	imgY_org_frm, %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB146_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB146_3
.LBB146_6:                              # %for.end
                                        #   in Loop: Header=BB146_1 Depth=1
	jmp	.LBB146_7
.LBB146_7:                              # %for.inc10
                                        #   in Loop: Header=BB146_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB146_1
.LBB146_8:                              # %for.end12
	movl	-16(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB146_9:                              # %for.cond13
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_11 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-32(%rbp), %eax
	jge	.LBB146_16
# %bb.10:                               # %for.body15
                                        #   in Loop: Header=BB146_9 Depth=1
	movl	$0, -4(%rbp)
.LBB146_11:                             # %for.cond16
                                        #   Parent Loop BB146_9 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB146_14
# %bb.12:                               # %for.body18
                                        #   in Loop: Header=BB146_11 Depth=2
	movq	imgY_org_frm, %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgY_org_frm, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.13:                               # %for.inc28
                                        #   in Loop: Header=BB146_11 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB146_11
.LBB146_14:                             # %for.end30
                                        #   in Loop: Header=BB146_9 Depth=1
	jmp	.LBB146_15
.LBB146_15:                             # %for.inc31
                                        #   in Loop: Header=BB146_9 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB146_9
.LBB146_16:                             # %for.end33
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB146_34
# %bb.17:                               # %if.then
	movl	$0, -8(%rbp)
.LBB146_18:                             # %for.cond35
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_20 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB146_25
# %bb.19:                               # %for.body37
                                        #   in Loop: Header=BB146_18 Depth=1
	movl	-28(%rbp), %eax
	movl	%eax, -4(%rbp)
.LBB146_20:                             # %for.cond38
                                        #   Parent Loop BB146_18 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB146_23
# %bb.21:                               # %for.body40
                                        #   in Loop: Header=BB146_20 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-4(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.22:                               # %for.inc63
                                        #   in Loop: Header=BB146_20 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB146_20
.LBB146_23:                             # %for.end65
                                        #   in Loop: Header=BB146_18 Depth=1
	jmp	.LBB146_24
.LBB146_24:                             # %for.inc66
                                        #   in Loop: Header=BB146_18 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB146_18
.LBB146_25:                             # %for.end68
	movl	-20(%rbp), %eax
	movl	%eax, -8(%rbp)
.LBB146_26:                             # %for.cond69
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB146_28 Depth 2
	movl	-8(%rbp), %eax
	cmpl	24(%rbp), %eax
	jge	.LBB146_33
# %bb.27:                               # %for.body71
                                        #   in Loop: Header=BB146_26 Depth=1
	movl	$0, -4(%rbp)
.LBB146_28:                             # %for.cond72
                                        #   Parent Loop BB146_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	16(%rbp), %eax
	jge	.LBB146_31
# %bb.29:                               # %for.body74
                                        #   in Loop: Header=BB146_28 Depth=2
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rax
	movl	-8(%rbp), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	imgUV_org_frm, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.30:                               # %for.inc97
                                        #   in Loop: Header=BB146_28 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB146_28
.LBB146_31:                             # %for.end99
                                        #   in Loop: Header=BB146_26 Depth=1
	jmp	.LBB146_32
.LBB146_32:                             # %for.inc100
                                        #   in Loop: Header=BB146_26 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB146_26
.LBB146_33:                             # %for.end102
	jmp	.LBB146_34
.LBB146_34:                             # %if.end
	cmpl	$1359902014, -36(%rbp)  # imm = 0x510E753E
	jne	.LBB146_36
.LBB146_35:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB146_36:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB146_35
.Lfunc_end146:
	.size	PaddAutoCropBorders.110, .Lfunc_end146-PaddAutoCropBorders.110
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.111
	.type	find_distortion.111,@function
find_distortion.111:                    # @find_distortion.111
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1374413294, -44(%rbp)  # imm = 0x51EBE1EE
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB147_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB147_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB147_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB147_2 Depth=1
	movl	$0, -12(%rbp)
.LBB147_4:                              # %for.cond3
                                        #   Parent Loop BB147_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB147_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB147_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB147_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_4
.LBB147_7:                              # %for.end
                                        #   in Loop: Header=BB147_2 Depth=1
	jmp	.LBB147_8
.LBB147_8:                              # %for.inc17
                                        #   in Loop: Header=BB147_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB147_2
.LBB147_9:                              # %for.end19
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB147_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB147_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB147_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB147_11 Depth=1
	movl	$0, -12(%rbp)
.LBB147_13:                             # %for.cond27
                                        #   Parent Loop BB147_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB147_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB147_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB147_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_13
.LBB147_16:                             # %for.end71
                                        #   in Loop: Header=BB147_11 Depth=1
	jmp	.LBB147_17
.LBB147_17:                             # %for.inc72
                                        #   in Loop: Header=BB147_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB147_11
.LBB147_18:                             # %for.end74
	jmp	.LBB147_19
.LBB147_19:                             # %if.end
	jmp	.LBB147_39
.LBB147_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB147_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB147_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB147_21 Depth=1
	movl	$0, -12(%rbp)
.LBB147_23:                             # %for.cond80
                                        #   Parent Loop BB147_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB147_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB147_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB147_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_23
.LBB147_26:                             # %for.end104
                                        #   in Loop: Header=BB147_21 Depth=1
	jmp	.LBB147_27
.LBB147_27:                             # %for.inc105
                                        #   in Loop: Header=BB147_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB147_21
.LBB147_28:                             # %for.end107
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB147_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB147_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB147_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB147_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB147_30 Depth=1
	movl	$0, -12(%rbp)
.LBB147_32:                             # %for.cond117
                                        #   Parent Loop BB147_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB147_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB147_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB147_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB147_32
.LBB147_35:                             # %for.end163
                                        #   in Loop: Header=BB147_30 Depth=1
	jmp	.LBB147_36
.LBB147_36:                             # %for.inc164
                                        #   in Loop: Header=BB147_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB147_30
.LBB147_37:                             # %for.end166
	jmp	.LBB147_38
.LBB147_38:                             # %if.end167
	jmp	.LBB147_39
.LBB147_39:                             # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1374413294, -44(%rbp)  # imm = 0x51EBE1EE
	jne	.LBB147_41
.LBB147_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB147_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB147_40
.Lfunc_end147:
	.size	find_distortion.111, .Lfunc_end147-find_distortion.111
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.112     # -- Begin function copy_rdopt_data.112
	.p2align	4, 0x90
	.type	copy_rdopt_data.112,@function
copy_rdopt_data.112:                    # @copy_rdopt_data.112
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$576451099, -48(%rbp)   # imm = 0x225BF21B
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB148_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB148_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB148_4
.LBB148_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB148_4
.LBB148_4:                              # %cond.end
	movl	%ecx, -40(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB148_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_7 Depth 2
                                        #       Child Loop BB148_9 Depth 3
                                        #         Child Loop BB148_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB148_5 Depth=1
	movl	$0, -8(%rbp)
.LBB148_7:                              # %for.cond17
                                        #   Parent Loop BB148_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB148_9 Depth 3
                                        #         Child Loop BB148_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB148_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB148_7 Depth=2
	movl	$0, -12(%rbp)
.LBB148_9:                              # %for.cond21
                                        #   Parent Loop BB148_5 Depth=1
                                        #     Parent Loop BB148_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB148_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB148_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB148_9 Depth=3
	movl	$0, -16(%rbp)
.LBB148_11:                             # %for.cond25
                                        #   Parent Loop BB148_5 Depth=1
                                        #     Parent Loop BB148_7 Depth=2
                                        #       Parent Loop BB148_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB148_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB148_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB148_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB148_11
.LBB148_14:                             # %for.end
                                        #   in Loop: Header=BB148_9 Depth=3
	jmp	.LBB148_15
.LBB148_15:                             # %for.inc46
                                        #   in Loop: Header=BB148_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB148_9
.LBB148_16:                             # %for.end48
                                        #   in Loop: Header=BB148_7 Depth=2
	jmp	.LBB148_17
.LBB148_17:                             # %for.inc49
                                        #   in Loop: Header=BB148_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_7
.LBB148_18:                             # %for.end51
                                        #   in Loop: Header=BB148_5 Depth=1
	jmp	.LBB148_19
.LBB148_19:                             # %for.inc52
                                        #   in Loop: Header=BB148_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_5
.LBB148_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB148_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_23 Depth 2
                                        #       Child Loop BB148_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB148_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB148_21 Depth=1
	movl	$0, -12(%rbp)
.LBB148_23:                             # %for.cond59
                                        #   Parent Loop BB148_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB148_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB148_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB148_23 Depth=2
	movl	$0, -16(%rbp)
.LBB148_25:                             # %for.cond63
                                        #   Parent Loop BB148_21 Depth=1
                                        #     Parent Loop BB148_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB148_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB148_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB148_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB148_25
.LBB148_28:                             # %for.end82
                                        #   in Loop: Header=BB148_23 Depth=2
	jmp	.LBB148_29
.LBB148_29:                             # %for.inc83
                                        #   in Loop: Header=BB148_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB148_23
.LBB148_30:                             # %for.end85
                                        #   in Loop: Header=BB148_21 Depth=1
	jmp	.LBB148_31
.LBB148_31:                             # %for.inc86
                                        #   in Loop: Header=BB148_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_21
.LBB148_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB148_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB148_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB148_33 Depth=1
	movl	$0, -4(%rbp)
.LBB148_35:                             # %for.cond93
                                        #   Parent Loop BB148_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB148_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB148_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB148_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB148_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-40(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB148_38:                             # %if.end
                                        #   in Loop: Header=BB148_35 Depth=2
	jmp	.LBB148_39
.LBB148_39:                             # %for.inc176
                                        #   in Loop: Header=BB148_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_35
.LBB148_40:                             # %for.end178
                                        #   in Loop: Header=BB148_33 Depth=1
	jmp	.LBB148_41
.LBB148_41:                             # %for.inc179
                                        #   in Loop: Header=BB148_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_33
.LBB148_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB148_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB148_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB148_43 Depth=1
	movl	$0, -4(%rbp)
.LBB148_45:                             # %for.cond186
                                        #   Parent Loop BB148_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB148_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB148_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB148_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_45
.LBB148_48:                             # %for.end203
                                        #   in Loop: Header=BB148_43 Depth=1
	jmp	.LBB148_49
.LBB148_49:                             # %for.inc204
                                        #   in Loop: Header=BB148_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_43
.LBB148_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB148_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB148_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB148_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB148_52 Depth=1
	movl	$0, -4(%rbp)
.LBB148_54:                             # %for.cond214
                                        #   Parent Loop BB148_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB148_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB148_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB148_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_54
.LBB148_57:                             # %for.end247
                                        #   in Loop: Header=BB148_52 Depth=1
	jmp	.LBB148_58
.LBB148_58:                             # %for.inc248
                                        #   in Loop: Header=BB148_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_52
.LBB148_59:                             # %for.end250
	jmp	.LBB148_60
.LBB148_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB148_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB148_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB148_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB148_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_61
.LBB148_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB148_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB148_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB148_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB148_68:                             # %for.cond283
                                        #   Parent Loop BB148_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB148_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB148_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB148_68
.LBB148_71:                             # %for.end306
                                        #   in Loop: Header=BB148_66 Depth=1
	jmp	.LBB148_72
.LBB148_72:                             # %for.inc307
                                        #   in Loop: Header=BB148_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_66
.LBB148_73:                             # %for.end309
	jmp	.LBB148_98
.LBB148_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB148_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB148_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB148_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB148_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB148_79:                             # %for.cond324
                                        #   Parent Loop BB148_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB148_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB148_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB148_79
.LBB148_82:                             # %for.end341
                                        #   in Loop: Header=BB148_77 Depth=1
	jmp	.LBB148_83
.LBB148_83:                             # %for.inc342
                                        #   in Loop: Header=BB148_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_77
.LBB148_84:                             # %for.end344
	jmp	.LBB148_97
.LBB148_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB148_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB148_96
.LBB148_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB148_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB148_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB148_90:                             # %for.cond359
                                        #   Parent Loop BB148_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB148_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB148_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB148_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB148_90
.LBB148_93:                             # %for.end384
                                        #   in Loop: Header=BB148_88 Depth=1
	jmp	.LBB148_94
.LBB148_94:                             # %for.inc385
                                        #   in Loop: Header=BB148_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_88
.LBB148_95:                             # %for.end387
	jmp	.LBB148_96
.LBB148_96:                             # %if.end388
	jmp	.LBB148_97
.LBB148_97:                             # %if.end389
	jmp	.LBB148_98
.LBB148_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB148_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB148_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB148_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB148_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB148_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB148_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB148_103 Depth=1
	movl	$0, -4(%rbp)
.LBB148_105:                            # %for.cond410
                                        #   Parent Loop BB148_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB148_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB148_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -44(%rbp)
	cmpl	$1, -44(%rbp)
	je	.LBB148_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB148_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB148_109
.LBB148_108:                            # %if.else483
                                        #   in Loop: Header=BB148_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB148_109:                            # %if.end506
                                        #   in Loop: Header=BB148_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB148_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB148_105 Depth=2
	cmpl	$0, -44(%rbp)
	je	.LBB148_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB148_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB148_113
.LBB148_112:                            # %if.else568
                                        #   in Loop: Header=BB148_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB148_113:                            # %if.end591
                                        #   in Loop: Header=BB148_105 Depth=2
	jmp	.LBB148_114
.LBB148_114:                            # %if.end592
                                        #   in Loop: Header=BB148_105 Depth=2
	jmp	.LBB148_115
.LBB148_115:                            # %for.inc593
                                        #   in Loop: Header=BB148_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_105
.LBB148_116:                            # %for.end595
                                        #   in Loop: Header=BB148_103 Depth=1
	jmp	.LBB148_117
.LBB148_117:                            # %for.inc596
                                        #   in Loop: Header=BB148_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_103
.LBB148_118:                            # %for.end598
	jmp	.LBB148_130
.LBB148_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB148_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB148_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB148_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB148_120 Depth=1
	movl	$0, -4(%rbp)
.LBB148_122:                            # %for.cond604
                                        #   Parent Loop BB148_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB148_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB148_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB148_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB148_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB148_125:                            # %if.end654
                                        #   in Loop: Header=BB148_122 Depth=2
	jmp	.LBB148_126
.LBB148_126:                            # %for.inc655
                                        #   in Loop: Header=BB148_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB148_122
.LBB148_127:                            # %for.end657
                                        #   in Loop: Header=BB148_120 Depth=1
	jmp	.LBB148_128
.LBB148_128:                            # %for.inc658
                                        #   in Loop: Header=BB148_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB148_120
.LBB148_129:                            # %for.end660
	jmp	.LBB148_130
.LBB148_130:                            # %if.end661
	jmp	.LBB148_131
.LBB148_131:                            # %if.end662
	cmpl	$576451099, -48(%rbp)   # imm = 0x225BF21B
	jne	.LBB148_133
.LBB148_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB148_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB148_132
.Lfunc_end148:
	.size	copy_rdopt_data.112, .Lfunc_end148-copy_rdopt_data.112
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.113
	.type	find_distortion.113,@function
find_distortion.113:                    # @find_distortion.113
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1428411253, -44(%rbp)  # imm = 0x5523D375
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB149_20
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB149_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB149_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB149_2 Depth=1
	movl	$0, -12(%rbp)
.LBB149_4:                              # %for.cond3
                                        #   Parent Loop BB149_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB149_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB149_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB149_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB149_4
.LBB149_7:                              # %for.end
                                        #   in Loop: Header=BB149_2 Depth=1
	jmp	.LBB149_8
.LBB149_8:                              # %for.inc17
                                        #   in Loop: Header=BB149_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB149_2
.LBB149_9:                              # %for.end19
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB149_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB149_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB149_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB149_11 Depth=1
	movl	$0, -12(%rbp)
.LBB149_13:                             # %for.cond27
                                        #   Parent Loop BB149_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB149_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB149_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB149_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB149_13
.LBB149_16:                             # %for.end71
                                        #   in Loop: Header=BB149_11 Depth=1
	jmp	.LBB149_17
.LBB149_17:                             # %for.inc72
                                        #   in Loop: Header=BB149_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB149_11
.LBB149_18:                             # %for.end74
	jmp	.LBB149_19
.LBB149_19:                             # %if.end
	jmp	.LBB149_39
.LBB149_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB149_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB149_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB149_21 Depth=1
	movl	$0, -12(%rbp)
.LBB149_23:                             # %for.cond80
                                        #   Parent Loop BB149_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB149_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB149_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB149_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB149_23
.LBB149_26:                             # %for.end104
                                        #   in Loop: Header=BB149_21 Depth=1
	jmp	.LBB149_27
.LBB149_27:                             # %for.inc105
                                        #   in Loop: Header=BB149_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB149_21
.LBB149_28:                             # %for.end107
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB149_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB149_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB149_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB149_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB149_30 Depth=1
	movl	$0, -12(%rbp)
.LBB149_32:                             # %for.cond117
                                        #   Parent Loop BB149_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB149_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB149_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB149_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB149_32
.LBB149_35:                             # %for.end163
                                        #   in Loop: Header=BB149_30 Depth=1
	jmp	.LBB149_36
.LBB149_36:                             # %for.inc164
                                        #   in Loop: Header=BB149_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB149_30
.LBB149_37:                             # %for.end166
	jmp	.LBB149_38
.LBB149_38:                             # %if.end167
	jmp	.LBB149_39
.LBB149_39:                             # %if.end168
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1428411253, -44(%rbp)  # imm = 0x5523D375
	jne	.LBB149_41
.LBB149_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB149_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB149_40
.Lfunc_end149:
	.size	find_distortion.113, .Lfunc_end149-find_distortion.113
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.114
	.type	ReportFirstframe.114,@function
ReportFirstframe.114:                   # @ReportFirstframe.114
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1570746111, -16(%rbp)  # imm = 0x5D9FAEFF
	movl	%edi, -4(%rbp)
	movl	%esi, -8(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-4(%rbp), %r9d
	movl	-8(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB150_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB150_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB150_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB150_5
.LBB150_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -12(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB150_5:                              # %if.end
	jmp	.LBB150_6
.LBB150_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$1570746111, -16(%rbp)  # imm = 0x5D9FAEFF
	jne	.LBB150_8
.LBB150_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB150_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB150_7
.Lfunc_end150:
	.size	ReportFirstframe.114, .Lfunc_end150-ReportFirstframe.114
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.115
	.type	frame_mode_buffer.115,@function
frame_mode_buffer.115:                  # @frame_mode_buffer.115
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2111934341, -16(%rbp)  # imm = 0x7DE18F85
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB151_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB151_3
.LBB151_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB151_3:                              # %if.end
	cmpl	$2111934341, -16(%rbp)  # imm = 0x7DE18F85
	jne	.LBB151_5
.LBB151_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB151_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB151_4
.Lfunc_end151:
	.size	frame_mode_buffer.115, .Lfunc_end151-frame_mode_buffer.115
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.116
	.type	ReadOneFrame.116,@function
ReadOneFrame.116:                       # @ReadOneFrame.116
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$2005849332, -72(%rbp)  # imm = 0x778ED4F4
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -44(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -28(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-32(%rbp), %eax
	imull	-44(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-36(%rbp), %eax
	imull	-28(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-68(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB152_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB152_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -40(%rbp)
	movl	-32(%rbp), %eax
	imull	-44(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB152_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB152_4:                              # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB152_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB152_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB152_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB152_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB152_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB152_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB152_26
# %bb.11:                               # %if.then42
	cmpl	$0, -40(%rbp)
	je	.LBB152_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB152_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB152_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB152_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-44(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB152_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB152_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB152_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -40(%rbp)
	je	.LBB152_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB152_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB152_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB152_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -40(%rbp)
	je	.LBB152_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB152_24:                             # %if.end85
	jmp	.LBB152_25
.LBB152_25:                             # %if.end86
	jmp	.LBB152_27
.LBB152_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB152_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$2005849332, -72(%rbp)  # imm = 0x778ED4F4
	jne	.LBB152_29
.LBB152_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB152_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB152_28
.Lfunc_end152:
	.size	ReadOneFrame.116, .Lfunc_end152-ReadOneFrame.116
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.117
.LCPI153_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.117,@function
find_snr.117:                           # @find_snr.117
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1583463495, -48(%rbp)  # imm = 0x5E61BC47
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB153_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB153_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_4 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB153_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB153_2 Depth=1
	movl	$0, -8(%rbp)
.LBB153_4:                              # %for.cond8
                                        #   Parent Loop BB153_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB153_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB153_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB153_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB153_4
.LBB153_7:                              # %for.end
                                        #   in Loop: Header=BB153_2 Depth=1
	jmp	.LBB153_8
.LBB153_8:                              # %for.inc22
                                        #   in Loop: Header=BB153_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB153_2
.LBB153_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB153_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB153_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_13 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB153_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB153_11 Depth=1
	movl	$0, -8(%rbp)
.LBB153_13:                             # %for.cond33
                                        #   Parent Loop BB153_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB153_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB153_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB153_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB153_13
.LBB153_16:                             # %for.end76
                                        #   in Loop: Header=BB153_11 Depth=1
	jmp	.LBB153_17
.LBB153_17:                             # %for.inc77
                                        #   in Loop: Header=BB153_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB153_11
.LBB153_18:                             # %for.end79
	jmp	.LBB153_19
.LBB153_19:                             # %if.end
	jmp	.LBB153_41
.LBB153_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB153_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB153_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB153_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_25 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB153_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB153_23 Depth=1
	movl	$0, -8(%rbp)
.LBB153_25:                             # %for.cond89
                                        #   Parent Loop BB153_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB153_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB153_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB153_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB153_25
.LBB153_28:                             # %for.end112
                                        #   in Loop: Header=BB153_23 Depth=1
	jmp	.LBB153_29
.LBB153_29:                             # %for.inc113
                                        #   in Loop: Header=BB153_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB153_23
.LBB153_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB153_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB153_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB153_34 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB153_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB153_32 Depth=1
	movl	$0, -8(%rbp)
.LBB153_34:                             # %for.cond125
                                        #   Parent Loop BB153_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB153_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB153_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB153_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB153_34
.LBB153_37:                             # %for.end169
                                        #   in Loop: Header=BB153_32 Depth=1
	jmp	.LBB153_38
.LBB153_38:                             # %for.inc170
                                        #   in Loop: Header=BB153_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB153_32
.LBB153_39:                             # %for.end172
	jmp	.LBB153_40
.LBB153_40:                             # %if.end173
	jmp	.LBB153_41
.LBB153_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB153_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB153_43:                             # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB153_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB153_45:                             # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB153_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB153_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB153_52
# %bb.48:                               # %if.then189
	movl	-44(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI153_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB153_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI153_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI153_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB153_51
.LBB153_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB153_51:                             # %if.end219
	jmp	.LBB153_52
.LBB153_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB153_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB153_55
.LBB153_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB153_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB153_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB153_61
.LBB153_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB153_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB153_60
.LBB153_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB153_60:                             # %if.end394
	jmp	.LBB153_61
.LBB153_61:                             # %if.end395
	cmpl	$1583463495, -48(%rbp)  # imm = 0x5E61BC47
	jne	.LBB153_63
.LBB153_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB153_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB153_62
.Lfunc_end153:
	.size	find_snr.117, .Lfunc_end153-find_snr.117
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReportFirstframe.118
	.type	ReportFirstframe.118,@function
ReportFirstframe.118:                   # @ReportFirstframe.118
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1334898889, -12(%rbp)  # imm = 0x4F90F0C9
	movl	%edi, -16(%rbp)
	movl	%esi, -4(%rbp)
	movl	frame_no, %esi
	movq	stats, %rax
	movl	16(%rax), %edx
	movq	stats, %rax
	subl	20(%rax), %edx
	movq	img, %rax
	movl	40(%rax), %r8d
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	4(%rax), %xmm1          # xmm1 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm1, %xmm0, %xmm1
	movq	snr, %rax
	vmovss	8(%rax), %xmm2          # xmm2 = mem[0],zero,zero,zero
	vcvtss2sd	%xmm2, %xmm0, %xmm2
	movl	-16(%rbp), %r9d
	movl	-4(%rbp), %r10d
	movq	img, %rcx
	movl	71800(%rcx), %ecx
	cmpl	$0, %ecx
	movabsq	$.L.str.7, %rcx
	movabsq	$.L.str.8, %rax
	cmovneq	%rcx, %rax
	movl	intras, %r11d
	movabsq	$.L.str.6, %rdi
	movl	$0, %ecx
	movl	%r10d, (%rsp)
	movq	%rax, 8(%rsp)
	movl	%r11d, 16(%rsp)
	movb	$3, %al
	callq	printf
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB154_6
# %bb.1:                                # %if.then
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB154_4
# %bb.2:                                # %land.lhs.true
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	jne	.LBB154_4
# %bb.3:                                # %if.then6
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	subl	20(%rcx), %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB154_5
.LBB154_4:                              # %if.else
	movq	stats, %rax
	movl	16(%rax), %eax
	subl	Iprev_bits, %eax
	movl	%eax, -8(%rbp)
	movq	stats, %rax
	movl	16(%rax), %eax
	movl	%eax, Iprev_bits
.LBB154_5:                              # %if.end
	jmp	.LBB154_6
.LBB154_6:                              # %if.end13
	movq	stats, %rax
	movl	16(%rax), %eax
	movq	stats, %rcx
	movl	%eax, 704(%rcx)
	movq	stats, %rax
	movl	$0, 16(%rax)
	cmpl	$1334898889, -12(%rbp)  # imm = 0x4F90F0C9
	jne	.LBB154_8
.LBB154_7:
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB154_8:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB154_7
.Lfunc_end154:
	.size	ReportFirstframe.118, .Lfunc_end154-ReportFirstframe.118
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.119             # -- Begin function buf2img.119
	.p2align	4, 0x90
	.type	buf2img.119,@function
buf2img.119:                            # @buf2img.119
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1673931799, -60(%rbp)  # imm = 0x63C62C17
	movq	%rdi, -40(%rbp)
	movq	%rsi, -48(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB155_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB155_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB155_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB155_6
	jmp	.LBB155_4
.LBB155_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB155_15
	jmp	.LBB155_5
.LBB155_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB155_24
	jmp	.LBB155_33
.LBB155_6:                              # %sw.bb
	movl	$0, -4(%rbp)
.LBB155_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_9 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB155_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB155_7 Depth=1
	movl	$0, -8(%rbp)
.LBB155_9:                              # %for.cond5
                                        #   Parent Loop BB155_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB155_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB155_9 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB155_9 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_9
.LBB155_12:                             # %for.end
                                        #   in Loop: Header=BB155_7 Depth=1
	jmp	.LBB155_13
.LBB155_13:                             # %for.inc14
                                        #   in Loop: Header=BB155_7 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_7
.LBB155_14:                             # %for.end16
	jmp	.LBB155_34
.LBB155_15:                             # %sw.bb17
	movl	$0, -4(%rbp)
.LBB155_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_18 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB155_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB155_16 Depth=1
	movl	$0, -8(%rbp)
.LBB155_18:                             # %for.cond22
                                        #   Parent Loop BB155_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB155_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB155_18 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB155_18 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_18
.LBB155_21:                             # %for.end38
                                        #   in Loop: Header=BB155_16 Depth=1
	jmp	.LBB155_22
.LBB155_22:                             # %for.inc39
                                        #   in Loop: Header=BB155_16 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_16
.LBB155_23:                             # %for.end41
	jmp	.LBB155_34
.LBB155_24:                             # %sw.bb42
	movl	$0, -4(%rbp)
.LBB155_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_27 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB155_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB155_25 Depth=1
	movl	$0, -8(%rbp)
.LBB155_27:                             # %for.cond47
                                        #   Parent Loop BB155_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB155_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB155_27 Depth=2
	movq	-48(%rbp), %rax
	movl	-8(%rbp), %ecx
	movl	-4(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -56(%rbp)
	movq	-56(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-56(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-56(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-56(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB155_27 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_27
.LBB155_30:                             # %for.end74
                                        #   in Loop: Header=BB155_25 Depth=1
	jmp	.LBB155_31
.LBB155_31:                             # %for.inc75
                                        #   in Loop: Header=BB155_25 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_25
.LBB155_32:                             # %for.end77
	jmp	.LBB155_33
.LBB155_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB155_34:                             # %sw.epilog
	jmp	.LBB155_44
.LBB155_35:                             # %if.else
	movl	$0, -4(%rbp)
.LBB155_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB155_38 Depth 2
	movl	-4(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB155_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB155_36 Depth=1
	movl	$0, -8(%rbp)
.LBB155_38:                             # %for.cond82
                                        #   Parent Loop BB155_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB155_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB155_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-8(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-48(%rbp), %rsi
	movl	-8(%rbp), %eax
	movl	-4(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB155_38 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB155_38
.LBB155_41:                             # %for.end102
                                        #   in Loop: Header=BB155_36 Depth=1
	jmp	.LBB155_42
.LBB155_42:                             # %for.inc103
                                        #   in Loop: Header=BB155_36 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB155_36
.LBB155_43:                             # %for.end105
	jmp	.LBB155_44
.LBB155_44:                             # %if.end106
	cmpl	$1673931799, -60(%rbp)  # imm = 0x63C62C17
	jne	.LBB155_46
.LBB155_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB155_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB155_45
.Lfunc_end155:
	.size	buf2img.119, .Lfunc_end155-buf2img.119
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.120
.LCPI156_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI156_1:
	.quad	4611686018427387904     # double 2
.LCPI156_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.120,@function
picture_structure_decision.120:         # @picture_structure_decision.120
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI156_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI156_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$462264948, -44(%rbp)   # imm = 0x1B8D9A74
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI156_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-28(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -48(%rbp)
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-32(%rbp), %edi
	movl	-48(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$462264948, -44(%rbp)   # imm = 0x1B8D9A74
	jne	.LBB156_2
.LBB156_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB156_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB156_1
.Lfunc_end156:
	.size	picture_structure_decision.120, .Lfunc_end156-picture_structure_decision.120
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.121
	.type	find_distortion.121,@function
find_distortion.121:                    # @find_distortion.121
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1543127956, -44(%rbp)  # imm = 0x5BFA4394
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB157_20
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB157_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_4 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB157_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB157_2 Depth=1
	movl	$0, -16(%rbp)
.LBB157_4:                              # %for.cond3
                                        #   Parent Loop BB157_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB157_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB157_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB157_4 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB157_4
.LBB157_7:                              # %for.end
                                        #   in Loop: Header=BB157_2 Depth=1
	jmp	.LBB157_8
.LBB157_8:                              # %for.inc17
                                        #   in Loop: Header=BB157_2 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB157_2
.LBB157_9:                              # %for.end19
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB157_19
# %bb.10:                               # %if.then22
	movl	$0, -12(%rbp)
.LBB157_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_13 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB157_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB157_11 Depth=1
	movl	$0, -16(%rbp)
.LBB157_13:                             # %for.cond27
                                        #   Parent Loop BB157_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB157_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB157_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB157_13 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB157_13
.LBB157_16:                             # %for.end71
                                        #   in Loop: Header=BB157_11 Depth=1
	jmp	.LBB157_17
.LBB157_17:                             # %for.inc72
                                        #   in Loop: Header=BB157_11 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB157_11
.LBB157_18:                             # %for.end74
	jmp	.LBB157_19
.LBB157_19:                             # %if.end
	jmp	.LBB157_39
.LBB157_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -24(%rbp)
	movl	$0, -12(%rbp)
.LBB157_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_23 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB157_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB157_21 Depth=1
	movl	$0, -16(%rbp)
.LBB157_23:                             # %for.cond80
                                        #   Parent Loop BB157_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB157_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB157_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB157_23 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB157_23
.LBB157_26:                             # %for.end104
                                        #   in Loop: Header=BB157_21 Depth=1
	jmp	.LBB157_27
.LBB157_27:                             # %for.inc105
                                        #   in Loop: Header=BB157_21 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB157_21
.LBB157_28:                             # %for.end107
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB157_38
# %bb.29:                               # %if.then111
	movl	$0, -12(%rbp)
.LBB157_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB157_32 Depth 2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB157_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB157_30 Depth=1
	movl	$0, -16(%rbp)
.LBB157_32:                             # %for.cond117
                                        #   Parent Loop BB157_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB157_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB157_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB157_32 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB157_32
.LBB157_35:                             # %for.end163
                                        #   in Loop: Header=BB157_30 Depth=1
	jmp	.LBB157_36
.LBB157_36:                             # %for.inc164
                                        #   in Loop: Header=BB157_30 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB157_30
.LBB157_37:                             # %for.end166
	jmp	.LBB157_38
.LBB157_38:                             # %if.end167
	jmp	.LBB157_39
.LBB157_39:                             # %if.end168
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1543127956, -44(%rbp)  # imm = 0x5BFA4394
	jne	.LBB157_41
.LBB157_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB157_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB157_40
.Lfunc_end157:
	.size	find_distortion.121, .Lfunc_end157-find_distortion.121
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.122
	.type	field_mode_buffer.122,@function
field_mode_buffer.122:                  # @field_mode_buffer.122
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1350225411, -8(%rbp)   # imm = 0x507ACE03
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -16(%rbp)
	callq	put_buffer_frame
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1350225411, -8(%rbp)   # imm = 0x507ACE03
	jne	.LBB158_2
.LBB158_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB158_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB158_1
.Lfunc_end158:
	.size	field_mode_buffer.122, .Lfunc_end158-field_mode_buffer.122
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.123
	.type	writeUnit.123,@function
writeUnit.123:                          # @writeUnit.123
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$29032471, -16(%rbp)    # imm = 0x1BB0017
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB159_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB159_18
.LBB159_2:                              # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB159_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB159_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB159_6
.LBB159_5:                              # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB159_6:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB159_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB159_9
.LBB159_8:                              # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB159_9:                              # %if.end21
	jmp	.LBB159_17
.LBB159_10:                             # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB159_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB159_13
.LBB159_12:                             # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB159_13:                             # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB159_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB159_16
.LBB159_15:                             # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB159_16:                             # %if.end39
	jmp	.LBB159_17
.LBB159_17:                             # %if.end40
	jmp	.LBB159_18
.LBB159_18:                             # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$29032471, -16(%rbp)    # imm = 0x1BB0017
	jne	.LBB159_20
.LBB159_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB159_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB159_19
.Lfunc_end159:
	.size	writeUnit.123, .Lfunc_end159-writeUnit.123
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.124  # -- Begin function UnifiedOneForthPix.124
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.124,@function
UnifiedOneForthPix.124:                 # @UnifiedOneForthPix.124
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$172348332, -108(%rbp)  # imm = 0xA45D3AC
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB160_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB160_3
.LBB160_2:                              # %if.then
	jmp	.LBB160_266
.LBB160_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB160_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB160_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB160_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB160_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB160_11
.LBB160_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB160_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB160_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB160_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB160_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB160_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB160_14:                             # %for.cond49
                                        #   Parent Loop BB160_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB160_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB160_18
.LBB160_17:                             # %cond.false
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-48(%rbp), %eax
.LBB160_18:                             # %cond.end
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB160_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB160_24
.LBB160_20:                             # %cond.false63
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB160_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB160_23
.LBB160_22:                             # %cond.false71
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-48(%rbp), %eax
.LBB160_23:                             # %cond.end72
                                        #   in Loop: Header=BB160_14 Depth=2
.LBB160_24:                             # %cond.end74
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB160_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB160_27
.LBB160_26:                             # %cond.false83
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %edx
.LBB160_27:                             # %cond.end84
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB160_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB160_33
.LBB160_29:                             # %cond.false89
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB160_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB160_32
.LBB160_31:                             # %cond.false97
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %edx
.LBB160_32:                             # %cond.end98
                                        #   in Loop: Header=BB160_14 Depth=2
.LBB160_33:                             # %cond.end100
                                        #   in Loop: Header=BB160_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB160_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB160_36
.LBB160_35:                             # %cond.false115
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB160_36:                             # %cond.end117
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB160_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB160_42
.LBB160_38:                             # %cond.false122
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB160_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB160_41
.LBB160_40:                             # %cond.false131
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB160_41:                             # %cond.end133
                                        #   in Loop: Header=BB160_14 Depth=2
.LBB160_42:                             # %cond.end135
                                        #   in Loop: Header=BB160_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB160_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB160_45
.LBB160_44:                             # %cond.false152
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB160_45:                             # %cond.end154
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB160_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB160_51
.LBB160_47:                             # %cond.false159
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB160_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB160_50
.LBB160_49:                             # %cond.false168
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB160_50:                             # %cond.end170
                                        #   in Loop: Header=BB160_14 Depth=2
.LBB160_51:                             # %cond.end172
                                        #   in Loop: Header=BB160_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB160_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB160_54
.LBB160_53:                             # %cond.false187
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB160_54:                             # %cond.end189
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB160_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB160_60
.LBB160_56:                             # %cond.false194
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB160_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB160_59
.LBB160_58:                             # %cond.false203
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB160_59:                             # %cond.end205
                                        #   in Loop: Header=BB160_14 Depth=2
.LBB160_60:                             # %cond.end207
                                        #   in Loop: Header=BB160_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB160_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB160_63
.LBB160_62:                             # %cond.false225
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB160_63:                             # %cond.end227
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB160_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB160_69
.LBB160_65:                             # %cond.false232
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB160_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB160_68
.LBB160_67:                             # %cond.false241
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB160_68:                             # %cond.end243
                                        #   in Loop: Header=BB160_14 Depth=2
.LBB160_69:                             # %cond.end245
                                        #   in Loop: Header=BB160_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB160_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB160_72
.LBB160_71:                             # %cond.false260
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB160_72:                             # %cond.end262
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB160_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB160_78
.LBB160_74:                             # %cond.false267
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB160_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB160_77
.LBB160_76:                             # %cond.false276
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB160_77:                             # %cond.end278
                                        #   in Loop: Header=BB160_14 Depth=2
.LBB160_78:                             # %cond.end280
                                        #   in Loop: Header=BB160_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -88(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB160_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB160_81
.LBB160_80:                             # %cond.false297
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB160_81:                             # %cond.end298
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB160_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB160_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB160_87
.LBB160_83:                             # %cond.false303
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB160_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB160_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB160_86
.LBB160_85:                             # %cond.false311
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB160_86:                             # %cond.end312
                                        #   in Loop: Header=BB160_14 Depth=2
.LBB160_87:                             # %cond.end314
                                        #   in Loop: Header=BB160_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-88(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB160_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB160_14
.LBB160_89:                             # %for.end
                                        #   in Loop: Header=BB160_12 Depth=1
	jmp	.LBB160_90
.LBB160_90:                             # %for.inc336
                                        #   in Loop: Header=BB160_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB160_12
.LBB160_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB160_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB160_92 Depth=1
	movl	$0, -48(%rbp)
.LBB160_94:                             # %for.cond346
                                        #   Parent Loop BB160_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -92(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-92(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB160_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-92(%rbp), %esi
	jmp	.LBB160_98
.LBB160_97:                             # %cond.false364
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB160_98:                             # %cond.end366
                                        #   in Loop: Header=BB160_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB160_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB160_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB160_101
.LBB160_100:                            # %cond.false378
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB160_101:                            # %cond.end380
                                        #   in Loop: Header=BB160_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB160_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB160_104
.LBB160_103:                            # %cond.false390
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB160_104:                            # %cond.end392
                                        #   in Loop: Header=BB160_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB160_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB160_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB160_107
.LBB160_106:                            # %cond.false405
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB160_107:                            # %cond.end407
                                        #   in Loop: Header=BB160_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-92(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB160_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-92(%rbp), %edi
	jmp	.LBB160_110
.LBB160_109:                            # %cond.false417
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB160_110:                            # %cond.end419
                                        #   in Loop: Header=BB160_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -88(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB160_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB160_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_113
.LBB160_112:                            # %cond.false442
                                        #   in Loop: Header=BB160_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB160_113:                            # %cond.end449
                                        #   in Loop: Header=BB160_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB160_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB160_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB160_119
.LBB160_115:                            # %cond.false454
                                        #   in Loop: Header=BB160_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB160_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB160_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_118
.LBB160_117:                            # %cond.false466
                                        #   in Loop: Header=BB160_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB160_118:                            # %cond.end473
                                        #   in Loop: Header=BB160_94 Depth=2
.LBB160_119:                            # %cond.end475
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB160_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB160_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_122
.LBB160_121:                            # %cond.false490
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB160_122:                            # %cond.end493
                                        #   in Loop: Header=BB160_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB160_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB160_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB160_128
.LBB160_124:                            # %cond.false498
                                        #   in Loop: Header=BB160_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB160_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB160_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_127
.LBB160_126:                            # %cond.false506
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-88(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB160_127:                            # %cond.end509
                                        #   in Loop: Header=BB160_94 Depth=2
.LBB160_128:                            # %cond.end511
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB160_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB160_94
.LBB160_130:                            # %for.end516
                                        #   in Loop: Header=BB160_92 Depth=1
	jmp	.LBB160_131
.LBB160_131:                            # %for.inc517
                                        #   in Loop: Header=BB160_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB160_92
.LBB160_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB160_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB160_133 Depth=1
	movl	$0, -44(%rbp)
.LBB160_135:                            # %for.cond533
                                        #   Parent Loop BB160_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB160_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB160_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_139
.LBB160_138:                            # %cond.false553
                                        #   in Loop: Header=BB160_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB160_139:                            # %cond.end555
                                        #   in Loop: Header=BB160_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB160_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB160_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_145
.LBB160_141:                            # %cond.false567
                                        #   in Loop: Header=BB160_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB160_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_144
.LBB160_143:                            # %cond.false579
                                        #   in Loop: Header=BB160_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB160_144:                            # %cond.end581
                                        #   in Loop: Header=BB160_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB160_145:                            # %cond.end589
                                        #   in Loop: Header=BB160_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB160_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB160_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB160_157
.LBB160_147:                            # %cond.false594
                                        #   in Loop: Header=BB160_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB160_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_150
.LBB160_149:                            # %cond.false607
                                        #   in Loop: Header=BB160_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB160_150:                            # %cond.end609
                                        #   in Loop: Header=BB160_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB160_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB160_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_156
.LBB160_152:                            # %cond.false621
                                        #   in Loop: Header=BB160_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB160_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_155
.LBB160_154:                            # %cond.false633
                                        #   in Loop: Header=BB160_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB160_155:                            # %cond.end635
                                        #   in Loop: Header=BB160_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB160_156:                            # %cond.end643
                                        #   in Loop: Header=BB160_135 Depth=2
.LBB160_157:                            # %cond.end645
                                        #   in Loop: Header=BB160_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB160_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB160_135
.LBB160_159:                            # %for.end650
                                        #   in Loop: Header=BB160_133 Depth=1
	jmp	.LBB160_160
.LBB160_160:                            # %for.inc651
                                        #   in Loop: Header=BB160_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB160_133
.LBB160_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB160_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB160_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB160_162 Depth=1
	movl	$0, -48(%rbp)
.LBB160_164:                            # %for.cond659
                                        #   Parent Loop BB160_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB160_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_169
.LBB160_168:                            # %cond.false681
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_169:                            # %cond.end683
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB160_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_175
.LBB160_171:                            # %cond.false696
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_174
.LBB160_173:                            # %cond.false707
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_174:                            # %cond.end709
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB160_175:                            # %cond.end718
                                        #   in Loop: Header=BB160_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB160_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB160_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB160_187
.LBB160_177:                            # %cond.false723
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_180
.LBB160_179:                            # %cond.false735
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_180:                            # %cond.end737
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB160_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_186
.LBB160_182:                            # %cond.false750
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_185
.LBB160_184:                            # %cond.false761
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_185:                            # %cond.end763
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB160_186:                            # %cond.end772
                                        #   in Loop: Header=BB160_164 Depth=2
.LBB160_187:                            # %cond.end774
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB160_261
.LBB160_188:                            # %if.else
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB160_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB160_192
.LBB160_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB160_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB160_226
.LBB160_192:                            # %if.then791
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_195
.LBB160_194:                            # %cond.false803
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB160_195:                            # %cond.end805
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_198
.LBB160_197:                            # %cond.false816
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_198:                            # %cond.end818
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB160_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_207
.LBB160_200:                            # %cond.false832
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_203
.LBB160_202:                            # %cond.false840
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB160_203:                            # %cond.end842
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_206
.LBB160_205:                            # %cond.false853
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_206:                            # %cond.end855
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB160_207:                            # %cond.end865
                                        #   in Loop: Header=BB160_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB160_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB160_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB160_225
.LBB160_209:                            # %cond.false870
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_212
.LBB160_211:                            # %cond.false879
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB160_212:                            # %cond.end881
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_215
.LBB160_214:                            # %cond.false892
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_215:                            # %cond.end894
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB160_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_224
.LBB160_217:                            # %cond.false908
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_220
.LBB160_219:                            # %cond.false916
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB160_220:                            # %cond.end918
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_223
.LBB160_222:                            # %cond.false929
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_223:                            # %cond.end931
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB160_224:                            # %cond.end941
                                        #   in Loop: Header=BB160_164 Depth=2
.LBB160_225:                            # %cond.end943
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB160_260
.LBB160_226:                            # %if.else946
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_229
.LBB160_228:                            # %cond.false962
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_229:                            # %cond.end964
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_232
.LBB160_231:                            # %cond.false973
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB160_232:                            # %cond.end975
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB160_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_241
.LBB160_234:                            # %cond.false987
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_237
.LBB160_236:                            # %cond.false999
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_237:                            # %cond.end1001
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_240
.LBB160_239:                            # %cond.false1010
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB160_240:                            # %cond.end1012
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB160_241:                            # %cond.end1020
                                        #   in Loop: Header=BB160_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB160_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB160_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB160_259
.LBB160_243:                            # %cond.false1025
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_246
.LBB160_245:                            # %cond.false1038
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_246:                            # %cond.end1040
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_249
.LBB160_248:                            # %cond.false1049
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB160_249:                            # %cond.end1051
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB160_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB160_258
.LBB160_251:                            # %cond.false1063
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB160_254
.LBB160_253:                            # %cond.false1075
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB160_254:                            # %cond.end1077
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB160_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB160_257
.LBB160_256:                            # %cond.false1086
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB160_257:                            # %cond.end1088
                                        #   in Loop: Header=BB160_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB160_258:                            # %cond.end1096
                                        #   in Loop: Header=BB160_164 Depth=2
.LBB160_259:                            # %cond.end1098
                                        #   in Loop: Header=BB160_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB160_260:                            # %if.end1101
                                        #   in Loop: Header=BB160_164 Depth=2
	jmp	.LBB160_261
.LBB160_261:                            # %if.end1102
                                        #   in Loop: Header=BB160_164 Depth=2
	jmp	.LBB160_262
.LBB160_262:                            # %for.inc1103
                                        #   in Loop: Header=BB160_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB160_164
.LBB160_263:                            # %for.end1105
                                        #   in Loop: Header=BB160_162 Depth=1
	jmp	.LBB160_264
.LBB160_264:                            # %for.inc1106
                                        #   in Loop: Header=BB160_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB160_162
.LBB160_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB160_266:                            # %return
	cmpl	$172348332, -108(%rbp)  # imm = 0xA45D3AC
	jne	.LBB160_268
.LBB160_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB160_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB160_267
.Lfunc_end160:
	.size	UnifiedOneForthPix.124, .Lfunc_end160-UnifiedOneForthPix.124
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.125
	.type	GenerateFullPelRepresentation.125,@function
GenerateFullPelRepresentation.125:      # @GenerateFullPelRepresentation.125
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1718257440, -44(%rbp)  # imm = 0x666A8720
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB161_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB161_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB161_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB161_1 Depth=1
	movl	$0, -32(%rbp)
.LBB161_3:                              # %for.cond1
                                        #   Parent Loop BB161_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB161_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB161_3 Depth=2
	movq	-56(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-64(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB161_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB161_3
.LBB161_6:                              # %for.end
                                        #   in Loop: Header=BB161_1 Depth=1
	jmp	.LBB161_7
.LBB161_7:                              # %for.inc5
                                        #   in Loop: Header=BB161_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB161_1
.LBB161_8:                              # %for.end7
	cmpl	$1718257440, -44(%rbp)  # imm = 0x666A8720
	jne	.LBB161_10
.LBB161_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB161_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB161_9
.Lfunc_end161:
	.size	GenerateFullPelRepresentation.125, .Lfunc_end161-GenerateFullPelRepresentation.125
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.126
.LCPI162_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI162_1:
	.quad	4611686018427387904     # double 2
.LCPI162_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.126,@function
picture_structure_decision.126:         # @picture_structure_decision.126
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI162_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI162_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$1669318659, -32(%rbp)  # imm = 0x637FC803
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI162_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-48(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -44(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -28(%rbp)
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-44(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-36(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-56(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1669318659, -32(%rbp)  # imm = 0x637FC803
	jne	.LBB162_2
.LBB162_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB162_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB162_1
.Lfunc_end162:
	.size	picture_structure_decision.126, .Lfunc_end162-picture_structure_decision.126
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.127
	.type	distortion_fld.127,@function
distortion_fld.127:                     # @distortion_fld.127
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$477042051, -4(%rbp)    # imm = 0x1C6F1583
	movq	%rdi, -32(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -16(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$477042051, -4(%rbp)    # imm = 0x1C6F1583
	jne	.LBB163_2
.LBB163_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB163_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB163_1
.Lfunc_end163:
	.size	distortion_fld.127, .Lfunc_end163-distortion_fld.127
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.128
	.type	writeout_picture.128,@function
writeout_picture.128:                   # @writeout_picture.128
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$1764058302, -28(%rbp)  # imm = 0x692564BE
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB164_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB164_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB164_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB164_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB164_3:                              # %for.cond1
                                        #   Parent Loop BB164_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB164_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB164_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB164_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB164_3
.LBB164_6:                              # %for.end
                                        #   in Loop: Header=BB164_1 Depth=1
	jmp	.LBB164_7
.LBB164_7:                              # %for.inc10
                                        #   in Loop: Header=BB164_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB164_1
.LBB164_8:                              # %for.end12
	cmpl	$1764058302, -28(%rbp)  # imm = 0x692564BE
	jne	.LBB164_10
.LBB164_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB164_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB164_9
.Lfunc_end164:
	.size	writeout_picture.128, .Lfunc_end164-writeout_picture.128
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.129
.LCPI165_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI165_1:
	.quad	4611686018427387904     # double 2
.LCPI165_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.129,@function
picture_structure_decision.129:         # @picture_structure_decision.129
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI165_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI165_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$588962832, -48(%rbp)   # imm = 0x231ADC10
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI165_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -28(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -36(%rbp)
	vmovss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-40(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-28(%rbp), %edi
	movl	-36(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$588962832, -48(%rbp)   # imm = 0x231ADC10
	jne	.LBB165_2
.LBB165_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB165_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB165_1
.Lfunc_end165:
	.size	picture_structure_decision.129, .Lfunc_end165-picture_structure_decision.129
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.130
	.type	GenerateFullPelRepresentation.130,@function
GenerateFullPelRepresentation.130:      # @GenerateFullPelRepresentation.130
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$868778176, -44(%rbp)   # imm = 0x33C880C0
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB166_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB166_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB166_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB166_1 Depth=1
	movl	$0, -32(%rbp)
.LBB166_3:                              # %for.cond1
                                        #   Parent Loop BB166_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB166_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB166_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB166_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB166_3
.LBB166_6:                              # %for.end
                                        #   in Loop: Header=BB166_1 Depth=1
	jmp	.LBB166_7
.LBB166_7:                              # %for.inc5
                                        #   in Loop: Header=BB166_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB166_1
.LBB166_8:                              # %for.end7
	cmpl	$868778176, -44(%rbp)   # imm = 0x33C880C0
	jne	.LBB166_10
.LBB166_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB166_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB166_9
.Lfunc_end166:
	.size	GenerateFullPelRepresentation.130, .Lfunc_end166-GenerateFullPelRepresentation.130
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.131
.LCPI167_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI167_1:
	.quad	4611686018427387904     # double 2
.LCPI167_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.131,@function
picture_structure_decision.131:         # @picture_structure_decision.131
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI167_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI167_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$844979728, -48(%rbp)   # imm = 0x325D5E10
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -56(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI167_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -64(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -32(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-56(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -28(%rbp)
	vmovss	-32(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-40(%rbp), %edi
	movl	-28(%rbp), %esi
	vmovsd	-64(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$844979728, -48(%rbp)   # imm = 0x325D5E10
	jne	.LBB167_2
.LBB167_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB167_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB167_1
.Lfunc_end167:
	.size	picture_structure_decision.131, .Lfunc_end167-picture_structure_decision.131
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.132       # -- Begin function MbAffPostProc.132
	.p2align	4, 0x90
	.type	MbAffPostProc.132,@function
MbAffPostProc.132:                      # @MbAffPostProc.132
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$318496380, -44(%rbp)   # imm = 0x12FBDE7C
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB168_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB168_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB168_5 Depth 2
                                        #       Child Loop BB168_7 Depth 3
                                        #     Child Loop BB168_13 Depth 2
                                        #       Child Loop BB168_15 Depth 3
                                        #     Child Loop BB168_21 Depth 2
                                        #       Child Loop BB168_23 Depth 3
                                        #         Child Loop BB168_25 Depth 4
                                        #       Child Loop BB168_31 Depth 3
                                        #         Child Loop BB168_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB168_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB168_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB168_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB168_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB168_5:                              # %for.cond5
                                        #   Parent Loop BB168_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB168_7 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB168_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB168_5 Depth=2
	movl	$0, -8(%rbp)
.LBB168_7:                              # %for.cond8
                                        #   Parent Loop BB168_2 Depth=1
                                        #     Parent Loop BB168_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB168_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB168_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB168_7 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB168_7
.LBB168_10:                             # %for.end
                                        #   in Loop: Header=BB168_5 Depth=2
	jmp	.LBB168_11
.LBB168_11:                             # %for.inc20
                                        #   in Loop: Header=BB168_5 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB168_5
.LBB168_12:                             # %for.end22
                                        #   in Loop: Header=BB168_2 Depth=1
	movl	$0, -4(%rbp)
.LBB168_13:                             # %for.cond23
                                        #   Parent Loop BB168_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB168_15 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB168_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB168_13 Depth=2
	movl	$0, -8(%rbp)
.LBB168_15:                             # %for.cond26
                                        #   Parent Loop BB168_2 Depth=1
                                        #     Parent Loop BB168_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB168_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB168_15 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB168_15 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB168_15
.LBB168_18:                             # %for.end54
                                        #   in Loop: Header=BB168_13 Depth=2
	jmp	.LBB168_19
.LBB168_19:                             # %for.inc55
                                        #   in Loop: Header=BB168_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB168_13
.LBB168_20:                             # %for.end57
                                        #   in Loop: Header=BB168_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB168_21:                             # %for.cond61
                                        #   Parent Loop BB168_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB168_23 Depth 3
                                        #         Child Loop BB168_25 Depth 4
                                        #       Child Loop BB168_31 Depth 3
                                        #         Child Loop BB168_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB168_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB168_21 Depth=2
	movl	$0, -4(%rbp)
.LBB168_23:                             # %for.cond64
                                        #   Parent Loop BB168_2 Depth=1
                                        #     Parent Loop BB168_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB168_25 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB168_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB168_23 Depth=3
	movl	$0, -8(%rbp)
.LBB168_25:                             # %for.cond69
                                        #   Parent Loop BB168_2 Depth=1
                                        #     Parent Loop BB168_21 Depth=2
                                        #       Parent Loop BB168_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB168_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB168_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB168_25 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB168_25
.LBB168_28:                             # %for.end87
                                        #   in Loop: Header=BB168_23 Depth=3
	jmp	.LBB168_29
.LBB168_29:                             # %for.inc88
                                        #   in Loop: Header=BB168_23 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB168_23
.LBB168_30:                             # %for.end90
                                        #   in Loop: Header=BB168_21 Depth=2
	movl	$0, -4(%rbp)
.LBB168_31:                             # %for.cond91
                                        #   Parent Loop BB168_2 Depth=1
                                        #     Parent Loop BB168_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB168_33 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB168_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB168_31 Depth=3
	movl	$0, -8(%rbp)
.LBB168_33:                             # %for.cond95
                                        #   Parent Loop BB168_2 Depth=1
                                        #     Parent Loop BB168_21 Depth=2
                                        #       Parent Loop BB168_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB168_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB168_33 Depth=4
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB168_33 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB168_33
.LBB168_36:                             # %for.end130
                                        #   in Loop: Header=BB168_31 Depth=3
	jmp	.LBB168_37
.LBB168_37:                             # %for.inc131
                                        #   in Loop: Header=BB168_31 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB168_31
.LBB168_38:                             # %for.end133
                                        #   in Loop: Header=BB168_21 Depth=2
	jmp	.LBB168_39
.LBB168_39:                             # %for.inc134
                                        #   in Loop: Header=BB168_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB168_21
.LBB168_40:                             # %for.end136
                                        #   in Loop: Header=BB168_2 Depth=1
	jmp	.LBB168_41
.LBB168_41:                             # %if.end
                                        #   in Loop: Header=BB168_2 Depth=1
	jmp	.LBB168_42
.LBB168_42:                             # %for.inc137
                                        #   in Loop: Header=BB168_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB168_2
.LBB168_43:                             # %for.end139
	jmp	.LBB168_67
.LBB168_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB168_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB168_48 Depth 2
                                        #       Child Loop BB168_50 Depth 3
                                        #     Child Loop BB168_56 Depth 2
                                        #       Child Loop BB168_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB168_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB168_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB168_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB168_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -4(%rbp)
.LBB168_48:                             # %for.cond149
                                        #   Parent Loop BB168_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB168_50 Depth 3
	cmpl	$32, -4(%rbp)
	jge	.LBB168_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB168_48 Depth=2
	movl	$0, -8(%rbp)
.LBB168_50:                             # %for.cond152
                                        #   Parent Loop BB168_45 Depth=1
                                        #     Parent Loop BB168_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB168_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB168_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-4(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB168_50 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB168_50
.LBB168_53:                             # %for.end167
                                        #   in Loop: Header=BB168_48 Depth=2
	jmp	.LBB168_54
.LBB168_54:                             # %for.inc168
                                        #   in Loop: Header=BB168_48 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB168_48
.LBB168_55:                             # %for.end170
                                        #   in Loop: Header=BB168_45 Depth=1
	movl	$0, -4(%rbp)
.LBB168_56:                             # %for.cond171
                                        #   Parent Loop BB168_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB168_58 Depth 3
	cmpl	$16, -4(%rbp)
	jge	.LBB168_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB168_56 Depth=2
	movl	$0, -8(%rbp)
.LBB168_58:                             # %for.cond174
                                        #   Parent Loop BB168_45 Depth=1
                                        #     Parent Loop BB168_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -8(%rbp)
	jge	.LBB168_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB168_58 Depth=3
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-4(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-4(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-8(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-8(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-4(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-4(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB168_58 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB168_58
.LBB168_61:                             # %for.end203
                                        #   in Loop: Header=BB168_56 Depth=2
	jmp	.LBB168_62
.LBB168_62:                             # %for.inc204
                                        #   in Loop: Header=BB168_56 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB168_56
.LBB168_63:                             # %for.end206
                                        #   in Loop: Header=BB168_45 Depth=1
	jmp	.LBB168_64
.LBB168_64:                             # %if.end207
                                        #   in Loop: Header=BB168_45 Depth=1
	jmp	.LBB168_65
.LBB168_65:                             # %for.inc208
                                        #   in Loop: Header=BB168_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB168_45
.LBB168_66:                             # %for.end210
	jmp	.LBB168_67
.LBB168_67:                             # %if.end211
	cmpl	$318496380, -44(%rbp)   # imm = 0x12FBDE7C
	jne	.LBB168_69
.LBB168_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB168_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB168_68
.Lfunc_end168:
	.size	MbAffPostProc.132, .Lfunc_end168-MbAffPostProc.132
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.133             # -- Begin function buf2img.133
	.p2align	4, 0x90
	.type	buf2img.133,@function
buf2img.133:                            # @buf2img.133
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$1175107246, -60(%rbp)  # imm = 0x460AB6AE
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -24(%rbp)
	movl	%r8d, -20(%rbp)
	movslq	-20(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB169_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB169_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB169_35
# %bb.3:                                # %if.then2
	movl	-20(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB169_6
	jmp	.LBB169_4
.LBB169_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB169_15
	jmp	.LBB169_5
.LBB169_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB169_24
	jmp	.LBB169_33
.LBB169_6:                              # %sw.bb
	movl	$0, -8(%rbp)
.LBB169_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_9 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB169_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB169_7 Depth=1
	movl	$0, -4(%rbp)
.LBB169_9:                              # %for.cond5
                                        #   Parent Loop BB169_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB169_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB169_9 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB169_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_9
.LBB169_12:                             # %for.end
                                        #   in Loop: Header=BB169_7 Depth=1
	jmp	.LBB169_13
.LBB169_13:                             # %for.inc14
                                        #   in Loop: Header=BB169_7 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_7
.LBB169_14:                             # %for.end16
	jmp	.LBB169_34
.LBB169_15:                             # %sw.bb17
	movl	$0, -8(%rbp)
.LBB169_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB169_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB169_16 Depth=1
	movl	$0, -4(%rbp)
.LBB169_18:                             # %for.cond22
                                        #   Parent Loop BB169_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB169_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB169_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB169_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_18
.LBB169_21:                             # %for.end38
                                        #   in Loop: Header=BB169_16 Depth=1
	jmp	.LBB169_22
.LBB169_22:                             # %for.inc39
                                        #   in Loop: Header=BB169_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_16
.LBB169_23:                             # %for.end41
	jmp	.LBB169_34
.LBB169_24:                             # %sw.bb42
	movl	$0, -8(%rbp)
.LBB169_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_27 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB169_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB169_25 Depth=1
	movl	$0, -4(%rbp)
.LBB169_27:                             # %for.cond47
                                        #   Parent Loop BB169_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB169_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB169_27 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-48(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-48(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-48(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB169_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_27
.LBB169_30:                             # %for.end74
                                        #   in Loop: Header=BB169_25 Depth=1
	jmp	.LBB169_31
.LBB169_31:                             # %for.inc75
                                        #   in Loop: Header=BB169_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_25
.LBB169_32:                             # %for.end77
	jmp	.LBB169_33
.LBB169_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB169_34:                             # %sw.epilog
	jmp	.LBB169_44
.LBB169_35:                             # %if.else
	movl	$0, -8(%rbp)
.LBB169_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB169_38 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-24(%rbp), %eax
	jge	.LBB169_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB169_36 Depth=1
	movl	$0, -4(%rbp)
.LBB169_38:                             # %for.cond82
                                        #   Parent Loop BB169_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB169_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB169_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-56(%rbp), %rsi
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-20(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-20(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB169_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB169_38
.LBB169_41:                             # %for.end102
                                        #   in Loop: Header=BB169_36 Depth=1
	jmp	.LBB169_42
.LBB169_42:                             # %for.inc103
                                        #   in Loop: Header=BB169_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB169_36
.LBB169_43:                             # %for.end105
	jmp	.LBB169_44
.LBB169_44:                             # %if.end106
	cmpl	$1175107246, -60(%rbp)  # imm = 0x460AB6AE
	jne	.LBB169_46
.LBB169_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB169_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB169_45
.Lfunc_end169:
	.size	buf2img.133, .Lfunc_end169-buf2img.133
	.cfi_endproc
                                        # -- End function
	.globl	buf2img.134             # -- Begin function buf2img.134
	.p2align	4, 0x90
	.type	buf2img.134,@function
buf2img.134:                            # @buf2img.134
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	movl	$268901077, -60(%rbp)   # imm = 0x10071AD5
	movq	%rdi, -40(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -12(%rbp)
	movl	%ecx, -20(%rbp)
	movl	%r8d, -24(%rbp)
	movslq	-24(%rbp), %rax
	cmpq	$2, %rax
	jbe	.LBB170_2
# %bb.1:                                # %if.then
	movabsq	$.L.str.3, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB170_2:                              # %if.end
	movb	$0, %al
	callq	testEndian
	cmpl	$0, %eax
	je	.LBB170_35
# %bb.3:                                # %if.then2
	movl	-24(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	je	.LBB170_6
	jmp	.LBB170_4
.LBB170_4:                              # %if.then2
	movl	%eax, %ecx
	subl	$2, %ecx
	je	.LBB170_15
	jmp	.LBB170_5
.LBB170_5:                              # %if.then2
	subl	$4, %eax
	je	.LBB170_24
	jmp	.LBB170_33
.LBB170_6:                              # %sw.bb
	movl	$0, -8(%rbp)
.LBB170_7:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_9 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB170_14
# %bb.8:                                # %for.body
                                        #   in Loop: Header=BB170_7 Depth=1
	movl	$0, -4(%rbp)
.LBB170_9:                              # %for.cond5
                                        #   Parent Loop BB170_7 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB170_12
# %bb.10:                               # %for.body8
                                        #   in Loop: Header=BB170_9 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	movslq	%ecx, %rcx
	movzbl	(%rax,%rcx), %eax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.11:                               # %for.inc
                                        #   in Loop: Header=BB170_9 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB170_9
.LBB170_12:                             # %for.end
                                        #   in Loop: Header=BB170_7 Depth=1
	jmp	.LBB170_13
.LBB170_13:                             # %for.inc14
                                        #   in Loop: Header=BB170_7 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB170_7
.LBB170_14:                             # %for.end16
	jmp	.LBB170_34
.LBB170_15:                             # %sw.bb17
	movl	$0, -8(%rbp)
.LBB170_16:                             # %for.cond18
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_18 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB170_23
# %bb.17:                               # %for.body21
                                        #   in Loop: Header=BB170_16 Depth=1
	movl	$0, -4(%rbp)
.LBB170_18:                             # %for.cond22
                                        #   Parent Loop BB170_16 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB170_21
# %bb.19:                               # %for.body25
                                        #   in Loop: Header=BB170_18 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$1, %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx), %ax
	movw	%ax, -14(%rbp)
	movzwl	-14(%rbp), %eax
	sarl	$8, %eax
	movzwl	-14(%rbp), %ecx
	andl	$255, %ecx
	shll	$8, %ecx
	orl	%ecx, %eax
	movw	%ax, -26(%rbp)
	movw	-26(%rbp), %ax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.20:                               # %for.inc36
                                        #   in Loop: Header=BB170_18 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB170_18
.LBB170_21:                             # %for.end38
                                        #   in Loop: Header=BB170_16 Depth=1
	jmp	.LBB170_22
.LBB170_22:                             # %for.inc39
                                        #   in Loop: Header=BB170_16 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB170_16
.LBB170_23:                             # %for.end41
	jmp	.LBB170_34
.LBB170_24:                             # %sw.bb42
	movl	$0, -8(%rbp)
.LBB170_25:                             # %for.cond43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_27 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB170_32
# %bb.26:                               # %for.body46
                                        #   in Loop: Header=BB170_25 Depth=1
	movl	$0, -4(%rbp)
.LBB170_27:                             # %for.cond47
                                        #   Parent Loop BB170_25 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB170_30
# %bb.28:                               # %for.body50
                                        #   in Loop: Header=BB170_27 Depth=2
	movq	-56(%rbp), %rax
	movl	-4(%rbp), %ecx
	movl	-8(%rbp), %edx
	imull	-12(%rbp), %edx
	addl	%edx, %ecx
	shll	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-48(%rbp), %rax
	andq	$65280, %rax            # imm = 0xFF00
	shlq	$8, %rax
	movq	-48(%rbp), %rcx
	andq	$255, %rcx
	shlq	$24, %rcx
	orq	%rcx, %rax
	movq	-48(%rbp), %rcx
	andq	$16711680, %rcx         # imm = 0xFF0000
	shrq	$8, %rcx
	orq	%rcx, %rax
	movl	$4278190080, %ecx       # imm = 0xFF000000
	andq	-48(%rbp), %rcx
	shrq	$24, %rcx
	orq	%rcx, %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	-40(%rbp), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.29:                               # %for.inc72
                                        #   in Loop: Header=BB170_27 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB170_27
.LBB170_30:                             # %for.end74
                                        #   in Loop: Header=BB170_25 Depth=1
	jmp	.LBB170_31
.LBB170_31:                             # %for.inc75
                                        #   in Loop: Header=BB170_25 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB170_25
.LBB170_32:                             # %for.end77
	jmp	.LBB170_33
.LBB170_33:                             # %sw.default
	movabsq	$.L.str.4, %rdi
	movl	$500, %esi              # imm = 0x1F4
	callq	error
.LBB170_34:                             # %sw.epilog
	jmp	.LBB170_44
.LBB170_35:                             # %if.else
	movl	$0, -8(%rbp)
.LBB170_36:                             # %for.cond78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB170_38 Depth 2
	movl	-8(%rbp), %eax
	cmpl	-20(%rbp), %eax
	jge	.LBB170_43
# %bb.37:                               # %for.body81
                                        #   in Loop: Header=BB170_36 Depth=1
	movl	$0, -4(%rbp)
.LBB170_38:                             # %for.cond82
                                        #   Parent Loop BB170_36 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	cmpl	-12(%rbp), %eax
	jge	.LBB170_41
# %bb.39:                               # %for.body85
                                        #   in Loop: Header=BB170_38 Depth=2
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-4(%rbp), %rcx
	movw	$0, (%rax,%rcx,2)
	movq	-40(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rdi
	movslq	-4(%rbp), %rax
	shlq	$1, %rax
	addq	%rax, %rdi
	movq	-56(%rbp), %rsi
	movl	-4(%rbp), %eax
	movl	-8(%rbp), %ecx
	imull	-12(%rbp), %ecx
	addl	%ecx, %eax
	imull	-24(%rbp), %eax
	cltq
	addq	%rax, %rsi
	movslq	-24(%rbp), %rdx
	callq	memcpy
# %bb.40:                               # %for.inc100
                                        #   in Loop: Header=BB170_38 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB170_38
.LBB170_41:                             # %for.end102
                                        #   in Loop: Header=BB170_36 Depth=1
	jmp	.LBB170_42
.LBB170_42:                             # %for.inc103
                                        #   in Loop: Header=BB170_36 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB170_36
.LBB170_43:                             # %for.end105
	jmp	.LBB170_44
.LBB170_44:                             # %if.end106
	cmpl	$268901077, -60(%rbp)   # imm = 0x10071AD5
	jne	.LBB170_46
.LBB170_45:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB170_46:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB170_45
.Lfunc_end170:
	.size	buf2img.134, .Lfunc_end170-buf2img.134
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.135      # -- Begin function code_a_picture.135
	.p2align	4, 0x90
	.type	code_a_picture.135,@function
code_a_picture.135:                     # @code_a_picture.135
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$480056813, -28(%rbp)   # imm = 0x1C9D15ED
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB171_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB171_8
.LBB171_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB171_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB171_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB171_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB171_7
.LBB171_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB171_7:                              # %land.end
.LBB171_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB171_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB171_10:                             # %if.end
	jmp	.LBB171_11
.LBB171_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB171_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB171_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB171_11 Depth=1
	jmp	.LBB171_13
.LBB171_13:                             # %while.cond15
                                        #   Parent Loop BB171_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB171_14
	jmp	.LBB171_15
.LBB171_14:                             # %while.body19
                                        #   in Loop: Header=BB171_13 Depth=2
	movl	-8(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB171_13
.LBB171_15:                             # %while.end
                                        #   in Loop: Header=BB171_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB171_11
.LBB171_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB171_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB171_23
# %bb.18:                               # %if.then28
	movl	$0, -4(%rbp)
.LBB171_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB171_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB171_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB171_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB171_19
.LBB171_22:                             # %for.end
	jmp	.LBB171_23
.LBB171_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB171_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB171_25:                             # %if.end34
	cmpl	$480056813, -28(%rbp)   # imm = 0x1C9D15ED
	jne	.LBB171_27
.LBB171_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB171_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB171_26
.Lfunc_end171:
	.size	code_a_picture.135, .Lfunc_end171-code_a_picture.135
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.136
.LCPI172_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.136,@function
init_field.136:                         # @init_field.136
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1532226444, -16(%rbp)  # imm = 0x5B53EB8C
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB172_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB172_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB172_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB172_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB172_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB172_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB172_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB172_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB172_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB172_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB172_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB172_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB172_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB172_15
.LBB172_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB172_15:                             # %if.end38
	jmp	.LBB172_23
.LBB172_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB172_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB172_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB172_20
.LBB172_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB172_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB172_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB172_22:                             # %if.end56
	jmp	.LBB172_23
.LBB172_23:                             # %if.end57
	jmp	.LBB172_24
.LBB172_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB172_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB172_26:                             # %if.end66
	jmp	.LBB172_77
.LBB172_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB172_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB172_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB172_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB172_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB172_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB172_29
.LBB172_32:                             # %for.end
	jmp	.LBB172_38
.LBB172_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB172_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB172_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB172_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB172_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB172_34
.LBB172_37:                             # %for.end134
	jmp	.LBB172_38
.LBB172_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB172_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB172_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB172_41:                             # %if.end147
	vmovsd	.LCPI172_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB172_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI172_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB172_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB172_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI172_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB172_46
.LBB172_45:                             # %if.else174
	vmovsd	.LCPI172_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB172_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB172_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB172_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB172_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB172_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB172_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB172_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB172_54
.LBB172_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB172_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB172_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB172_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB172_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB172_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB172_63
.LBB172_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB172_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB172_62
.LBB172_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB172_62:                             # %cond.end
.LBB172_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB172_71
.LBB172_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB172_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB172_70
.LBB172_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB172_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB172_69
.LBB172_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB172_69:                             # %cond.end256
.LBB172_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB172_71:                             # %if.end261
	jmp	.LBB172_72
.LBB172_72:                             # %if.end262
	jmp	.LBB172_76
.LBB172_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB172_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB172_75:                             # %if.end273
	jmp	.LBB172_76
.LBB172_76:                             # %if.end274
	jmp	.LBB172_77
.LBB172_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$1532226444, -16(%rbp)  # imm = 0x5B53EB8C
	jne	.LBB172_79
.LBB172_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB172_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB172_78
.Lfunc_end172:
	.size	init_field.136, .Lfunc_end172-init_field.136
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.137
	.type	writeout_picture.137,@function
writeout_picture.137:                   # @writeout_picture.137
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$595647256, -28(%rbp)   # imm = 0x2380DB18
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB173_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB173_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB173_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB173_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB173_3:                              # %for.cond1
                                        #   Parent Loop BB173_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB173_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB173_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB173_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB173_3
.LBB173_6:                              # %for.end
                                        #   in Loop: Header=BB173_1 Depth=1
	jmp	.LBB173_7
.LBB173_7:                              # %for.inc10
                                        #   in Loop: Header=BB173_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB173_1
.LBB173_8:                              # %for.end12
	cmpl	$595647256, -28(%rbp)   # imm = 0x2380DB18
	jne	.LBB173_10
.LBB173_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB173_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB173_9
.Lfunc_end173:
	.size	writeout_picture.137, .Lfunc_end173-writeout_picture.137
	.cfi_endproc
                                        # -- End function
	.globl	copy_rdopt_data.138     # -- Begin function copy_rdopt_data.138
	.p2align	4, 0x90
	.type	copy_rdopt_data.138,@function
copy_rdopt_data.138:                    # @copy_rdopt_data.138
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1961770333, -48(%rbp)  # imm = 0x74EE3D5D
	movl	%edi, -56(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movq	14168(%rax), %rax
	movslq	-52(%rbp), %rcx
	imulq	$632, %rcx, %rcx        # imm = 0x278
	addq	%rcx, %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB174_3
# %bb.1:                                # %land.lhs.true
	movq	-24(%rbp), %rax
	cmpl	$0, 532(%rax)
	je	.LBB174_3
# %bb.2:                                # %cond.true
	movq	img, %rax
	movl	12(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	movl	$4, %eax
	cmovnel	%eax, %ecx
	jmp	.LBB174_4
.LBB174_3:                              # %cond.false
	xorl	%ecx, %ecx
	jmp	.LBB174_4
.LBB174_4:                              # %cond.end
	movl	%ecx, -44(%rbp)
	movq	rdopt, %rax
	movl	3224(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	rdopt, %rax
	movl	3096(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 72(%rcx)
	movq	rdopt, %rax
	movl	3208(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 460(%rcx)
	movq	rdopt, %rax
	movq	3216(%rax), %rax
	movq	-24(%rbp), %rcx
	movq	%rax, 464(%rcx)
	movq	rdopt, %rax
	movl	3100(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 580(%rcx)
	movq	rdopt, %rax
	movl	3328(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72380(%rcx)
	movq	rdopt, %rax
	movl	3348(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 592(%rcx)
	movq	rdopt, %rax
	movl	3352(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 596(%rcx)
	movq	rdopt, %rax
	movl	3344(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 12(%rcx)
	movq	rdopt, %rax
	movl	3332(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 524(%rcx)
	movl	$0, -4(%rbp)
.LBB174_5:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_7 Depth 2
                                        #       Child Loop BB174_9 Depth 3
                                        #         Child Loop BB174_11 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	72692(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_20
# %bb.6:                                # %for.body
                                        #   in Loop: Header=BB174_5 Depth=1
	movl	$0, -8(%rbp)
.LBB174_7:                              # %for.cond17
                                        #   Parent Loop BB174_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB174_9 Depth 3
                                        #         Child Loop BB174_11 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB174_18
# %bb.8:                                # %for.body20
                                        #   in Loop: Header=BB174_7 Depth=2
	movl	$0, -12(%rbp)
.LBB174_9:                              # %for.cond21
                                        #   Parent Loop BB174_5 Depth=1
                                        #     Parent Loop BB174_7 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB174_11 Depth 4
	cmpl	$2, -12(%rbp)
	jge	.LBB174_16
# %bb.10:                               # %for.body24
                                        #   in Loop: Header=BB174_9 Depth=3
	movl	$0, -16(%rbp)
.LBB174_11:                             # %for.cond25
                                        #   Parent Loop BB174_5 Depth=1
                                        #     Parent Loop BB174_7 Depth=2
                                        #       Parent Loop BB174_9 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$65, -16(%rbp)
	jge	.LBB174_14
# %bb.12:                               # %for.body28
                                        #   in Loop: Header=BB174_11 Depth=4
	movq	rdopt, %rax
	movq	3080(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14136(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB174_11 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_11
.LBB174_14:                             # %for.end
                                        #   in Loop: Header=BB174_9 Depth=3
	jmp	.LBB174_15
.LBB174_15:                             # %for.inc46
                                        #   in Loop: Header=BB174_9 Depth=3
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_9
.LBB174_16:                             # %for.end48
                                        #   in Loop: Header=BB174_7 Depth=2
	jmp	.LBB174_17
.LBB174_17:                             # %for.inc49
                                        #   in Loop: Header=BB174_7 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB174_7
.LBB174_18:                             # %for.end51
                                        #   in Loop: Header=BB174_5 Depth=1
	jmp	.LBB174_19
.LBB174_19:                             # %for.inc52
                                        #   in Loop: Header=BB174_5 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB174_5
.LBB174_20:                             # %for.end54
	movl	$0, -4(%rbp)
.LBB174_21:                             # %for.cond55
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_23 Depth 2
                                        #       Child Loop BB174_25 Depth 3
	cmpl	$3, -4(%rbp)
	jge	.LBB174_32
# %bb.22:                               # %for.body58
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	$0, -12(%rbp)
.LBB174_23:                             # %for.cond59
                                        #   Parent Loop BB174_21 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB174_25 Depth 3
	cmpl	$2, -12(%rbp)
	jge	.LBB174_30
# %bb.24:                               # %for.body62
                                        #   in Loop: Header=BB174_23 Depth=2
	movl	$0, -16(%rbp)
.LBB174_25:                             # %for.cond63
                                        #   Parent Loop BB174_21 Depth=1
                                        #     Parent Loop BB174_23 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$18, -16(%rbp)
	jge	.LBB174_28
# %bb.26:                               # %for.body66
                                        #   in Loop: Header=BB174_25 Depth=3
	movq	rdopt, %rax
	movq	3088(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	14144(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.27:                               # %for.inc80
                                        #   in Loop: Header=BB174_25 Depth=3
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB174_25
.LBB174_28:                             # %for.end82
                                        #   in Loop: Header=BB174_23 Depth=2
	jmp	.LBB174_29
.LBB174_29:                             # %for.inc83
                                        #   in Loop: Header=BB174_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_23
.LBB174_30:                             # %for.end85
                                        #   in Loop: Header=BB174_21 Depth=1
	jmp	.LBB174_31
.LBB174_31:                             # %for.inc86
                                        #   in Loop: Header=BB174_21 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB174_21
.LBB174_32:                             # %for.end88
	movl	$0, -8(%rbp)
.LBB174_33:                             # %for.cond89
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_35 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB174_42
# %bb.34:                               # %for.body92
                                        #   in Loop: Header=BB174_33 Depth=1
	movl	$0, -4(%rbp)
.LBB174_35:                             # %for.cond93
                                        #   Parent Loop BB174_33 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB174_40
# %bb.36:                               # %for.body96
                                        #   in Loop: Header=BB174_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$0, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
	cmpl	$0, -36(%rbp)
	je	.LBB174_38
# %bb.37:                               # %if.then
                                        #   in Loop: Header=BB174_35 Depth=2
	movq	rdopt, %rax
	addq	$3264, %rax             # imm = 0xCC0
	addq	$32, %rax
	movslq	-8(%rbp), %rcx
	shlq	$3, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movw	(%rax,%rcx,2), %ax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	enc_picture, %rax
	addq	$24, %rax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$264, %rcx, %rcx        # imm = 0x108
	addq	%rcx, %rax
	movq	enc_picture, %rcx
	movq	6480(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	enc_picture, %rcx
	movq	6488(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	144(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	148(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	%rax, (%rcx,%rdx,8)
.LBB174_38:                             # %if.end
                                        #   in Loop: Header=BB174_35 Depth=2
	jmp	.LBB174_39
.LBB174_39:                             # %for.inc176
                                        #   in Loop: Header=BB174_35 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB174_35
.LBB174_40:                             # %for.end178
                                        #   in Loop: Header=BB174_33 Depth=1
	jmp	.LBB174_41
.LBB174_41:                             # %for.inc179
                                        #   in Loop: Header=BB174_33 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB174_33
.LBB174_42:                             # %for.end181
	movl	$0, -8(%rbp)
.LBB174_43:                             # %for.cond182
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_45 Depth 2
	cmpl	$16, -8(%rbp)
	jge	.LBB174_50
# %bb.44:                               # %for.body185
                                        #   in Loop: Header=BB174_43 Depth=1
	movl	$0, -4(%rbp)
.LBB174_45:                             # %for.cond186
                                        #   Parent Loop BB174_43 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$16, -4(%rbp)
	jge	.LBB174_48
# %bb.46:                               # %for.body189
                                        #   in Loop: Header=BB174_45 Depth=2
	movq	rdopt, %rax
	addq	$8, %rax
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6424(%rcx), %rcx
	movq	img, %rdx
	movl	156(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	152(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.47:                               # %for.inc201
                                        #   in Loop: Header=BB174_45 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB174_45
.LBB174_48:                             # %for.end203
                                        #   in Loop: Header=BB174_43 Depth=1
	jmp	.LBB174_49
.LBB174_49:                             # %for.inc204
                                        #   in Loop: Header=BB174_43 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB174_43
.LBB174_50:                             # %for.end206
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB174_60
# %bb.51:                               # %if.then209
	movl	$0, -8(%rbp)
.LBB174_52:                             # %for.cond210
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_54 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB174_59
# %bb.53:                               # %for.body213
                                        #   in Loop: Header=BB174_52 Depth=1
	movl	$0, -4(%rbp)
.LBB174_54:                             # %for.cond214
                                        #   Parent Loop BB174_52 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB174_57
# %bb.55:                               # %for.body217
                                        #   in Loop: Header=BB174_54 Depth=2
	movq	rdopt, %rax
	addq	$1032, %rax             # imm = 0x408
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
	movq	rdopt, %rax
	addq	$2056, %rax             # imm = 0x808
	movslq	-8(%rbp), %rcx
	shlq	$6, %rcx
	addq	%rcx, %rax
	movslq	-4(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	enc_picture, %rcx
	movq	6464(%rcx), %rcx
	movq	8(%rcx), %rcx
	movq	img, %rdx
	movl	164(%rdx), %edx
	addl	-8(%rbp), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	img, %rdx
	movl	160(%rdx), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.56:                               # %for.inc245
                                        #   in Loop: Header=BB174_54 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB174_54
.LBB174_57:                             # %for.end247
                                        #   in Loop: Header=BB174_52 Depth=1
	jmp	.LBB174_58
.LBB174_58:                             # %for.inc248
                                        #   in Loop: Header=BB174_52 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB174_52
.LBB174_59:                             # %for.end250
	jmp	.LBB174_60
.LBB174_60:                             # %if.end251
	movl	$0, -4(%rbp)
.LBB174_61:                             # %for.cond252
                                        # =>This Inner Loop Header: Depth=1
	cmpl	$4, -4(%rbp)
	jge	.LBB174_64
# %bb.62:                               # %for.body255
                                        #   in Loop: Header=BB174_61 Depth=1
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3104(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 472(%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-4(%rbp), %rcx
	movl	3120(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-4(%rbp), %rdx
	movl	%eax, 488(%rcx,%rdx,4)
# %bb.63:                               # %for.inc268
                                        #   in Loop: Header=BB174_61 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB174_61
.LBB174_64:                             # %for.end270
	movq	rdopt, %rax
	movl	3336(%rax), %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 572(%rcx)
	cmpl	$8, -28(%rbp)
	jne	.LBB174_74
# %bb.65:                               # %if.then274
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB174_66:                             # %for.cond276
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_68 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_73
# %bb.67:                               # %for.body281
                                        #   in Loop: Header=BB174_66 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB174_68:                             # %for.cond283
                                        #   Parent Loop BB174_66 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_71
# %bb.69:                               # %for.body288
                                        #   in Loop: Header=BB174_68 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.70:                               # %for.inc303
                                        #   in Loop: Header=BB174_68 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_68
.LBB174_71:                             # %for.end306
                                        #   in Loop: Header=BB174_66 Depth=1
	jmp	.LBB174_72
.LBB174_72:                             # %for.inc307
                                        #   in Loop: Header=BB174_66 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB174_66
.LBB174_73:                             # %for.end309
	jmp	.LBB174_98
.LBB174_74:                             # %if.else
	cmpl	$9, -28(%rbp)
	je	.LBB174_85
# %bb.75:                               # %land.lhs.true312
	cmpl	$13, -28(%rbp)
	je	.LBB174_85
# %bb.76:                               # %if.then315
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB174_77:                             # %for.cond317
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_79 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_84
# %bb.78:                               # %for.body322
                                        #   in Loop: Header=BB174_77 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB174_79:                             # %for.cond324
                                        #   Parent Loop BB174_77 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_82
# %bb.80:                               # %for.body329
                                        #   in Loop: Header=BB174_79 Depth=2
	movq	img, %rax
	movq	104(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	$2, (%rax,%rcx,4)
	movq	-24(%rbp), %rax
	movslq	-12(%rbp), %rcx
	movl	$2, 332(%rax,%rcx,4)
# %bb.81:                               # %for.inc338
                                        #   in Loop: Header=BB174_79 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_79
.LBB174_82:                             # %for.end341
                                        #   in Loop: Header=BB174_77 Depth=1
	jmp	.LBB174_83
.LBB174_83:                             # %for.inc342
                                        #   in Loop: Header=BB174_77 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB174_77
.LBB174_84:                             # %for.end344
	jmp	.LBB174_97
.LBB174_85:                             # %if.else345
	cmpl	$9, -28(%rbp)
	je	.LBB174_87
# %bb.86:                               # %lor.lhs.false
	cmpl	$13, -28(%rbp)
	jne	.LBB174_96
.LBB174_87:                             # %if.then350
	movl	$0, -12(%rbp)
	movq	img, %rax
	movl	148(%rax), %eax
	movl	%eax, -8(%rbp)
.LBB174_88:                             # %for.cond352
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_90 Depth 2
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	148(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_95
# %bb.89:                               # %for.body357
                                        #   in Loop: Header=BB174_88 Depth=1
	movq	img, %rax
	movl	144(%rax), %eax
	movl	%eax, -4(%rbp)
.LBB174_90:                             # %for.cond359
                                        #   Parent Loop BB174_88 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	img, %rcx
	movl	144(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB174_93
# %bb.91:                               # %for.body364
                                        #   in Loop: Header=BB174_90 Depth=2
	movq	rdopt, %rax
	movq	3136(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	movq	104(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	rdopt, %rax
	movslq	-12(%rbp), %rcx
	movl	3144(%rax,%rcx,4), %eax
	movq	-24(%rbp), %rcx
	movslq	-12(%rbp), %rdx
	movl	%eax, 332(%rcx,%rdx,4)
# %bb.92:                               # %for.inc381
                                        #   in Loop: Header=BB174_90 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB174_90
.LBB174_93:                             # %for.end384
                                        #   in Loop: Header=BB174_88 Depth=1
	jmp	.LBB174_94
.LBB174_94:                             # %for.inc385
                                        #   in Loop: Header=BB174_88 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB174_88
.LBB174_95:                             # %for.end387
	jmp	.LBB174_96
.LBB174_96:                             # %if.end388
	jmp	.LBB174_97
.LBB174_97:                             # %if.end389
	jmp	.LBB174_98
.LBB174_98:                             # %if.end390
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB174_131
# %bb.99:                               # %if.then393
	callq	copy_motion_vectors_MB
	movq	-24(%rbp), %rax
	cmpl	$9, 72(%rax)
	je	.LBB174_119
# %bb.100:                              # %lor.lhs.false397
	movq	-24(%rbp), %rax
	cmpl	$10, 72(%rax)
	je	.LBB174_119
# %bb.101:                              # %lor.lhs.false401
	movq	-24(%rbp), %rax
	cmpl	$13, 72(%rax)
	je	.LBB174_119
# %bb.102:                              # %if.then405
	movl	$0, -8(%rbp)
.LBB174_103:                            # %for.cond406
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_105 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB174_118
# %bb.104:                              # %for.body409
                                        #   in Loop: Header=BB174_103 Depth=1
	movl	$0, -4(%rbp)
.LBB174_105:                            # %for.cond410
                                        #   Parent Loop BB174_103 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB174_116
# %bb.106:                              # %for.body413
                                        #   in Loop: Header=BB174_105 Depth=2
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	movl	$2, %edi
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	472(%rsi,%rax,4), %eax
	movl	%eax, -32(%rbp)
	movq	-24(%rbp), %rsi
	movl	-4(%rbp), %eax
	cltd
	idivl	%edi
	movl	%eax, %ecx
	movl	-8(%rbp), %eax
	cltd
	idivl	%edi
	shll	$1, %eax
	addl	%eax, %ecx
	movslq	%ecx, %rax
	movl	488(%rsi,%rax,4), %eax
	movl	%eax, -40(%rbp)
	cmpl	$1, -40(%rbp)
	je	.LBB174_108
# %bb.107:                              # %if.then428
                                        #   in Loop: Header=BB174_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB174_109
.LBB174_108:                            # %if.else483
                                        #   in Loop: Header=BB174_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB174_109:                            # %if.end506
                                        #   in Loop: Header=BB174_105 Depth=2
	cmpl	$0, -36(%rbp)
	je	.LBB174_114
# %bb.110:                              # %if.then508
                                        #   in Loop: Header=BB174_105 Depth=2
	cmpl	$0, -40(%rbp)
	je	.LBB174_112
# %bb.111:                              # %if.then511
                                        #   in Loop: Header=BB174_105 Depth=2
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movq	rdopt, %rcx
	addq	$3264, %rcx             # imm = 0xCC0
	addq	$32, %rcx
	movslq	-8(%rbp), %rdx
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movslq	-4(%rbp), %rdx
	movswq	(%rcx,%rdx,2), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-32(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	enc_picture, %rcx
	movq	6504(%rcx), %rcx
	movq	8(%rcx), %rcx
	movl	-4(%rbp), %edx
	movq	img, %rsi
	addl	144(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-8(%rbp), %edx
	movq	img, %rsi
	addl	148(%rsi), %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	jmp	.LBB174_113
.LBB174_112:                            # %if.else568
                                        #   in Loop: Header=BB174_105 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB174_113:                            # %if.end591
                                        #   in Loop: Header=BB174_105 Depth=2
	jmp	.LBB174_114
.LBB174_114:                            # %if.end592
                                        #   in Loop: Header=BB174_105 Depth=2
	jmp	.LBB174_115
.LBB174_115:                            # %for.inc593
                                        #   in Loop: Header=BB174_105 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB174_105
.LBB174_116:                            # %for.end595
                                        #   in Loop: Header=BB174_103 Depth=1
	jmp	.LBB174_117
.LBB174_117:                            # %for.inc596
                                        #   in Loop: Header=BB174_103 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB174_103
.LBB174_118:                            # %for.end598
	jmp	.LBB174_130
.LBB174_119:                            # %if.else599
	movl	$0, -8(%rbp)
.LBB174_120:                            # %for.cond600
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB174_122 Depth 2
	cmpl	$4, -8(%rbp)
	jge	.LBB174_129
# %bb.121:                              # %for.body603
                                        #   in Loop: Header=BB174_120 Depth=1
	movl	$0, -4(%rbp)
.LBB174_122:                            # %for.cond604
                                        #   Parent Loop BB174_120 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	cmpl	$4, -4(%rbp)
	jge	.LBB174_127
# %bb.123:                              # %for.body607
                                        #   in Loop: Header=BB174_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
	cmpl	$0, -36(%rbp)
	je	.LBB174_125
# %bb.124:                              # %if.then631
                                        #   in Loop: Header=BB174_122 Depth=2
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, (%rax)
	movq	enc_picture, %rax
	movq	6504(%rax), %rax
	movq	8(%rax), %rax
	movl	-4(%rbp), %ecx
	movq	img, %rdx
	addl	144(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-8(%rbp), %ecx
	movq	img, %rdx
	addl	148(%rdx), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movw	$0, 2(%rax)
.LBB174_125:                            # %if.end654
                                        #   in Loop: Header=BB174_122 Depth=2
	jmp	.LBB174_126
.LBB174_126:                            # %for.inc655
                                        #   in Loop: Header=BB174_122 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB174_122
.LBB174_127:                            # %for.end657
                                        #   in Loop: Header=BB174_120 Depth=1
	jmp	.LBB174_128
.LBB174_128:                            # %for.inc658
                                        #   in Loop: Header=BB174_120 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB174_120
.LBB174_129:                            # %for.end660
	jmp	.LBB174_130
.LBB174_130:                            # %if.end661
	jmp	.LBB174_131
.LBB174_131:                            # %if.end662
	cmpl	$1961770333, -48(%rbp)  # imm = 0x74EE3D5D
	jne	.LBB174_133
.LBB174_132:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB174_133:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB174_132
.Lfunc_end174:
	.size	copy_rdopt_data.138, .Lfunc_end174-copy_rdopt_data.138
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.139
	.type	ReadOneFrame.139,@function
ReadOneFrame.139:                       # @ReadOneFrame.139
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$643838529, -68(%rbp)   # imm = 0x26603241
	movl	%edi, -60(%rbp)
	movl	%esi, -64(%rbp)
	movl	%edx, -28(%rbp)
	movl	%ecx, -40(%rbp)
	movl	%r8d, -36(%rbp)
	movl	%r9d, -32(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -8(%rbp)
	movl	-28(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-36(%rbp), %eax
	imull	-32(%rbp), %eax
	movl	%eax, -76(%rbp)
	movl	-72(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -4(%rbp)
	movl	-76(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-4(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB175_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB175_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -44(%rbp)
	movl	-28(%rbp), %eax
	imull	-40(%rbp), %eax
	imull	-8(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB175_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB175_4:                              # %if.end
	movl	p_in, %edi
	movslq	-64(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-64(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB175_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB175_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB175_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB175_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-60(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB175_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-60(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB175_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB175_26
# %bb.11:                               # %if.then42
	cmpl	$0, -44(%rbp)
	je	.LBB175_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB175_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-4(%rbp), %rdx
	callq	read
	movslq	-4(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB175_15
# %bb.14:                               # %if.then52
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB175_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-28(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB175_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB175_18
# %bb.17:                               # %if.then64
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB175_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB175_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB175_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB175_22
# %bb.21:                               # %if.then76
	movl	-4(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB175_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-36(%rbp), %edx
	movl	-32(%rbp), %ecx
	movl	-8(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -44(%rbp)
	je	.LBB175_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB175_24:                             # %if.end85
	jmp	.LBB175_25
.LBB175_25:                             # %if.end86
	jmp	.LBB175_27
.LBB175_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB175_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$643838529, -68(%rbp)   # imm = 0x26603241
	jne	.LBB175_29
.LBB175_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB175_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB175_28
.Lfunc_end175:
	.size	ReadOneFrame.139, .Lfunc_end175-ReadOneFrame.139
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.140
	.type	frame_mode_buffer.140,@function
frame_mode_buffer.140:                  # @frame_mode_buffer.140
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$916372132, -16(%rbp)   # imm = 0x369EBAA4
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -12(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB176_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB176_3
.LBB176_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB176_3:                              # %if.end
	cmpl	$916372132, -16(%rbp)   # imm = 0x369EBAA4
	jne	.LBB176_5
.LBB176_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB176_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB176_4
.Lfunc_end176:
	.size	frame_mode_buffer.140, .Lfunc_end176-frame_mode_buffer.140
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.141
.LCPI177_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI177_1:
	.quad	4611686018427387904     # double 2
.LCPI177_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.141,@function
picture_structure_decision.141:         # @picture_structure_decision.141
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI177_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI177_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$1173092808, -40(%rbp)  # imm = 0x45EBF9C8
	movq	%rdi, -24(%rbp)
	movq	%rsi, -16(%rbp)
	movq	%rdx, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -28(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI177_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-28(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -44(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -36(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -32(%rbp)
	vmovss	-44(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-36(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-48(%rbp), %edi
	movl	-32(%rbp), %esi
	vmovsd	-56(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1173092808, -40(%rbp)  # imm = 0x45EBF9C8
	jne	.LBB177_2
.LBB177_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB177_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB177_1
.Lfunc_end177:
	.size	picture_structure_decision.141, .Lfunc_end177-picture_structure_decision.141
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.142
	.type	writeout_picture.142,@function
writeout_picture.142:                   # @writeout_picture.142
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$439133714, -28(%rbp)   # imm = 0x1A2CA612
	movq	%rdi, -24(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB178_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB178_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB178_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB178_1 Depth=1
	movq	-24(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB178_3:                              # %for.cond1
                                        #   Parent Loop BB178_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB178_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB178_3 Depth=2
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-16(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB178_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB178_3
.LBB178_6:                              # %for.end
                                        #   in Loop: Header=BB178_1 Depth=1
	jmp	.LBB178_7
.LBB178_7:                              # %for.inc10
                                        #   in Loop: Header=BB178_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB178_1
.LBB178_8:                              # %for.end12
	cmpl	$439133714, -28(%rbp)   # imm = 0x1A2CA612
	jne	.LBB178_10
.LBB178_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB178_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB178_9
.Lfunc_end178:
	.size	writeout_picture.142, .Lfunc_end178-writeout_picture.142
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.143
.LCPI179_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.143,@function
init_field.143:                         # @init_field.143
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$942384152, -16(%rbp)   # imm = 0x382BA418
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB179_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB179_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB179_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB179_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB179_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB179_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB179_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB179_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB179_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB179_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB179_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB179_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB179_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB179_15
.LBB179_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB179_15:                             # %if.end38
	jmp	.LBB179_23
.LBB179_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB179_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB179_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB179_20
.LBB179_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB179_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB179_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB179_22:                             # %if.end56
	jmp	.LBB179_23
.LBB179_23:                             # %if.end57
	jmp	.LBB179_24
.LBB179_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB179_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB179_26:                             # %if.end66
	jmp	.LBB179_77
.LBB179_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB179_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB179_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB179_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB179_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB179_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_29
.LBB179_32:                             # %for.end
	jmp	.LBB179_38
.LBB179_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB179_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB179_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB179_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB179_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB179_34
.LBB179_37:                             # %for.end134
	jmp	.LBB179_38
.LBB179_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB179_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB179_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB179_41:                             # %if.end147
	vmovsd	.LCPI179_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB179_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI179_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB179_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB179_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI179_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB179_46
.LBB179_45:                             # %if.else174
	vmovsd	.LCPI179_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB179_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB179_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB179_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB179_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB179_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB179_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB179_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB179_54
.LBB179_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB179_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB179_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB179_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB179_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB179_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB179_63
.LBB179_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB179_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB179_62
.LBB179_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB179_62:                             # %cond.end
.LBB179_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB179_71
.LBB179_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB179_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB179_70
.LBB179_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB179_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB179_69
.LBB179_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB179_69:                             # %cond.end256
.LBB179_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB179_71:                             # %if.end261
	jmp	.LBB179_72
.LBB179_72:                             # %if.end262
	jmp	.LBB179_76
.LBB179_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB179_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB179_75:                             # %if.end273
	jmp	.LBB179_76
.LBB179_76:                             # %if.end274
	jmp	.LBB179_77
.LBB179_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$942384152, -16(%rbp)   # imm = 0x382BA418
	jne	.LBB179_79
.LBB179_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB179_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB179_78
.Lfunc_end179:
	.size	init_field.143, .Lfunc_end179-init_field.143
	.cfi_endproc
                                        # -- End function
	.globl	UnifiedOneForthPix.144  # -- Begin function UnifiedOneForthPix.144
	.p2align	4, 0x90
	.type	UnifiedOneForthPix.144,@function
UnifiedOneForthPix.144:                 # @UnifiedOneForthPix.144
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$88, %rsp
	.cfi_offset %rbx, -56
	.cfi_offset %r12, -48
	.cfi_offset %r13, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$1412069752, -108(%rbp) # imm = 0x542A7978
	movq	%rdi, -64(%rbp)
	movq	-64(%rbp), %rax
	movq	6424(%rax), %rax
	movq	%rax, -104(%rbp)
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movl	%eax, -56(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	movl	%eax, -52(%rbp)
	movq	-64(%rbp), %rax
	cmpq	$0, 6448(%rax)
	jne	.LBB180_2
# %bb.1:                                # %lor.lhs.false
	movq	-64(%rbp), %rax
	cmpq	$0, 6432(%rax)
	je	.LBB180_3
.LBB180_2:                              # %if.then
	jmp	.LBB180_266
.LBB180_3:                              # %if.end
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6432(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6432(%rax), %rcx
	jne	.LBB180_5
# %bb.4:                                # %if.then9
	movabsq	$.L.str.1, %rdi
	callq	no_mem_exit
.LBB180_5:                              # %if.end10
	movq	-64(%rbp), %rdi
	addq	$6448, %rdi             # imm = 0x1930
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
	movq	input, %rax
	cmpl	$0, 1284(%rax)
	jne	.LBB180_8
# %bb.6:                                # %lor.lhs.false19
	movq	input, %rax
	cmpl	$0, 1288(%rax)
	jne	.LBB180_8
# %bb.7:                                # %lor.lhs.false21
	movq	input, %rax
	cmpl	$0, 60(%rax)
	je	.LBB180_11
.LBB180_8:                              # %if.then23
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	movq	-64(%rbp), %rcx
	imull	6396(%rcx), %eax
	movslq	%eax, %rdi
	shlq	$1, %rdi
	callq	malloc
	xorl	%ecx, %ecx
	movq	-64(%rbp), %rdx
	movq	%rax, 6440(%rdx)
	movq	-64(%rbp), %rax
	cmpq	6440(%rax), %rcx
	jne	.LBB180_10
# %bb.9:                                # %if.then33
	movabsq	$.L.str.2, %rdi
	callq	no_mem_exit
.LBB180_10:                             # %if.end34
	movq	-64(%rbp), %rdi
	addq	$6456, %rdi             # imm = 0x1938
	movq	-64(%rbp), %rax
	movl	6396(%rax), %esi
	addl	$8, %esi
	shll	$2, %esi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	addl	$8, %edx
	shll	$2, %edx
	callq	get_mem2Dpel
.LBB180_11:                             # %if.end42
	movq	-64(%rbp), %rax
	movq	6448(%rax), %rax
	movq	%rax, -80(%rbp)
	movq	-64(%rbp), %rax
	movq	6432(%rax), %rax
	movq	%rax, -120(%rbp)
	movl	$-4, -48(%rbp)
.LBB180_12:                             # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_14 Depth 2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_91
# %bb.13:                               # %for.body
                                        #   in Loop: Header=BB180_12 Depth=1
	movl	$-4, -44(%rbp)
.LBB180_14:                             # %for.cond49
                                        #   Parent Loop BB180_12 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_89
# %bb.15:                               # %for.body54
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB180_17
# %bb.16:                               # %cond.true
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB180_18
.LBB180_17:                             # %cond.false
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-48(%rbp), %eax
.LBB180_18:                             # %cond.end
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB180_20
# %bb.19:                               # %cond.true62
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%eax, %eax
	jmp	.LBB180_24
.LBB180_20:                             # %cond.false63
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	cmpl	-48(%rbp), %eax
	jge	.LBB180_22
# %bb.21:                               # %cond.true68
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	subl	$1, %eax
	jmp	.LBB180_23
.LBB180_22:                             # %cond.false71
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-48(%rbp), %eax
.LBB180_23:                             # %cond.end72
                                        #   in Loop: Header=BB180_14 Depth=2
.LBB180_24:                             # %cond.end74
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	%eax, -84(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	-104(%rbp), %rcx
	movslq	-84(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB180_26
# %bb.25:                               # %cond.true80
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB180_27
.LBB180_26:                             # %cond.false83
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %edx
.LBB180_27:                             # %cond.end84
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%esi, %esi
	cmpl	%edx, %esi
	jle	.LBB180_29
# %bb.28:                               # %cond.true88
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%edx, %edx
	jmp	.LBB180_33
.LBB180_29:                             # %cond.false89
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	cmpl	-44(%rbp), %edx
	jge	.LBB180_31
# %bb.30:                               # %cond.true94
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rdx
	movl	6392(%rdx), %edx
	subl	$1, %edx
	jmp	.LBB180_32
.LBB180_31:                             # %cond.false97
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %edx
.LBB180_32:                             # %cond.end98
                                        #   in Loop: Header=BB180_14 Depth=2
.LBB180_33:                             # %cond.end100
                                        #   in Loop: Header=BB180_14 Depth=2
	movslq	%edx, %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB180_35
# %bb.34:                               # %cond.true112
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB180_36
.LBB180_35:                             # %cond.false115
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB180_36:                             # %cond.end117
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB180_38
# %bb.37:                               # %cond.true121
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB180_42
.LBB180_38:                             # %cond.false122
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB180_40
# %bb.39:                               # %cond.true128
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB180_41
.LBB180_40:                             # %cond.false131
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %esi
	addl	$1, %esi
.LBB180_41:                             # %cond.end133
                                        #   in Loop: Header=BB180_14 Depth=2
.LBB180_42:                             # %cond.end135
                                        #   in Loop: Header=BB180_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	addl	%edx, %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB180_44
# %bb.43:                               # %cond.true149
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB180_45
.LBB180_44:                             # %cond.false152
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB180_45:                             # %cond.end154
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB180_47
# %bb.46:                               # %cond.true158
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB180_51
.LBB180_47:                             # %cond.false159
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB180_49
# %bb.48:                               # %cond.true165
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB180_50
.LBB180_49:                             # %cond.false168
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$1, %esi
.LBB180_50:                             # %cond.end170
                                        #   in Loop: Header=BB180_14 Depth=2
.LBB180_51:                             # %cond.end172
                                        #   in Loop: Header=BB180_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB180_53
# %bb.52:                               # %cond.true184
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB180_54
.LBB180_53:                             # %cond.false187
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB180_54:                             # %cond.end189
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB180_56
# %bb.55:                               # %cond.true193
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB180_60
.LBB180_56:                             # %cond.false194
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB180_58
# %bb.57:                               # %cond.true200
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB180_59
.LBB180_58:                             # %cond.false203
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$2, %edi
.LBB180_59:                             # %cond.end205
                                        #   in Loop: Header=BB180_14 Depth=2
.LBB180_60:                             # %cond.end207
                                        #   in Loop: Header=BB180_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	-104(%rbp), %rdx
	movslq	-84(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB180_62
# %bb.61:                               # %cond.true222
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB180_63
.LBB180_62:                             # %cond.false225
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB180_63:                             # %cond.end227
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%edi, %edi
	cmpl	%esi, %edi
	jle	.LBB180_65
# %bb.64:                               # %cond.true231
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%esi, %esi
	jmp	.LBB180_69
.LBB180_65:                             # %cond.false232
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	movl	-44(%rbp), %edi
	subl	$2, %edi
	cmpl	%edi, %esi
	jge	.LBB180_67
# %bb.66:                               # %cond.true238
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rsi
	movl	6392(%rsi), %esi
	subl	$1, %esi
	jmp	.LBB180_68
.LBB180_67:                             # %cond.false241
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %esi
	subl	$2, %esi
.LBB180_68:                             # %cond.end243
                                        #   in Loop: Header=BB180_14 Depth=2
.LBB180_69:                             # %cond.end245
                                        #   in Loop: Header=BB180_14 Depth=2
	movslq	%esi, %rsi
	movzwl	(%rdx,%rsi,2), %edx
	movq	-104(%rbp), %rsi
	movslq	-84(%rbp), %rdi
	movq	(%rsi,%rdi,8), %rsi
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB180_71
# %bb.70:                               # %cond.true257
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB180_72
.LBB180_71:                             # %cond.false260
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB180_72:                             # %cond.end262
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%ebx, %ebx
	cmpl	%edi, %ebx
	jle	.LBB180_74
# %bb.73:                               # %cond.true266
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%edi, %edi
	jmp	.LBB180_78
.LBB180_74:                             # %cond.false267
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	movl	-44(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB180_76
# %bb.75:                               # %cond.true273
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rdi
	movl	6392(%rdi), %edi
	subl	$1, %edi
	jmp	.LBB180_77
.LBB180_76:                             # %cond.false276
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %edi
	addl	$3, %edi
.LBB180_77:                             # %cond.end278
                                        #   in Loop: Header=BB180_14 Depth=2
.LBB180_78:                             # %cond.end280
                                        #   in Loop: Header=BB180_14 Depth=2
	movslq	%edi, %rdi
	movzwl	(%rsi,%rdi,2), %esi
	addl	%esi, %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	%eax, -92(%rbp)
	movq	-104(%rbp), %rax
	movslq	-84(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB180_80
# %bb.79:                               # %cond.true294
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB180_81
.LBB180_80:                             # %cond.false297
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB180_81:                             # %cond.end298
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%edx, %edx
	cmpl	%ecx, %edx
	jle	.LBB180_83
# %bb.82:                               # %cond.true302
                                        #   in Loop: Header=BB180_14 Depth=2
	xorl	%ecx, %ecx
	jmp	.LBB180_87
.LBB180_83:                             # %cond.false303
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	cmpl	-44(%rbp), %ecx
	jge	.LBB180_85
# %bb.84:                               # %cond.true308
                                        #   in Loop: Header=BB180_14 Depth=2
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	subl	$1, %ecx
	jmp	.LBB180_86
.LBB180_85:                             # %cond.false311
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %ecx
.LBB180_86:                             # %cond.end312
                                        #   in Loop: Header=BB180_14 Depth=2
.LBB180_87:                             # %cond.end314
                                        #   in Loop: Header=BB180_14 Depth=2
	movslq	%ecx, %rcx
	movzwl	(%rax,%rcx,2), %eax
	shll	$10, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movl	-92(%rbp), %eax
	shll	$5, %eax
	movq	img4Y_tmp, %rcx
	movl	-48(%rbp), %edx
	addl	$4, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-44(%rbp), %edx
	addl	$4, %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.88:                               # %for.inc
                                        #   in Loop: Header=BB180_14 Depth=2
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB180_14
.LBB180_89:                             # %for.end
                                        #   in Loop: Header=BB180_12 Depth=1
	jmp	.LBB180_90
.LBB180_90:                             # %for.inc336
                                        #   in Loop: Header=BB180_12 Depth=1
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB180_12
.LBB180_91:                             # %for.end338
	movl	$0, -44(%rbp)
.LBB180_92:                             # %for.cond339
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_94 Depth 2
	movl	-44(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6392(%rcx), %ecx
	addl	$8, %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_132
# %bb.93:                               # %for.body345
                                        #   in Loop: Header=BB180_92 Depth=1
	movl	$0, -48(%rbp)
.LBB180_94:                             # %for.cond346
                                        #   Parent Loop BB180_92 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movq	-64(%rbp), %rcx
	movl	6396(%rcx), %ecx
	addl	$8, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_130
# %bb.95:                               # %for.body351
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-48(%rbp), %eax
	shll	$2, %eax
	movl	%eax, -124(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	movl	%eax, -88(%rbp)
	movl	ONE_FOURTH_TAP, %eax
	movq	img4Y_tmp, %rcx
	movslq	-48(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-44(%rbp), %rdx
	movl	(%rcx,%rdx,4), %ecx
	movq	img4Y_tmp, %rdx
	movl	-88(%rbp), %esi
	movl	-48(%rbp), %edi
	addl	$1, %edi
	cmpl	%edi, %esi
	jge	.LBB180_97
# %bb.96:                               # %cond.true363
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-88(%rbp), %esi
	jmp	.LBB180_98
.LBB180_97:                             # %cond.false364
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-48(%rbp), %esi
	addl	$1, %esi
.LBB180_98:                             # %cond.end366
                                        #   in Loop: Header=BB180_94 Depth=2
	xorl	%edi, %edi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	addl	(%rdx,%rsi,4), %ecx
	imull	%ecx, %eax
	movl	ONE_FOURTH_TAP+8, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$1, %esi
	cmpl	%esi, %edi
	jle	.LBB180_100
# %bb.99:                               # %cond.true377
                                        #   in Loop: Header=BB180_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB180_101
.LBB180_100:                            # %cond.false378
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$1, %esi
.LBB180_101:                            # %cond.end380
                                        #   in Loop: Header=BB180_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$2, %ebx
	cmpl	%ebx, %edi
	jge	.LBB180_103
# %bb.102:                              # %cond.true389
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB180_104
.LBB180_103:                            # %cond.false390
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$2, %edi
.LBB180_104:                            # %cond.end392
                                        #   in Loop: Header=BB180_94 Depth=2
	xorl	%ebx, %ebx
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	movl	ONE_FOURTH_TAP+16, %ecx
	movq	img4Y_tmp, %rdx
	movl	-48(%rbp), %esi
	subl	$2, %esi
	cmpl	%esi, %ebx
	jle	.LBB180_106
# %bb.105:                              # %cond.true404
                                        #   in Loop: Header=BB180_94 Depth=2
	xorl	%esi, %esi
	jmp	.LBB180_107
.LBB180_106:                            # %cond.false405
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-48(%rbp), %esi
	subl	$2, %esi
.LBB180_107:                            # %cond.end407
                                        #   in Loop: Header=BB180_94 Depth=2
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-44(%rbp), %rsi
	movl	(%rdx,%rsi,4), %edx
	movq	img4Y_tmp, %rsi
	movl	-88(%rbp), %edi
	movl	-48(%rbp), %ebx
	addl	$3, %ebx
	cmpl	%ebx, %edi
	jge	.LBB180_109
# %bb.108:                              # %cond.true416
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-88(%rbp), %edi
	jmp	.LBB180_110
.LBB180_109:                            # %cond.false417
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-48(%rbp), %edi
	addl	$3, %edi
.LBB180_110:                            # %cond.end419
                                        #   in Loop: Header=BB180_94 Depth=2
	movslq	%edi, %rdi
	movq	(%rsi,%rdi,8), %rsi
	movslq	-44(%rbp), %rdi
	addl	(%rsi,%rdi,4), %edx
	imull	%edx, %ecx
	addl	%ecx, %eax
	cltd
	movl	$32, %ecx
	idivl	%ecx
	movl	%eax, -92(%rbp)
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	movl	-44(%rbp), %r8d
	subl	$8, %r8d
	shll	$1, %r8d
	movq	img, %rax
	movl	72684(%rax), %ebx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
	cmpl	%eax, %ebx
	jge	.LBB180_112
# %bb.111:                              # %cond.true440
                                        #   in Loop: Header=BB180_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_113
.LBB180_112:                            # %cond.false442
                                        #   in Loop: Header=BB180_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB180_113:                            # %cond.end449
                                        #   in Loop: Header=BB180_94 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB180_115
# %bb.114:                              # %cond.true453
                                        #   in Loop: Header=BB180_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB180_119
.LBB180_115:                            # %cond.false454
                                        #   in Loop: Header=BB180_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %ecx
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rdx
	movq	(%rax,%rdx,8), %rax
	movslq	-44(%rbp), %rdx
	movl	(%rax,%rdx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %ecx
	jge	.LBB180_117
# %bb.116:                              # %cond.true464
                                        #   in Loop: Header=BB180_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_118
.LBB180_117:                            # %cond.false466
                                        #   in Loop: Header=BB180_94 Depth=2
	movq	img4Y_tmp, %rax
	movslq	-48(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-44(%rbp), %rcx
	movl	(%rax,%rcx,4), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ecx             # imm = 0x400
	idivl	%ecx
.LBB180_118:                            # %cond.end473
                                        #   in Loop: Header=BB180_94 Depth=2
.LBB180_119:                            # %cond.end475
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	%r8d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$4, %esi
	shll	$2, %esi
	addl	$2, %esi
	movl	-44(%rbp), %ecx
	subl	$8, %ecx
	shll	$1, %ecx
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB180_121
# %bb.120:                              # %cond.true488
                                        #   in Loop: Header=BB180_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_122
.LBB180_121:                            # %cond.false490
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB180_122:                            # %cond.end493
                                        #   in Loop: Header=BB180_94 Depth=2
	xorl	%edx, %edx
	cmpl	%eax, %edx
	jle	.LBB180_124
# %bb.123:                              # %cond.true497
                                        #   in Loop: Header=BB180_94 Depth=2
	xorl	%eax, %eax
	jmp	.LBB180_128
.LBB180_124:                            # %cond.false498
                                        #   in Loop: Header=BB180_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r8d
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
	cmpl	%eax, %r8d
	jge	.LBB180_126
# %bb.125:                              # %cond.true504
                                        #   in Loop: Header=BB180_94 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_127
.LBB180_126:                            # %cond.false506
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-92(%rbp), %eax
	addl	$512, %eax              # imm = 0x200
	cltd
	movl	$1024, %ebx             # imm = 0x400
	idivl	%ebx
.LBB180_127:                            # %cond.end509
                                        #   in Loop: Header=BB180_94 Depth=2
.LBB180_128:                            # %cond.end511
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	%ecx, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.129:                              # %for.inc514
                                        #   in Loop: Header=BB180_94 Depth=2
	movl	-48(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB180_94
.LBB180_130:                            # %for.end516
                                        #   in Loop: Header=BB180_92 Depth=1
	jmp	.LBB180_131
.LBB180_131:                            # %for.inc517
                                        #   in Loop: Header=BB180_92 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB180_92
.LBB180_132:                            # %for.end519
	movq	-64(%rbp), %rax
	movl	6392(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -72(%rbp)
	movq	-64(%rbp), %rax
	movl	6396(%rax), %eax
	addl	$8, %eax
	subl	$1, %eax
	shll	$2, %eax
	movl	%eax, -68(%rbp)
	movl	$0, -48(%rbp)
.LBB180_133:                            # %for.cond528
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_135 Depth 2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_161
# %bb.134:                              # %for.body532
                                        #   in Loop: Header=BB180_133 Depth=1
	movl	$0, -44(%rbp)
.LBB180_135:                            # %for.cond533
                                        #   Parent Loop BB180_133 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_159
# %bb.136:                              # %for.body537
                                        #   in Loop: Header=BB180_135 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r15d
	subl	$16, %r15d
	movl	-44(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_138
# %bb.137:                              # %cond.true551
                                        #   in Loop: Header=BB180_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_139
.LBB180_138:                            # %cond.false553
                                        #   in Loop: Header=BB180_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB180_139:                            # %cond.end555
                                        #   in Loop: Header=BB180_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB180_141
# %bb.140:                              # %cond.true565
                                        #   in Loop: Header=BB180_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_145
.LBB180_141:                            # %cond.false567
                                        #   in Loop: Header=BB180_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_143
# %bb.142:                              # %cond.true577
                                        #   in Loop: Header=BB180_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_144
.LBB180_143:                            # %cond.false579
                                        #   in Loop: Header=BB180_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB180_144:                            # %cond.end581
                                        #   in Loop: Header=BB180_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB180_145:                            # %cond.end589
                                        #   in Loop: Header=BB180_135 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB180_147
# %bb.146:                              # %cond.true593
                                        #   in Loop: Header=BB180_135 Depth=2
	xorl	%eax, %eax
	jmp	.LBB180_157
.LBB180_147:                            # %cond.false594
                                        #   in Loop: Header=BB180_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_149
# %bb.148:                              # %cond.true605
                                        #   in Loop: Header=BB180_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_150
.LBB180_149:                            # %cond.false607
                                        #   in Loop: Header=BB180_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB180_150:                            # %cond.end609
                                        #   in Loop: Header=BB180_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB180_152
# %bb.151:                              # %cond.true619
                                        #   in Loop: Header=BB180_135 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_156
.LBB180_152:                            # %cond.false621
                                        #   in Loop: Header=BB180_135 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_154
# %bb.153:                              # %cond.true631
                                        #   in Loop: Header=BB180_135 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_155
.LBB180_154:                            # %cond.false633
                                        #   in Loop: Header=BB180_135 Depth=2
	movl	-44(%rbp), %edx
	addl	$2, %edx
.LBB180_155:                            # %cond.end635
                                        #   in Loop: Header=BB180_135 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB180_156:                            # %cond.end643
                                        #   in Loop: Header=BB180_135 Depth=2
.LBB180_157:                            # %cond.end645
                                        #   in Loop: Header=BB180_135 Depth=2
	movq	%r14, %rdi
	movl	%r15d, %esi
	movl	%r12d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
# %bb.158:                              # %for.inc648
                                        #   in Loop: Header=BB180_135 Depth=2
	movl	-44(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB180_135
.LBB180_159:                            # %for.end650
                                        #   in Loop: Header=BB180_133 Depth=1
	jmp	.LBB180_160
.LBB180_160:                            # %for.inc651
                                        #   in Loop: Header=BB180_133 Depth=1
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB180_133
.LBB180_161:                            # %for.end653
	movl	$0, -44(%rbp)
.LBB180_162:                            # %for.cond654
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB180_164 Depth 2
	movl	-44(%rbp), %eax
	movl	-72(%rbp), %ecx
	addl	$4, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_265
# %bb.163:                              # %for.body658
                                        #   in Loop: Header=BB180_162 Depth=1
	movl	$0, -48(%rbp)
.LBB180_164:                            # %for.cond659
                                        #   Parent Loop BB180_162 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-48(%rbp), %eax
	movl	-68(%rbp), %ecx
	addl	$3, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_263
# %bb.165:                              # %for.body663
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB180_188
# %bb.166:                              # %if.then666
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_168
# %bb.167:                              # %cond.true679
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_169
.LBB180_168:                            # %cond.false681
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_169:                            # %cond.end683
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB180_171
# %bb.170:                              # %cond.true694
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_175
.LBB180_171:                            # %cond.false696
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_173
# %bb.172:                              # %cond.true705
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_174
.LBB180_173:                            # %cond.false707
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_174:                            # %cond.end709
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB180_175:                            # %cond.end718
                                        #   in Loop: Header=BB180_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB180_177
# %bb.176:                              # %cond.true722
                                        #   in Loop: Header=BB180_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB180_187
.LBB180_177:                            # %cond.false723
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_179
# %bb.178:                              # %cond.true733
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_180
.LBB180_179:                            # %cond.false735
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_180:                            # %cond.end737
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB180_182
# %bb.181:                              # %cond.true748
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_186
.LBB180_182:                            # %cond.false750
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_184
# %bb.183:                              # %cond.true759
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_185
.LBB180_184:                            # %cond.false761
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_185:                            # %cond.end763
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB180_186:                            # %cond.end772
                                        #   in Loop: Header=BB180_164 Depth=2
.LBB180_187:                            # %cond.end774
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB180_261
.LBB180_188:                            # %if.else
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB180_190
# %bb.189:                              # %land.lhs.true
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$1, %edx
	je	.LBB180_192
.LBB180_190:                            # %lor.lhs.false783
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$2, %edx
	jne	.LBB180_226
# %bb.191:                              # %land.lhs.true787
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-44(%rbp), %eax
	cltd
	movl	$4, %ecx
	idivl	%ecx
	cmpl	$3, %edx
	jne	.LBB180_226
.LBB180_192:                            # %if.then791
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_194
# %bb.193:                              # %cond.true801
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_195
.LBB180_194:                            # %cond.false803
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB180_195:                            # %cond.end805
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_197
# %bb.196:                              # %cond.true814
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_198
.LBB180_197:                            # %cond.false816
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_198:                            # %cond.end818
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB180_200
# %bb.199:                              # %cond.true830
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_207
.LBB180_200:                            # %cond.false832
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_202
# %bb.201:                              # %cond.true838
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_203
.LBB180_202:                            # %cond.false840
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB180_203:                            # %cond.end842
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_205
# %bb.204:                              # %cond.true851
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_206
.LBB180_205:                            # %cond.false853
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_206:                            # %cond.end855
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB180_207:                            # %cond.end865
                                        #   in Loop: Header=BB180_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB180_209
# %bb.208:                              # %cond.true869
                                        #   in Loop: Header=BB180_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB180_225
.LBB180_209:                            # %cond.false870
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_211
# %bb.210:                              # %cond.true877
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_212
.LBB180_211:                            # %cond.false879
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB180_212:                            # %cond.end881
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_214
# %bb.213:                              # %cond.true890
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_215
.LBB180_214:                            # %cond.false892
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_215:                            # %cond.end894
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB180_217
# %bb.216:                              # %cond.true906
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_224
.LBB180_217:                            # %cond.false908
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_219
# %bb.218:                              # %cond.true914
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_220
.LBB180_219:                            # %cond.false916
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB180_220:                            # %cond.end918
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_222
# %bb.221:                              # %cond.true927
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_223
.LBB180_222:                            # %cond.false929
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_223:                            # %cond.end931
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB180_224:                            # %cond.end941
                                        #   in Loop: Header=BB180_164 Depth=2
.LBB180_225:                            # %cond.end943
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
	jmp	.LBB180_260
.LBB180_226:                            # %if.else946
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	-80(%rbp), %r14
	movl	-48(%rbp), %r12d
	subl	$16, %r12d
	addl	$1, %r12d
	movl	-44(%rbp), %r15d
	subl	$16, %r15d
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_228
# %bb.227:                              # %cond.true960
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_229
.LBB180_228:                            # %cond.false962
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_229:                            # %cond.end964
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_231
# %bb.230:                              # %cond.true971
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_232
.LBB180_231:                            # %cond.false973
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB180_232:                            # %cond.end975
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB180_234
# %bb.233:                              # %cond.true985
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_241
.LBB180_234:                            # %cond.false987
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_236
# %bb.235:                              # %cond.true997
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_237
.LBB180_236:                            # %cond.false999
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_237:                            # %cond.end1001
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_239
# %bb.238:                              # %cond.true1008
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_240
.LBB180_239:                            # %cond.false1010
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB180_240:                            # %cond.end1012
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB180_241:                            # %cond.end1020
                                        #   in Loop: Header=BB180_164 Depth=2
	xorl	%ecx, %ecx
	cmpl	%eax, %ecx
	jle	.LBB180_243
# %bb.242:                              # %cond.true1024
                                        #   in Loop: Header=BB180_164 Depth=2
	xorl	%eax, %eax
	jmp	.LBB180_259
.LBB180_243:                            # %cond.false1025
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %r13d
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_245
# %bb.244:                              # %cond.true1036
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_246
.LBB180_245:                            # %cond.false1038
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_246:                            # %cond.end1040
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_248
# %bb.247:                              # %cond.true1047
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_249
.LBB180_248:                            # %cond.false1049
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB180_249:                            # %cond.end1051
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	cmpl	%eax, %r13d
	jge	.LBB180_251
# %bb.250:                              # %cond.true1061
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	img, %rax
	movl	72684(%rax), %eax
	jmp	.LBB180_258
.LBB180_251:                            # %cond.false1063
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	-80(%rbp), %rdi
	movl	-48(%rbp), %esi
	subl	$16, %esi
	movl	-44(%rbp), %edx
	subl	$16, %edx
	subl	$1, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %ebx
	movq	-80(%rbp), %rdi
	movl	-68(%rbp), %eax
	addl	$2, %eax
	movl	-48(%rbp), %ecx
	addl	$2, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_253
# %bb.252:                              # %cond.true1073
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-68(%rbp), %esi
	addl	$2, %esi
	jmp	.LBB180_254
.LBB180_253:                            # %cond.false1075
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %esi
	addl	$2, %esi
.LBB180_254:                            # %cond.end1077
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %esi
	movl	-72(%rbp), %eax
	addl	$2, %eax
	movl	-44(%rbp), %ecx
	addl	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB180_256
# %bb.255:                              # %cond.true1084
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-72(%rbp), %edx
	addl	$2, %edx
	jmp	.LBB180_257
.LBB180_256:                            # %cond.false1086
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-44(%rbp), %edx
	addl	$1, %edx
.LBB180_257:                            # %cond.end1088
                                        #   in Loop: Header=BB180_164 Depth=2
	subl	$16, %edx
	movl	-52(%rbp), %ecx
	movl	-56(%rbp), %r8d
	callq	FastPelY_14
	movzwl	%ax, %eax
	addl	%eax, %ebx
	addl	$1, %ebx
	movl	%ebx, %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
.LBB180_258:                            # %cond.end1096
                                        #   in Loop: Header=BB180_164 Depth=2
.LBB180_259:                            # %cond.end1098
                                        #   in Loop: Header=BB180_164 Depth=2
	movq	%r14, %rdi
	movl	%r12d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_14
.LBB180_260:                            # %if.end1101
                                        #   in Loop: Header=BB180_164 Depth=2
	jmp	.LBB180_261
.LBB180_261:                            # %if.end1102
                                        #   in Loop: Header=BB180_164 Depth=2
	jmp	.LBB180_262
.LBB180_262:                            # %for.inc1103
                                        #   in Loop: Header=BB180_164 Depth=2
	movl	-48(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -48(%rbp)
	jmp	.LBB180_164
.LBB180_263:                            # %for.end1105
                                        #   in Loop: Header=BB180_162 Depth=1
	jmp	.LBB180_264
.LBB180_264:                            # %for.inc1106
                                        #   in Loop: Header=BB180_162 Depth=1
	movl	-44(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -44(%rbp)
	jmp	.LBB180_162
.LBB180_265:                            # %for.end1108
	movq	-80(%rbp), %rdi
	movq	-120(%rbp), %rsi
	movq	-64(%rbp), %rax
	movl	6392(%rax), %edx
	movq	-64(%rbp), %rax
	movl	6396(%rax), %ecx
	callq	GenerateFullPelRepresentation
.LBB180_266:                            # %return
	cmpl	$1412069752, -108(%rbp) # imm = 0x542A7978
	jne	.LBB180_268
.LBB180_267:
	addq	$88, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB180_268:                            # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB180_267
.Lfunc_end180:
	.size	UnifiedOneForthPix.144, .Lfunc_end180-UnifiedOneForthPix.144
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.145
	.type	find_distortion.145,@function
find_distortion.145:                    # @find_distortion.145
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$1791815281, -44(%rbp)  # imm = 0x6ACCEE71
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB181_20
# %bb.1:                                # %if.then
	movq	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB181_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB181_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB181_2 Depth=1
	movl	$0, -12(%rbp)
.LBB181_4:                              # %for.cond3
                                        #   Parent Loop BB181_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB181_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB181_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB181_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB181_4
.LBB181_7:                              # %for.end
                                        #   in Loop: Header=BB181_2 Depth=1
	jmp	.LBB181_8
.LBB181_8:                              # %for.inc17
                                        #   in Loop: Header=BB181_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB181_2
.LBB181_9:                              # %for.end19
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB181_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB181_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB181_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB181_11 Depth=1
	movl	$0, -12(%rbp)
.LBB181_13:                             # %for.cond27
                                        #   Parent Loop BB181_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB181_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB181_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB181_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB181_13
.LBB181_16:                             # %for.end71
                                        #   in Loop: Header=BB181_11 Depth=1
	jmp	.LBB181_17
.LBB181_17:                             # %for.inc72
                                        #   in Loop: Header=BB181_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB181_11
.LBB181_18:                             # %for.end74
	jmp	.LBB181_19
.LBB181_19:                             # %if.end
	jmp	.LBB181_39
.LBB181_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -24(%rbp)
	movl	$0, -16(%rbp)
.LBB181_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB181_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB181_21 Depth=1
	movl	$0, -12(%rbp)
.LBB181_23:                             # %for.cond80
                                        #   Parent Loop BB181_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB181_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB181_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB181_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB181_23
.LBB181_26:                             # %for.end104
                                        #   in Loop: Header=BB181_21 Depth=1
	jmp	.LBB181_27
.LBB181_27:                             # %for.inc105
                                        #   in Loop: Header=BB181_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB181_21
.LBB181_28:                             # %for.end107
	movq	$0, -32(%rbp)
	movq	$0, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB181_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB181_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB181_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB181_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB181_30 Depth=1
	movl	$0, -12(%rbp)
.LBB181_32:                             # %for.cond117
                                        #   Parent Loop BB181_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB181_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB181_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB181_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB181_32
.LBB181_35:                             # %for.end163
                                        #   in Loop: Header=BB181_30 Depth=1
	jmp	.LBB181_36
.LBB181_36:                             # %for.inc164
                                        #   in Loop: Header=BB181_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB181_30
.LBB181_37:                             # %for.end166
	jmp	.LBB181_38
.LBB181_38:                             # %if.end167
	jmp	.LBB181_39
.LBB181_39:                             # %if.end168
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$1791815281, -44(%rbp)  # imm = 0x6ACCEE71
	jne	.LBB181_41
.LBB181_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB181_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB181_40
.Lfunc_end181:
	.size	find_distortion.145, .Lfunc_end181-find_distortion.145
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.146
	.type	frame_mode_buffer.146,@function
frame_mode_buffer.146:                  # @frame_mode_buffer.146
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1208685930, -4(%rbp)   # imm = 0x480B156A
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -16(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB182_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB182_3
.LBB182_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB182_3:                              # %if.end
	cmpl	$1208685930, -4(%rbp)   # imm = 0x480B156A
	jne	.LBB182_5
.LBB182_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB182_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB182_4
.Lfunc_end182:
	.size	frame_mode_buffer.146, .Lfunc_end182-frame_mode_buffer.146
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.147       # -- Begin function MbAffPostProc.147
	.p2align	4, 0x90
	.type	MbAffPostProc.147,@function
MbAffPostProc.147:                      # @MbAffPostProc.147
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$1694095076, -44(%rbp)  # imm = 0x64F9D6E4
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB183_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB183_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_5 Depth 2
                                        #       Child Loop BB183_7 Depth 3
                                        #     Child Loop BB183_13 Depth 2
                                        #       Child Loop BB183_15 Depth 3
                                        #     Child Loop BB183_21 Depth 2
                                        #       Child Loop BB183_23 Depth 3
                                        #         Child Loop BB183_25 Depth 4
                                        #       Child Loop BB183_31 Depth 3
                                        #         Child Loop BB183_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB183_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB183_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB183_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB183_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB183_5:                              # %for.cond5
                                        #   Parent Loop BB183_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB183_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB183_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB183_5 Depth=2
	movl	$0, -4(%rbp)
.LBB183_7:                              # %for.cond8
                                        #   Parent Loop BB183_2 Depth=1
                                        #     Parent Loop BB183_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB183_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB183_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB183_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_7
.LBB183_10:                             # %for.end
                                        #   in Loop: Header=BB183_5 Depth=2
	jmp	.LBB183_11
.LBB183_11:                             # %for.inc20
                                        #   in Loop: Header=BB183_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB183_5
.LBB183_12:                             # %for.end22
                                        #   in Loop: Header=BB183_2 Depth=1
	movl	$0, -8(%rbp)
.LBB183_13:                             # %for.cond23
                                        #   Parent Loop BB183_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB183_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB183_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB183_13 Depth=2
	movl	$0, -4(%rbp)
.LBB183_15:                             # %for.cond26
                                        #   Parent Loop BB183_2 Depth=1
                                        #     Parent Loop BB183_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB183_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB183_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB183_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_15
.LBB183_18:                             # %for.end54
                                        #   in Loop: Header=BB183_13 Depth=2
	jmp	.LBB183_19
.LBB183_19:                             # %for.inc55
                                        #   in Loop: Header=BB183_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB183_13
.LBB183_20:                             # %for.end57
                                        #   in Loop: Header=BB183_2 Depth=1
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	$0, -24(%rbp)
.LBB183_21:                             # %for.cond61
                                        #   Parent Loop BB183_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB183_23 Depth 3
                                        #         Child Loop BB183_25 Depth 4
                                        #       Child Loop BB183_31 Depth 3
                                        #         Child Loop BB183_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB183_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB183_21 Depth=2
	movl	$0, -8(%rbp)
.LBB183_23:                             # %for.cond64
                                        #   Parent Loop BB183_2 Depth=1
                                        #     Parent Loop BB183_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB183_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB183_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB183_23 Depth=3
	movl	$0, -4(%rbp)
.LBB183_25:                             # %for.cond69
                                        #   Parent Loop BB183_2 Depth=1
                                        #     Parent Loop BB183_21 Depth=2
                                        #       Parent Loop BB183_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB183_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB183_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB183_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_25
.LBB183_28:                             # %for.end87
                                        #   in Loop: Header=BB183_23 Depth=3
	jmp	.LBB183_29
.LBB183_29:                             # %for.inc88
                                        #   in Loop: Header=BB183_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB183_23
.LBB183_30:                             # %for.end90
                                        #   in Loop: Header=BB183_21 Depth=2
	movl	$0, -8(%rbp)
.LBB183_31:                             # %for.cond91
                                        #   Parent Loop BB183_2 Depth=1
                                        #     Parent Loop BB183_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB183_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB183_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB183_31 Depth=3
	movl	$0, -4(%rbp)
.LBB183_33:                             # %for.cond95
                                        #   Parent Loop BB183_2 Depth=1
                                        #     Parent Loop BB183_21 Depth=2
                                        #       Parent Loop BB183_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB183_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB183_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB183_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_33
.LBB183_36:                             # %for.end130
                                        #   in Loop: Header=BB183_31 Depth=3
	jmp	.LBB183_37
.LBB183_37:                             # %for.inc131
                                        #   in Loop: Header=BB183_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB183_31
.LBB183_38:                             # %for.end133
                                        #   in Loop: Header=BB183_21 Depth=2
	jmp	.LBB183_39
.LBB183_39:                             # %for.inc134
                                        #   in Loop: Header=BB183_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB183_21
.LBB183_40:                             # %for.end136
                                        #   in Loop: Header=BB183_2 Depth=1
	jmp	.LBB183_41
.LBB183_41:                             # %if.end
                                        #   in Loop: Header=BB183_2 Depth=1
	jmp	.LBB183_42
.LBB183_42:                             # %for.inc137
                                        #   in Loop: Header=BB183_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB183_2
.LBB183_43:                             # %for.end139
	jmp	.LBB183_67
.LBB183_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB183_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB183_48 Depth 2
                                        #       Child Loop BB183_50 Depth 3
                                        #     Child Loop BB183_56 Depth 2
                                        #       Child Loop BB183_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB183_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB183_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB183_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB183_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-12(%rbp), %rsi
	leaq	-16(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB183_48:                             # %for.cond149
                                        #   Parent Loop BB183_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB183_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB183_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB183_48 Depth=2
	movl	$0, -4(%rbp)
.LBB183_50:                             # %for.cond152
                                        #   Parent Loop BB183_45 Depth=1
                                        #     Parent Loop BB183_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB183_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB183_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-16(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB183_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_50
.LBB183_53:                             # %for.end167
                                        #   in Loop: Header=BB183_48 Depth=2
	jmp	.LBB183_54
.LBB183_54:                             # %for.inc168
                                        #   in Loop: Header=BB183_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB183_48
.LBB183_55:                             # %for.end170
                                        #   in Loop: Header=BB183_45 Depth=1
	movl	$0, -8(%rbp)
.LBB183_56:                             # %for.cond171
                                        #   Parent Loop BB183_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB183_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB183_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB183_56 Depth=2
	movl	$0, -4(%rbp)
.LBB183_58:                             # %for.cond174
                                        #   Parent Loop BB183_45 Depth=1
                                        #     Parent Loop BB183_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB183_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB183_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-16(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-16(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB183_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB183_58
.LBB183_61:                             # %for.end203
                                        #   in Loop: Header=BB183_56 Depth=2
	jmp	.LBB183_62
.LBB183_62:                             # %for.inc204
                                        #   in Loop: Header=BB183_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB183_56
.LBB183_63:                             # %for.end206
                                        #   in Loop: Header=BB183_45 Depth=1
	jmp	.LBB183_64
.LBB183_64:                             # %if.end207
                                        #   in Loop: Header=BB183_45 Depth=1
	jmp	.LBB183_65
.LBB183_65:                             # %for.inc208
                                        #   in Loop: Header=BB183_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB183_45
.LBB183_66:                             # %for.end210
	jmp	.LBB183_67
.LBB183_67:                             # %if.end211
	cmpl	$1694095076, -44(%rbp)  # imm = 0x64F9D6E4
	jne	.LBB183_69
.LBB183_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB183_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB183_68
.Lfunc_end183:
	.size	MbAffPostProc.147, .Lfunc_end183-MbAffPostProc.147
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.148
	.type	copy_motion_vectors_MB.148,@function
copy_motion_vectors_MB.148:             # @copy_motion_vectors_MB.148
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$711810332, -20(%rbp)   # imm = 0x2A6D5D1C
	movl	$0, -12(%rbp)
.LBB184_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB184_3 Depth 2
                                        #       Child Loop BB184_5 Depth 3
                                        #         Child Loop BB184_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB184_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB184_1 Depth=1
	movl	$0, -16(%rbp)
.LBB184_3:                              # %for.cond1
                                        #   Parent Loop BB184_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB184_5 Depth 3
                                        #         Child Loop BB184_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB184_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB184_3 Depth=2
	movl	$0, -4(%rbp)
.LBB184_5:                              # %for.cond4
                                        #   Parent Loop BB184_1 Depth=1
                                        #     Parent Loop BB184_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB184_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB184_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB184_5 Depth=3
	movl	$0, -8(%rbp)
.LBB184_7:                              # %for.cond7
                                        #   Parent Loop BB184_1 Depth=1
                                        #     Parent Loop BB184_3 Depth=2
                                        #       Parent Loop BB184_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -8(%rbp)
	jge	.LBB184_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB184_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB184_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB184_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB184_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB184_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB184_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB184_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB184_12:                             # %if.end
                                        #   in Loop: Header=BB184_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB184_7 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB184_7
.LBB184_14:                             # %for.end
                                        #   in Loop: Header=BB184_5 Depth=3
	jmp	.LBB184_15
.LBB184_15:                             # %for.inc359
                                        #   in Loop: Header=BB184_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB184_5
.LBB184_16:                             # %for.end361
                                        #   in Loop: Header=BB184_3 Depth=2
	jmp	.LBB184_17
.LBB184_17:                             # %for.inc362
                                        #   in Loop: Header=BB184_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB184_3
.LBB184_18:                             # %for.end364
                                        #   in Loop: Header=BB184_1 Depth=1
	jmp	.LBB184_19
.LBB184_19:                             # %for.inc365
                                        #   in Loop: Header=BB184_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB184_1
.LBB184_20:                             # %for.end367
	cmpl	$711810332, -20(%rbp)   # imm = 0x2A6D5D1C
	jne	.LBB184_22
.LBB184_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB184_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB184_21
.Lfunc_end184:
	.size	copy_motion_vectors_MB.148, .Lfunc_end184-copy_motion_vectors_MB.148
	.cfi_endproc
                                        # -- End function
	.globl	MbAffPostProc.149       # -- Begin function MbAffPostProc.149
	.p2align	4, 0x90
	.type	MbAffPostProc.149,@function
MbAffPostProc.149:                      # @MbAffPostProc.149
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$1072, %rsp             # imm = 0x430
	movl	$1770507926, -44(%rbp)  # imm = 0x6987CE96
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movq	%rax, -32(%rbp)
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB185_44
# %bb.1:                                # %if.then
	movl	$0, -20(%rbp)
.LBB185_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_5 Depth 2
                                        #       Child Loop BB185_7 Depth 3
                                        #     Child Loop BB185_13 Depth 2
                                        #       Child Loop BB185_15 Depth 3
                                        #     Child Loop BB185_21 Depth 2
                                        #       Child Loop BB185_23 Depth 3
                                        #         Child Loop BB185_25 Depth 4
                                        #       Child Loop BB185_31 Depth 3
                                        #         Child Loop BB185_33 Depth 4
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB185_43
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB185_2 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB185_41
# %bb.4:                                # %if.then4
                                        #   in Loop: Header=BB185_2 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB185_5:                              # %for.cond5
                                        #   Parent Loop BB185_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB185_7 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB185_12
# %bb.6:                                # %for.body7
                                        #   in Loop: Header=BB185_5 Depth=2
	movl	$0, -4(%rbp)
.LBB185_7:                              # %for.cond8
                                        #   Parent Loop BB185_2 Depth=1
                                        #     Parent Loop BB185_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB185_10
# %bb.8:                                # %for.body10
                                        #   in Loop: Header=BB185_7 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.9:                                # %for.inc
                                        #   in Loop: Header=BB185_7 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB185_7
.LBB185_10:                             # %for.end
                                        #   in Loop: Header=BB185_5 Depth=2
	jmp	.LBB185_11
.LBB185_11:                             # %for.inc20
                                        #   in Loop: Header=BB185_5 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB185_5
.LBB185_12:                             # %for.end22
                                        #   in Loop: Header=BB185_2 Depth=1
	movl	$0, -8(%rbp)
.LBB185_13:                             # %for.cond23
                                        #   Parent Loop BB185_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB185_15 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB185_20
# %bb.14:                               # %for.body25
                                        #   in Loop: Header=BB185_13 Depth=2
	movl	$0, -4(%rbp)
.LBB185_15:                             # %for.cond26
                                        #   Parent Loop BB185_2 Depth=1
                                        #     Parent Loop BB185_13 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB185_18
# %bb.16:                               # %for.body28
                                        #   in Loop: Header=BB185_15 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.17:                               # %for.inc52
                                        #   in Loop: Header=BB185_15 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB185_15
.LBB185_18:                             # %for.end54
                                        #   in Loop: Header=BB185_13 Depth=2
	jmp	.LBB185_19
.LBB185_19:                             # %for.inc55
                                        #   in Loop: Header=BB185_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB185_13
.LBB185_20:                             # %for.end57
                                        #   in Loop: Header=BB185_2 Depth=1
	movl	-16(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72708(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -16(%rbp)
	movl	-12(%rbp), %ecx
	movq	img, %rsi
	movl	$16, %eax
	cltd
	idivl	72712(%rsi)
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movl	%eax, -12(%rbp)
	movl	$0, -24(%rbp)
.LBB185_21:                             # %for.cond61
                                        #   Parent Loop BB185_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB185_23 Depth 3
                                        #         Child Loop BB185_25 Depth 4
                                        #       Child Loop BB185_31 Depth 3
                                        #         Child Loop BB185_33 Depth 4
	cmpl	$2, -24(%rbp)
	jge	.LBB185_40
# %bb.22:                               # %for.body63
                                        #   in Loop: Header=BB185_21 Depth=2
	movl	$0, -8(%rbp)
.LBB185_23:                             # %for.cond64
                                        #   Parent Loop BB185_2 Depth=1
                                        #     Parent Loop BB185_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB185_25 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	movl	72712(%rcx), %ecx
	shll	$1, %ecx
	cmpl	%ecx, %eax
	jge	.LBB185_30
# %bb.24:                               # %for.body68
                                        #   in Loop: Header=BB185_23 Depth=3
	movl	$0, -4(%rbp)
.LBB185_25:                             # %for.cond69
                                        #   Parent Loop BB185_2 Depth=1
                                        #     Parent Loop BB185_21 Depth=2
                                        #       Parent Loop BB185_23 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB185_28
# %bb.26:                               # %for.body72
                                        #   in Loop: Header=BB185_25 Depth=4
	movq	-40(%rbp), %rax
	movslq	-24(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.27:                               # %for.inc85
                                        #   in Loop: Header=BB185_25 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB185_25
.LBB185_28:                             # %for.end87
                                        #   in Loop: Header=BB185_23 Depth=3
	jmp	.LBB185_29
.LBB185_29:                             # %for.inc88
                                        #   in Loop: Header=BB185_23 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB185_23
.LBB185_30:                             # %for.end90
                                        #   in Loop: Header=BB185_21 Depth=2
	movl	$0, -8(%rbp)
.LBB185_31:                             # %for.cond91
                                        #   Parent Loop BB185_2 Depth=1
                                        #     Parent Loop BB185_21 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB185_33 Depth 4
	movl	-8(%rbp), %eax
	movq	img, %rcx
	cmpl	72712(%rcx), %eax
	jge	.LBB185_38
# %bb.32:                               # %for.body94
                                        #   in Loop: Header=BB185_31 Depth=3
	movl	$0, -4(%rbp)
.LBB185_33:                             # %for.cond95
                                        #   Parent Loop BB185_2 Depth=1
                                        #     Parent Loop BB185_21 Depth=2
                                        #       Parent Loop BB185_31 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72708(%rcx), %eax
	jge	.LBB185_36
# %bb.34:                               # %for.body98
                                        #   in Loop: Header=BB185_33 Depth=4
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-40(%rbp), %rdx
	movslq	-24(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	movq	img, %rdx
	addl	72712(%rdx), %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-40(%rbp), %rcx
	movslq	-24(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.35:                               # %for.inc128
                                        #   in Loop: Header=BB185_33 Depth=4
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB185_33
.LBB185_36:                             # %for.end130
                                        #   in Loop: Header=BB185_31 Depth=3
	jmp	.LBB185_37
.LBB185_37:                             # %for.inc131
                                        #   in Loop: Header=BB185_31 Depth=3
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB185_31
.LBB185_38:                             # %for.end133
                                        #   in Loop: Header=BB185_21 Depth=2
	jmp	.LBB185_39
.LBB185_39:                             # %for.inc134
                                        #   in Loop: Header=BB185_21 Depth=2
	movl	-24(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -24(%rbp)
	jmp	.LBB185_21
.LBB185_40:                             # %for.end136
                                        #   in Loop: Header=BB185_2 Depth=1
	jmp	.LBB185_41
.LBB185_41:                             # %if.end
                                        #   in Loop: Header=BB185_2 Depth=1
	jmp	.LBB185_42
.LBB185_42:                             # %for.inc137
                                        #   in Loop: Header=BB185_2 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB185_2
.LBB185_43:                             # %for.end139
	jmp	.LBB185_67
.LBB185_44:                             # %if.else
	movl	$0, -20(%rbp)
.LBB185_45:                             # %for.cond140
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB185_48 Depth 2
                                        #       Child Loop BB185_50 Depth 3
                                        #     Child Loop BB185_56 Depth 2
                                        #       Child Loop BB185_58 Depth 3
	movl	-20(%rbp), %eax
	movq	img, %rcx
	cmpl	72484(%rcx), %eax
	jge	.LBB185_66
# %bb.46:                               # %for.body143
                                        #   in Loop: Header=BB185_45 Depth=1
	movq	enc_picture, %rax
	movq	6472(%rax), %rax
	movslq	-20(%rbp), %rcx
	cmpb	$0, (%rax,%rcx)
	je	.LBB185_64
# %bb.47:                               # %if.then148
                                        #   in Loop: Header=BB185_45 Depth=1
	movl	-20(%rbp), %edi
	leaq	-16(%rbp), %rsi
	leaq	-12(%rbp), %rdx
	callq	get_mb_pos
	movl	$0, -8(%rbp)
.LBB185_48:                             # %for.cond149
                                        #   Parent Loop BB185_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB185_50 Depth 3
	cmpl	$32, -8(%rbp)
	jge	.LBB185_55
# %bb.49:                               # %for.body151
                                        #   in Loop: Header=BB185_48 Depth=2
	movl	$0, -4(%rbp)
.LBB185_50:                             # %for.cond152
                                        #   Parent Loop BB185_45 Depth=1
                                        #     Parent Loop BB185_48 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB185_53
# %bb.51:                               # %for.body154
                                        #   in Loop: Header=BB185_50 Depth=3
	movq	-32(%rbp), %rax
	movl	-12(%rbp), %ecx
	addl	-8(%rbp), %ecx
	movslq	%ecx, %rcx
	movq	(%rax,%rcx,8), %rax
	movl	-16(%rbp), %ecx
	addl	-4(%rbp), %ecx
	movslq	%ecx, %rcx
	movw	(%rax,%rcx,2), %ax
	movslq	-4(%rbp), %rcx
	shlq	$6, %rcx
	leaq	-1072(%rbp), %rdx
	addq	%rcx, %rdx
	movslq	-8(%rbp), %rcx
	movw	%ax, (%rdx,%rcx,2)
# %bb.52:                               # %for.inc165
                                        #   in Loop: Header=BB185_50 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB185_50
.LBB185_53:                             # %for.end167
                                        #   in Loop: Header=BB185_48 Depth=2
	jmp	.LBB185_54
.LBB185_54:                             # %for.inc168
                                        #   in Loop: Header=BB185_48 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB185_48
.LBB185_55:                             # %for.end170
                                        #   in Loop: Header=BB185_45 Depth=1
	movl	$0, -8(%rbp)
.LBB185_56:                             # %for.cond171
                                        #   Parent Loop BB185_45 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB185_58 Depth 3
	cmpl	$16, -8(%rbp)
	jge	.LBB185_63
# %bb.57:                               # %for.body173
                                        #   in Loop: Header=BB185_56 Depth=2
	movl	$0, -4(%rbp)
.LBB185_58:                             # %for.cond174
                                        #   Parent Loop BB185_45 Depth=1
                                        #     Parent Loop BB185_56 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	cmpl	$16, -4(%rbp)
	jge	.LBB185_61
# %bb.59:                               # %for.body176
                                        #   in Loop: Header=BB185_58 Depth=3
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	leaq	-1072(%rbp), %rcx
	movq	%rcx, %rdx
	addq	%rax, %rdx
	movslq	-8(%rbp), %rax
	movw	(%rdx,%rax,2), %ax
	movq	-32(%rbp), %rdx
	movl	-12(%rbp), %esi
	movl	-8(%rbp), %edi
	shll	$1, %edi
	addl	%edi, %esi
	movslq	%esi, %rsi
	movq	(%rdx,%rsi,8), %rdx
	movl	-16(%rbp), %esi
	addl	-4(%rbp), %esi
	movslq	%esi, %rsi
	movw	%ax, (%rdx,%rsi,2)
	movslq	-4(%rbp), %rax
	shlq	$6, %rax
	addq	%rax, %rcx
	movl	-8(%rbp), %eax
	addl	$16, %eax
	cltq
	movw	(%rcx,%rax,2), %ax
	movq	-32(%rbp), %rcx
	movl	-12(%rbp), %edx
	movl	-8(%rbp), %esi
	shll	$1, %esi
	addl	$1, %esi
	addl	%esi, %edx
	movslq	%edx, %rdx
	movq	(%rcx,%rdx,8), %rcx
	movl	-16(%rbp), %edx
	addl	-4(%rbp), %edx
	movslq	%edx, %rdx
	movw	%ax, (%rcx,%rdx,2)
# %bb.60:                               # %for.inc201
                                        #   in Loop: Header=BB185_58 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB185_58
.LBB185_61:                             # %for.end203
                                        #   in Loop: Header=BB185_56 Depth=2
	jmp	.LBB185_62
.LBB185_62:                             # %for.inc204
                                        #   in Loop: Header=BB185_56 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB185_56
.LBB185_63:                             # %for.end206
                                        #   in Loop: Header=BB185_45 Depth=1
	jmp	.LBB185_64
.LBB185_64:                             # %if.end207
                                        #   in Loop: Header=BB185_45 Depth=1
	jmp	.LBB185_65
.LBB185_65:                             # %for.inc208
                                        #   in Loop: Header=BB185_45 Depth=1
	movl	-20(%rbp), %eax
	addl	$2, %eax
	movl	%eax, -20(%rbp)
	jmp	.LBB185_45
.LBB185_66:                             # %for.end210
	jmp	.LBB185_67
.LBB185_67:                             # %if.end211
	cmpl	$1770507926, -44(%rbp)  # imm = 0x6987CE96
	jne	.LBB185_69
.LBB185_68:
	addq	$1072, %rsp             # imm = 0x430
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB185_69:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB185_68
.Lfunc_end185:
	.size	MbAffPostProc.149, .Lfunc_end185-MbAffPostProc.149
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function picture_structure_decision.150
.LCPI186_0:
	.quad	4605831338911806259     # double 0.84999999999999998
.LCPI186_1:
	.quad	4611686018427387904     # double 2
.LCPI186_2:
	.quad	4613937818241073152     # double 3
	.text
	.p2align	4, 0x90
	.type	picture_structure_decision.150,@function
picture_structure_decision.150:         # @picture_structure_decision.150
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$56, %rsp
	.cfi_offset %rbx, -24
	vmovsd	.LCPI186_1(%rip), %xmm0 # xmm0 = mem[0],zero
	vmovsd	.LCPI186_2(%rip), %xmm1 # xmm1 = mem[0],zero
	movl	$1540838228, -36(%rbp)  # imm = 0x5BD75354
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -64(%rbp)
	movq	img, %rax
	cmpl	$1, 24(%rax)
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	vcvtsi2sdl	72676(%rax), %xmm0, %xmm2
	movq	img, %rax
	movl	40(%rax), %eax
	subl	$12, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm3
	vdivsd	%xmm1, %xmm3, %xmm1
	vaddsd	%xmm1, %xmm2, %xmm1
	callq	pow
	vmovsd	.LCPI186_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	movl	-44(%rbp), %eax
	cmpl	$0, %eax
	movl	$4, %eax
	movl	$1, %ecx
	cmovnel	%eax, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vmovsd	%xmm0, -56(%rbp)
	movq	-16(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-16(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -40(%rbp)
	movq	-24(%rbp), %rax
	vmovss	812(%rax), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vaddss	816(%rax), %xmm0, %xmm0
	movq	-24(%rbp), %rax
	vaddss	820(%rax), %xmm0, %xmm0
	vmovss	%xmm0, -28(%rbp)
	movq	-24(%rbp), %rax
	movl	808(%rax), %eax
	movq	-64(%rbp), %rcx
	addl	808(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	-16(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -32(%rbp)
	vmovss	-40(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	vmovss	-28(%rbp), %xmm1        # xmm1 = mem[0],zero,zero,zero
	movl	-48(%rbp), %edi
	movl	-32(%rbp), %esi
	vmovsd	-56(%rbp), %xmm2        # xmm2 = mem[0],zero
	callq	decide_fld_frame
	movl	%eax, %ebx
	cmpl	$1540838228, -36(%rbp)  # imm = 0x5BD75354
	jne	.LBB186_2
.LBB186_1:
	movl	%ebx, %eax
	addq	$56, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB186_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB186_1
.Lfunc_end186:
	.size	picture_structure_decision.150, .Lfunc_end186-picture_structure_decision.150
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.151
	.type	writeUnit.151,@function
writeUnit.151:                          # @writeUnit.151
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1475890495, -16(%rbp)  # imm = 0x57F84D3F
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB187_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB187_18
.LBB187_2:                              # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB187_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB187_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB187_6
.LBB187_5:                              # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB187_6:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB187_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB187_9
.LBB187_8:                              # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB187_9:                              # %if.end21
	jmp	.LBB187_17
.LBB187_10:                             # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB187_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB187_13
.LBB187_12:                             # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB187_13:                             # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB187_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB187_16
.LBB187_15:                             # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB187_16:                             # %if.end39
	jmp	.LBB187_17
.LBB187_17:                             # %if.end40
	jmp	.LBB187_18
.LBB187_18:                             # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1475890495, -16(%rbp)  # imm = 0x57F84D3F
	jne	.LBB187_20
.LBB187_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB187_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB187_19
.Lfunc_end187:
	.size	writeUnit.151, .Lfunc_end187-writeUnit.151
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.152      # -- Begin function code_a_picture.152
	.p2align	4, 0x90
	.type	code_a_picture.152,@function
code_a_picture.152:                     # @code_a_picture.152
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1909296787, -28(%rbp)  # imm = 0x71CD8E93
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB188_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB188_8
.LBB188_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB188_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB188_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB188_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB188_7
.LBB188_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB188_7:                              # %land.end
.LBB188_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB188_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB188_10:                             # %if.end
	jmp	.LBB188_11
.LBB188_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB188_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB188_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB188_11 Depth=1
	jmp	.LBB188_13
.LBB188_13:                             # %while.cond15
                                        #   Parent Loop BB188_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB188_14
	jmp	.LBB188_15
.LBB188_14:                             # %while.body19
                                        #   in Loop: Header=BB188_13 Depth=2
	movl	-8(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB188_13
.LBB188_15:                             # %while.end
                                        #   in Loop: Header=BB188_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB188_11
.LBB188_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB188_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB188_23
# %bb.18:                               # %if.then28
	movl	$0, -4(%rbp)
.LBB188_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB188_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB188_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB188_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB188_19
.LBB188_22:                             # %for.end
	jmp	.LBB188_23
.LBB188_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB188_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB188_25:                             # %if.end34
	cmpl	$1909296787, -28(%rbp)  # imm = 0x71CD8E93
	jne	.LBB188_27
.LBB188_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB188_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB188_26
.Lfunc_end188:
	.size	code_a_picture.152, .Lfunc_end188-code_a_picture.152
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.153
.LCPI189_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.153,@function
init_field.153:                         # @init_field.153
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$171501300, -16(%rbp)   # imm = 0xA38E6F4
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB189_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB189_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB189_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB189_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB189_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB189_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB189_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB189_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB189_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB189_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB189_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB189_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB189_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB189_15
.LBB189_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB189_15:                             # %if.end38
	jmp	.LBB189_23
.LBB189_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB189_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB189_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB189_20
.LBB189_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB189_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB189_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB189_22:                             # %if.end56
	jmp	.LBB189_23
.LBB189_23:                             # %if.end57
	jmp	.LBB189_24
.LBB189_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB189_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB189_26:                             # %if.end66
	jmp	.LBB189_77
.LBB189_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB189_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB189_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB189_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB189_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB189_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB189_29
.LBB189_32:                             # %for.end
	jmp	.LBB189_38
.LBB189_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB189_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB189_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB189_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB189_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB189_34
.LBB189_37:                             # %for.end134
	jmp	.LBB189_38
.LBB189_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB189_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB189_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB189_41:                             # %if.end147
	vmovsd	.LCPI189_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB189_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI189_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB189_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB189_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI189_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB189_46
.LBB189_45:                             # %if.else174
	vmovsd	.LCPI189_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB189_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB189_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB189_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB189_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB189_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB189_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB189_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB189_54
.LBB189_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB189_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB189_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB189_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB189_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB189_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB189_63
.LBB189_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB189_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB189_62
.LBB189_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB189_62:                             # %cond.end
.LBB189_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB189_71
.LBB189_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB189_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB189_70
.LBB189_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB189_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB189_69
.LBB189_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB189_69:                             # %cond.end256
.LBB189_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB189_71:                             # %if.end261
	jmp	.LBB189_72
.LBB189_72:                             # %if.end262
	jmp	.LBB189_76
.LBB189_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB189_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB189_75:                             # %if.end273
	jmp	.LBB189_76
.LBB189_76:                             # %if.end274
	jmp	.LBB189_77
.LBB189_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$171501300, -16(%rbp)   # imm = 0xA38E6F4
	jne	.LBB189_79
.LBB189_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB189_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB189_78
.Lfunc_end189:
	.size	init_field.153, .Lfunc_end189-init_field.153
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeout_picture.154
	.type	writeout_picture.154,@function
writeout_picture.154:                   # @writeout_picture.154
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$48, %rsp
	movl	$197845965, -28(%rbp)   # imm = 0xBCAE3CD
	movq	%rdi, -16(%rbp)
	movq	-16(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movl	$0, -8(%rbp)
.LBB190_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB190_3 Depth 2
	movl	-8(%rbp), %eax
	movq	-16(%rbp), %rcx
	cmpl	(%rcx), %eax
	jge	.LBB190_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB190_1 Depth=1
	movq	-16(%rbp), %rax
	movslq	-8(%rbp), %rcx
	movq	8(%rax,%rcx,8), %rax
	movq	%rax, -24(%rbp)
	movl	$0, -4(%rbp)
.LBB190_3:                              # %for.cond1
                                        #   Parent Loop BB190_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	-24(%rbp), %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB190_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB190_3 Depth=2
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rax
	movq	%rax, -40(%rbp)
	movq	-24(%rbp), %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	imulq	$120, %rcx, %rcx
	addq	%rcx, %rax
	movq	(%rax), %rdi
	movl	-4(%rbp), %esi
	callq	writeUnit
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB190_3 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB190_3
.LBB190_6:                              # %for.end
                                        #   in Loop: Header=BB190_1 Depth=1
	jmp	.LBB190_7
.LBB190_7:                              # %for.inc10
                                        #   in Loop: Header=BB190_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB190_1
.LBB190_8:                              # %for.end12
	cmpl	$197845965, -28(%rbp)   # imm = 0xBCAE3CD
	jne	.LBB190_10
.LBB190_9:
	xorl	%eax, %eax
	addq	$48, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB190_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB190_9
.Lfunc_end190:
	.size	writeout_picture.154, .Lfunc_end190-writeout_picture.154
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.155
	.type	field_mode_buffer.155,@function
field_mode_buffer.155:                  # @field_mode_buffer.155
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$427990745, -12(%rbp)   # imm = 0x19829ED9
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -16(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$427990745, -12(%rbp)   # imm = 0x19829ED9
	jne	.LBB191_2
.LBB191_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB191_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB191_1
.Lfunc_end191:
	.size	field_mode_buffer.155, .Lfunc_end191-field_mode_buffer.155
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.156
	.type	frame_mode_buffer.156,@function
frame_mode_buffer.156:                  # @frame_mode_buffer.156
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1651140417, -16(%rbp)  # imm = 0x626A6741
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -8(%rbp)
	vmovss	%xmm1, -4(%rbp)
	vmovss	%xmm2, -12(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB192_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB192_3
.LBB192_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB192_3:                              # %if.end
	cmpl	$1651140417, -16(%rbp)  # imm = 0x626A6741
	jne	.LBB192_5
.LBB192_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB192_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB192_4
.Lfunc_end192:
	.size	frame_mode_buffer.156, .Lfunc_end192-frame_mode_buffer.156
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.157
	.type	GenerateFullPelRepresentation.157,@function
GenerateFullPelRepresentation.157:      # @GenerateFullPelRepresentation.157
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$641954518, -44(%rbp)   # imm = 0x264372D6
	movq	%rdi, -64(%rbp)
	movq	%rsi, -56(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -28(%rbp)
.LBB193_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB193_3 Depth 2
	movl	-28(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB193_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB193_1 Depth=1
	movl	$0, -32(%rbp)
.LBB193_3:                              # %for.cond1
                                        #   Parent Loop BB193_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-32(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB193_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB193_3 Depth=2
	movq	-56(%rbp), %rbx
	movl	-28(%rbp), %r14d
	movl	-32(%rbp), %r15d
	movq	-64(%rbp), %rdi
	movl	-28(%rbp), %esi
	shll	$2, %esi
	movl	-32(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB193_3 Depth=2
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB193_3
.LBB193_6:                              # %for.end
                                        #   in Loop: Header=BB193_1 Depth=1
	jmp	.LBB193_7
.LBB193_7:                              # %for.inc5
                                        #   in Loop: Header=BB193_1 Depth=1
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB193_1
.LBB193_8:                              # %for.end7
	cmpl	$641954518, -44(%rbp)   # imm = 0x264372D6
	jne	.LBB193_10
.LBB193_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB193_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB193_9
.Lfunc_end193:
	.size	GenerateFullPelRepresentation.157, .Lfunc_end193-GenerateFullPelRepresentation.157
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function find_distortion.158
	.type	find_distortion.158,@function
find_distortion.158:                    # @find_distortion.158
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -24
	movl	$919739301, -44(%rbp)   # imm = 0x36D21BA5
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	cmpl	$0, 28(%rax)
	je	.LBB194_20
# %bb.1:                                # %if.then
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB194_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_4 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB194_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB194_2 Depth=1
	movl	$0, -12(%rbp)
.LBB194_4:                              # %for.cond3
                                        #   Parent Loop BB194_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB194_7
# %bb.5:                                # %for.body6
                                        #   in Loop: Header=BB194_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgY_com, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB194_4 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_4
.LBB194_7:                              # %for.end
                                        #   in Loop: Header=BB194_2 Depth=1
	jmp	.LBB194_8
.LBB194_8:                              # %for.inc17
                                        #   in Loop: Header=BB194_2 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_2
.LBB194_9:                              # %for.end19
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB194_19
# %bb.10:                               # %if.then22
	movl	$0, -16(%rbp)
.LBB194_11:                             # %for.cond23
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_13 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB194_18
# %bb.12:                               # %for.body26
                                        #   in Loop: Header=BB194_11 Depth=1
	movl	$0, -12(%rbp)
.LBB194_13:                             # %for.cond27
                                        #   Parent Loop BB194_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB194_16
# %bb.14:                               # %for.body30
                                        #   in Loop: Header=BB194_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	imgUV_com, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc69
                                        #   in Loop: Header=BB194_13 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_13
.LBB194_16:                             # %for.end71
                                        #   in Loop: Header=BB194_11 Depth=1
	jmp	.LBB194_17
.LBB194_17:                             # %for.inc72
                                        #   in Loop: Header=BB194_11 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_11
.LBB194_18:                             # %for.end74
	jmp	.LBB194_19
.LBB194_19:                             # %if.end
	jmp	.LBB194_39
.LBB194_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	$0, -40(%rbp)
	movl	$0, -16(%rbp)
.LBB194_21:                             # %for.cond75
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_23 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB194_28
# %bb.22:                               # %for.body79
                                        #   in Loop: Header=BB194_21 Depth=1
	movl	$0, -12(%rbp)
.LBB194_23:                             # %for.cond80
                                        #   Parent Loop BB194_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB194_26
# %bb.24:                               # %for.body84
                                        #   in Loop: Header=BB194_23 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgY_org, %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6424(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-40(%rbp), %rax
	movq	%rax, -40(%rbp)
# %bb.25:                               # %for.inc102
                                        #   in Loop: Header=BB194_23 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_23
.LBB194_26:                             # %for.end104
                                        #   in Loop: Header=BB194_21 Depth=1
	jmp	.LBB194_27
.LBB194_27:                             # %for.inc105
                                        #   in Loop: Header=BB194_21 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_21
.LBB194_28:                             # %for.end107
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB194_38
# %bb.29:                               # %if.then111
	movl	$0, -16(%rbp)
.LBB194_30:                             # %for.cond112
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB194_32 Depth 2
	movl	-16(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB194_37
# %bb.31:                               # %for.body116
                                        #   in Loop: Header=BB194_30 Depth=1
	movl	$0, -12(%rbp)
.LBB194_32:                             # %for.cond117
                                        #   Parent Loop BB194_30 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-12(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB194_35
# %bb.33:                               # %for.body121
                                        #   in Loop: Header=BB194_32 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rbx
	movq	imgUV_org, %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %edi
	movq	enc_picture, %rax
	movq	6464(%rax), %rax
	movq	8(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movzwl	(%rax,%rcx,2), %eax
	subl	%eax, %edi
	callq	abs
	cltq
	movslq	(%rbx,%rax,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.34:                               # %for.inc161
                                        #   in Loop: Header=BB194_32 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB194_32
.LBB194_35:                             # %for.end163
                                        #   in Loop: Header=BB194_30 Depth=1
	jmp	.LBB194_36
.LBB194_36:                             # %for.inc164
                                        #   in Loop: Header=BB194_30 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB194_30
.LBB194_37:                             # %for.end166
	jmp	.LBB194_38
.LBB194_38:                             # %if.end167
	jmp	.LBB194_39
.LBB194_39:                             # %if.end168
	vcvtsi2ssq	-40(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vcvtsi2ssq	-24(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vcvtsi2ssq	-32(%rbp), %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$919739301, -44(%rbp)   # imm = 0x36D21BA5
	jne	.LBB194_41
.LBB194_40:
	addq	$40, %rsp
	popq	%rbx
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB194_41:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB194_40
.Lfunc_end194:
	.size	find_distortion.158, .Lfunc_end194-find_distortion.158
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.159
	.type	copy_motion_vectors_MB.159,@function
copy_motion_vectors_MB.159:             # @copy_motion_vectors_MB.159
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$656820387, -20(%rbp)   # imm = 0x272648A3
	movl	$0, -16(%rbp)
.LBB195_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB195_3 Depth 2
                                        #       Child Loop BB195_5 Depth 3
                                        #         Child Loop BB195_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB195_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB195_1 Depth=1
	movl	$0, -12(%rbp)
.LBB195_3:                              # %for.cond1
                                        #   Parent Loop BB195_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB195_5 Depth 3
                                        #         Child Loop BB195_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB195_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB195_3 Depth=2
	movl	$0, -4(%rbp)
.LBB195_5:                              # %for.cond4
                                        #   Parent Loop BB195_1 Depth=1
                                        #     Parent Loop BB195_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB195_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB195_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB195_5 Depth=3
	movl	$0, -8(%rbp)
.LBB195_7:                              # %for.cond7
                                        #   Parent Loop BB195_1 Depth=1
                                        #     Parent Loop BB195_3 Depth=2
                                        #       Parent Loop BB195_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -8(%rbp)
	jge	.LBB195_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB195_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB195_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB195_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB195_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB195_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB195_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB195_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB195_12:                             # %if.end
                                        #   in Loop: Header=BB195_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB195_7 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB195_7
.LBB195_14:                             # %for.end
                                        #   in Loop: Header=BB195_5 Depth=3
	jmp	.LBB195_15
.LBB195_15:                             # %for.inc359
                                        #   in Loop: Header=BB195_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB195_5
.LBB195_16:                             # %for.end361
                                        #   in Loop: Header=BB195_3 Depth=2
	jmp	.LBB195_17
.LBB195_17:                             # %for.inc362
                                        #   in Loop: Header=BB195_3 Depth=2
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB195_3
.LBB195_18:                             # %for.end364
                                        #   in Loop: Header=BB195_1 Depth=1
	jmp	.LBB195_19
.LBB195_19:                             # %for.inc365
                                        #   in Loop: Header=BB195_1 Depth=1
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB195_1
.LBB195_20:                             # %for.end367
	cmpl	$656820387, -20(%rbp)   # imm = 0x272648A3
	jne	.LBB195_22
.LBB195_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB195_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB195_21
.Lfunc_end195:
	.size	copy_motion_vectors_MB.159, .Lfunc_end195-copy_motion_vectors_MB.159
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.160       # -- Begin function field_picture.160
	.p2align	4, 0x90
	.type	field_picture.160,@function
field_picture.160:                      # @field_picture.160
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$472437658, -16(%rbp)   # imm = 0x1C28D39A
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB196_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB196_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB196_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB196_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB196_6
.LBB196_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB196_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB196_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB196_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB196_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB196_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB196_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB196_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB196_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB196_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB196_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB196_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$472437658, -16(%rbp)   # imm = 0x1C28D39A
	jne	.LBB196_18
.LBB196_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB196_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB196_17
.Lfunc_end196:
	.size	field_picture.160, .Lfunc_end196-field_picture.160
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function distortion_fld.161
	.type	distortion_fld.161,@function
distortion_fld.161:                     # @distortion_fld.161
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1935725891, -4(%rbp)   # imm = 0x7360D543
	movq	%rdi, -16(%rbp)
	movq	%rsi, -24(%rbp)
	movq	%rdx, -32(%rbp)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	movb	$0, %al
	callq	combine_field
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	callq	find_distortion
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	-16(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-24(%rbp), %rax
	vmovss	%xmm0, (%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	-32(%rbp), %rax
	vmovss	%xmm0, (%rax)
	cmpl	$1935725891, -4(%rbp)   # imm = 0x7360D543
	jne	.LBB197_2
.LBB197_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB197_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB197_1
.Lfunc_end197:
	.size	distortion_fld.161, .Lfunc_end197-distortion_fld.161
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function ReadOneFrame.162
	.type	ReadOneFrame.162,@function
ReadOneFrame.162:                       # @ReadOneFrame.162
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$80, %rsp
	xorl	%r10d, %r10d
	movl	$393964204, -76(%rbp)   # imm = 0x177B6AAC
	movl	%edi, -64(%rbp)
	movl	%esi, -60(%rbp)
	movl	%edx, -32(%rbp)
	movl	%ecx, -28(%rbp)
	movl	%r8d, -44(%rbp)
	movl	%r9d, -40(%rbp)
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	movl	%eax, -4(%rbp)
	movl	-32(%rbp), %eax
	imull	-28(%rbp), %eax
	movl	%eax, -72(%rbp)
	movl	-44(%rbp), %eax
	imull	-40(%rbp), %eax
	movl	%eax, -68(%rbp)
	movl	-72(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -8(%rbp)
	movl	-68(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-8(%rbp), %eax
	movl	-12(%rbp), %ecx
	shll	$1, %ecx
	addl	%ecx, %eax
	cltq
	movq	%rax, -56(%rbp)
	movq	input, %rax
	cmpl	$1, 3312(%rax)
	jne	.LBB198_2
# %bb.1:                                # %land.rhs
	movq	input, %rax
	cmpl	$3, 72(%rax)
	sete	%r10b
.LBB198_2:                              # %land.end
	andb	$1, %r10b
	movzbl	%r10b, %eax
	movl	%eax, -36(%rbp)
	movl	-32(%rbp), %eax
	imull	-28(%rbp), %eax
	imull	-4(%rbp), %eax
	movl	%eax, %edi
	callq	malloc
	xorl	%ecx, %ecx
	movq	%rax, -24(%rbp)
	cmpq	%rax, %rcx
	jne	.LBB198_4
# %bb.3:                                # %if.then
	movabsq	$.L.str.14, %rdi
	callq	no_mem_exit
.LBB198_4:                              # %if.end
	movl	p_in, %edi
	movslq	-60(%rbp), %rsi
	xorl	%edx, %edx
	callq	lseek
	movslq	-60(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB198_6
# %bb.5:                                # %if.then18
	movabsq	$.L.str.15, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB198_6:                              # %if.end19
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movq	input, %rax
	movslq	1232(%rax), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB198_8
# %bb.7:                                # %if.then25
	movq	input, %rax
	movl	1232(%rax), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB198_8:                              # %if.end28
	movl	p_in, %edi
	movq	-56(%rbp), %rsi
	movslq	-64(%rbp), %rax
	imulq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
	cmpq	$-1, %rax
	jne	.LBB198_10
# %bb.9:                                # %if.then34
	movq	input, %rax
	movl	1232(%rax), %ecx
	addl	-64(%rbp), %ecx
	movabsq	$errortext, %rdi
	movl	$300, %esi              # imm = 0x12C
	movabsq	$.L.str.16, %rdx
	movb	$0, %al
	callq	snprintf
	movabsq	$errortext, %rdi
	movl	$4294967295, %esi       # imm = 0xFFFFFFFF
	callq	error
.LBB198_10:                             # %if.end38
	movq	img, %rax
	movl	72656(%rax), %eax
	cltd
	movl	$8, %ecx
	idivl	%ecx
	cmpl	$0, %edx
	jne	.LBB198_26
# %bb.11:                               # %if.then42
	cmpl	$0, -36(%rbp)
	je	.LBB198_13
# %bb.12:                               # %if.then43
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB198_13:                             # %if.end46
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-8(%rbp), %rdx
	callq	read
	movslq	-8(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB198_15
# %bb.14:                               # %if.then52
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB198_15:                             # %if.end54
	movq	imgY_org_frm, %rdi
	movq	-24(%rbp), %rsi
	movl	-32(%rbp), %edx
	movl	-28(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB198_25
# %bb.16:                               # %if.then58
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB198_18
# %bb.17:                               # %if.then64
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB198_18:                             # %if.end66
	movq	imgUV_org_frm, %rax
	movq	(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -36(%rbp)
	je	.LBB198_20
# %bb.19:                               # %if.then68
	xorl	%esi, %esi
	movl	p_in, %edi
	subq	-56(%rbp), %rsi
	movl	$1, %edx
	callq	lseek
.LBB198_20:                             # %if.end70
	movl	p_in, %edi
	movq	-24(%rbp), %rsi
	movslq	-12(%rbp), %rdx
	callq	read
	movslq	-12(%rbp), %rcx
	cmpq	%rcx, %rax
	je	.LBB198_22
# %bb.21:                               # %if.then76
	movl	-8(%rbp), %esi
	movabsq	$.L.str.17, %rdi
	movb	$0, %al
	callq	printf
	movb	$0, %al
	callq	report_stats_on_error
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB198_22:                             # %if.end78
	movq	imgUV_org_frm, %rax
	movq	8(%rax), %rdi
	movq	-24(%rbp), %rsi
	movl	-44(%rbp), %edx
	movl	-40(%rbp), %ecx
	movl	-4(%rbp), %r8d
	callq	buf2img
	cmpl	$0, -36(%rbp)
	je	.LBB198_24
# %bb.23:                               # %if.then81
	movl	p_in, %edi
	movq	-56(%rbp), %rax
	shlq	$1, %rax
	cqto
	movl	$3, %ecx
	idivq	%rcx
	movq	%rax, %rsi
	movl	$1, %edx
	callq	lseek
.LBB198_24:                             # %if.end85
	jmp	.LBB198_25
.LBB198_25:                             # %if.end86
	jmp	.LBB198_27
.LBB198_26:                             # %if.else
	movabsq	$.L.str.18, %rdi
	movb	$0, %al
	callq	printf
	movl	$4294967295, %edi       # imm = 0xFFFFFFFF
	callq	exit
.LBB198_27:                             # %if.end88
	movq	-24(%rbp), %rdi
	callq	free
	cmpl	$393964204, -76(%rbp)   # imm = 0x177B6AAC
	jne	.LBB198_29
.LBB198_28:
	addq	$80, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB198_29:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB198_28
.Lfunc_end198:
	.size	ReadOneFrame.162, .Lfunc_end198-ReadOneFrame.162
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.163
	.type	field_mode_buffer.163,@function
field_mode_buffer.163:                  # @field_mode_buffer.163
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$462135816, -8(%rbp)    # imm = 0x1B8BA208
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -16(%rbp)
	vmovss	%xmm1, -12(%rbp)
	vmovss	%xmm2, -4(%rbp)
	callq	put_buffer_frame
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$462135816, -8(%rbp)    # imm = 0x1B8BA208
	jne	.LBB199_2
.LBB199_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB199_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB199_1
.Lfunc_end199:
	.size	field_mode_buffer.163, .Lfunc_end199-field_mode_buffer.163
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.164
.LCPI200_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.164,@function
find_snr.164:                           # @find_snr.164
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1113018591, -48(%rbp)  # imm = 0x425750DF
	movq	$0, -16(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB200_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB200_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB200_4 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB200_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB200_2 Depth=1
	movl	$0, -8(%rbp)
.LBB200_4:                              # %for.cond8
                                        #   Parent Loop BB200_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB200_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB200_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB200_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB200_4
.LBB200_7:                              # %for.end
                                        #   in Loop: Header=BB200_2 Depth=1
	jmp	.LBB200_8
.LBB200_8:                              # %for.inc22
                                        #   in Loop: Header=BB200_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB200_2
.LBB200_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB200_19
# %bb.10:                               # %if.then27
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB200_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB200_13 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB200_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB200_11 Depth=1
	movl	$0, -8(%rbp)
.LBB200_13:                             # %for.cond33
                                        #   Parent Loop BB200_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB200_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB200_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB200_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB200_13
.LBB200_16:                             # %for.end76
                                        #   in Loop: Header=BB200_11 Depth=1
	jmp	.LBB200_17
.LBB200_17:                             # %for.inc77
                                        #   in Loop: Header=BB200_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB200_11
.LBB200_18:                             # %for.end79
	jmp	.LBB200_19
.LBB200_19:                             # %if.end
	jmp	.LBB200_41
.LBB200_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB200_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB200_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB200_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB200_25 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB200_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB200_23 Depth=1
	movl	$0, -8(%rbp)
.LBB200_25:                             # %for.cond89
                                        #   Parent Loop BB200_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB200_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB200_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB200_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB200_25
.LBB200_28:                             # %for.end112
                                        #   in Loop: Header=BB200_23 Depth=1
	jmp	.LBB200_29
.LBB200_29:                             # %for.inc113
                                        #   in Loop: Header=BB200_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB200_23
.LBB200_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB200_40
# %bb.31:                               # %if.then119
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB200_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB200_34 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB200_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB200_32 Depth=1
	movl	$0, -8(%rbp)
.LBB200_34:                             # %for.cond125
                                        #   Parent Loop BB200_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB200_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB200_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB200_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB200_34
.LBB200_37:                             # %for.end169
                                        #   in Loop: Header=BB200_32 Depth=1
	jmp	.LBB200_38
.LBB200_38:                             # %for.inc170
                                        #   in Loop: Header=BB200_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB200_32
.LBB200_39:                             # %for.end172
	jmp	.LBB200_40
.LBB200_40:                             # %if.end173
	jmp	.LBB200_41
.LBB200_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB200_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB200_43:                             # %if.end178
	cmpq	$0, -24(%rbp)
	jne	.LBB200_45
# %bb.44:                               # %if.then181
	movq	$1, -24(%rbp)
.LBB200_45:                             # %if.end182
	cmpq	$0, -32(%rbp)
	jne	.LBB200_47
# %bb.46:                               # %if.then185
	movq	$1, -32(%rbp)
.LBB200_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB200_52
# %bb.48:                               # %if.then189
	movl	-44(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-52(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI200_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB200_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI200_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI200_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB200_51
.LBB200_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB200_51:                             # %if.end219
	jmp	.LBB200_52
.LBB200_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB200_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB200_55
.LBB200_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB200_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB200_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB200_61
.LBB200_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB200_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB200_60
.LBB200_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB200_60:                             # %if.end394
	jmp	.LBB200_61
.LBB200_61:                             # %if.end395
	cmpl	$1113018591, -48(%rbp)  # imm = 0x425750DF
	jne	.LBB200_63
.LBB200_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB200_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB200_62
.Lfunc_end200:
	.size	find_snr.164, .Lfunc_end200-find_snr.164
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function field_mode_buffer.165
	.type	field_mode_buffer.165,@function
field_mode_buffer.165:                  # @field_mode_buffer.165
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$389608680, -12(%rbp)   # imm = 0x1738F4E8
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -16(%rbp)
	vmovss	%xmm2, -8(%rbp)
	callq	put_buffer_frame
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-16(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	cmpl	$389608680, -12(%rbp)   # imm = 0x1738F4E8
	jne	.LBB201_2
.LBB201_1:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB201_2:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB201_1
.Lfunc_end201:
	.size	field_mode_buffer.165, .Lfunc_end201-field_mode_buffer.165
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.166       # -- Begin function field_picture.166
	.p2align	4, 0x90
	.type	field_picture.166,@function
field_picture.166:                      # @field_picture.166
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1984277426, -16(%rbp)  # imm = 0x7645ABB2
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB202_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB202_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB202_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB202_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB202_6
.LBB202_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB202_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB202_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB202_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB202_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB202_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB202_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB202_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB202_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB202_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB202_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB202_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$1984277426, -16(%rbp)  # imm = 0x7645ABB2
	jne	.LBB202_18
.LBB202_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB202_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB202_17
.Lfunc_end202:
	.size	field_picture.166, .Lfunc_end202-field_picture.166
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function frame_mode_buffer.167
	.type	frame_mode_buffer.167,@function
frame_mode_buffer.167:                  # @frame_mode_buffer.167
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$229446673, -16(%rbp)   # imm = 0xDAD1411
	movl	%edi, -20(%rbp)
	vmovss	%xmm0, -4(%rbp)
	vmovss	%xmm1, -8(%rbp)
	vmovss	%xmm2, -12(%rbp)
	callq	put_buffer_frame
	movq	input, %rax
	cmpl	$0, 2880(%rax)
	jne	.LBB203_2
# %bb.1:                                # %lor.lhs.false
	movq	input, %rax
	cmpl	$0, 2884(%rax)
	je	.LBB203_3
.LBB203_2:                              # %if.then
	movq	img, %rax
	movl	60(%rax), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	64(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_top
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	put_buffer_bot
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 60(%rcx)
	movq	img, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	vmovss	-4(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	vmovss	-8(%rbp), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 4(%rax)
	vmovss	-12(%rbp), %xmm0        # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	callq	put_buffer_frame
.LBB203_3:                              # %if.end
	cmpl	$229446673, -16(%rbp)   # imm = 0xDAD1411
	jne	.LBB203_5
.LBB203_4:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB203_5:                              # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB203_4
.Lfunc_end203:
	.size	frame_mode_buffer.167, .Lfunc_end203-frame_mode_buffer.167
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function GenerateFullPelRepresentation.168
	.type	GenerateFullPelRepresentation.168,@function
GenerateFullPelRepresentation.168:      # @GenerateFullPelRepresentation.168
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%rbx
	subq	$40, %rsp
	.cfi_offset %rbx, -40
	.cfi_offset %r14, -32
	.cfi_offset %r15, -24
	movl	$308248659, -44(%rbp)   # imm = 0x125F8053
	movq	%rdi, -56(%rbp)
	movq	%rsi, -64(%rbp)
	movl	%edx, -36(%rbp)
	movl	%ecx, -40(%rbp)
	movl	$0, -32(%rbp)
.LBB204_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB204_3 Depth 2
	movl	-32(%rbp), %eax
	cmpl	-40(%rbp), %eax
	jge	.LBB204_8
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB204_1 Depth=1
	movl	$0, -28(%rbp)
.LBB204_3:                              # %for.cond1
                                        #   Parent Loop BB204_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-28(%rbp), %eax
	cmpl	-36(%rbp), %eax
	jge	.LBB204_6
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB204_3 Depth=2
	movq	-64(%rbp), %rbx
	movl	-32(%rbp), %r14d
	movl	-28(%rbp), %r15d
	movq	-56(%rbp), %rdi
	movl	-32(%rbp), %esi
	shll	$2, %esi
	movl	-28(%rbp), %edx
	shll	$2, %edx
	movl	-40(%rbp), %ecx
	movl	-36(%rbp), %r8d
	callq	FastPelY_14
	movl	-36(%rbp), %r8d
	movq	%rbx, %rdi
	movl	%r14d, %esi
	movl	%r15d, %edx
	movzwl	%ax, %ecx
	callq	PutPel_11
# %bb.5:                                # %for.inc
                                        #   in Loop: Header=BB204_3 Depth=2
	movl	-28(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -28(%rbp)
	jmp	.LBB204_3
.LBB204_6:                              # %for.end
                                        #   in Loop: Header=BB204_1 Depth=1
	jmp	.LBB204_7
.LBB204_7:                              # %for.inc5
                                        #   in Loop: Header=BB204_1 Depth=1
	movl	-32(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -32(%rbp)
	jmp	.LBB204_1
.LBB204_8:                              # %for.end7
	cmpl	$308248659, -44(%rbp)   # imm = 0x125F8053
	jne	.LBB204_10
.LBB204_9:
	addq	$40, %rsp
	popq	%rbx
	popq	%r14
	popq	%r15
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB204_10:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB204_9
.Lfunc_end204:
	.size	GenerateFullPelRepresentation.168, .Lfunc_end204-GenerateFullPelRepresentation.168
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.169
	.type	copy_motion_vectors_MB.169,@function
copy_motion_vectors_MB.169:             # @copy_motion_vectors_MB.169
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1966804901, -20(%rbp)  # imm = 0x753B0FA5
	movl	$0, -12(%rbp)
.LBB205_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB205_3 Depth 2
                                        #       Child Loop BB205_5 Depth 3
                                        #         Child Loop BB205_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB205_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB205_1 Depth=1
	movl	$0, -16(%rbp)
.LBB205_3:                              # %for.cond1
                                        #   Parent Loop BB205_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB205_5 Depth 3
                                        #         Child Loop BB205_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB205_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB205_3 Depth=2
	movl	$0, -4(%rbp)
.LBB205_5:                              # %for.cond4
                                        #   Parent Loop BB205_1 Depth=1
                                        #     Parent Loop BB205_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB205_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB205_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB205_5 Depth=3
	movl	$0, -8(%rbp)
.LBB205_7:                              # %for.cond7
                                        #   Parent Loop BB205_1 Depth=1
                                        #     Parent Loop BB205_3 Depth=2
                                        #       Parent Loop BB205_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -8(%rbp)
	jge	.LBB205_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB205_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB205_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB205_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB205_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB205_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB205_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB205_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB205_12:                             # %if.end
                                        #   in Loop: Header=BB205_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB205_7 Depth=4
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB205_7
.LBB205_14:                             # %for.end
                                        #   in Loop: Header=BB205_5 Depth=3
	jmp	.LBB205_15
.LBB205_15:                             # %for.inc359
                                        #   in Loop: Header=BB205_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB205_5
.LBB205_16:                             # %for.end361
                                        #   in Loop: Header=BB205_3 Depth=2
	jmp	.LBB205_17
.LBB205_17:                             # %for.inc362
                                        #   in Loop: Header=BB205_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB205_3
.LBB205_18:                             # %for.end364
                                        #   in Loop: Header=BB205_1 Depth=1
	jmp	.LBB205_19
.LBB205_19:                             # %for.inc365
                                        #   in Loop: Header=BB205_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB205_1
.LBB205_20:                             # %for.end367
	cmpl	$1966804901, -20(%rbp)  # imm = 0x753B0FA5
	jne	.LBB205_22
.LBB205_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB205_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB205_21
.Lfunc_end205:
	.size	copy_motion_vectors_MB.169, .Lfunc_end205-copy_motion_vectors_MB.169
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.170
	.type	copy_motion_vectors_MB.170,@function
copy_motion_vectors_MB.170:             # @copy_motion_vectors_MB.170
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1989179825, -20(%rbp)  # imm = 0x769079B1
	movl	$0, -8(%rbp)
.LBB206_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB206_3 Depth 2
                                        #       Child Loop BB206_5 Depth 3
                                        #         Child Loop BB206_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB206_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB206_1 Depth=1
	movl	$0, -16(%rbp)
.LBB206_3:                              # %for.cond1
                                        #   Parent Loop BB206_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB206_5 Depth 3
                                        #         Child Loop BB206_7 Depth 4
	cmpl	$4, -16(%rbp)
	jge	.LBB206_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB206_3 Depth=2
	movl	$0, -4(%rbp)
.LBB206_5:                              # %for.cond4
                                        #   Parent Loop BB206_1 Depth=1
                                        #     Parent Loop BB206_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB206_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB206_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB206_5 Depth=3
	movl	$0, -12(%rbp)
.LBB206_7:                              # %for.cond7
                                        #   Parent Loop BB206_1 Depth=1
                                        #     Parent Loop BB206_3 Depth=2
                                        #       Parent Loop BB206_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -12(%rbp)
	jge	.LBB206_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB206_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB206_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB206_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB206_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB206_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB206_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB206_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB206_12:                             # %if.end
                                        #   in Loop: Header=BB206_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB206_7 Depth=4
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB206_7
.LBB206_14:                             # %for.end
                                        #   in Loop: Header=BB206_5 Depth=3
	jmp	.LBB206_15
.LBB206_15:                             # %for.inc359
                                        #   in Loop: Header=BB206_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB206_5
.LBB206_16:                             # %for.end361
                                        #   in Loop: Header=BB206_3 Depth=2
	jmp	.LBB206_17
.LBB206_17:                             # %for.inc362
                                        #   in Loop: Header=BB206_3 Depth=2
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB206_3
.LBB206_18:                             # %for.end364
                                        #   in Loop: Header=BB206_1 Depth=1
	jmp	.LBB206_19
.LBB206_19:                             # %for.inc365
                                        #   in Loop: Header=BB206_1 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB206_1
.LBB206_20:                             # %for.end367
	cmpl	$1989179825, -20(%rbp)  # imm = 0x769079B1
	jne	.LBB206_22
.LBB206_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB206_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB206_21
.Lfunc_end206:
	.size	copy_motion_vectors_MB.170, .Lfunc_end206-copy_motion_vectors_MB.170
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function init_field.171
.LCPI207_0:
	.quad	4607182418800017408     # double 1
	.text
	.p2align	4, 0x90
	.type	init_field.171,@function
init_field.171:                         # @init_field.171
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$16, %rsp
	movl	$1718204000, -16(%rbp)  # imm = 0x6669B660
	movq	last_P_no_fld, %rax
	movq	%rax, last_P_no
	movq	img, %rax
	movl	$0, 12(%rax)
	movq	img, %rax
	movl	$0, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	movq	input, %rax
	movl	20(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	input, %rax
	movl	1236(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 1236(%rax)
	movq	img, %rcx
	movl	(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, (%rcx)
	movq	img, %rcx
	movl	72376(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 72376(%rcx)
	movq	img, %rax
	movl	$0, 136(%rax)
	movq	img, %rax
	movl	$0, 140(%rax)
	movq	img, %rax
	movl	$0, 164(%rax)
	movq	img, %rax
	movl	$0, 156(%rax)
	movq	img, %rax
	movl	$0, 148(%rax)
	movq	img, %rax
	movl	$0, 160(%rax)
	movq	img, %rax
	movl	$0, 96(%rax)
	movq	img, %rax
	movl	$0, 152(%rax)
	movq	img, %rax
	movl	$0, 144(%rax)
	movq	img, %rax
	cmpl	$0, 71908(%rax)
	jne	.LBB207_27
# %bb.1:                                # %if.then
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	movl	20(%rcx), %ecx
	addl	$2, %ecx
	imull	%ecx, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB207_3
# %bb.2:                                # %if.then9
	movq	img, %rax
	movl	71884(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71888(%rcx)
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71884(%rcx)
.LBB207_3:                              # %if.end
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB207_6
# %bb.4:                                # %land.lhs.true
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB207_6
# %bb.5:                                # %if.then15
	movq	input, %rax
	movl	2440(%rax), %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB207_6:                              # %if.end18
	movq	img, %rax
	cmpl	$0, (%rax)
	je	.LBB207_9
# %bb.7:                                # %land.lhs.true21
	movq	input, %rax
	cmpl	$0, 1236(%rax)
	je	.LBB207_9
# %bb.8:                                # %if.then24
	movq	img, %rax
	movl	71792(%rax), %eax
	movl	%eax, nextP_tr_fld
.LBB207_9:                              # %if.end26
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB207_24
# %bb.10:                               # %if.then28
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB207_16
# %bb.11:                               # %if.then30
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB207_14
# %bb.12:                               # %land.lhs.true32
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB207_14
# %bb.13:                               # %if.then36
	movq	input, %rax
	movl	2456(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB207_15
.LBB207_14:                             # %if.else
	movq	input, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB207_15:                             # %if.end38
	jmp	.LBB207_23
.LBB207_16:                             # %if.else39
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB207_19
# %bb.17:                               # %land.lhs.true42
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB207_19
# %bb.18:                               # %if.then46
	movq	input, %rax
	movl	2444(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB207_20
.LBB207_19:                             # %if.else48
	movq	input, %rax
	movl	16(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB207_20:                             # %if.end50
	movq	img, %rax
	cmpl	$3, 24(%rax)
	jne	.LBB207_22
# %bb.21:                               # %if.then53
	movq	input, %rax
	movl	1276(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	movq	input, %rax
	movl	1280(%rax), %eax
	movq	img, %rcx
	movl	%eax, 44(%rcx)
.LBB207_22:                             # %if.end56
	jmp	.LBB207_23
.LBB207_23:                             # %if.end57
	jmp	.LBB207_24
.LBB207_24:                             # %if.end58
	movq	img, %rax
	movl	88(%rax), %eax
	movq	img, %rcx
	movl	%eax, 92(%rcx)
	movq	input, %rax
	cmpl	$0, 76(%rax)
	jle	.LBB207_26
# %bb.25:                               # %if.then60
	movq	img, %rax
	movl	(%rax), %eax
	movq	input, %rcx
	cltd
	idivl	76(%rcx)
	movl	%eax, %ecx
	movq	img, %rax
	movl	52(%rax), %eax
	cltd
	movl	$16, %esi
	idivl	%esi
	movl	%eax, %esi
	movl	%ecx, %eax
	cltd
	idivl	%esi
	movq	img, %rax
	movl	%edx, 88(%rax)
.LBB207_26:                             # %if.end66
	jmp	.LBB207_77
.LBB207_27:                             # %if.else67
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$2, %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	$1, %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -8(%rbp)
	movq	img, %rax
	movl	(%rax), %eax
	movq	img, %rcx
	imull	71904(%rcx), %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	cmpl	$0, 71796(%rax)
	jne	.LBB207_33
# %bb.28:                               # %if.then82
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB207_29:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB207_32
# %bb.30:                               # %for.body
                                        #   in Loop: Header=BB207_29 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.31:                               # %for.inc
                                        #   in Loop: Header=BB207_29 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_29
.LBB207_32:                             # %for.end
	jmp	.LBB207_38
.LBB207_33:                             # %if.else105
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	last_P_no, %rcx
	movl	%eax, (%rcx)
	movl	-8(%rbp), %eax
	movq	last_P_no, %rcx
	movl	%eax, 4(%rcx)
	movl	$1, -4(%rbp)
.LBB207_34:                             # %for.cond109
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	72376(%rcx), %eax
	jg	.LBB207_37
# %bb.35:                               # %for.body112
                                        #   in Loop: Header=BB207_34 Depth=1
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$2, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
	movq	last_P_no, %rax
	movl	-4(%rbp), %ecx
	shll	$1, %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	movl	(%rax,%rcx,4), %eax
	movq	img, %rcx
	subl	71904(%rcx), %eax
	movq	last_P_no, %rcx
	movl	-4(%rbp), %edx
	shll	$1, %edx
	addl	$1, %edx
	movslq	%edx, %rdx
	movl	%eax, (%rcx,%rdx,4)
# %bb.36:                               # %for.inc132
                                        #   in Loop: Header=BB207_34 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB207_34
.LBB207_37:                             # %for.end134
	jmp	.LBB207_38
.LBB207_38:                             # %if.end135
	movq	input, %rax
	cmpl	$0, 2440(%rax)
	je	.LBB207_41
# %bb.39:                               # %land.lhs.true138
	movq	img, %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	input, %rcx
	cmpl	8(%rcx), %eax
	jne	.LBB207_41
# %bb.40:                               # %if.then143
	movq	input, %rax
	movl	2440(%rax), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	subl	-8(%rbp), %eax
	movq	img, %rcx
	movl	%eax, 71904(%rcx)
.LBB207_41:                             # %if.end147
	vmovsd	.LCPI207_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	input, %rax
	movl	20(%rax), %eax
	addl	$1, %eax
	vcvtsi2sd	%eax, %xmm0, %xmm1
	movq	input, %rax
	vcvtsi2sdl	1236(%rax), %xmm0, %xmm2
	vaddsd	%xmm0, %xmm2, %xmm0
	vdivsd	%xmm0, %xmm1, %xmm0
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB207_43
# %bb.42:                               # %if.then156
	vmovsd	.LCPI207_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movq	img, %rax
	vmovsd	%xmm0, 71896(%rax)
.LBB207_43:                             # %if.end158
	movq	input, %rax
	cmpl	$0, 1320(%rax)
	je	.LBB207_45
# %bb.44:                               # %if.then161
	vmovsd	.LCPI207_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	gop_structure, %rcx
	movq	img, %rdx
	movl	71908(%rdx), %edx
	subl	$1, %edx
	movslq	%edx, %rdx
	imulq	$24, %rdx, %rdx
	addq	%rdx, %rcx
	movl	4(%rcx), %ecx
	addl	$1, %ecx
	vcvtsi2sd	%ecx, %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
	jmp	.LBB207_46
.LBB207_45:                             # %if.else174
	vmovsd	.LCPI207_0(%rip), %xmm0 # xmm0 = mem[0],zero
	movl	-8(%rbp), %eax
	movq	img, %rcx
	vaddsd	71896(%rcx), %xmm0, %xmm0
	movq	img, %rcx
	vcvtsi2sdl	71908(%rcx), %xmm0, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvttsd2si	%xmm0, %ecx
	addl	%ecx, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB207_46:                             # %if.end183
	movq	img, %rax
	movl	71792(%rax), %eax
	cmpl	-12(%rbp), %eax
	jl	.LBB207_48
# %bb.47:                               # %if.then187
	movl	-12(%rbp), %eax
	subl	$1, %eax
	movq	img, %rcx
	movl	%eax, 71792(%rcx)
.LBB207_48:                             # %if.end190
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	jne	.LBB207_73
# %bb.49:                               # %land.lhs.true193
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	je	.LBB207_73
# %bb.50:                               # %if.then197
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB207_53
# %bb.51:                               # %land.lhs.true201
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB207_53
# %bb.52:                               # %if.then206
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB207_54
.LBB207_53:                             # %if.else208
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB207_54:                             # %if.end210
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB207_72
# %bb.55:                               # %if.then212
	movq	input, %rax
	cmpl	$0, 2452(%rax)
	jle	.LBB207_64
# %bb.56:                               # %land.lhs.true216
	movq	img, %rax
	movl	71792(%rax), %eax
	movq	input, %rcx
	cmpl	2452(%rcx), %eax
	jl	.LBB207_64
# %bb.57:                               # %if.then221
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB207_59
# %bb.58:                               # %cond.true
	xorl	%eax, %eax
	jmp	.LBB207_63
.LBB207_59:                             # %cond.false
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB207_61
# %bb.60:                               # %cond.true231
	movl	$51, %eax
	jmp	.LBB207_62
.LBB207_61:                             # %cond.false232
	movq	input, %rax
	movl	2448(%rax), %eax
	movq	input, %rcx
	addl	2460(%rcx), %eax
.LBB207_62:                             # %cond.end
.LBB207_63:                             # %cond.end236
	movq	img, %rcx
	movl	%eax, 40(%rcx)
	jmp	.LBB207_71
.LBB207_64:                             # %if.else239
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$0, %eax
	jge	.LBB207_66
# %bb.65:                               # %cond.true244
	xorl	%eax, %eax
	jmp	.LBB207_70
.LBB207_66:                             # %cond.false245
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
	cmpl	$51, %eax
	jle	.LBB207_68
# %bb.67:                               # %cond.true251
	movl	$51, %eax
	jmp	.LBB207_69
.LBB207_68:                             # %cond.false252
	movq	input, %rax
	movl	1240(%rax), %eax
	movq	input, %rcx
	addl	1244(%rcx), %eax
.LBB207_69:                             # %cond.end256
.LBB207_70:                             # %cond.end258
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB207_71:                             # %if.end261
	jmp	.LBB207_72
.LBB207_72:                             # %if.end262
	jmp	.LBB207_76
.LBB207_73:                             # %if.else263
	movq	input, %rax
	cmpl	$3, 1320(%rax)
	jne	.LBB207_75
# %bb.74:                               # %if.then267
	movq	gop_structure, %rax
	movq	img, %rcx
	movl	71908(%rcx), %ecx
	subl	$1, %ecx
	movslq	%ecx, %rcx
	imulq	$24, %rcx, %rcx
	addq	%rcx, %rax
	movl	12(%rax), %eax
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB207_75:                             # %if.end273
	jmp	.LBB207_76
.LBB207_76:                             # %if.end274
	jmp	.LBB207_77
.LBB207_77:                             # %if.end275
	movq	input, %rcx
	movl	20(%rcx), %eax
	cltd
	movl	$2, %esi
	idivl	%esi
	movl	%eax, 20(%rcx)
	movq	input, %rcx
	movl	1236(%rcx), %eax
	cltd
	idivl	%esi
	movl	%eax, 1236(%rcx)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	img, %rax
	movl	(%rax), %eax
	shll	$1, %eax
	movq	img, %rcx
	addl	71796(%rcx), %eax
	movq	img, %rcx
	movl	%eax, (%rcx)
	movq	img, %rax
	movl	52(%rax), %eax
	movq	img, %rcx
	imull	60(%rcx), %eax
	cltd
	movl	$256, %ecx              # imm = 0x100
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 16(%rcx)
	cmpl	$1718204000, -16(%rbp)  # imm = 0x6669B660
	jne	.LBB207_79
.LBB207_78:
	addq	$16, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB207_79:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB207_78
.Lfunc_end207:
	.size	init_field.171, .Lfunc_end207-init_field.171
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function writeUnit.172
	.type	writeUnit.172,@function
writeUnit.172:                          # @writeUnit.172
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1832190816, -16(%rbp)  # imm = 0x6D350360
	movq	%rdi, -24(%rbp)
	movl	%esi, -12(%rbp)
	movq	img, %rax
	movl	52(%rax), %edi
	movq	img, %rax
	imull	60(%rax), %edi
	shll	$2, %edi
	movb	$0, %al
	callq	AllocNALU
	movq	%rax, -8(%rbp)
	movq	img, %rax
	movl	12(%rax), %eax
	cmpl	$0, %eax
	movl	$3, %eax
	movl	$2, %ecx
	cmovel	%eax, %ecx
	addl	$2, %ecx
	movq	-8(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-24(%rbp), %rax
	movl	(%rax), %eax
	addl	$1, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 4(%rcx)
	movq	-8(%rbp), %rax
	movq	24(%rax), %rdi
	addq	$1, %rdi
	movq	-24(%rbp), %rax
	movq	32(%rax), %rsi
	movq	-8(%rbp), %rax
	movl	4(%rax), %eax
	subl	$1, %eax
	movl	%eax, %edx
	callq	memcpy
	movq	img, %rax
	movq	14152(%rax), %rax
	cmpl	$0, 4(%rax)
	je	.LBB208_2
# %bb.1:                                # %if.then
	movq	-8(%rbp), %rax
	movl	$5, 12(%rax)
	movq	-8(%rbp), %rax
	movl	$3, 16(%rax)
	jmp	.LBB208_18
.LBB208_2:                              # %if.else
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB208_10
# %bb.3:                                # %if.then6
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB208_5
# %bb.4:                                # %if.then9
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB208_6
.LBB208_5:                              # %if.else11
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB208_6:                              # %if.end
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB208_8
# %bb.7:                                # %if.then17
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB208_9
.LBB208_8:                              # %if.else19
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB208_9:                              # %if.end21
	jmp	.LBB208_17
.LBB208_10:                             # %if.else22
	movq	input, %rax
	cmpl	$0, 2364(%rax)
	jne	.LBB208_12
# %bb.11:                               # %if.then26
	movq	-8(%rbp), %rax
	movl	$1, 12(%rax)
	jmp	.LBB208_13
.LBB208_12:                             # %if.else28
	movl	-12(%rbp), %eax
	addl	$2, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 12(%rcx)
.LBB208_13:                             # %if.end31
	movq	img, %rax
	cmpl	$0, 72496(%rax)
	je	.LBB208_15
# %bb.14:                               # %if.then35
	movq	-8(%rbp), %rax
	movl	$2, 16(%rax)
	jmp	.LBB208_16
.LBB208_15:                             # %if.else37
	movq	-8(%rbp), %rax
	movl	$0, 16(%rax)
.LBB208_16:                             # %if.end39
	jmp	.LBB208_17
.LBB208_17:                             # %if.end40
	jmp	.LBB208_18
.LBB208_18:                             # %if.end41
	movq	-8(%rbp), %rax
	movl	$0, 20(%rax)
	movq	WriteNALU, %rax
	movq	-8(%rbp), %rdi
	callq	*%rax
	movq	stats, %rcx
	addl	16(%rcx), %eax
	movl	%eax, 16(%rcx)
	movq	-8(%rbp), %rdi
	callq	FreeNALU
	cmpl	$1832190816, -16(%rbp)  # imm = 0x6D350360
	jne	.LBB208_20
.LBB208_19:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB208_20:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB208_19
.Lfunc_end208:
	.size	writeUnit.172, .Lfunc_end208-writeUnit.172
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.173
.LCPI209_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.173,@function
find_snr.173:                           # @find_snr.173
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$56753564, -52(%rbp)    # imm = 0x361FD9C
	movq	$0, -16(%rbp)
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB209_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB209_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB209_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB209_2 Depth=1
	movl	$0, -4(%rbp)
.LBB209_4:                              # %for.cond8
                                        #   Parent Loop BB209_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB209_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB209_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB209_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB209_4
.LBB209_7:                              # %for.end
                                        #   in Loop: Header=BB209_2 Depth=1
	jmp	.LBB209_8
.LBB209_8:                              # %for.inc22
                                        #   in Loop: Header=BB209_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB209_2
.LBB209_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB209_19
# %bb.10:                               # %if.then27
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB209_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB209_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB209_11 Depth=1
	movl	$0, -4(%rbp)
.LBB209_13:                             # %for.cond33
                                        #   Parent Loop BB209_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB209_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB209_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB209_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB209_13
.LBB209_16:                             # %for.end76
                                        #   in Loop: Header=BB209_11 Depth=1
	jmp	.LBB209_17
.LBB209_17:                             # %for.inc77
                                        #   in Loop: Header=BB209_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB209_11
.LBB209_18:                             # %for.end79
	jmp	.LBB209_19
.LBB209_19:                             # %if.end
	jmp	.LBB209_41
.LBB209_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB209_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB209_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB209_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB209_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB209_23 Depth=1
	movl	$0, -4(%rbp)
.LBB209_25:                             # %for.cond89
                                        #   Parent Loop BB209_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB209_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB209_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB209_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB209_25
.LBB209_28:                             # %for.end112
                                        #   in Loop: Header=BB209_23 Depth=1
	jmp	.LBB209_29
.LBB209_29:                             # %for.inc113
                                        #   in Loop: Header=BB209_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB209_23
.LBB209_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB209_40
# %bb.31:                               # %if.then119
	movq	$0, -32(%rbp)
	movq	$0, -24(%rbp)
	movl	$0, -8(%rbp)
.LBB209_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB209_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB209_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB209_32 Depth=1
	movl	$0, -4(%rbp)
.LBB209_34:                             # %for.cond125
                                        #   Parent Loop BB209_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB209_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB209_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB209_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB209_34
.LBB209_37:                             # %for.end169
                                        #   in Loop: Header=BB209_32 Depth=1
	jmp	.LBB209_38
.LBB209_38:                             # %for.inc170
                                        #   in Loop: Header=BB209_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB209_32
.LBB209_39:                             # %for.end172
	jmp	.LBB209_40
.LBB209_40:                             # %if.end173
	jmp	.LBB209_41
.LBB209_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB209_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB209_43:                             # %if.end178
	cmpq	$0, -32(%rbp)
	jne	.LBB209_45
# %bb.44:                               # %if.then181
	movq	$1, -32(%rbp)
.LBB209_45:                             # %if.end182
	cmpq	$0, -24(%rbp)
	jne	.LBB209_47
# %bb.46:                               # %if.then185
	movq	$1, -24(%rbp)
.LBB209_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB209_52
# %bb.48:                               # %if.then189
	movl	-44(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-48(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI209_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB209_50
# %bb.49:                               # %if.then199
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI209_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI209_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB209_51
.LBB209_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB209_51:                             # %if.end219
	jmp	.LBB209_52
.LBB209_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB209_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB209_55
.LBB209_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB209_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB209_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB209_61
.LBB209_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB209_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB209_60
.LBB209_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB209_60:                             # %if.end394
	jmp	.LBB209_61
.LBB209_61:                             # %if.end395
	cmpl	$56753564, -52(%rbp)    # imm = 0x361FD9C
	jne	.LBB209_63
.LBB209_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB209_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB209_62
.Lfunc_end209:
	.size	find_snr.173, .Lfunc_end209-find_snr.173
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.174       # -- Begin function field_picture.174
	.p2align	4, 0x90
	.type	field_picture.174,@function
field_picture.174:                      # @field_picture.174
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$363270733, -16(%rbp)   # imm = 0x15A7124D
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB210_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB210_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB210_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB210_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB210_6
.LBB210_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB210_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB210_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB210_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB210_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB210_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB210_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB210_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB210_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB210_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB210_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB210_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$363270733, -16(%rbp)   # imm = 0x15A7124D
	jne	.LBB210_18
.LBB210_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB210_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB210_17
.Lfunc_end210:
	.size	field_picture.174, .Lfunc_end210-field_picture.174
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.175      # -- Begin function code_a_picture.175
	.p2align	4, 0x90
	.type	code_a_picture.175,@function
code_a_picture.175:                     # @code_a_picture.175
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1528055717, -28(%rbp)  # imm = 0x5B1447A5
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB211_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB211_8
.LBB211_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB211_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB211_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB211_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB211_7
.LBB211_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB211_7:                              # %land.end
.LBB211_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB211_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB211_10:                             # %if.end
	jmp	.LBB211_11
.LBB211_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB211_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB211_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB211_11 Depth=1
	jmp	.LBB211_13
.LBB211_13:                             # %while.cond15
                                        #   Parent Loop BB211_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB211_14
	jmp	.LBB211_15
.LBB211_14:                             # %while.body19
                                        #   in Loop: Header=BB211_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB211_13
.LBB211_15:                             # %while.end
                                        #   in Loop: Header=BB211_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB211_11
.LBB211_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB211_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB211_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB211_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB211_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB211_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB211_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB211_19
.LBB211_22:                             # %for.end
	jmp	.LBB211_23
.LBB211_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB211_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB211_25:                             # %if.end34
	cmpl	$1528055717, -28(%rbp)  # imm = 0x5B1447A5
	jne	.LBB211_27
.LBB211_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB211_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB211_26
.Lfunc_end211:
	.size	code_a_picture.175, .Lfunc_end211-code_a_picture.175
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.176       # -- Begin function field_picture.176
	.p2align	4, 0x90
	.type	field_picture.176,@function
field_picture.176:                      # @field_picture.176
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1369963912, -12(%rbp)  # imm = 0x51A7FD88
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB212_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB212_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB212_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB212_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB212_6
.LBB212_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB212_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB212_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB212_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB212_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB212_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB212_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB212_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB212_14
# %bb.13:                               # %if.then58
	movl	-16(%rbp), %edi
	callq	setbitscount
.LBB212_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB212_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB212_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$1369963912, -12(%rbp)  # imm = 0x51A7FD88
	jne	.LBB212_18
.LBB212_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB212_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB212_17
.Lfunc_end212:
	.size	field_picture.176, .Lfunc_end212-field_picture.176
	.cfi_endproc
                                        # -- End function
	.p2align	4, 0x90         # -- Begin function copy_motion_vectors_MB.177
	.type	copy_motion_vectors_MB.177,@function
copy_motion_vectors_MB.177:             # @copy_motion_vectors_MB.177
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$140290627, -20(%rbp)   # imm = 0x85CAA43
	movl	$0, -12(%rbp)
.LBB213_1:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB213_3 Depth 2
                                        #       Child Loop BB213_5 Depth 3
                                        #         Child Loop BB213_7 Depth 4
	cmpl	$4, -12(%rbp)
	jge	.LBB213_20
# %bb.2:                                # %for.body
                                        #   in Loop: Header=BB213_1 Depth=1
	movl	$0, -8(%rbp)
.LBB213_3:                              # %for.cond1
                                        #   Parent Loop BB213_1 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB213_5 Depth 3
                                        #         Child Loop BB213_7 Depth 4
	cmpl	$4, -8(%rbp)
	jge	.LBB213_18
# %bb.4:                                # %for.body3
                                        #   in Loop: Header=BB213_3 Depth=2
	movl	$0, -4(%rbp)
.LBB213_5:                              # %for.cond4
                                        #   Parent Loop BB213_1 Depth=1
                                        #     Parent Loop BB213_3 Depth=2
                                        # =>    This Loop Header: Depth=3
                                        #         Child Loop BB213_7 Depth 4
	movl	-4(%rbp), %eax
	movq	img, %rcx
	cmpl	36(%rcx), %eax
	jge	.LBB213_16
# %bb.6:                                # %for.body6
                                        #   in Loop: Header=BB213_5 Depth=3
	movl	$0, -16(%rbp)
.LBB213_7:                              # %for.cond7
                                        #   Parent Loop BB213_1 Depth=1
                                        #     Parent Loop BB213_3 Depth=2
                                        #       Parent Loop BB213_5 Depth=3
                                        # =>      This Inner Loop Header: Depth=4
	cmpl	$9, -16(%rbp)
	jge	.LBB213_14
# %bb.8:                                # %for.body9
                                        #   in Loop: Header=BB213_7 Depth=4
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3240(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71928(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	input, %rax
	cmpl	$0, 1256(%rax)
	je	.LBB213_12
# %bb.9:                                # %land.lhs.true
                                        #   in Loop: Header=BB213_7 Depth=4
	cmpl	$1, -4(%rbp)
	jne	.LBB213_12
# %bb.10:                               # %land.lhs.true96
                                        #   in Loop: Header=BB213_7 Depth=4
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB213_12
# %bb.11:                               # %if.then
                                        #   in Loop: Header=BB213_7 Depth=4
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3248(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71936(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3256(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71944(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
.LBB213_12:                             # %if.end
                                        #   in Loop: Header=BB213_7 Depth=4
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, (%rcx)
	movq	rdopt, %rax
	movq	3232(%rax), %rax
	movslq	-12(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movq	8(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movslq	-16(%rbp), %rcx
	movq	(%rax,%rcx,8), %rax
	movw	2(%rax), %ax
	movq	img, %rcx
	movq	71920(%rcx), %rcx
	movslq	-12(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-16(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movw	%ax, 2(%rcx)
# %bb.13:                               # %for.inc
                                        #   in Loop: Header=BB213_7 Depth=4
	movl	-16(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -16(%rbp)
	jmp	.LBB213_7
.LBB213_14:                             # %for.end
                                        #   in Loop: Header=BB213_5 Depth=3
	jmp	.LBB213_15
.LBB213_15:                             # %for.inc359
                                        #   in Loop: Header=BB213_5 Depth=3
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB213_5
.LBB213_16:                             # %for.end361
                                        #   in Loop: Header=BB213_3 Depth=2
	jmp	.LBB213_17
.LBB213_17:                             # %for.inc362
                                        #   in Loop: Header=BB213_3 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB213_3
.LBB213_18:                             # %for.end364
                                        #   in Loop: Header=BB213_1 Depth=1
	jmp	.LBB213_19
.LBB213_19:                             # %for.inc365
                                        #   in Loop: Header=BB213_1 Depth=1
	movl	-12(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -12(%rbp)
	jmp	.LBB213_1
.LBB213_20:                             # %for.end367
	cmpl	$140290627, -20(%rbp)   # imm = 0x85CAA43
	jne	.LBB213_22
.LBB213_21:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB213_22:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB213_21
.Lfunc_end213:
	.size	copy_motion_vectors_MB.177, .Lfunc_end213-copy_motion_vectors_MB.177
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.178
.LCPI214_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.178,@function
find_snr.178:                           # @find_snr.178
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1595511010, -52(%rbp)  # imm = 0x5F1990E2
	movq	$0, -16(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB214_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB214_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_4 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB214_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB214_2 Depth=1
	movl	$0, -8(%rbp)
.LBB214_4:                              # %for.cond8
                                        #   Parent Loop BB214_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB214_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB214_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB214_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB214_4
.LBB214_7:                              # %for.end
                                        #   in Loop: Header=BB214_2 Depth=1
	jmp	.LBB214_8
.LBB214_8:                              # %for.inc22
                                        #   in Loop: Header=BB214_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB214_2
.LBB214_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB214_19
# %bb.10:                               # %if.then27
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB214_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_13 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB214_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB214_11 Depth=1
	movl	$0, -8(%rbp)
.LBB214_13:                             # %for.cond33
                                        #   Parent Loop BB214_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB214_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB214_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB214_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB214_13
.LBB214_16:                             # %for.end76
                                        #   in Loop: Header=BB214_11 Depth=1
	jmp	.LBB214_17
.LBB214_17:                             # %for.inc77
                                        #   in Loop: Header=BB214_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB214_11
.LBB214_18:                             # %for.end79
	jmp	.LBB214_19
.LBB214_19:                             # %if.end
	jmp	.LBB214_41
.LBB214_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB214_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB214_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB214_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_25 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB214_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB214_23 Depth=1
	movl	$0, -8(%rbp)
.LBB214_25:                             # %for.cond89
                                        #   Parent Loop BB214_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB214_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB214_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB214_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB214_25
.LBB214_28:                             # %for.end112
                                        #   in Loop: Header=BB214_23 Depth=1
	jmp	.LBB214_29
.LBB214_29:                             # %for.inc113
                                        #   in Loop: Header=BB214_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB214_23
.LBB214_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB214_40
# %bb.31:                               # %if.then119
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB214_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB214_34 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB214_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB214_32 Depth=1
	movl	$0, -8(%rbp)
.LBB214_34:                             # %for.cond125
                                        #   Parent Loop BB214_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB214_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB214_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB214_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB214_34
.LBB214_37:                             # %for.end169
                                        #   in Loop: Header=BB214_32 Depth=1
	jmp	.LBB214_38
.LBB214_38:                             # %for.inc170
                                        #   in Loop: Header=BB214_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB214_32
.LBB214_39:                             # %for.end172
	jmp	.LBB214_40
.LBB214_40:                             # %if.end173
	jmp	.LBB214_41
.LBB214_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB214_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB214_43:                             # %if.end178
	cmpq	$0, -24(%rbp)
	jne	.LBB214_45
# %bb.44:                               # %if.then181
	movq	$1, -24(%rbp)
.LBB214_45:                             # %if.end182
	cmpq	$0, -32(%rbp)
	jne	.LBB214_47
# %bb.46:                               # %if.then185
	movq	$1, -32(%rbp)
.LBB214_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB214_52
# %bb.48:                               # %if.then189
	movl	-48(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI214_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB214_50
# %bb.49:                               # %if.then199
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI214_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI214_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB214_51
.LBB214_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB214_51:                             # %if.end219
	jmp	.LBB214_52
.LBB214_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB214_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB214_55
.LBB214_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB214_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB214_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB214_61
.LBB214_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB214_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB214_60
.LBB214_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB214_60:                             # %if.end394
	jmp	.LBB214_61
.LBB214_61:                             # %if.end395
	cmpl	$1595511010, -52(%rbp)  # imm = 0x5F1990E2
	jne	.LBB214_63
.LBB214_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB214_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB214_62
.Lfunc_end214:
	.size	find_snr.178, .Lfunc_end214-find_snr.178
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.179       # -- Begin function field_picture.179
	.p2align	4, 0x90
	.type	field_picture.179,@function
field_picture.179:                      # @field_picture.179
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1675540153, -16(%rbp)  # imm = 0x63DEB6B9
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB215_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB215_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB215_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB215_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB215_6
.LBB215_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB215_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB215_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB215_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB215_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB215_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB215_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB215_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB215_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB215_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB215_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB215_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$1675540153, -16(%rbp)  # imm = 0x63DEB6B9
	jne	.LBB215_18
.LBB215_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB215_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB215_17
.Lfunc_end215:
	.size	field_picture.179, .Lfunc_end215-field_picture.179
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.180      # -- Begin function code_a_picture.180
	.p2align	4, 0x90
	.type	code_a_picture.180,@function
code_a_picture.180:                     # @code_a_picture.180
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$895773259, -28(%rbp)   # imm = 0x35646A4B
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB216_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB216_8
.LBB216_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB216_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB216_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB216_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB216_7
.LBB216_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB216_7:                              # %land.end
.LBB216_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB216_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB216_10:                             # %if.end
	jmp	.LBB216_11
.LBB216_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB216_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB216_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB216_11 Depth=1
	jmp	.LBB216_13
.LBB216_13:                             # %while.cond15
                                        #   Parent Loop BB216_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB216_14
	jmp	.LBB216_15
.LBB216_14:                             # %while.body19
                                        #   in Loop: Header=BB216_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB216_13
.LBB216_15:                             # %while.end
                                        #   in Loop: Header=BB216_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB216_11
.LBB216_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB216_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB216_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB216_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB216_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB216_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB216_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB216_19
.LBB216_22:                             # %for.end
	jmp	.LBB216_23
.LBB216_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB216_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB216_25:                             # %if.end34
	cmpl	$895773259, -28(%rbp)   # imm = 0x35646A4B
	jne	.LBB216_27
.LBB216_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB216_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB216_26
.Lfunc_end216:
	.size	code_a_picture.180, .Lfunc_end216-code_a_picture.180
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.181       # -- Begin function field_picture.181
	.p2align	4, 0x90
	.type	field_picture.181,@function
field_picture.181:                      # @field_picture.181
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2030543142, -12(%rbp)  # imm = 0x7907A126
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB217_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB217_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB217_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB217_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB217_6
.LBB217_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB217_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB217_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -16(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB217_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB217_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB217_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB217_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB217_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB217_14
# %bb.13:                               # %if.then58
	movl	-16(%rbp), %edi
	callq	setbitscount
.LBB217_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB217_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB217_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$2030543142, -12(%rbp)  # imm = 0x7907A126
	jne	.LBB217_18
.LBB217_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB217_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB217_17
.Lfunc_end217:
	.size	field_picture.181, .Lfunc_end217-field_picture.181
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.182      # -- Begin function code_a_picture.182
	.p2align	4, 0x90
	.type	code_a_picture.182,@function
code_a_picture.182:                     # @code_a_picture.182
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1820768871, -28(%rbp)  # imm = 0x6C86BA67
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB218_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB218_8
.LBB218_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB218_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB218_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB218_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB218_7
.LBB218_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB218_7:                              # %land.end
.LBB218_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB218_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB218_10:                             # %if.end
	jmp	.LBB218_11
.LBB218_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB218_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB218_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB218_11 Depth=1
	jmp	.LBB218_13
.LBB218_13:                             # %while.cond15
                                        #   Parent Loop BB218_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB218_14
	jmp	.LBB218_15
.LBB218_14:                             # %while.body19
                                        #   in Loop: Header=BB218_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB218_13
.LBB218_15:                             # %while.end
                                        #   in Loop: Header=BB218_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB218_11
.LBB218_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB218_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB218_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB218_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB218_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB218_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB218_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB218_19
.LBB218_22:                             # %for.end
	jmp	.LBB218_23
.LBB218_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB218_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB218_25:                             # %if.end34
	cmpl	$1820768871, -28(%rbp)  # imm = 0x6C86BA67
	jne	.LBB218_27
.LBB218_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB218_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB218_26
.Lfunc_end218:
	.size	code_a_picture.182, .Lfunc_end218-code_a_picture.182
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.183
.LCPI219_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.183,@function
find_snr.183:                           # @find_snr.183
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1226995823, -48(%rbp)  # imm = 0x4922786F
	movq	$0, -16(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB219_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB219_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB219_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB219_2 Depth=1
	movl	$0, -4(%rbp)
.LBB219_4:                              # %for.cond8
                                        #   Parent Loop BB219_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB219_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB219_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB219_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_4
.LBB219_7:                              # %for.end
                                        #   in Loop: Header=BB219_2 Depth=1
	jmp	.LBB219_8
.LBB219_8:                              # %for.inc22
                                        #   in Loop: Header=BB219_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_2
.LBB219_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB219_19
# %bb.10:                               # %if.then27
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -8(%rbp)
.LBB219_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB219_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB219_11 Depth=1
	movl	$0, -4(%rbp)
.LBB219_13:                             # %for.cond33
                                        #   Parent Loop BB219_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB219_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB219_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB219_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_13
.LBB219_16:                             # %for.end76
                                        #   in Loop: Header=BB219_11 Depth=1
	jmp	.LBB219_17
.LBB219_17:                             # %for.inc77
                                        #   in Loop: Header=BB219_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_11
.LBB219_18:                             # %for.end79
	jmp	.LBB219_19
.LBB219_19:                             # %if.end
	jmp	.LBB219_41
.LBB219_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB219_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB219_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB219_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB219_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB219_23 Depth=1
	movl	$0, -4(%rbp)
.LBB219_25:                             # %for.cond89
                                        #   Parent Loop BB219_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB219_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB219_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB219_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_25
.LBB219_28:                             # %for.end112
                                        #   in Loop: Header=BB219_23 Depth=1
	jmp	.LBB219_29
.LBB219_29:                             # %for.inc113
                                        #   in Loop: Header=BB219_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_23
.LBB219_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB219_40
# %bb.31:                               # %if.then119
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -8(%rbp)
.LBB219_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB219_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB219_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB219_32 Depth=1
	movl	$0, -4(%rbp)
.LBB219_34:                             # %for.cond125
                                        #   Parent Loop BB219_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB219_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB219_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB219_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB219_34
.LBB219_37:                             # %for.end169
                                        #   in Loop: Header=BB219_32 Depth=1
	jmp	.LBB219_38
.LBB219_38:                             # %for.inc170
                                        #   in Loop: Header=BB219_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB219_32
.LBB219_39:                             # %for.end172
	jmp	.LBB219_40
.LBB219_40:                             # %if.end173
	jmp	.LBB219_41
.LBB219_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB219_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB219_43:                             # %if.end178
	cmpq	$0, -24(%rbp)
	jne	.LBB219_45
# %bb.44:                               # %if.then181
	movq	$1, -24(%rbp)
.LBB219_45:                             # %if.end182
	cmpq	$0, -32(%rbp)
	jne	.LBB219_47
# %bb.46:                               # %if.then185
	movq	$1, -32(%rbp)
.LBB219_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB219_52
# %bb.48:                               # %if.then189
	movl	-52(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI219_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB219_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI219_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI219_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB219_51
.LBB219_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB219_51:                             # %if.end219
	jmp	.LBB219_52
.LBB219_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB219_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB219_55
.LBB219_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB219_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB219_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB219_61
.LBB219_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB219_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB219_60
.LBB219_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB219_60:                             # %if.end394
	jmp	.LBB219_61
.LBB219_61:                             # %if.end395
	cmpl	$1226995823, -48(%rbp)  # imm = 0x4922786F
	jne	.LBB219_63
.LBB219_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB219_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB219_62
.Lfunc_end219:
	.size	find_snr.183, .Lfunc_end219-find_snr.183
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.184      # -- Begin function code_a_picture.184
	.p2align	4, 0x90
	.type	code_a_picture.184,@function
code_a_picture.184:                     # @code_a_picture.184
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$1050400842, -28(%rbp)  # imm = 0x3E9BD84A
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -8(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB220_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB220_8
.LBB220_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB220_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB220_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB220_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB220_7
.LBB220_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB220_7:                              # %land.end
.LBB220_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB220_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB220_10:                             # %if.end
	jmp	.LBB220_11
.LBB220_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB220_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB220_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB220_11 Depth=1
	jmp	.LBB220_13
.LBB220_13:                             # %while.cond15
                                        #   Parent Loop BB220_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB220_14
	jmp	.LBB220_15
.LBB220_14:                             # %while.body19
                                        #   in Loop: Header=BB220_13 Depth=2
	movl	-8(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB220_13
.LBB220_15:                             # %while.end
                                        #   in Loop: Header=BB220_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB220_11
.LBB220_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB220_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB220_23
# %bb.18:                               # %if.then28
	movl	$0, -4(%rbp)
.LBB220_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB220_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB220_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-4(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB220_19 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB220_19
.LBB220_22:                             # %for.end
	jmp	.LBB220_23
.LBB220_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB220_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB220_25:                             # %if.end34
	cmpl	$1050400842, -28(%rbp)  # imm = 0x3E9BD84A
	jne	.LBB220_27
.LBB220_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB220_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB220_26
.Lfunc_end220:
	.size	code_a_picture.184, .Lfunc_end220-code_a_picture.184
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.185
.LCPI221_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.185,@function
find_snr.185:                           # @find_snr.185
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$1874175431, -48(%rbp)  # imm = 0x6FB5A5C7
	movq	$0, -16(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -52(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB221_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB221_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_4 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB221_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB221_2 Depth=1
	movl	$0, -4(%rbp)
.LBB221_4:                              # %for.cond8
                                        #   Parent Loop BB221_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB221_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB221_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB221_4 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_4
.LBB221_7:                              # %for.end
                                        #   in Loop: Header=BB221_2 Depth=1
	jmp	.LBB221_8
.LBB221_8:                              # %for.inc22
                                        #   in Loop: Header=BB221_2 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_2
.LBB221_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB221_19
# %bb.10:                               # %if.then27
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -8(%rbp)
.LBB221_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_13 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB221_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB221_11 Depth=1
	movl	$0, -4(%rbp)
.LBB221_13:                             # %for.cond33
                                        #   Parent Loop BB221_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB221_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB221_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB221_13 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_13
.LBB221_16:                             # %for.end76
                                        #   in Loop: Header=BB221_11 Depth=1
	jmp	.LBB221_17
.LBB221_17:                             # %for.inc77
                                        #   in Loop: Header=BB221_11 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_11
.LBB221_18:                             # %for.end79
	jmp	.LBB221_19
.LBB221_19:                             # %if.end
	jmp	.LBB221_41
.LBB221_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB221_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB221_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -8(%rbp)
.LBB221_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_25 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB221_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB221_23 Depth=1
	movl	$0, -4(%rbp)
.LBB221_25:                             # %for.cond89
                                        #   Parent Loop BB221_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB221_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB221_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB221_25 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_25
.LBB221_28:                             # %for.end112
                                        #   in Loop: Header=BB221_23 Depth=1
	jmp	.LBB221_29
.LBB221_29:                             # %for.inc113
                                        #   in Loop: Header=BB221_23 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_23
.LBB221_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB221_40
# %bb.31:                               # %if.then119
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -8(%rbp)
.LBB221_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB221_34 Depth 2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB221_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB221_32 Depth=1
	movl	$0, -4(%rbp)
.LBB221_34:                             # %for.cond125
                                        #   Parent Loop BB221_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB221_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB221_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-4(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-8(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-4(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-8(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB221_34 Depth=2
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB221_34
.LBB221_37:                             # %for.end169
                                        #   in Loop: Header=BB221_32 Depth=1
	jmp	.LBB221_38
.LBB221_38:                             # %for.inc170
                                        #   in Loop: Header=BB221_32 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB221_32
.LBB221_39:                             # %for.end172
	jmp	.LBB221_40
.LBB221_40:                             # %if.end173
	jmp	.LBB221_41
.LBB221_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB221_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB221_43:                             # %if.end178
	cmpq	$0, -24(%rbp)
	jne	.LBB221_45
# %bb.44:                               # %if.then181
	movq	$1, -24(%rbp)
.LBB221_45:                             # %if.end182
	cmpq	$0, -32(%rbp)
	jne	.LBB221_47
# %bb.46:                               # %if.then185
	movq	$1, -32(%rbp)
.LBB221_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB221_52
# %bb.48:                               # %if.then189
	movl	-52(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI221_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB221_50
# %bb.49:                               # %if.then199
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI221_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-36(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-40(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI221_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB221_51
.LBB221_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB221_51:                             # %if.end219
	jmp	.LBB221_52
.LBB221_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB221_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB221_55
.LBB221_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB221_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB221_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB221_61
.LBB221_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB221_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB221_60
.LBB221_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB221_60:                             # %if.end394
	jmp	.LBB221_61
.LBB221_61:                             # %if.end395
	cmpl	$1874175431, -48(%rbp)  # imm = 0x6FB5A5C7
	jne	.LBB221_63
.LBB221_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB221_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB221_62
.Lfunc_end221:
	.size	find_snr.185, .Lfunc_end221-find_snr.185
	.cfi_endproc
                                        # -- End function
	.globl	field_picture.186       # -- Begin function field_picture.186
	.p2align	4, 0x90
	.type	field_picture.186,@function
field_picture.186:                      # @field_picture.186
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$867946037, -16(%rbp)   # imm = 0x33BBCE35
	movq	%rdi, -8(%rbp)
	movq	%rsi, -24(%rbp)
	movq	img, %rax
	movl	24(%rax), %eax
	movl	%eax, -28(%rbp)
	movq	stats, %rax
	movl	$0, 1472(%rax)
	movq	stats, %rax
	addq	$1472, %rax             # imm = 0x5C0
	movq	stats, %rcx
	movq	%rax, 1480(%rcx)
	movq	img, %rax
	movl	(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, (%rax)
	movq	img, %rax
	movl	72376(%rax), %ecx
	shll	$1, %ecx
	movl	%ecx, 72376(%rax)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	img, %rcx
	addl	72732(%rcx), %eax
	cltd
	movl	$2, %ecx
	idivl	%ecx
	movq	img, %rdx
	movl	%eax, 60(%rdx)
	movq	img, %rax
	movl	68(%rax), %eax
	cltd
	idivl	%ecx
	movq	img, %rcx
	movl	%eax, 64(%rcx)
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	img, %rax
	movl	72488(%rax), %eax
	shrl	$1, %eax
	movq	img, %rcx
	movl	%eax, 72484(%rcx)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_top_picture
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_top_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_top_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_top_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72448(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$1, 28(%rax)
	movq	enc_top_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_top
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB222_2
# %bb.1:                                # %if.then
	movl	nextP_tr_fld, %eax
	addl	$-1, %eax
	movl	%eax, nextP_tr_fld
.LBB222_2:                              # %if.end
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB222_7
# %bb.3:                                # %if.then15
	movq	input, %rax
	movl	3248(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72620(%rcx)
	movq	input, %rax
	cmpl	$1, 2880(%rax)
	jne	.LBB222_5
# %bb.4:                                # %if.then17
	xorl	%edi, %edi
	movl	$1, %esi
	movl	$1, %edx
	callq	rc_init_pict
	jmp	.LBB222_6
.LBB222_5:                              # %if.else
	xorl	%edi, %edi
	movl	$1, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
.LBB222_6:                              # %if.end18
	movl	$1, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB222_7:                              # %if.end20
	movq	img, %rax
	movl	$1, 72596(%rax)
	movq	top_pic, %rdi
	callq	code_a_picture
	movq	enc_picture, %rax
	movl	$1, (%rax)
	movq	enc_top_picture, %rdi
	callq	store_picture_in_dpb
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-8(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rax
	movl	808(%rax), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	28(%rax), %edi
	movq	img, %rax
	movl	52(%rax), %esi
	movq	img, %rax
	movl	60(%rax), %edx
	movq	img, %rax
	movl	56(%rax), %ecx
	movq	img, %rax
	movl	64(%rax), %r8d
	callq	alloc_storable_picture
	movq	%rax, enc_bottom_picture
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 4(%rcx)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 16(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6364(%rcx)
	movq	img, %rax
	movl	72464(%rax), %eax
	movq	enc_bottom_picture, %rcx
	movl	%eax, 6360(%rcx)
	movq	enc_bottom_picture, %rax
	movl	$0, 6412(%rax)
	movq	img, %rax
	movl	$0, 72400(%rax)
	movq	enc_bottom_picture, %rax
	movl	$0, 6416(%rax)
	movq	img, %rax
	movl	72452(%rax), %eax
	movq	img, %rcx
	movl	%eax, 72460(%rcx)
	movq	img, %rax
	movl	$2, 28(%rax)
	movq	enc_bottom_picture, %rax
	movq	%rax, enc_picture
	callq	copy_params
	callq	put_buffer_bot
	movq	img, %rax
	movl	(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, (%rax)
	callq	init_field
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB222_9
# %bb.8:                                # %if.then46
	movl	nextP_tr_fld, %eax
	addl	$1, %eax
	movl	%eax, nextP_tr_fld
.LBB222_9:                              # %if.end48
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB222_12
# %bb.10:                               # %land.lhs.true
	movq	input, %rax
	cmpl	$1, 2888(%rax)
	je	.LBB222_12
# %bb.11:                               # %if.then52
	movq	img, %rax
	movl	$0, 24(%rax)
.LBB222_12:                             # %if.end54
	movq	img, %rax
	movl	$1, 71800(%rax)
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB222_14
# %bb.13:                               # %if.then58
	movl	-12(%rbp), %edi
	callq	setbitscount
.LBB222_14:                             # %if.end59
	movq	input, %rax
	cmpl	$0, 3236(%rax)
	je	.LBB222_16
# %bb.15:                               # %if.then62
	xorl	%edi, %edi
	xorl	%esi, %esi
	xorl	%edx, %edx
	callq	rc_init_pict
	xorl	%edi, %edi
	callq	updateQuantizationParameter
	movq	img, %rcx
	movl	%eax, 40(%rcx)
.LBB222_16:                             # %if.end65
	movq	img, %rax
	movl	$0, 72596(%rax)
	movq	enc_picture, %rax
	movl	$2, (%rax)
	movq	bottom_pic, %rdi
	callq	code_a_picture
	movq	img, %rax
	movq	14160(%rax), %rax
	movq	24(%rax), %rax
	movq	(%rax), %rax
	movl	(%rax), %eax
	shll	$3, %eax
	movq	-24(%rbp), %rcx
	movl	%eax, 808(%rcx)
	movq	-8(%rbp), %rdi
	addq	$812, %rdi              # imm = 0x32C
	movq	-8(%rbp), %rsi
	addq	$816, %rsi              # imm = 0x330
	movq	-8(%rbp), %rdx
	addq	$820, %rdx              # imm = 0x334
	callq	distortion_fld
	cmpl	$867946037, -16(%rbp)   # imm = 0x33BBCE35
	jne	.LBB222_18
.LBB222_17:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB222_18:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB222_17
.Lfunc_end222:
	.size	field_picture.186, .Lfunc_end222-field_picture.186
	.cfi_endproc
                                        # -- End function
	.globl	code_a_picture.187      # -- Begin function code_a_picture.187
	.p2align	4, 0x90
	.type	code_a_picture.187,@function
code_a_picture.187:                     # @code_a_picture.187
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$32, %rsp
	movl	$2011524215, -28(%rbp)  # imm = 0x77E56C77
	movq	%rdi, -24(%rbp)
	movl	$0, -12(%rbp)
	movl	$0, -4(%rbp)
	movq	-24(%rbp), %rax
	movq	img, %rcx
	movq	%rax, 14152(%rcx)
	movq	img, %rax
	movl	(%rax), %eax
	subl	start_frame_no_in_this_IGOP, %eax
	cmpl	$0, %eax
	jne	.LBB223_2
# %bb.1:                                # %land.lhs.true
	movq	img, %rax
	cmpl	$2, 28(%rax)
	movb	$1, %al
	jne	.LBB223_8
.LBB223_2:                              # %lor.rhs
	xorl	%eax, %eax
	movq	input, %rcx
	cmpl	$0, 1228(%rcx)
	je	.LBB223_7
# %bb.3:                                # %land.lhs.true2
	movq	img, %rax
	cmpl	$2, 24(%rax)
	je	.LBB223_6
# %bb.4:                                # %lor.lhs.false
	movq	img, %rax
	cmpl	$3, 24(%rax)
	je	.LBB223_6
# %bb.5:                                # %lor.lhs.false6
	xorl	%eax, %eax
	movq	img, %rcx
	cmpl	$4, 24(%rcx)
	jne	.LBB223_7
.LBB223_6:                              # %land.rhs
	movq	img, %rax
	cmpl	$2, 28(%rax)
	sete	%al
	xorb	$-1, %al
.LBB223_7:                              # %land.end
.LBB223_8:                              # %lor.end
	andb	$1, %al
	movzbl	%al, %eax
	movq	img, %rcx
	movq	14152(%rcx), %rcx
	movl	%eax, 4(%rcx)
	movq	-24(%rbp), %rax
	movl	$0, (%rax)
	movq	-24(%rbp), %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 812(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 820(%rax)
	movq	-24(%rbp), %rax
	vmovss	%xmm0, 816(%rax)
	movb	$0, %al
	callq	RandomIntraNewPicture
	movq	img, %rax
	movl	$1, 72652(%rax)
	movq	img, %rdi
	movq	active_pps, %rsi
	movq	active_sps, %rdx
	callq	FmoInit
	movb	$0, %al
	callq	FmoStartPicture
	movb	$0, %al
	callq	CalculateQuantParam
	movb	$0, %al
	callq	CalculateOffsetParam
	movq	input, %rax
	cmpl	$0, 3220(%rax)
	je	.LBB223_10
# %bb.9:                                # %if.then
	movb	$0, %al
	callq	CalculateQuant8Param
	movb	$0, %al
	callq	CalculateOffset8Param
.LBB223_10:                             # %if.end
	jmp	.LBB223_11
.LBB223_11:                             # %while.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB223_13 Depth 2
	movl	-12(%rbp), %eax
	movq	img, %rcx
	cmpl	16(%rcx), %eax
	jge	.LBB223_16
# %bb.12:                               # %while.body
                                        #   in Loop: Header=BB223_11 Depth=1
	jmp	.LBB223_13
.LBB223_13:                             # %while.cond15
                                        #   Parent Loop BB223_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-4(%rbp), %edi
	callq	FmoSliceGroupCompletelyCoded
	cmpl	$0, %eax
	setne	%al
	xorb	$-1, %al
	testb	$1, %al
	jne	.LBB223_14
	jmp	.LBB223_15
.LBB223_14:                             # %while.body19
                                        #   in Loop: Header=BB223_13 Depth=2
	movl	-4(%rbp), %edi
	movq	-24(%rbp), %rsi
	callq	encode_one_slice
	addl	-12(%rbp), %eax
	movl	%eax, -12(%rbp)
	movq	img, %rax
	movl	12(%rax), %edi
	callq	FmoSetLastMacroblockInSlice
	movq	img, %rax
	movl	20(%rax), %ecx
	addl	$1, %ecx
	movl	%ecx, 20(%rax)
	movq	stats, %rax
	movl	$0, 24(%rax)
	jmp	.LBB223_13
.LBB223_15:                             # %while.end
                                        #   in Loop: Header=BB223_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB223_11
.LBB223_16:                             # %while.end22
	movb	$0, %al
	callq	FmoEndPicture
	movq	input, %rax
	cmpl	$2, 2464(%rax)
	jne	.LBB223_23
# %bb.17:                               # %land.lhs.true25
	movq	img, %rax
	cmpl	$1, 24(%rax)
	je	.LBB223_23
# %bb.18:                               # %if.then28
	movl	$0, -8(%rbp)
.LBB223_19:                             # %for.cond
                                        # =>This Inner Loop Header: Depth=1
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	2904(%rcx), %eax
	jge	.LBB223_22
# %bb.20:                               # %for.body
                                        #   in Loop: Header=BB223_19 Depth=1
	movq	img, %rdi
	movq	decs, %rax
	movq	24(%rax), %rax
	movslq	-8(%rbp), %rcx
	movq	(%rax,%rcx,8), %rsi
	xorl	%edx, %edx
	callq	DeblockFrame
# %bb.21:                               # %for.inc
                                        #   in Loop: Header=BB223_19 Depth=1
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB223_19
.LBB223_22:                             # %for.end
	jmp	.LBB223_23
.LBB223_23:                             # %if.end31
	movq	img, %rdi
	movq	enc_picture, %rax
	movq	6424(%rax), %rsi
	movq	enc_picture, %rax
	movq	6464(%rax), %rdx
	callq	DeblockFrame
	movq	img, %rax
	cmpl	$0, 72400(%rax)
	je	.LBB223_25
# %bb.24:                               # %if.then33
	callq	MbAffPostProc
.LBB223_25:                             # %if.end34
	cmpl	$2011524215, -28(%rbp)  # imm = 0x77E56C77
	jne	.LBB223_27
.LBB223_26:
	addq	$32, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB223_27:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB223_26
.Lfunc_end223:
	.size	code_a_picture.187, .Lfunc_end223-code_a_picture.187
	.cfi_endproc
                                        # -- End function
	.section	.rodata.cst8,"aM",@progbits,8
	.p2align	3               # -- Begin function find_snr.188
.LCPI224_0:
	.quad	4621819117588971520     # double 10
	.text
	.p2align	4, 0x90
	.type	find_snr.188,@function
find_snr.188:                           # @find_snr.188
	.cfi_startproc
# %bb.0:                                # %entry
	pushq	%rbp
	.cfi_def_cfa_offset 16
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
	.cfi_def_cfa_register %rbp
	subq	$64, %rsp
	movl	$2146736660, -52(%rbp)  # imm = 0x7FF49A14
	movq	$0, -16(%rbp)
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movq	img, %rax
	movl	72684(%rax), %eax
	movq	img, %rcx
	imull	72684(%rcx), %eax
	movl	%eax, -48(%rbp)
	movq	img, %rax
	movl	72688(%rax), %eax
	movq	img, %rcx
	imull	72688(%rcx), %eax
	movl	%eax, -40(%rbp)
	movq	input, %rax
	movl	68(%rax), %eax
	movq	input, %rcx
	imull	64(%rcx), %eax
	movl	%eax, -44(%rbp)
	movq	input, %rax
	movl	3304(%rax), %eax
	movq	input, %rcx
	imull	3308(%rcx), %eax
	movl	%eax, -36(%rbp)
	movq	img, %rax
	cmpl	$0, 71800(%rax)
	je	.LBB224_20
# %bb.1:                                # %if.then
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB224_2:                              # %for.cond
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_4 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB224_9
# %bb.3:                                # %for.body
                                        #   in Loop: Header=BB224_2 Depth=1
	movl	$0, -8(%rbp)
.LBB224_4:                              # %for.cond8
                                        #   Parent Loop BB224_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB224_7
# %bb.5:                                # %for.body11
                                        #   in Loop: Header=BB224_4 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgY_com, %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.6:                                # %for.inc
                                        #   in Loop: Header=BB224_4 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB224_4
.LBB224_7:                              # %for.end
                                        #   in Loop: Header=BB224_2 Depth=1
	jmp	.LBB224_8
.LBB224_8:                              # %for.inc22
                                        #   in Loop: Header=BB224_2 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB224_2
.LBB224_9:                              # %for.end24
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB224_19
# %bb.10:                               # %if.then27
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB224_11:                             # %for.cond28
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_13 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB224_18
# %bb.12:                               # %for.body32
                                        #   in Loop: Header=BB224_11 Depth=1
	movl	$0, -8(%rbp)
.LBB224_13:                             # %for.cond33
                                        #   Parent Loop BB224_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB224_16
# %bb.14:                               # %for.body37
                                        #   in Loop: Header=BB224_13 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	imgUV_com, %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.15:                               # %for.inc74
                                        #   in Loop: Header=BB224_13 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB224_13
.LBB224_16:                             # %for.end76
                                        #   in Loop: Header=BB224_11 Depth=1
	jmp	.LBB224_17
.LBB224_17:                             # %for.inc77
                                        #   in Loop: Header=BB224_11 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB224_11
.LBB224_18:                             # %for.end79
	jmp	.LBB224_19
.LBB224_19:                             # %if.end
	jmp	.LBB224_41
.LBB224_20:                             # %if.else
	movq	imgY_org_frm, %rax
	movq	%rax, imgY_org
	movq	imgUV_org_frm, %rax
	movq	%rax, imgUV_org
	movq	input, %rax
	cmpl	$2, 2880(%rax)
	jne	.LBB224_22
# %bb.21:                               # %if.then82
	movq	enc_frame_picture, %rax
	movq	%rax, enc_picture
.LBB224_22:                             # %if.end83
	movq	$0, -16(%rbp)
	movl	$0, -4(%rbp)
.LBB224_23:                             # %for.cond84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_25 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	64(%rcx), %eax
	jge	.LBB224_30
# %bb.24:                               # %for.body88
                                        #   in Loop: Header=BB224_23 Depth=1
	movl	$0, -8(%rbp)
.LBB224_25:                             # %for.cond89
                                        #   Parent Loop BB224_23 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	68(%rcx), %eax
	jge	.LBB224_28
# %bb.26:                               # %for.body93
                                        #   in Loop: Header=BB224_25 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgY_org, %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6424(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-16(%rbp), %rax
	movq	%rax, -16(%rbp)
# %bb.27:                               # %for.inc110
                                        #   in Loop: Header=BB224_25 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB224_25
.LBB224_28:                             # %for.end112
                                        #   in Loop: Header=BB224_23 Depth=1
	jmp	.LBB224_29
.LBB224_29:                             # %for.inc113
                                        #   in Loop: Header=BB224_23 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB224_23
.LBB224_30:                             # %for.end115
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB224_40
# %bb.31:                               # %if.then119
	movq	$0, -24(%rbp)
	movq	$0, -32(%rbp)
	movl	$0, -4(%rbp)
.LBB224_32:                             # %for.cond120
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB224_34 Depth 2
	movl	-4(%rbp), %eax
	movq	input, %rcx
	cmpl	3308(%rcx), %eax
	jge	.LBB224_39
# %bb.33:                               # %for.body124
                                        #   in Loop: Header=BB224_32 Depth=1
	movl	$0, -8(%rbp)
.LBB224_34:                             # %for.cond125
                                        #   Parent Loop BB224_32 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-8(%rbp), %eax
	movq	input, %rcx
	cmpl	3304(%rcx), %eax
	jge	.LBB224_37
# %bb.35:                               # %for.body129
                                        #   in Loop: Header=BB224_34 Depth=2
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-24(%rbp), %rax
	movq	%rax, -24(%rbp)
	movq	img, %rax
	movq	71776(%rax), %rax
	movq	imgUV_org, %rcx
	movq	8(%rcx), %rcx
	movslq	-8(%rbp), %rdx
	movq	(%rcx,%rdx,8), %rcx
	movslq	-4(%rbp), %rdx
	movzwl	(%rcx,%rdx,2), %ecx
	movq	enc_picture, %rdx
	movq	6464(%rdx), %rdx
	movq	8(%rdx), %rdx
	movslq	-8(%rbp), %rsi
	movq	(%rdx,%rsi,8), %rdx
	movslq	-4(%rbp), %rsi
	movzwl	(%rdx,%rsi,2), %edx
	subl	%edx, %ecx
	movslq	%ecx, %rcx
	movslq	(%rax,%rcx,4), %rax
	addq	-32(%rbp), %rax
	movq	%rax, -32(%rbp)
# %bb.36:                               # %for.inc167
                                        #   in Loop: Header=BB224_34 Depth=2
	movl	-8(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -8(%rbp)
	jmp	.LBB224_34
.LBB224_37:                             # %for.end169
                                        #   in Loop: Header=BB224_32 Depth=1
	jmp	.LBB224_38
.LBB224_38:                             # %for.inc170
                                        #   in Loop: Header=BB224_32 Depth=1
	movl	-4(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -4(%rbp)
	jmp	.LBB224_32
.LBB224_39:                             # %for.end172
	jmp	.LBB224_40
.LBB224_40:                             # %if.end173
	jmp	.LBB224_41
.LBB224_41:                             # %if.end174
	cmpq	$0, -16(%rbp)
	jne	.LBB224_43
# %bb.42:                               # %if.then177
	movq	$1, -16(%rbp)
.LBB224_43:                             # %if.end178
	cmpq	$0, -24(%rbp)
	jne	.LBB224_45
# %bb.44:                               # %if.then181
	movq	$1, -24(%rbp)
.LBB224_45:                             # %if.end182
	cmpq	$0, -32(%rbp)
	jne	.LBB224_47
# %bb.46:                               # %if.then185
	movq	$1, -32(%rbp)
.LBB224_47:                             # %if.end186
	cmpq	$0, -16(%rbp)
	je	.LBB224_52
# %bb.48:                               # %if.then189
	movl	-48(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-44(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-16(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI224_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, (%rax)
	movq	img, %rax
	cmpl	$0, 72700(%rax)
	je	.LBB224_50
# %bb.49:                               # %if.then199
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-24(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI224_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm1, %xmm0, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr(%rip), %rax
	vmovss	%xmm0, 4(%rax)
	movl	-40(%rbp), %eax
	vcvtsi2sd	%rax, %xmm0, %xmm0
	vcvtsi2sdl	-36(%rbp), %xmm0, %xmm1
	vcvtsi2sdq	-32(%rbp), %xmm0, %xmm2
	vdivsd	%xmm2, %xmm1, %xmm1
	vmulsd	%xmm1, %xmm0, %xmm0
	callq	log10
	vmovsd	.LCPI224_0(%rip), %xmm1 # xmm1 = mem[0],zero
	vmulsd	%xmm0, %xmm1, %xmm0
	vcvtsd2ss	%xmm0, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
	jmp	.LBB224_51
.LBB224_50:                             # %if.else216
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 4(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 8(%rax)
.LBB224_51:                             # %if.end219
	jmp	.LBB224_52
.LBB224_52:                             # %if.end220
	movq	img, %rax
	cmpl	$0, (%rax)
	jne	.LBB224_54
# %bb.53:                               # %if.then223
	movq	snr, %rax
	vmovss	(%rax), %xmm0           # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 12(%rax)
	movq	snr, %rax
	vmovss	4(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 16(%rax)
	movq	snr, %rax
	vmovss	8(%rax), %xmm0          # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 20(%rax)
	movq	snr, %rax
	vmovss	12(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	16(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	20(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
	movq	snr, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB224_55
.LBB224_54:                             # %if.else245
	movq	snr, %rax
	vmovss	60(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 60(%rax)
	movq	snr, %rax
	vmovss	64(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 64(%rax)
	movq	snr, %rax
	vmovss	68(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	movq	img, %rax
	movl	(%rax), %eax
	addl	Bframe_ctr, %eax
	addl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 68(%rax)
.LBB224_55:                             # %if.end285
	movq	img, %rax
	cmpl	$2, 24(%rax)
	jne	.LBB224_57
# %bb.56:                               # %if.then288
	movq	snr, %rax
	vmovss	32(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 32(%rax)
	movq	snr, %rax
	vmovss	44(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 44(%rax)
	movq	snr, %rax
	vmovss	56(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Iframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Iframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 56(%rax)
	jmp	.LBB224_61
.LBB224_57:                             # %if.else322
	movq	img, %rax
	cmpl	$1, 24(%rax)
	jne	.LBB224_59
# %bb.58:                               # %if.then326
	movq	snr, %rax
	vmovss	28(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 28(%rax)
	movq	snr, %rax
	vmovss	40(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 40(%rax)
	movq	snr, %rax
	vmovss	52(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Bframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Bframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 52(%rax)
	jmp	.LBB224_60
.LBB224_59:                             # %if.else360
	movq	snr, %rax
	vmovss	24(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 24(%rax)
	movq	snr, %rax
	vmovss	36(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	4(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 36(%rax)
	movq	snr, %rax
	vmovss	48(%rax), %xmm0         # xmm0 = mem[0],zero,zero,zero
	movl	Pframe_ctr, %eax
	subl	$1, %eax
	vcvtsi2ss	%eax, %xmm0, %xmm1
	vmulss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vaddss	8(%rax), %xmm0, %xmm0
	vcvtsi2ssl	Pframe_ctr, %xmm0, %xmm1
	vdivss	%xmm1, %xmm0, %xmm0
	movq	snr, %rax
	vmovss	%xmm0, 48(%rax)
.LBB224_60:                             # %if.end394
	jmp	.LBB224_61
.LBB224_61:                             # %if.end395
	cmpl	$2146736660, -52(%rbp)  # imm = 0x7FF49A14
	jne	.LBB224_63
.LBB224_62:
	addq	$64, %rsp
	popq	%rbp
	.cfi_def_cfa %rsp, 8
	retq
.LBB224_63:                             # %func_exit
	.cfi_def_cfa %rbp, 16
	callq	detect_breach
	jmp	.LBB224_62
.Lfunc_end224:
	.size	find_snr.188, .Lfunc_end224-find_snr.188
	.cfi_endproc
                                        # -- End function
	.type	ONE_FOURTH_TAP,@object  # @ONE_FOURTH_TAP
	.section	.rodata,"a",@progbits
	.globl	ONE_FOURTH_TAP
	.p2align	4
ONE_FOURTH_TAP:
	.long	20                      # 0x14
	.long	20                      # 0x14
	.long	4294967291              # 0xfffffffb
	.long	4294967292              # 0xfffffffc
	.long	1                       # 0x1
	.long	0                       # 0x0
	.size	ONE_FOURTH_TAP, 24

	.type	enc_picture,@object     # @enc_picture
	.comm	enc_picture,8,8
	.type	active_pps,@object      # @active_pps
	.comm	active_pps,8,8
	.type	active_sps,@object      # @active_sps
	.comm	active_sps,8,8
	.type	encode_one_frame.prev_frame_no,@object # @encode_one_frame.prev_frame_no
	.local	encode_one_frame.prev_frame_no
	.comm	encode_one_frame.prev_frame_no,4,4
	.type	encode_one_frame.consecutive_non_reference_pictures,@object # @encode_one_frame.consecutive_non_reference_pictures
	.local	encode_one_frame.consecutive_non_reference_pictures
	.comm	encode_one_frame.consecutive_non_reference_pictures,4,4
	.type	me_time,@object         # @me_time
	.comm	me_time,4,4
	.type	enc_frame_picture,@object # @enc_frame_picture
	.comm	enc_frame_picture,8,8
	.type	enc_frame_picture2,@object # @enc_frame_picture2
	.comm	enc_frame_picture2,8,8
	.type	enc_frame_picture3,@object # @enc_frame_picture3
	.comm	enc_frame_picture3,8,8
	.type	Bframe_ctr,@object      # @Bframe_ctr
	.comm	Bframe_ctr,4,4
	.type	Iframe_ctr,@object      # @Iframe_ctr
	.comm	Iframe_ctr,4,4
	.type	Pframe_ctr,@object      # @Pframe_ctr
	.comm	Pframe_ctr,4,4
	.type	top_pic,@object         # @top_pic
	.comm	top_pic,8,8
	.type	bottom_pic,@object      # @bottom_pic
	.comm	bottom_pic,8,8
	.type	mb_adaptive,@object     # @mb_adaptive
	.comm	mb_adaptive,4,4
	.type	QP,@object              # @QP
	.comm	QP,4,4
	.type	frame_pic,@object       # @frame_pic
	.comm	frame_pic,8,8
	.type	frame_pic3,@object      # @frame_pic3
	.comm	frame_pic3,8,8
	.type	frame_pic2,@object      # @frame_pic2
	.comm	frame_pic2,8,8
	.type	tot_time,@object        # @tot_time
	.comm	tot_time,4,4
	.type	enc_bottom_picture,@object # @enc_bottom_picture
	.comm	enc_bottom_picture,8,8
	.type	frame_no,@object        # @frame_no
	.comm	frame_no,4,4
	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"POC type 2 cannot be applied for the coding pattern where the encoding /decoding order of pictures are different from the output order.\n"
	.size	.L.str, 137

	.type	enc_top_picture,@object # @enc_top_picture
	.comm	enc_top_picture,8,8
	.type	nextP_tr_fld,@object    # @nextP_tr_fld
	.comm	nextP_tr_fld,4,4
	.type	.L.str.1,@object        # @.str.1
.L.str.1:
	.asciz	"alloc_storable_picture: s->imgY_11"
	.size	.L.str.1, 35

	.type	.L.str.2,@object        # @.str.2
.L.str.2:
	.asciz	"alloc_storable_picture: s->imgY_11_w"
	.size	.L.str.2, 37

	.type	img4Y_tmp,@object       # @img4Y_tmp
	.comm	img4Y_tmp,8,8
	.type	rdopt,@object           # @rdopt
	.comm	rdopt,8,8
	.type	.L.str.3,@object        # @.str.3
.L.str.3:
	.asciz	"Source picture has higher bit depth than imgpel data type. Please recompile with larger data type for imgpel."
	.size	.L.str.3, 110

	.type	.L.str.4,@object        # @.str.4
.L.str.4:
	.asciz	"reading only from formats of 8, 16 or 32 bit allowed on big endian architecture"
	.size	.L.str.4, 80

	.type	imgY_org,@object        # @imgY_org
	.comm	imgY_org,8,8
	.type	imgUV_org,@object       # @imgUV_org
	.comm	imgUV_org,8,8
	.type	log2_max_frame_num_minus4,@object # @log2_max_frame_num_minus4
	.comm	log2_max_frame_num_minus4,4,4
	.type	log2_max_pic_order_cnt_lsb_minus4,@object # @log2_max_pic_order_cnt_lsb_minus4
	.comm	log2_max_pic_order_cnt_lsb_minus4,4,4
	.type	me_tot_time,@object     # @me_tot_time
	.comm	me_tot_time,4,4
	.type	MBPairIsField,@object   # @MBPairIsField
	.comm	MBPairIsField,4,4
	.type	wp_weight,@object       # @wp_weight
	.comm	wp_weight,8,8
	.type	wp_offset,@object       # @wp_offset
	.comm	wp_offset,8,8
	.type	wbp_weight,@object      # @wbp_weight
	.comm	wbp_weight,8,8
	.type	luma_log_weight_denom,@object # @luma_log_weight_denom
	.comm	luma_log_weight_denom,4,4
	.type	chroma_log_weight_denom,@object # @chroma_log_weight_denom
	.comm	chroma_log_weight_denom,4,4
	.type	wp_luma_round,@object   # @wp_luma_round
	.comm	wp_luma_round,4,4
	.type	wp_chroma_round,@object # @wp_chroma_round
	.comm	wp_chroma_round,4,4
	.type	imgY_org_top,@object    # @imgY_org_top
	.comm	imgY_org_top,8,8
	.type	imgY_org_bot,@object    # @imgY_org_bot
	.comm	imgY_org_bot,8,8
	.type	imgUV_org_top,@object   # @imgUV_org_top
	.comm	imgUV_org_top,8,8
	.type	imgUV_org_bot,@object   # @imgUV_org_bot
	.comm	imgUV_org_bot,8,8
	.type	imgY_org_frm,@object    # @imgY_org_frm
	.comm	imgY_org_frm,8,8
	.type	imgUV_org_frm,@object   # @imgUV_org_frm
	.comm	imgUV_org_frm,8,8
	.type	imgY_com,@object        # @imgY_com
	.comm	imgY_com,8,8
	.type	imgUV_com,@object       # @imgUV_com
	.comm	imgUV_com,8,8
	.type	direct_ref_idx,@object  # @direct_ref_idx
	.comm	direct_ref_idx,8,8
	.type	direct_pdir,@object     # @direct_pdir
	.comm	direct_pdir,8,8
	.type	pixel_map,@object       # @pixel_map
	.comm	pixel_map,8,8
	.type	refresh_map,@object     # @refresh_map
	.comm	refresh_map,8,8
	.type	intras,@object          # @intras
	.comm	intras,4,4
	.type	nextP_tr_frm,@object    # @nextP_tr_frm
	.comm	nextP_tr_frm,4,4
	.type	errortext,@object       # @errortext
	.comm	errortext,300,16
	.type	resTrans_R,@object      # @resTrans_R
	.comm	resTrans_R,1024,16
	.type	resTrans_G,@object      # @resTrans_G
	.comm	resTrans_G,1024,16
	.type	resTrans_B,@object      # @resTrans_B
	.comm	resTrans_B,1024,16
	.type	rec_resR,@object        # @rec_resR
	.comm	rec_resR,1024,16
	.type	rec_resG,@object        # @rec_resG
	.comm	rec_resG,1024,16
	.type	rec_resB,@object        # @rec_resB
	.comm	rec_resB,1024,16
	.type	mprRGB,@object          # @mprRGB
	.comm	mprRGB,3072,16
	.type	dc_level,@object        # @dc_level
	.comm	dc_level,128,16
	.type	dc_level_temp,@object   # @dc_level_temp
	.comm	dc_level_temp,128,16
	.type	cbp_chroma_block,@object # @cbp_chroma_block
	.comm	cbp_chroma_block,128,16
	.type	cbp_chroma_block_temp,@object # @cbp_chroma_block_temp
	.comm	cbp_chroma_block_temp,128,16
	.type	b8_ipredmode8x8,@object # @b8_ipredmode8x8
	.comm	b8_ipredmode8x8,64,16
	.type	b8_intra_pred_modes8x8,@object # @b8_intra_pred_modes8x8
	.comm	b8_intra_pred_modes8x8,64,16
	.type	gop_structure,@object   # @gop_structure
	.comm	gop_structure,8,8
	.type	rddata_top_frame_mb,@object # @rddata_top_frame_mb
	.comm	rddata_top_frame_mb,3360,8
	.type	rddata_bot_frame_mb,@object # @rddata_bot_frame_mb
	.comm	rddata_bot_frame_mb,3360,8
	.type	rddata_top_field_mb,@object # @rddata_top_field_mb
	.comm	rddata_top_field_mb,3360,8
	.type	rddata_bot_field_mb,@object # @rddata_bot_field_mb
	.comm	rddata_bot_field_mb,3360,8
	.type	p_stat,@object          # @p_stat
	.comm	p_stat,8,8
	.type	p_log,@object           # @p_log
	.comm	p_log,8,8
	.type	p_trace,@object         # @p_trace
	.comm	p_trace,8,8
	.type	p_in,@object            # @p_in
	.comm	p_in,4,4
	.type	p_dec,@object           # @p_dec
	.comm	p_dec,4,4
	.type	glob_remapping_of_pic_nums_idc_l0,@object # @glob_remapping_of_pic_nums_idc_l0
	.comm	glob_remapping_of_pic_nums_idc_l0,80,16
	.type	glob_abs_diff_pic_num_minus1_l0,@object # @glob_abs_diff_pic_num_minus1_l0
	.comm	glob_abs_diff_pic_num_minus1_l0,80,16
	.type	glob_long_term_pic_idx_l0,@object # @glob_long_term_pic_idx_l0
	.comm	glob_long_term_pic_idx_l0,80,16
	.type	glob_remapping_of_pic_nums_idc_l1,@object # @glob_remapping_of_pic_nums_idc_l1
	.comm	glob_remapping_of_pic_nums_idc_l1,80,16
	.type	glob_abs_diff_pic_num_minus1_l1,@object # @glob_abs_diff_pic_num_minus1_l1
	.comm	glob_abs_diff_pic_num_minus1_l1,80,16
	.type	glob_long_term_pic_idx_l1,@object # @glob_long_term_pic_idx_l1
	.comm	glob_long_term_pic_idx_l1,80,16
	.type	Bytes_After_Header,@object # @Bytes_After_Header
	.comm	Bytes_After_Header,4,4
	.type	rpc_bytes_to_go,@object # @rpc_bytes_to_go
	.comm	rpc_bytes_to_go,4,4
	.type	rpc_bits_to_go,@object  # @rpc_bits_to_go
	.comm	rpc_bits_to_go,4,4
	.type	seiHasUser_data_unregistered_info,@object # @seiHasUser_data_unregistered_info
	.comm	seiHasUser_data_unregistered_info,4,4
	.type	seiUser_data_unregistered,@object # @seiUser_data_unregistered
	.comm	seiUser_data_unregistered,32,8
	.type	seiHasUser_data_registered_itu_t_t35_info,@object # @seiHasUser_data_registered_itu_t_t35_info
	.comm	seiHasUser_data_registered_itu_t_t35_info,4,4
	.type	seiUser_data_registered_itu_t_t35,@object # @seiUser_data_registered_itu_t_t35
	.comm	seiUser_data_registered_itu_t_t35,40,8
	.type	seiHasRandomAccess_info,@object # @seiHasRandomAccess_info
	.comm	seiHasRandomAccess_info,4,4
	.type	seiRandomAccess,@object # @seiRandomAccess
	.comm	seiRandomAccess,24,8
	.type	WriteNALU,@object       # @WriteNALU
	.comm	WriteNALU,8,8
	.type	bit_rate,@object        # @bit_rate
	.comm	bit_rate,8,8
	.type	frame_rate,@object      # @frame_rate
	.comm	frame_rate,8,8
	.type	GAMMAP,@object          # @GAMMAP
	.comm	GAMMAP,8,8
	.type	BETAP,@object           # @BETAP
	.comm	BETAP,8,8
	.type	RC_MAX_QUANT,@object    # @RC_MAX_QUANT
	.comm	RC_MAX_QUANT,4,4
	.type	RC_MIN_QUANT,@object    # @RC_MIN_QUANT
	.comm	RC_MIN_QUANT,4,4
	.type	BufferSize,@object      # @BufferSize
	.comm	BufferSize,8,8
	.type	GOPTargetBufferLevel,@object # @GOPTargetBufferLevel
	.comm	GOPTargetBufferLevel,8,8
	.type	CurrentBufferFullness,@object # @CurrentBufferFullness
	.comm	CurrentBufferFullness,8,8
	.type	TargetBufferLevel,@object # @TargetBufferLevel
	.comm	TargetBufferLevel,8,8
	.type	PreviousBit_Rate,@object # @PreviousBit_Rate
	.comm	PreviousBit_Rate,8,8
	.type	AWp,@object             # @AWp
	.comm	AWp,8,8
	.type	AWb,@object             # @AWb
	.comm	AWb,8,8
	.type	MyInitialQp,@object     # @MyInitialQp
	.comm	MyInitialQp,4,4
	.type	PAverageQp,@object      # @PAverageQp
	.comm	PAverageQp,4,4
	.type	PreviousPictureMAD,@object # @PreviousPictureMAD
	.comm	PreviousPictureMAD,8,8
	.type	MADPictureC1,@object    # @MADPictureC1
	.comm	MADPictureC1,8,8
	.type	MADPictureC2,@object    # @MADPictureC2
	.comm	MADPictureC2,8,8
	.type	PMADPictureC1,@object   # @PMADPictureC1
	.comm	PMADPictureC1,8,8
	.type	PMADPictureC2,@object   # @PMADPictureC2
	.comm	PMADPictureC2,8,8
	.type	PictureRejected,@object # @PictureRejected
	.comm	PictureRejected,84,16
	.type	PPictureMAD,@object     # @PPictureMAD
	.comm	PPictureMAD,168,16
	.type	PictureMAD,@object      # @PictureMAD
	.comm	PictureMAD,168,16
	.type	ReferenceMAD,@object    # @ReferenceMAD
	.comm	ReferenceMAD,168,16
	.type	m_rgRejected,@object    # @m_rgRejected
	.comm	m_rgRejected,84,16
	.type	m_rgQp,@object          # @m_rgQp
	.comm	m_rgQp,168,16
	.type	m_rgRp,@object          # @m_rgRp
	.comm	m_rgRp,168,16
	.type	m_X1,@object            # @m_X1
	.comm	m_X1,8,8
	.type	m_X2,@object            # @m_X2
	.comm	m_X2,8,8
	.type	m_Qc,@object            # @m_Qc
	.comm	m_Qc,4,4
	.type	m_Qstep,@object         # @m_Qstep
	.comm	m_Qstep,8,8
	.type	m_Qp,@object            # @m_Qp
	.comm	m_Qp,4,4
	.type	Pm_Qp,@object           # @Pm_Qp
	.comm	Pm_Qp,4,4
	.type	PreAveMBHeader,@object  # @PreAveMBHeader
	.comm	PreAveMBHeader,4,4
	.type	CurAveMBHeader,@object  # @CurAveMBHeader
	.comm	CurAveMBHeader,4,4
	.type	PPreHeader,@object      # @PPreHeader
	.comm	PPreHeader,4,4
	.type	PreviousQp1,@object     # @PreviousQp1
	.comm	PreviousQp1,4,4
	.type	PreviousQp2,@object     # @PreviousQp2
	.comm	PreviousQp2,4,4
	.type	NumberofBFrames,@object # @NumberofBFrames
	.comm	NumberofBFrames,4,4
	.type	TotalFrameQP,@object    # @TotalFrameQP
	.comm	TotalFrameQP,4,4
	.type	NumberofBasicUnit,@object # @NumberofBasicUnit
	.comm	NumberofBasicUnit,4,4
	.type	PAveHeaderBits1,@object # @PAveHeaderBits1
	.comm	PAveHeaderBits1,4,4
	.type	PAveHeaderBits2,@object # @PAveHeaderBits2
	.comm	PAveHeaderBits2,4,4
	.type	PAveHeaderBits3,@object # @PAveHeaderBits3
	.comm	PAveHeaderBits3,4,4
	.type	PAveFrameQP,@object     # @PAveFrameQP
	.comm	PAveFrameQP,4,4
	.type	TotalNumberofBasicUnit,@object # @TotalNumberofBasicUnit
	.comm	TotalNumberofBasicUnit,4,4
	.type	CodedBasicUnit,@object  # @CodedBasicUnit
	.comm	CodedBasicUnit,4,4
	.type	MINVALUE,@object        # @MINVALUE
	.comm	MINVALUE,8,8
	.type	CurrentFrameMAD,@object # @CurrentFrameMAD
	.comm	CurrentFrameMAD,8,8
	.type	CurrentBUMAD,@object    # @CurrentBUMAD
	.comm	CurrentBUMAD,8,8
	.type	TotalBUMAD,@object      # @TotalBUMAD
	.comm	TotalBUMAD,8,8
	.type	PreviousFrameMAD,@object # @PreviousFrameMAD
	.comm	PreviousFrameMAD,8,8
	.type	m_Hp,@object            # @m_Hp
	.comm	m_Hp,4,4
	.type	m_windowSize,@object    # @m_windowSize
	.comm	m_windowSize,4,4
	.type	MADm_windowSize,@object # @MADm_windowSize
	.comm	MADm_windowSize,4,4
	.type	DDquant,@object         # @DDquant
	.comm	DDquant,4,4
	.type	MBPerRow,@object        # @MBPerRow
	.comm	MBPerRow,4,4
	.type	AverageMADPreviousFrame,@object # @AverageMADPreviousFrame
	.comm	AverageMADPreviousFrame,8,8
	.type	TotalBasicUnitBits,@object # @TotalBasicUnitBits
	.comm	TotalBasicUnitBits,4,4
	.type	QPLastPFrame,@object    # @QPLastPFrame
	.comm	QPLastPFrame,4,4
	.type	QPLastGOP,@object       # @QPLastGOP
	.comm	QPLastGOP,4,4
	.type	Pm_rgQp,@object         # @Pm_rgQp
	.comm	Pm_rgQp,160,16
	.type	Pm_rgRp,@object         # @Pm_rgRp
	.comm	Pm_rgRp,160,16
	.type	Pm_X1,@object           # @Pm_X1
	.comm	Pm_X1,8,8
	.type	Pm_X2,@object           # @Pm_X2
	.comm	Pm_X2,8,8
	.type	Pm_Hp,@object           # @Pm_Hp
	.comm	Pm_Hp,4,4
	.type	FieldQPBuffer,@object   # @FieldQPBuffer
	.comm	FieldQPBuffer,4,4
	.type	FrameQPBuffer,@object   # @FrameQPBuffer
	.comm	FrameQPBuffer,4,4
	.type	FrameAveHeaderBits,@object # @FrameAveHeaderBits
	.comm	FrameAveHeaderBits,4,4
	.type	FieldAveHeaderBits,@object # @FieldAveHeaderBits
	.comm	FieldAveHeaderBits,4,4
	.type	BUPFMAD,@object         # @BUPFMAD
	.comm	BUPFMAD,8,8
	.type	BUCFMAD,@object         # @BUCFMAD
	.comm	BUCFMAD,8,8
	.type	FCBUCFMAD,@object       # @FCBUCFMAD
	.comm	FCBUCFMAD,8,8
	.type	FCBUPFMAD,@object       # @FCBUPFMAD
	.comm	FCBUPFMAD,8,8
	.type	GOPOverdue,@object      # @GOPOverdue
	.comm	GOPOverdue,4,4
	.type	diffy,@object           # @diffy
	.comm	diffy,1024,16
	.type	diffyy,@object          # @diffyy
	.comm	diffyy,1024,16
	.type	diffy8,@object          # @diffy8
	.comm	diffy8,1024,16
	.type	last_P_no,@object       # @last_P_no
	.comm	last_P_no,8,8
	.type	last_P_no_frm,@object   # @last_P_no_frm
	.comm	last_P_no_frm,8,8
	.type	last_P_no_fld,@object   # @last_P_no_fld
	.comm	last_P_no_fld,8,8
	.type	.L.str.5,@object        # @.str.5
.L.str.5:
	.asciz	"%04d(NVB)%8d \n"
	.size	.L.str.5, 15

	.type	.L.str.6,@object        # @.str.6
.L.str.6:
	.asciz	"%04d(IDR)%8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.6, 65

	.type	.L.str.7,@object        # @.str.7
.L.str.7:
	.asciz	"FLD"
	.size	.L.str.7, 4

	.type	.L.str.8,@object        # @.str.8
.L.str.8:
	.asciz	"FRM"
	.size	.L.str.8, 4

	.type	.L.str.9,@object        # @.str.9
.L.str.9:
	.asciz	"%04d(I)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.9, 65

	.type	.L.str.10,@object       # @.str.10
.L.str.10:
	.asciz	"%04d(SP) %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.10, 65

	.type	.L.str.11,@object       # @.str.11
.L.str.11:
	.asciz	"%04d(RB) %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d %1d\n"
	.size	.L.str.11, 69

	.type	.L.str.12,@object       # @.str.12
.L.str.12:
	.asciz	"%04d(B)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d %1d\n"
	.size	.L.str.12, 69

	.type	.L.str.13,@object       # @.str.13
.L.str.13:
	.asciz	"%04d(P)  %8d %1d %2d %7.3f %7.3f %7.3f  %7d   %5d     %3s   %3d\n"
	.size	.L.str.13, 65

	.type	.L.str.14,@object       # @.str.14
.L.str.14:
	.asciz	"ReadOneFrame: buf"
	.size	.L.str.14, 18

	.type	.L.str.15,@object       # @.str.15
.L.str.15:
	.asciz	"ReadOneFrame: cannot fseek to (Header size) in p_in"
	.size	.L.str.15, 52

	.type	.L.str.16,@object       # @.str.16
.L.str.16:
	.asciz	"ReadOneFrame: cannot advance file pointer in p_in beyond frame %d\n"
	.size	.L.str.16, 67

	.type	.L.str.17,@object       # @.str.17
.L.str.17:
	.asciz	"ReadOneFrame: cannot read %d bytes from input file, unexpected EOF?, exiting"
	.size	.L.str.17, 77

	.type	.L.str.18,@object       # @.str.18
.L.str.18:
	.asciz	"ReadOneFrame (NOT IMPLEMENTED): pic unit size on disk must be divided by 8"
	.size	.L.str.18, 75


	.ident	"clang version 9.0.1 (git@github.com:llvm/llvm-project.git 9b2d207cf4b43cfc1a2b6940b3c06e50a1bd127f)"
	.section	".note.GNU-stack","",@progbits
